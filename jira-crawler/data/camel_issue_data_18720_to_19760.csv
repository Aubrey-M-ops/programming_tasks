,Issue Key,Type,Priority,Affects Version/s,Component/s,Labels,Status,Resolution,Fix Version/s,Assignee,Reporter,Votes,Watchers,Created,Updated,Description,Comments
0,CAMEL-1578,Improvement,Minor,2.0-M1,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2009-05-01 06:07:43+00:00,2009-11-21 11:58:00+00:00,The current intercept is only for intercepting incoming messages. We should consider renaming it to a name that reflects that.,"davsclaus:1241168569:2009-05-01T17:02:49.748+0000:1241168569:2009-05-01T17:02:49.748+0000:Renamed to {{interceptFrom}}

trunk: 770754
davsclaus:1241171241:2009-05-01T17:47:21.226+0000:1241171241:2009-05-01T17:47:21.226+0000:And added the filter by endpoint uri as well like the send to
trunk: 770770
davsclaus:1258775880:2009-11-21T11:58:00.121+0000:1258775880:2009-11-21T11:58:00.121+0000:Closing all 2.0M2 tickets"
0,CAMEL-1577,Bug,Major,2.0-M1,None,"
None
",Closed,Won't Fix,None,Unassigned,Moulliard Charles,0,1,2009-04-30 15:29:17+00:00,2010-02-07 09:55:22+00:00,"Hi,


I have discovered two small issues using camel DSL in combination with osgix:cm-properties.


In my spring config file, I have created the following route


        <camel:route>
            <camel:from uri=""${uriFile}"" />
            <camel:setHeader headerName=""origin"">
                <camel:constant>file</camel:constant>
            </camel:setHeader>
            <camel:unmarshal ref=""bindyDataformat"" />
            <camel:to uri=""${queueIn}"" />
        </camel:route>


and osgix:cm-properties like this


    <osgix:cm-properties id=""camelProps"" persistent-id=""org.apache.camel.example.reportincident.routing"">
       <prop key=""uriFile"">file://c:/temp/data/?move=c:/temp/done/${file:name}</prop> (2)
       <prop key=""queueIn"">queuingservice:queue:in</prop> (1)
    </osgix:cm-properties>


Remark : ${file:name} is a camel property !!


but at the OSGI startup the two following  errors are generated


(1) No endpoint could be found for: ${queueIn}


17:19:28,838 | INFO  | xtenderThread-27 | DefaultCamelContext              | e.camel.impl.DefaultCamelContext  729 | Apache Camel 2.0-M1 (CamelContext:camelContext) is starting
17:19:29,322 | ERROR | xtenderThread-27 | ContextLoaderListener            | BundleApplicationContextListener   50 | Application context refresh failed (OsgiBundleXmlApplicationContext(bundle=reportincident.routing, config=osgibundle:/META-INF/spring/*.xml))
org.apache.camel.NoSuchEndpointException: No endpoint could be found for: ${queueIn}, please check your classpath contains the needed camel component jar.
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:54)
	at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:133)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:103)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:109)
	at org.apache.camel.model.SendDefinition.resolveEndpoint(SendDefinition.java:57)
	at org.apache.camel.model.SendDefinition.createProcessor(SendDefinition.java:51)


(2) 


org.springframework.beans.factory.BeanDefinitionSt oreException: Invalid bean definition with name 'camelProps' defined in null: Could not resolve placeholder 'file:name'","cmoulliard:1241076697:2009-04-30T15:31:37.277+0000:1241076697:2009-04-30T15:31:37.277+0000:I have posted a message on the spring forum for the second point ${file.name}: http://forum.springsource.org/showthread.php?t=71202
cmoulliard:1241494958:2009-05-05T11:42:38.111+0000:1241494958:2009-05-05T11:42:38.111+0000:I have found a trick to solve the two problems mentioned previously. Here is the solution :

http://cmoulliard.blogspot.com/2009/05/trick-to-pass-uri-declared-in-property.html
davsclaus:1242597981:2009-05-18T06:06:21.674+0000:1242597981:2009-05-18T06:06:21.674+0000:Its a spring problem. Requires that Spring improves SPI for property placeholders in eg Spring 3.0.

There is a ticket elsewhere on this issue in Camel that has a link to the Spring ticket James Strachan created."
0,CAMEL-1576,New Feature,Major,None,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Willem Jiang,Willem Jiang,0,0,2009-04-30 11:51:31+00:00,2009-11-21 11:58:00+00:00,Add some common util class which extends the CamelContextSupport to wrapper the Options of PAX-Exam and setup the bundleContext for CamelContext to use.,"njiang:1241065749:2009-04-30T12:29:09.109+0000:1241065749:2009-04-30T12:29:09.109+0000:trunk 
http://svn.apache.org/viewvc?rev=770182&view=rev
davsclaus:1258775880:2009-11-21T11:58:00.076+0000:1258775880:2009-11-21T11:58:00.076+0000:Closing all 2.0M2 tickets"
0,CAMEL-1575,Improvement,Major,"1.3.0, 1.4.0, 1.5.0, 1.6.0, 2.0-M1",None,"
None
",Closed,Fixed,"1.6.1, 2.0-M2",Willem Jiang,Willem Jiang,0,0,2009-04-30 11:38:42+00:00,2009-11-21 11:58:00+00:00,"PaxExam container will call the tearDown method finally, if the after method throws exception,
 the orginal exception (which is thrown by setUp method or the test method) will be overrided..


ContextTestSupport's tearDown method will through NPE, if the exception is thrown from the setup method
We need to check the reference of context and template first before we can their stop method.","njiang:1241065667:2009-04-30T12:27:47.203+0000:1241065861:2009-04-30T12:31:01.883+0000:trunk
 http://svn.apache.org/viewvc?rev=770172&view=rev
camel-1.x
http://svn.apache.org/viewvc?rev=770192&view=rev
davsclaus:1258775880:2009-11-21T11:58:00.046+0000:1258775880:2009-11-21T11:58:00.046+0000:Closing all 2.0M2 tickets"
0,CAMEL-1574,New Feature,Major,"1.6.0, 2.0-M1",,"
None
",Closed,Won't Fix,None,Claus Ibsen,Claus Ibsen,0,0,2009-04-30 07:55:14+00:00,2010-02-07 09:55:22+00:00,"URIs is the preferred means to identify and lookup endpoints. The general rule of thumb is that you must use the exact same URI every time to lookup the same endpoint.


That can confuse for components that has a logical key that represents the same endpoint. For example



seda:foo
seda:foo?concurrentConsumers=2



In peoples mind its the same endpoint, its the seda foo queue. But in Camel its 2 different endpoints. So you cannon link them together. So this wont work:



from(x)....to(""seda:foo"");
...
from(""seda:foo?concurrentConsumers=2"").to(z);




So if we add some strategy to component so it can construct a the logical key for its endpoint.
For instance the SedaComponent would be able to return the key: seda:foo for whether or without the concurrentConsumer option. Its the same logical endpoint.


The same will apply for JMS component and others.","davsclaus:1241049980:2009-04-30T08:06:20.499+0000:1241049980:2009-04-30T08:06:20.499+0000:See nabble:
http://www.nabble.com/Messages-not-being-delivered-once-SEDA-concurrentConsumers-set-td23176637.html

davsclaus:1242597869:2009-05-18T06:04:29.565+0000:1242597869:2009-05-18T06:04:29.565+0000:This one is not easy to remedy a solution when endpoint is defined in multiple locations in a route, such as above.

The first one, will create the {{seda:foo}} endpoint with default settings.
Then the 2nd, will try to lookup the {{seda:foo?concurrentConsumers=2}} endpoint based on the URI but cannot find it and creates a new endpoint.

The problem is that if we do the logical key thing then {{seda:foo}} is created with default settings and then when we do the 2nd lookup it will find this endpoint but not use the {{concurrentConsumers=2}} option.

The only solution is to define shared endpoint once and reuse the alias in your route, like below:
{code}
Endpoint foo = endpoint(""seda:foo?concurrentConsumers=2"");

from(x)....to(foo);
...
from(foo).to(z);
{code}"
0,CAMEL-1573,Improvement,Major,2.0-M1,None,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Christian Schneider,0,0,2009-04-30 06:41:03+00:00,2009-10-09 07:08:05+00:00,"When converting data  from a binary form the convertBodyTo(String.class) function currently does not support changing the encoding. This should be added.  Additionally it would be nice to have automatic encoding settings for xml files that contain a <?xml header with an encoding attribute.


The issue happened for me when I tried to read from a FileEndpoint. I have debugged into the code and found that where the file is read there seems to be no support for encoding at all. But maybe I am wrong. I will search for the place in the code and post a link here.


http://www.nabble.com/Convert-File-to-String-with-encoding-to23291163.html","cschneider:1241057397:2009-04-30T10:09:57.395+0000:1241057397:2009-04-30T10:09:57.395+0000:I have found the code that reads the file. It seems to be IOConverter.toString(File file) . As you can see there is no encoding  mentioned. So I think this code will not work with the Exchange.CHARSET_NAME parameter. Btw. I have not yet found this constant.
davsclaus:1241058047:2009-04-30T10:20:47.238+0000:1241058047:2009-04-30T10:20:47.238+0000:That constant is in Camel 2.0. In Camel 1.x its somewhere else.

You should really use org.w3c.Document as the type if you want to read an XML file. It will leverage the Java XML API to read and understand the encoding option in the XML files.
Then afterwards you can get it as a String.

Or the javax.xml.transform.stream.StreamSource should also be doable.

Camel cannot really know its a XML file, unless we add some convention that if the file name extension is xml it should use the XML converters.
cschneider:1241074930:2009-04-30T15:02:10.728+0000:1241074930:2009-04-30T15:02:10.728+0000:Hi Claus,

I have just tested with org.w3c.dom.Document. This seems to work fine. So we have a solution for my problem. 
But in any case this should be added to documentation. I did not know that I can convert to Document.

Is there any page already for the convertBodyTo ? I did not find one. It would be quite nice to have some examples for conversions. Perhaps there could be one page per dsl method. Are there any plans to build this? 
davsclaus:1241079351:2009-04-30T16:15:51.282+0000:1241079351:2009-04-30T16:15:51.282+0000:Hi Christian

Camel have 150+ type converters in the distribution. The new Camel web console have a web page that lists them all.
And I think there is a maven tool that could generate a list of converters as well.

But the rule of thumb is that you should just try to convert to the type you want and Camel will lookup a suitable type convert if any exsits.
If not you get an exception.

The basic converters for String, byte[], streams, XML should be there. There might be some odd combinations missing such as a org.w3c.Document to byte[] or the likes.

Keeping documentation in the wiki is time consuming and it would be much better if we get a tool to be able to slurp the javadoc in the code, then we would be able to generate a full DSL list with documentation.

As we love contributions, you can get karma to the wiki pages so you can edit and add it yourself.
davsclaus:1241425967:2009-05-04T16:32:47.421+0000:1241425967:2009-05-04T16:32:47.421+0000:trunk: 771351
1.x: 771353

In 1.x I have fixed the bug in ObjectHelper.loadClass not being able to load byte[] class.

"
0,CAMEL-1572,Improvement,Major,2.0-M1,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2009-04-30 05:45:32+00:00,2009-11-21 11:58:00+00:00,"See nabble
http://www.nabble.com/Camel-2.0-Async-Findings---Roadmap-to-a-solution-td23310165.html","davsclaus:1241078986:2009-04-30T16:09:46.095+0000:1241078986:2009-04-30T16:09:46.095+0000:A patch that also includes a prototype of the new Async API.

See
- AsyncProducerTemplate
- AsyncDefinition
- AsyncDelegateProcessor
- AsyncRouteTest
- FutureTypeConverter

I forgot to track different change list so the patch is all my local changes.
davsclaus:1241142133:2009-05-01T09:42:13.488+0000:1241142133:2009-05-01T09:42:13.488+0000:I have committed the first cut of the cleanup. 
trunk: 770599

When we have a new async API in place then we can cleanup the last pieces in Pipeline and MulticastProcessor.

I have added TODO in codes where we need to re look later.
davsclaus:1241142295:2009-05-01T09:44:55.876+0000:1241142295:2009-05-01T09:44:55.876+0000:new_async_api.patch is a patch with only the prototype of the new Async API that I have been experimenting with.

davsclaus:1241485361:2009-05-05T09:02:41.848+0000:1241485361:2009-05-05T09:02:41.848+0000:A 2nd patch that is more cleaner.
- only the async producer template
- added all the needed methods on async producer template
- add unit test

The async() DSL from the previous patches was an experiment and we can still discuss to add it also.
But for starters I want a clean API that allows to initiate a async routing in Camel.
davsclaus:1241564988:2009-05-06T07:09:48.290+0000:1241664200:2009-05-07T10:43:20.675+0000:Committed first cut of new Async API.

TODO: MulticastProcessor needs to be migrated *DONE*
TODO: Thread DSL removed. Will be replaced with new Async DSL later *DONE*

trunk: 772076
davsclaus:1241565477:2009-05-06T07:17:57.184+0000:1241565477:2009-05-06T07:17:57.184+0000:See the nabble link as I keep posting there also with updates.
davsclaus:1241583883:2009-05-06T12:24:43.283+0000:1241583883:2009-05-06T12:24:43.283+0000:And 2nd cut that migrates the MulticastProcessor: 772172.
davsclaus:1241664234:2009-05-07T10:43:54.503+0000:1241664234:2009-05-07T10:43:54.503+0000:Added first cut of the new async DSL replacing the old thread DSL.

trunk: 772598
davsclaus:1241734426:2009-05-08T06:13:46.909+0000:1241734426:2009-05-08T06:13:46.909+0000:Second cut of the async DSL. trunk: 772853.

davsclaus:1241944558:2009-05-10T16:35:58.320+0000:1241944558:2009-05-10T16:35:58.320+0000:Updated wiki with description of this new Async API.
davsclaus:1258775880:2009-11-21T11:58:00.006+0000:1258775880:2009-11-21T11:58:00.006+0000:Closing all 2.0M2 tickets"
0,CAMEL-1571,Improvement,Major,None,None,"
None
",Closed,Fixed,2.0-M2,Willem Jiang,Willem Jiang,0,0,2009-04-28 13:33:13+00:00,2009-11-21 11:57:59+00:00,"By leverage the new feature of PAXEXAM-54[1] and CAMEL-1526, we could make the Camel OSGi integration test much easier.
We just need to add the scanFeatures option in the configure method of integration test like this, and don't need to fight with dependency of pom any more.



@Configuration
    public static Option[] configure() {
        Option[] options = options(
            ...
            // using the features to install the camel components             
            scanFeatures(mavenBundle().groupId(""org.apache.camel.karaf"").
                         artifactId(""features"").versionAsInProject().type(""xml/features""),                         
                          ""camel-core""),
           ...
         );




[1]http://issues.ops4j.org/browse/PAXEXAM-54","njiang:1241065415:2009-04-30T12:23:35.484+0000:1241065415:2009-04-30T12:23:35.484+0000:trunk
http://svn.apache.org/viewvc?rev=769393&view=rev
davsclaus:1258775879:2009-11-21T11:57:59.942+0000:1258775879:2009-11-21T11:57:59.942+0000:Closing all 2.0M2 tickets"
0,CAMEL-1570,Improvement,Major,"1.6.0, 2.0-M1","1.6.1, 2.0-M2","
None
",Closed,Fixed,"1.6.1, 2.0-M2",Claus Ibsen,Christopher Hunt,0,0,2009-04-28 08:36:48+00:00,2009-11-21 11:57:59+00:00,"The Jetty component is presently unable to be configured for security. A general purpose mechanism so that the Jetty component can be configured would be useful. The following URI based option is proposed:





Name
Default Value
Description


handlers
null
 Specifies a comma delimited set of instances in your Registry (such as your Spring ApplicationContext). These instances are added to the Jetty servlet context





Here is an example URI:



jetty:http://0.0.0.0:9080/MyService?handlers=securityHandler




This could refer to something like the following Spring configuration:



	<!-- Jetty Security handling -->
	<bean id=""userRealm"" class=""org.mortbay.jetty.plus.jaas.JAASUserRealm"">
		<property name=""name"" value=""tracker-users"" />
		<property name=""loginModuleName"" value=""ldaploginmodule"" />
	</bean>
	<bean id=""constraint"" class=""org.mortbay.jetty.security.Constraint"">
		<property name=""name"" value=""BASIC"" />
		<property name=""roles"" value=""tracker-users"" />
		<property name=""authenticate"" value=""true"" />
	</bean>
	<bean id=""constraintMapping"" class=""org.mortbay.jetty.security.ConstraintMapping"">
		<property name=""constraint"" ref=""constraint"" />
		<property name=""pathSpec"" value=""/*"" />
	</bean>
	<bean id=""securityHandler"" class=""org.mortbay.jetty.security.SecurityHandler"">
		<property name=""userRealm"" ref=""userRealm"" />
		<property name=""constraintMappings"" ref=""constraintMapping"" />
	</bean>




I have attached proposed changes to the 1.6 branch. I imagine that 2.0 should be quite similar.","huntc@internode.on.net:1240879292:2009-04-28T08:41:32.931+0000:1240879292:2009-04-28T08:41:32.931+0000:Patches for the 1.6 source. I have tested these fixes in my own application. However I have not managed to create a test case as yet.
davsclaus:1241047544:2009-04-30T07:25:44.543+0000:1241047544:2009-04-30T07:25:44.543+0000:Chris, we need at least an unit test before we can add the patch to the code base.
huntc@internode.on.net:1241049398:2009-04-30T07:56:38.848+0000:1241049398:2009-04-30T07:56:38.848+0000:Hi Claus,

I'm happy develop a unit test for this of course. In the first  
instance, can you please review my proposal and code submission? If it  
looks good then I'll proceed with the unit test and update the wiki  
once committed.

Kind regards,
Christopher

davsclaus:1241049857:2009-04-30T08:04:17.936+0000:1241049857:2009-04-30T08:04:17.936+0000:Chris

Can you take a look at CAMEL-1176 as it looks related to this ticket.

The patch looks good.

In Camel 2.0 however I was wondering if we should endorse the # notation lookup that is used in the URI to refer to a bean in the registry with this id.

And if we just added the type on the endpoint as: List<Handler> handlers with getter/setter then we can improve the DefaultComponent to support lists for its automatic # lookup.
Today it only supports a single # property. If so we get a general solution. So I would like that we took the time to look into this in Camel 2.0.

See method setReferenceProperties in DefaultComponent in Camel 2.0.
huntc@internode.on.net:1241647132:2009-05-07T05:58:52.841+0000:1241647132:2009-05-07T05:58:52.841+0000:1.x changes.

I have deleted the previous patches given that there was an error. Previously I attached the handlers to the first context that the server could provide (as is done for the session - is that a bug also?). What is now done is that the handlers are attached to the context created at the time the servlet is created.

I have included a new unit test to test out the handler functionality. I use a Jetty supplied statistics handler to ensure that it counts my requests coming through. Naturally if the handler was not added to the context then no requests would be counted.

In addition the unit test exercises multiple handlers being included for a different context. This tests that multiple handlers are catered for and that one context's handlers are not invoked for another's.

I have also tidied up the test cases so that they are able to:

(i) execute on a file system that has spaces in the path name; and
(ii) execute on a system that is not running postgres.

On the latter I noticed that port 5432 was being used for some of the tests. This port is used by postgres. Given that I had postgres running on my machine the tests could not complete. All tests now use a port number around 9080.
huntc@internode.on.net:1241647935:2009-05-07T06:12:15.996+0000:1241647935:2009-05-07T06:12:15.996+0000:Hi Claus,

1.x patches attached. I have not addressed 2.0. With regards to:

_In Camel 2.0 however I was wondering if we should endorse the # notation lookup that is used in the URI to refer to a bean in the registry with this id._

I think so.

_And if we just added the type on the endpoint as: List<Handler> handlers with getter/setter then we can improve the DefaultComponent to support lists for its automatic # lookup._

Do you mean List<String> not List<Handler>? Or do you think that the DefaultComponent could resolve the type from the bean's name?

_Today it only supports a single # property. If so we get a general solution. So I would like that we took the time to look into this in Camel 2.0._

How would a list be expressed in the URI? The same way as for 1.x i.e. using a comma?

_See method setReferenceProperties in DefaultComponent in Camel 2.0._

I'm going to need your help on this one I think.
davsclaus:1241742572:2009-05-08T08:29:32.738+0000:1241742572:2009-05-08T08:29:32.738+0000:Applied patch to 1.x: 772883.

Thanks Christopher for the patch.
davsclaus:1241743981:2009-05-08T08:53:01.949+0000:1241743981:2009-05-08T08:53:01.949+0000:Applied patch to 2.0: 772891

>> See method setReferenceProperties in DefaultComponent in Camel 2.0.
> I'm going to need your help on this one I think.

I had a look at this and the problem is that its a List we want to set of a given type, and that we loose the generic type in the list: List<Handler> so we dont know the type of the list what it was supposed to contain. 

So I did it manually in the component.

Maybe later we can use a convention that the type should be the setXXX name and add list support for URI notations.
But if this is the only component benefit from it, it might not be worth the trouble.
davsclaus:1241744338:2009-05-08T08:58:58.233+0000:1241744338:2009-05-08T08:58:58.233+0000:Thanks Christopher. I have updated the Jetty wiki page also.
davsclaus:1258775879:2009-11-21T11:57:59.906+0000:1258775879:2009-11-21T11:57:59.906+0000:Closing all 2.0M2 tickets"
0,CAMEL-1569,Improvement,Major,2.0-M1,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2009-04-28 06:44:42+00:00,2009-11-21 11:57:59+00:00,"The InterceptStrategy interface is bound to using Processor etc and we do not have any easy support in the DSL itself to define your own custom interceptors.


And an idea is to bridge it to allow it to do custom routing as well. Can be used to detour for certain conditions, such as a message having some odd data.","davsclaus:1241222387:2009-05-02T07:59:47.764+0000:1241222387:2009-05-02T07:59:47.764+0000:Added support for intercept() that works like you would expect an interceptor that is applied at each route step

trunk: 770908.

See updated wiki as well:
http://cwiki.apache.org/confluence/display/CAMEL/Intercept

There are still some work to add support for {{when}} predicate and {{stop}}. The old code was a bit nasty so its time for house cleaning as well.
davsclaus:1241312327:2009-05-03T08:58:47.902+0000:1241312327:2009-05-03T08:58:47.902+0000:Added {{when}} predicate support to {{intercept}}

Trunk: 771041.
davsclaus:1241394749:2009-05-04T07:52:29.266+0000:1241394749:2009-05-04T07:52:29.266+0000:Added {{stop}} support for the interceptors and in general as well.

trunk: 771227
davsclaus:1258775879:2009-11-21T11:57:59.876+0000:1258775879:2009-11-21T11:57:59.876+0000:Closing all 2.0M2 tickets"
0,CAMEL-1568,Bug,Major,"1.6.0, 2.0-M1","1.6.1, 2.0-M2","
None
",Closed,Fixed,"1.6.1, 2.0-M2",Claus Ibsen,christian ohr,0,0,2009-04-27 09:43:33+00:00,2009-11-21 11:57:59+00:00,"The IOConverter#toString(Reader/Stream) copies the input data line by line. A line is considered to be terminated by any one of a line feed ('\n'), a carriage return ('\r'), or a carriage return followed immediately by a linefeed. Unfortunately, the lines are always concatenated with ""\n"", so that HL7 messages (which use ""\r"") become unusable after conversion.


Also see http://www.nabble.com/HL7-messages-become-unusable-after-convertBodyTo%28String.class%29-td23219748.html","christian.ohr:1240796839:2009-04-27T09:47:19.897+0000:1240796839:2009-04-27T09:47:19.897+0000:Patch for 2.0m2 follows asap
davsclaus:1240866015:2009-04-28T05:00:15.586+0000:1240866015:2009-04-28T05:00:15.586+0000:trunk: 769239.
1.x: 769241.
davsclaus:1240866039:2009-04-28T05:00:39.068+0000:1240866039:2009-04-28T05:00:39.068+0000:Thanks for the the patch Christian
davsclaus:1240903938:2009-04-28T15:32:18.007+0000:1240903938:2009-04-28T15:32:18.007+0000:There was a bug in the patch. It did not read the entire stream

trunk: 769434.
1.x : 769435.
davsclaus:1258775879:2009-11-21T11:57:59.827+0000:1258775879:2009-11-21T11:57:59.827+0000:Closing all 2.0M2 tickets"
0,CAMEL-1567,Task,Major,"1.6.0, 2.0-M1",2.1.0,"
None
",Closed,Fixed,2.1.0,Hadrian Zbarcea,Claus Ibsen,0,0,2009-04-25 05:40:55+00:00,2010-02-07 09:55:22+00:00,"Hi Claus,
Here is an explanation of the API change from Christopher Beck at JUEL:


Hello Yogesh,


the API to resolve methods has changed in 2.1.1. Camel's method resolver
is breaks with JUEL 2.1.1. Generally, methods are still resolved via
ELResolver.getValue(context, base, property), but



in 2.1.0, the method name was passed as a property
in 2.1.1, an instance of de.odysseus.el.misc.MethodInvocation is passed
as a property
The reason for this is to provide more detailed information about the
method invocation to the resolver (i.e the method name, number of arguments
and whether vararg calls are supported).



Now, camel-juel uses its BeanAndMethodELResolver to resolve methods.
There, findMethod(context, base, property) only handles a property
parameter of type string. That's why it doesn't work. When migrating to
juel 2.1.1, the BeanAndMethodELResolver class needs to be updated to work
with MethodInvocation objects as properties.


The JUEL 2.1.1 distribution contains a sample resolver. Taking the sample
code, updating camel's resolver should be pretty straightforward. When
doing so, you may also want to add property ""javax.el.varArgs"" in
JuelExpression.populateDefaultExpressionProperties(..). That way you would
take real profit by invoking vararg methods from within EL expressions.


There's also a way to quickly modify your resolver to work with both, JUEL
2.1.0 and 2.1.1. Just don't ask for ""property instanceof String"" but use
property.toString() as a candidate method name: the MethodInvocation's
toString() will answer the method name.


See nabble:
http://www.nabble.com/Camel-JUEL-expression-weirdness-in-1.6.0-td23177119s22882.html","hadrian:1258097438:2009-11-13T15:30:38.367+0000:1258097438:2009-11-13T15:30:38.367+0000:With OSGi there is also an incompatibility between de.odysseus.juel/juel and the spec org.apache.geronimo.specs/geronimo-el_1.0_spec that needs to be resolved.
davsclaus:1258609086:2009-11-19T13:38:06.572+0000:1258609086:2009-11-19T13:38:06.572+0000:Hadrian can you speed up this one or we are going to defer this to 2.2
davsclaus:1258609107:2009-11-19T13:38:27.157+0000:1258609107:2009-11-19T13:38:27.157+0000:And we wont upgrade on 1.x branch
hadrian:1258613986:2009-11-19T14:59:46.189+0000:1258613986:2009-11-19T14:59:46.189+0000:I planned to work on it this weekend.
hadrian:1259344744:2009-11-28T01:59:04.323+0000:1259344744:2009-11-28T01:59:04.323+0000:Upgrade to juel 2.1.2 as both the latest version (plus 2.1.1 was not available in the maven repos).  juel 2.1.2 is also available as an OSGi bundle, which should take care of the incompatibility with the geronimo-el_1.0_spec.
davsclaus:1259364796:2009-11-28T07:33:16.544+0000:1259364796:2009-11-28T07:33:16.544+0000:Hadrian are you sure 2.1.2 is an OSGi bundle? And where is that bundle jar?

The camel-juel features file should also be updated. Its located in

/camel/platforms/karaf/features/src/main/resources

Its still set to use 2.1.0, so that one should also be upgraded to 2.1.2. And maybe we need gertv to create a bundle in SMX bundle repo that wraps the 2.1.2 jar from juel.

davsclaus:1259364887:2009-11-28T07:34:47.934+0000:1259364887:2009-11-28T07:34:47.934+0000:The SMX repo where the jule bundle is located
http://repo2.maven.org/maven2/org/apache/servicemix/bundles/org.apache.servicemix.bundles.juel/2.1.0_2/

{code}
  <feature name='camel-juel' version='${pom.version}'>
    <feature version='${pom.version}'>camel-core</feature>
    <bundle>mvn:org.apache.geronimo.specs/geronimo-el_1.0_spec/${geronimo-el-version}</bundle>
    <bundle>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.juel/${juel-bundle-version}</bundle>
    <bundle>mvn:org.apache.camel/camel-juel/${pom.version}</bundle>
  </feature>
{code}

There is a pom.xml that has the versions listed and it lists
  <juel-bundle-version>2.1.0_2</juel-bundle-version>
gertvanthienen:1259382763:2009-11-28T12:32:43.323+0000:1259382763:2009-11-28T12:32:43.323+0000:I've added a juel 2.1.2 bundle and upgraded to the snapshot in http://svn.apache.org/viewvc?view=revision&revision=885088
Running *{{mvn -Pvalidate install}}* does not report any problems with this upgrade.

I'll try to cut a release of this bundle later today so you can still get it in camel 2.1.

@hadrian: does this bundle address the incompatibility you were referring to?  it just does a plain import of javax.el, without any additional version constraints.
gertvanthienen:1259416309:2009-11-28T21:51:49.059+0000:1259416309:2009-11-28T21:51:49.059+0000:I managed to reproduce the binary incompatibility issue that Hadrian mentioned earlier -- it looks like juel by default ships with a slightly different set of javax.el classes:
{noformat}
java.lang.NoSuchMethodError: javax.el.ExpressionFactory.newInstance(Ljava/util/Properties;)Ljavax/el/ExpressionFactory;
	at org.apache.camel.language.juel.JuelExpression.getExpressionFactory(JuelExpression.java:66)
	at org.apache.camel.language.juel.JuelExpression.setVariable(JuelExpression.java:105)
	at org.apache.camel.language.juel.JuelExpression.populateContext(JuelExpression.java:88)
	at org.apache.camel.language.juel.JuelExpression.evaluate(JuelExpression.java:57)
{noformat}

The way to avoid running into this issue is by using the JUEL ExpressionFactoryImpl class directly (cfr. http://svn.apache.org/viewvc?view=revision&revision=885153)
hadrian:1259490423:2009-11-29T18:27:03.268+0000:1259490423:2009-11-29T18:27:03.268+0000:I had a slightly different solution using the FactoryFinder to get the juel implementation.  Using the default constructor of the juel ExpressionFactory makes it take the properties from an el.properties file on the classpath.  This allows a user to configure the ExpressionFactory instance at will.  I also set javax.el.varArgs and javax.el.nullProperties to true by default (see [guide|http://juel.sourceforge.net/guide/advanced/index.html])."
0,CAMEL-1566,Bug,Major,1.6.0,"1.6.1, 2.0-M2","
None
",Closed,Fixed,"1.6.1, 2.0-M2",Hadrian Zbarcea,christian ohr,0,0,2009-04-24 15:56:23+00:00,2009-11-21 11:57:59+00:00,"Long HL7 messages are split up into several exchanges,
see http://www.nabble.com/HL7-ProtocolCodec-truncates-long-HL7-messages-td23219074.html for more details","christian.ohr:1240559830:2009-04-24T15:57:10.318+0000:1240559830:2009-04-24T15:57:10.318+0000:the package names of the classes need to be adapted
christian.ohr:1240838599:2009-04-27T21:23:19.406+0000:1240838599:2009-04-27T21:23:19.406+0000:Patches for the decoding problem for 1.x branch and trunk
hadrian:1240912511:2009-04-28T17:55:11.547+0000:1240912511:2009-04-28T17:55:11.547+0000:Christian, thanks for the great patch.
For me HL7MLLPCodecLongTest still fails on the 1.x branch, once I figure it out I will commit the patches.
christian.ohr:1240981971:2009-04-29T13:12:51.518+0000:1240982222:2009-04-29T13:17:02.549+0000:Let me know if I can help. 
Remark: In the tests I had to change the host name of the MINA endpoints from localhost to 0.0.0.0. because on my Vista machine at home, localhost is resolved to an IPv6 loopback address (0:0:0:0:0:0:0:1), which either Mina or Java or both can't bind. Unfortunately, Vista does not allow to remove the IPv6 loopback interface. 0.0.0.0 forces IPv4, which worked.
hadrian:1240982993:2009-04-29T13:29:53.577+0000:1240982993:2009-04-29T13:29:53.577+0000:There may be a problem with the way the src/test/resources/mdm_t02.txt was extracted from the patch.  Could you please attach just that file to this jira?  Thanks
hadrian:1240988997:2009-04-29T15:09:57.665+0000:1240988997:2009-04-29T15:09:57.665+0000:That one test is still not passing.  I wonder if it is in any way related to l10n, code pages and all.  If you could jump on the #camel irc channel and sort this out in an interactive way, it would be great.
hadrian:1241007103:2009-04-29T20:11:43.137+0000:1241007103:2009-04-29T20:11:43.137+0000:Patches applied with many, many thanks to Christian who spent a long evening resolving a few quirks interactively over irc.  Great work, and we hope to see more patches from you!
davsclaus:1258775879:2009-11-21T11:57:59.805+0000:1258775879:2009-11-21T11:57:59.805+0000:Closing all 2.0M2 tickets"
0,CAMEL-1565,Bug,Major,1.4.0,"1.6.1, 2.0-M2","
None
",Closed,Fixed,"1.6.1, 2.0-M2",Claus Ibsen,Raúl Kripalani,0,0,2009-04-24 12:32:39+00:00,2009-11-21 11:57:59+00:00,"When a flow which contains a camel-validation endpoint is started, the XSD schemas are not loaded until the first request comes in and the camel-validation endpoint is first hit.
If two requests come in simultaneously, the initialization will be performed twice, at the same time. It seems that SchemaFactory is not thread-safe, so this results in the following exception:


10:38:20,860 | ERROR - org.apache.camel.processor.DeadLetterChannel - org.apache.camel.processor.Logger - Failed delivery for exchangeId: ID-ATOS-B624
E47AF0/3211-1240562892751/0-11. On delivery attempt: 0 caught: org.xml.sax.SAXException: FWK005 parse may not be called while parsing.
org.xml.sax.SAXException: FWK005 parse may not be called while parsing.
        at com.sun.org.apache.xerces.internal.jaxp.validation.Util.toSAXException(Util.java:62)
        at com.sun.org.apache.xerces.internal.jaxp.validation.XMLSchemaFactory.newSchema(XMLSchemaFactory.java:214)
        at javax.xml.validation.SchemaFactory.newSchema(SchemaFactory.java:594)
        at org.apache.camel.processor.validation.ValidatingProcessor.createSchema(ValidatingProcessor.java:204)
        at org.apache.camel.processor.validation.ValidatingProcessor.getSchema(ValidatingProcessor.java:118)
        at org.apache.camel.processor.validation.ValidatingProcessor.process(ValidatingProcessor.java:54)
        at org.apache.camel.impl.ProcessorEndpoint.onExchange(ProcessorEndpoint.java:92)
        at org.apache.camel.impl.ProcessorEndpoint$1.process(ProcessorEndpoint.java:66)
        at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43) 
.....


For more info: http://www.nabble.com/Concurrency-Issue-with-camel-validation-td23213294.html


Is it possible to backport the fix to 1.4?","davsclaus:1240559471:2009-04-24T15:51:11.294+0000:1240559471:2009-04-24T15:51:11.294+0000:Raul, we will not backport a fix into Camel 1.4.x.

You have to use your own component or patch Camel yourself.
But the patch will make it into the existing 1.x line, that is 1.6.1
davsclaus:1240560616:2009-04-24T16:10:16.219+0000:1240560616:2009-04-24T16:10:16.219+0000:1.x: 768346
trunk: 768342
davsclaus:1240560872:2009-04-24T16:14:32.294+0000:1240560872:2009-04-24T16:14:32.294+0000:Raul see this link for the patch
http://svn.apache.org/viewvc?view=rev&revision=768346

davsclaus:1258775879:2009-11-21T11:57:59.782+0000:1258775879:2009-11-21T11:57:59.782+0000:Closing all 2.0M2 tickets"
0,CAMEL-1564,New Feature,Major,"2.0-M1, 1.6.1",2.8.0,"
None
",Resolved,Invalid,2.8.0,Claus Ibsen,Andy bentley,0,0,2009-04-24 11:46:51+00:00,2011-06-10 14:22:46+00:00,"If you specify to listen thus : 


from(""mina:udp://1.2.3.4:"" + inPort + ""?sync=false"").process(new myProcessor()).to(""mina:udp://4.3.2.1:""+outPort""?sync=false"");


mina assumes ""eth0"" for both from and to addresses.   


This is keeping us from using Camel for a critical pieces of our architecture ; Filters & adapters.  


Suggest that a new option be created for Camel Mina with a name like ""nic"" or ""NetworkInterface"" with a default value of ""eth0"".


This value will have to be passed into and added to the MinaConfiguration, MinaEndpoint, MinaComponent.createDatagramEndpoint(),  MinaComponent.createSocketEndpoint(),","davsclaus:1244501283:2009-06-09T06:48:03.907+0000:1244501283:2009-06-09T06:48:03.907+0000:Andy can you look at the Apache Mina project how to do this with Mina?

With your findings we can quicker get this added to Camel.
davsclaus:1263892758:2010-01-19T17:19:18.434+0000:1263892758:2010-01-19T17:19:18.434+0000:[18:19]  <cibsen> jgenender do you know if its possible to set a filter on the Ethernet Network Interface, eg to listen on eth0 only ?
[18:19]  <cibsen> https://issues.apache.org/activemq/browse/CAMEL-1564
[18:19]  <jgenender> cibsen: looking
[18:20]  <jgenender> cibsen: Mmmm...no... not via the interface, but you can do it via the IP
[18:20]  <jgenender> cibsen: So associate an IP address to a specific interface and it will work that way
davsclaus:1269833746:2010-03-29T11:35:46.308+0000:1269833746:2010-03-29T11:35:46.308+0000:Andy could you check with Netty as we are adding camel-netty in Camel 2.3 and it may have more features than the old Mina 1.x/2.0 seems to have.
davsclaus:1307686966:2011-06-10T14:22:46.443+0000:1307686966:2011-06-10T14:22:46.443+0000:Closing old tickets. This is not possible"
0,CAMEL-1563,Improvement,Major,2.0-M1,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2009-04-24 05:48:45+00:00,2009-11-21 11:57:59+00:00,"The getOut and getFault methods on org.apache.camel.Message creates a new empty object if none exists already.
This confuses end users when they use the methods in their custom processors.


We should instead add hasOut, hasFault methods that can be used for checking if it exists or not.


Note: The getOut(false) can be used to not create a new message if none exists but its really not adhering to good java beans standard.


See nabble:
http://www.nabble.com/Payload-Gets-Nulled-Out-td23105477.html","davsclaus:1240883646:2009-04-28T09:54:06.922+0000:1240883646:2009-04-28T09:54:06.922+0000:[11:47]  <jstrachan> the common case is gonna be folks accessing the out to set stuff in it, so if anything I'd prefer getOut()  / getFault() to never return null - but have a separate method, hasOut(), hasFault()
[11:48]  <cibsen> and to mark it as @deprecated would probably over stepping
[11:48]  <cibsen> yeah adding the hasOut etc will make it more clear to use them to test whether there is or not is
[11:48]  <cibsen> so a good solution would to add the hasXXX methods and keep it as is
[11:49]  <cibsen> and add a notice in getOut javadoc that prefer to use hasXXX to test if exists or not
[11:49]  <jstrachan> yeah - and deprecate getOut(boolean)?
[11:50]  <gertv> why deprecate it for Camel 2.0?
[11:50]  <gertv> we've have broken tons of code already
[11:50]  <jstrachan> yeah good point
[11:51]  <cibsen> I guess getOut(false) is also used by end users in their custom processors
[11:51]  <cibsen> if we remove it they should change to hasOut
[11:52]  <cibsen> we could mark it as @deprecated in 2.0m2 and then remove it in 2.0 GA
[11:55]  <jstrachan> yeah
[11:55]  <cibsen> +1 that is


romkal:1240901591:2009-04-28T14:53:11.395+0000:1240901591:2009-04-28T14:53:11.395+0000:Maybe I should just give an example of what happens in current state of API:

You have a flow like
{code}
from(endpointA).setHeader(""foo"", constant(""bar"")).to(endpointB);
{code}

You are naive Camel developer and you would like to see the message after {{setHeader}} operation. What you do is:
{code}
from(endpointA)
    .setHeader(""foo"", constant(""bar""))
    .process(new Processor() {
        void process(Exchange exchange) {
            System.out.println(exchange.getIn());
            System.out.println(exchange.getOut());
        }
    })
    .to(endpointB);
{code}

What just happened is you lost your body and header. You cannot really expect it just by looking at the code, can you? I believe everyone agree that code should be self-explaining without looking into the sources or javadoc.

And I've seen a lot of such mistakes and people were asking what happened to their messages ;)

Of course it goes to my belief that we don't need in/out/fault and they only make things harder, but I'll not start it again ;)
davsclaus:1240903253:2009-04-28T15:20:53.879+0000:1240903253:2009-04-28T15:20:53.879+0000:Thanks Roman. I am on the same level as you. Would love the Exchange API to be simpler, but it was afterall inherited from the JBI world :)

What we are currently implementing is
- hasOut()
- hasFault()

{code}
System.out.println(exchange.getIn());
if (exchange.hasOut()) }
    System.out.println(exchange.getOut());
}
{code}


davsclaus:1240907016:2009-04-28T16:23:36.545+0000:1240907016:2009-04-28T16:23:36.545+0000:Added the hasOut() variation and commited it to trunk: 769448
davsclaus:1240907256:2009-04-28T16:27:36.782+0000:1240907271:2009-04-28T16:27:51.210+0000:What if we add:
- {{getOrCreateOut}}
- {{getOrCreateFault}}

Wouldn't that help understand the problem and migrate to a getOut that can return {null} if no out exists. So the newbie problem that Roman highlighted can be avoided. Its sure is hard to find the lost header or body if you added some system out for a little logging.

The big concern would be if the change would break to much for existing users doing upgrades.

What does the community think?
davsclaus:1242598180:2009-05-18T06:09:40.587+0000:1242598180:2009-05-18T06:09:40.587+0000:We end with the compromise.

End users can use {{hasOut()}} to test whether an OUT message has been set.
The {{getOut()}} method does as it have always done, lazy creating one if missing.

To much code depends on this behavior.



davsclaus:1258775879:2009-11-21T11:57:59.739+0000:1258775879:2009-11-21T11:57:59.739+0000:Closing all 2.0M2 tickets"
0,CAMEL-1562,New Feature,Major,2.0-M1,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2009-04-24 05:18:04+00:00,2009-11-21 11:57:59+00:00,"We should introduce a org.apache.camel.Channel to act as delegate for routing an exchange to the next processor in the route graph.


The Channel should contain the logic to perform the needed work on the Exchange before it can be routed such as



applying interceptors
using the correct error handler
and more to come in the future



The first phase of implementation will be to move the existing logic that wraps the processor in interceptors and error handlers from the ProcessorDefinition into the Channel.
So the Channel contains this logic.


Later we can introduce runtime behavior and much more.


I will start a discussion on it on the dev forum in a second.","davsclaus:1240527365:2009-04-24T06:56:05.216+0000:1240527365:2009-04-24T06:56:05.216+0000:First cut: 768186
davsclaus:1240527392:2009-04-24T06:56:32.589+0000:1240527392:2009-04-24T06:56:32.589+0000:Discussion
http://www.nabble.com/-DISCUSS---Camel-2.0---Internal-API-reworkings----Channel-and--AsyncProcessor-td23210093.html

davsclaus:1240880005:2009-04-28T08:53:25.507+0000:1240880005:2009-04-28T08:53:25.507+0000:Added Navigate feature so we can navigate the routes (the ones with the processors) at runtime and thus also navigate and find all the Channels.

This allows us to tamper with the route at runtime. And opens up new possibilities with better tooling support and whatnot.

See the navigate method on the Route interface. And the NavigateRouteTest is just showing a simple in action of this.

trunk: 769303
davsclaus:1258775879:2009-11-21T11:57:59.720+0000:1258775879:2009-11-21T11:57:59.720+0000:Closing all 2.0M2 tickets"
0,CAMEL-1561,Test,Major,None,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Willem Jiang,Willem Jiang,0,0,2009-04-23 03:18:47+00:00,2009-11-21 11:57:59+00:00,"I got the below error when I run the camel-itest-osgi in my windows box.


> org.ops4j.pax.exam.spi.container.TestContainerException: Cannot get the
> remote bundle context
> 	at
> org.ops4j.pax.exam.rbc.client.RemoteBundleContextClient.getRemoteBundleContext(RemoteBundleContextClient.java:256)
> 	at
> org.ops4j.pax.exam.rbc.client.RemoteBundleContextClient.stop(RemoteBundleContextClient.java:201)
> 	at
> org.ops4j.pax.exam.container.def.internal.PaxRunnerTestContainer.stop(PaxRunnerTestContainer.java:160)
> 	at
> org.ops4j.pax.exam.junit.internal.JUnit4TestMethod.invoke(JUnit4TestMethod.java:120)
> 	at
> org.junit.internal.runners.MethodRoadie.runTestMethod(MethodRoadie.java:105)
> 	at org.junit.internal.runners.MethodRoadie$2.run(MethodRoadie.java:86)
> 	at
> org.ops4j.pax.exam.junit.internal.JUnit4MethodRoadie.runBeforesThenTestThenAfters(JUnit4MethodRoadie.java:60)
> 	at org.junit.internal.runners.MethodRoadie.runTest(MethodRoadie.java:84)
> 	at org.junit.internal.runners.MethodRoadie.run(MethodRoadie.java:49)
> 	at
> org.ops4j.pax.exam.junit.JUnit4TestRunner.invokeTestMethod(JUnit4TestRunner.java:245)
> 	at
> org.ops4j.pax.exam.junit.JUnit4TestRunner.runMethods(JUnit4TestRunner.java:195)
> 	at
> org.ops4j.pax.exam.junit.JUnit4TestRunner$2.run(JUnit4TestRunner.java:185)
> 	at
> org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:34)
> 	at org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:44)
> 	at org.ops4j.pax.exam.junit.JUnit4TestRunner.run(JUnit4TestRunner.java:181)
> 	at
> org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:45)
> 	at
> org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
> 	at
> org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)
> 	at
> org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)
> 	at
> org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)
> 	at
> org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)
> Caused by: java.rmi.ConnectException: Connection refused to host:
> 192.168.0.131; nested exception is:
> 	java.net.ConnectException: Connection refused: connect
> 	at sun.rmi.transport.tcp.TCPEndpoint.newSocket(TCPEndpoint.java:574)
> 	at sun.rmi.transport.tcp.TCPChannel.createConnection(TCPChannel.java:185)
> 	at sun.rmi.transport.tcp.TCPChannel.newConnection(TCPChannel.java:171)
> 	at sun.rmi.server.UnicastRef.newCall(UnicastRef.java:306)
> 	at sun.rmi.registry.RegistryImpl_Stub.lookup(Unknown Source)
> 	at
> org.ops4j.pax.exam.rbc.client.RemoteBundleContextClient.getRemoteBundleContext(RemoteBundleContextClient.java:234)
> 	... 20 more
> Caused by: java.net.ConnectException: Connection refused: connect
> 	at java.net.PlainSocketImpl.socketConnect(Native Method)
> 	at java.net.PlainSocketImpl.doConnect(PlainSocketImpl.java:333)
> 	at java.net.PlainSocketImpl.connectToAddress(PlainSocketImpl.java:195)
> 	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:182)
> 	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:366)
> 	at java.net.Socket.connect(Socket.java:520)
> 	at java.net.Socket.connect(Socket.java:470)
> 	at java.net.Socket.<init>(Socket.java:367)
> 	at java.net.Socket.<init>(Socket.java:180)
> 	at
> sun.rmi.transport.proxy.RMIDirectSocketFactory.createSocket(RMIDirectSocketFactory.java:22)
> 	at
> sun.rmi.transport.proxy.RMIMasterSocketFactory.createSocket(RMIMasterSocketFactory.java:128)
> 	at sun.rmi.transport.tcp.TCPEndpoint.newSocket(TCPEndpoint.java:569)
> 	... 25 more","njiang:1240430059:2009-04-23T03:54:19.649+0000:1240430059:2009-04-23T03:54:19.649+0000:This issue relates to the PAXRUNNER-233[1], this issue has been resolved in PAX runner 0.19.0, and PAX-Exam 0.5.0-SNAPSHOT uses this version of PAX-Runner.
So we need to update to PAX-Exam to 0.5.0 which will be released soon, before that I'd like to upgrade the PAX-Exam to 0.5.0-SNAPSHOT.

I will keep this issue open until we can use PAX-Exam 0.5.0.

[1] http://issues.ops4j.org/browse/PAXRUNNER-233
njiang:1241065071:2009-04-30T12:17:51.332+0000:1241065071:2009-04-30T12:17:51.332+0000:Since Pax-Exam 0.5.0 is out, I just update the version in the camel trunk, I can close this issue now :)
davsclaus:1258775879:2009-11-21T11:57:59.699+0000:1258775879:2009-11-21T11:57:59.699+0000:Closing all 2.0M2 tickets"
0,CAMEL-1560,Task,Major,2.0-M1,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,1,2009-04-22 14:56:12+00:00,2014-07-28 11:03:38+00:00,"What should be the strategy for error handler in the route with the try .. catch .. finally blocks? 


1)
Error handler is disabled


2)
Error handler is enabled, and doTry gets what its left. e.g. error Handler take precedence over doTry


3)
Error handler is enabled but doCatch take precedence over the existing onException defined at the error handler (if any)


4)
doCatch to support redelivery as well? Kinda hard ball.


The possibilities are many but we need to settle on a strategy that has no surprises for the end users.


PS: The current strategy in the code is #2.","davsclaus:1240531490:2009-04-24T08:04:50.507+0000:1240531490:2009-04-24T08:04:50.507+0000:trunk: 768215

The bullet #1 is the most correct to use as it mimics how the Java try .. catch will behave.

And I was wrong before #1 has been the default in Camel 1.x all the way.
davsclaus:1258775879:2009-11-21T11:57:59.661+0000:1258775879:2009-11-21T11:57:59.661+0000:Closing all 2.0M2 tickets
Patrickmorton:1406516618:2014-07-28T11:03:38.845+0000:1406516618:2014-07-28T11:03:38.845+0000:But during this onset he was oropharyngeal to do postpartum similar time. 
http://www.surveyanalytics.com//userimages/sub-2/2007589/3153260/29851518/7787444-29851518-stopadd22.html 
Time of the characteristic has been linked to policies in learning and football, regularly within the synaptic analysis."
0,CAMEL-1559,Improvement,Major,None,"1.6.1, 2.0-M2","
None
",Closed,Fixed,"1.6.1, 2.0-M2",Willem Jiang,Willem Jiang,0,0,2009-04-22 14:39:02+00:00,2009-11-21 11:57:59+00:00,"Here is the mail thread about it
[1] http://www.nabble.com/Accessing-header-variables-in-XQuery-endpoints-td23141569.html#a23141569","davsclaus:1241041473:2009-04-30T05:44:33.889+0000:1241041473:2009-04-30T05:44:33.889+0000:Willem can you update status on this as Hadrian would like to be able to build 1.6.1 RC
njiang:1241050460:2009-04-30T08:14:20.605+0000:1241050460:2009-04-30T08:14:20.605+0000:trunk
 http://svn.apache.org/viewvc?rev=768296&view=rev
camel-1.x
 http://svn.apache.org/viewvc?rev=770107&view=rev
njiang:1241469491:2009-05-05T04:38:11.747+0000:1241469491:2009-05-05T04:38:11.747+0000:Also updated the wiki page[1] for this change.

[1] http://cwiki.apache.org/confluence/display/CAMEL/XQuery
davsclaus:1258775879:2009-11-21T11:57:59.639+0000:1258775879:2009-11-21T11:57:59.639+0000:Closing all 2.0M2 tickets"
0,CAMEL-1558,New Feature,Major,2.0-M1,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2009-04-22 13:25:52+00:00,2009-11-21 11:57:59+00:00,"To be able to do detour when an exchange is about to be routed to the given endpoint.



  intercept(""jms:queue:foo"").to(""file://backup"").proceed();

  from(""direct:foo"").to(""jms:queue:foo"");




So when an exchange is about to be routed to the foo queue it will be intercepted and routed to the file where we will save a backup of it.
And since we use proceed the exchange will continue its original route at the point of interception.
To stop the route we could have used stop() instead.","davsclaus:1240807454:2009-04-27T12:44:14.538+0000:1240807454:2009-04-27T12:44:14.538+0000:trunk: 768955
davsclaus:1240821956:2009-04-27T16:45:56.321+0000:1240821956:2009-04-27T16:45:56.321+0000:I renamed it to {{interceptSendToEndpoint}} to make it clear what the interceptor does.

See wiki
http://camel.apache.org/intercept.html

davsclaus:1258775879:2009-11-21T11:57:59.621+0000:1258775879:2009-11-21T11:57:59.621+0000:Closing all 2.0M2 tickets"
0,CAMEL-1557,Task,Major,2.0-M1,None,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2009-04-22 06:11:01+00:00,2009-11-21 11:57:59+00:00,"Camel uses Exceptions for errors and it would be more useable to be able to set an exception on the Exchange.


Also in line what Hadrian wanted to ""merge the FAULT and Exception"" into using Exception only. There is a ticket for this somewhere.","davsclaus:1242601631:2009-05-18T07:07:11.091+0000:1242601631:2009-05-18T07:07:11.091+0000:trunk: 775844

{{throwFault}} removed. Added {{throwException}} instead.
davsclaus:1258775879:2009-11-21T11:57:59.573+0000:1258775879:2009-11-21T11:57:59.573+0000:Closing all 2.0M2 tickets"
0,CAMEL-1556,New Feature,Major,None,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Henric Hedin,0,0,2009-04-21 19:59:04+00:00,2010-02-07 09:55:22+00:00,"Would be nice if it was possible to control the order of how routes are initiated. If the following code is implemented within the same RouteBuilder.configure:


// initiated from queue
from(""jms:queue:SOURCE_QUEUE"").
to(""direct:processMsg"");


// initiated from file
from(""file://inbox).
to(""direct:processMsg"");


// Main flow
from(""direct:processMsg"")
 .process(""..."")
 .to(""validator:foo.xsd"")
 .to(""jms:queue:DEST_QUEUE"");


... and there already is a message waiting on the JMS-source when camel is started, it could/will lead to the following error:


 WARN  DirectProducer                 - No consumers available on endpoint: Endpoint[direct:processMsg] to process Exchange[JmsMessage:


 Today the are workarounds (by splitting in multiple files, and re-order route definitions), but maybe this could solved in some other better way (which also could affect a graceful shutdown).","davsclaus:1254565184:2009-10-03T18:19:44.289+0000:1254565184:2009-10-03T18:19:44.289+0000:trunk: 821383.
davsclaus:1254565319:2009-10-03T18:21:59.721+0000:1254565319:2009-10-03T18:21:59.721+0000:You can now set a number which indicate the startupOrder. The lowest is started first.

{code}
from(""direct:foo"").starupOrder(1).to(""seda:foo"");
from(""seda:foo"").startupOrder(2).to(""mock:foo"");
{code}

And for XML you define it as an attribute
{code}
<route startupOrder=""1"">
  ...
</route>
{code}

The *startupOrder* should be unique in all routes within the camel context.

By default if a route does not have a startupOrder assigned it will be auto assigned a number starting from 1000.
davsclaus:1254565448:2009-10-03T18:24:08.437+0000:1254565448:2009-10-03T18:24:08.437+0000:Consider what to do if two routes have defined the same ID currently a WARN is logged. Maybe Camel should thrown an exception and fail to startup. This ensures that end users is aware of this issue and can fix it, instead of the WARN log.

If not should non unique numbers be allowed? It could also be a mistake if there are two routes with startupOrder = 4
davsclaus:1254565461:2009-10-03T18:24:21.422+0000:1254617395:2009-10-04T08:49:55.464+0000:TODO: Document wiki page *DONE*

Wiki page updated

davsclaus:1254565614:2009-10-03T18:26:54.618+0000:1254565614:2009-10-03T18:26:54.618+0000:BTW We also improved in Camel 2.1 to start the inputs to the routes at the very end. So the initial problem will without this patch be hard to reproduce as Camel starts all the inputs very fast at the same time.
davsclaus:1254615851:2009-10-04T08:24:11.081+0000:1254615851:2009-10-04T08:24:11.081+0000:trunk: 821478.

Now Camel throws an {{FailedToStartRouteException}} in case there is a starupOrder clash."
0,CAMEL-1555,Task,Major,2.0-M1,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2009-04-21 13:20:55+00:00,2009-11-21 11:57:59+00:00,"It bites us if we have different model depending whether JMX is enabled or not.


JMX should only instrument some processors with performance counters and register endpoints, consumer, producers and the likes.","davsclaus:1240527340:2009-04-24T06:55:40.205+0000:1240527340:2009-04-24T06:55:40.205+0000:trunk: 768186
davsclaus:1258775879:2009-11-21T11:57:59.550+0000:1258775879:2009-11-21T11:57:59.550+0000:Closing all 2.0M2 tickets"
0,CAMEL-1554,Task,Major,2.0-M1,None,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2009-04-21 13:18:55+00:00,2009-11-21 11:57:59+00:00,We have the chance for Camel 2.0 to remove seldom/not used features and the InterceptorDefintion is hardly used.,"davsclaus:1240359008:2009-04-22T08:10:08.304+0000:1240359008:2009-04-22T08:10:08.304+0000:trunk: 767405
mingfang:1247680302:2009-07-16T01:51:42.041+0000:1247680302:2009-07-16T01:51:42.041+0000:Why was this removed?
What is the alternative way to add an interceptor that gets call before and after?
davsclaus:1247692001:2009-07-16T05:06:41.628+0000:1247692001:2009-07-16T05:06:41.628+0000:It was clashing with the general interceptor in Camel that is more a cross cutting concern.

Where as this one was an AOP around the next node. To confusing from both inside and out.

Its going to be replace with an AOP DSL. See this ticket: CAMEL-1660

davsclaus:1247692031:2009-07-16T05:07:11.225+0000:1247692031:2009-07-16T05:07:11.225+0000:And calling before and after can always be done the conventional way

from
  before
  do something
  after


davsclaus:1247701788:2009-07-16T07:49:48.291+0000:1247701788:2009-07-16T07:49:48.291+0000:I have committed the AOP stuff for 2.0 so you will have this feature. See CAMEL-1660 that has a link to wiki documentation.

davsclaus:1258775879:2009-11-21T11:57:59.528+0000:1258775879:2009-11-21T11:57:59.528+0000:Closing all 2.0M2 tickets"
0,CAMEL-1553,New Feature,Major,2.0-M1,2.0.0,"
None
",Closed,Fixed,2.0.0,Claus Ibsen,Claus Ibsen,0,0,2009-04-21 12:54:14+00:00,2010-02-07 09:55:21+00:00,"Currently the tracer and others is a global configuration for all routes.


We should add support per route configuration as well. So you can override the global setting.","davsclaus:1248822457:2009-07-29T07:07:37.685+0000:1248822457:2009-07-29T07:07:37.685+0000:tracer and stream cache can be set per route now.

trunk: 798798.
davsclaus:1248839976:2009-07-29T11:59:36.629+0000:1248839976:2009-07-29T11:59:36.629+0000:trunk: 798862.

You can now configure the 4 of them in both global and per route, where route will override global setting (if any)"
0,CAMEL-1552,Improvement,Major,2.0-M1,"1.6.1, 2.0-M2","
None
",Closed,Fixed,"1.6.1, 2.0-M2",Claus Ibsen,Frank Schwarz,0,0,2009-04-21 12:48:20+00:00,2009-11-21 11:57:59+00:00,"The JPA component uses currently a hard coded reference to org.springframework.orm.jpa.JpaTransactionManager. A more flexible (i.e. declarative) handling would be desirable.


See also: http://www.nabble.com/Re%3A-JPA-component-in-a-JEE5-environment-p23154746s22882.html","davsclaus:1240957521:2009-04-29T06:25:21.249+0000:1240957521:2009-04-29T06:25:21.249+0000:trunk: 769673
1.x: 769677.

Frank let me know how it goes for you. Mind that setting JPA in a managed environment to use a JTA TM might take a bit time to get working.

I also changed the JpaProducer to use {{merge}} instead of {{persist}} so it can do updates.
fs5:1242130364:2009-05-12T20:12:44.305+0000:1242130364:2009-05-12T20:12:44.305+0000:It works, thank you very much!
davsclaus:1258775879:2009-11-21T11:57:59.492+0000:1258775879:2009-11-21T11:57:59.492+0000:Closing all 2.0M2 tickets"
0,CAMEL-1551,Improvement,Major,2.0-M1,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2009-04-21 05:29:25+00:00,2009-11-21 11:57:59+00:00,"This DSL is seldom used but its for the JBI world where FAULT can be converted into an Exception instead.


Currently its a processor but it should be an interceptor strategy just as stream cache, as it needs to be applied for every node.


The problem was not surfaced before CAMEL-1548 where the error handler is now applied much more fine grained.","davsclaus:1240358981:2009-04-22T08:09:41.157+0000:1240358981:2009-04-22T08:09:41.157+0000:trunk: 767405

Is enabled just like the tracer. There is an attribute on camel context in XML.
And in Java you do it like the tracer.

The purpose of this interceptor is to convert FAULT body messages into exceptions. A rare use case but for the folks in the JBI world.
njiang:1240360003:2009-04-22T08:26:43.600+0000:1240360003:2009-04-22T08:26:43.600+0000:Yes, we need recheck this change when updating  the Camel version of servicemix-camel component  to 2.0.
davsclaus:1258775879:2009-11-21T11:57:59.414+0000:1258775879:2009-11-21T11:57:59.414+0000:Closing all 2.0M2 tickets"
0,CAMEL-1550,Improvement,Major,2.0-M1,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Frank Schwarz,0,0,2009-04-20 16:27:57+00:00,2009-11-21 11:57:59+00:00,"With some little changes, the pattern ""composed message processor"" could be realized more easily. I am proposing to let the splitter component by default insert on each of its output-messages the message id of its input-message as a standardized header. The aggregator component then should, if nothing else is specified, use this header as a correlation id for the aggregation. So, the splitting-aggregation-stuff works out-of-the box.


see also: http://www.nabble.com/Composed-Message-Processor-td23127178s22882.html","davsclaus:1242602224:2009-05-18T07:17:04.362+0000:1242602224:2009-05-18T07:17:04.362+0000:I have updated the wiki page with a note on the correlation expression using header(orderId).

The splitter already insert an INDEX and TOTAL headers and it has in fact a build in aggregator as well. But since the EIP pattern indicate to use a splitter and aggregator Jonathan created the sample according to this fact. However this build in aggregator is only useable for *inOut* (request/reply) messaging.

We do have some rough ideas to improve the splitter, resequencer and aggregator in the future so its aggregation can more easily be configured to use a sequence of exchanges generated by a poller, eg. for instance a filer poller. So we can aggregate the files that was polled by default.

 
davsclaus:1258775879:2009-11-21T11:57:59.393+0000:1258775879:2009-11-21T11:57:59.393+0000:Closing all 2.0M2 tickets"
0,CAMEL-1549,Improvement,Major,2.0-M1,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2009-04-20 15:18:03+00:00,2009-11-21 11:57:59+00:00,"I have a bean as



    public static final class MyFooBean {

        public String doSomething(String payload) throws Exception {
            if (""Kabom"".equals(payload)) {
                throw new IllegalArgumentException(""Kabom"");
            }

            return ""Bye World"";
        }
    }




And get this stacktrace



Caused by: org.apache.camel.component.bean.AmbiguousMethodCallException: Ambiguous method invocations possible: [public int java.lang.String.compareTo(java.lang.String), public int java.lang.String.indexOf(java.lang.String), public int java.lang.String.indexOf(java.lang.String,int), public byte[] java.lang.String.getBytes(java.lang.String) throws java.io.UnsupportedEncodingException, public boolean java.lang.String.equalsIgnoreCase(java.lang.String), public int java.lang.String.compareToIgnoreCase(java.lang.String), public boolean java.lang.String.startsWith(java.lang.String), public boolean java.lang.String.startsWith(java.lang.String,int), public boolean java.lang.String.endsWith(java.lang.String), public int java.lang.String.lastIndexOf(java.lang.String), public java.lang.String java.lang.String.concat(java.lang.String), public boolean java.lang.String.matches(java.lang.String), public java.lang.String java.lang.String.replaceFirst(java.lang.String,java.lang.String), public java.lang.String java.lang.String.replaceAll(java.lang.String,java.lang.String), public java.lang.String[] java.lang.String.split(java.lang.String,int), public java.lang.String[] java.lang.String.split(java.lang.String), public static transient java.lang.String java.lang.String.format(java.lang.String,java.lang.Object[])] on the exchange: Exchange[Message: Hello World]
	at org.apache.camel.component.bean.BeanInfo.chooseMethodWithCustomAnnotations(BeanInfo.java:496)","davsclaus:1240212157:2009-04-20T15:22:37.436+0000:1240212157:2009-04-20T15:22:37.436+0000:I got fooled by james have added jndi.properties in src/test/resources that the unit tests read for the mocked JNDI registry.
And there is a foo -> bar bean.



davsclaus:1240212230:2009-04-20T15:23:50.402+0000:1240212230:2009-04-20T15:23:50.402+0000:But anyway it should disregard any java.lang.Object methods
davsclaus:1242608979:2009-05-18T09:09:39.488+0000:1242608979:2009-05-18T09:09:39.488+0000:trunk: 775864.
davsclaus:1258775879:2009-11-21T11:57:59.346+0000:1258775879:2009-11-21T11:57:59.346+0000:Closing all 2.0M2 tickets"
0,CAMEL-1548,Bug,Major,2.0-M1,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2009-04-20 12:14:54+00:00,2009-11-21 11:57:59+00:00,No Desc,"davsclaus:1240200971:2009-04-20T12:16:11.117+0000:1240200971:2009-04-20T12:16:11.117+0000:There could be other types it should apply for as its basically BatchProcessor that ""swallows"" exceptions.

So its also
- resequencer

And what else?
davsclaus:1240212761:2009-04-20T15:32:41.503+0000:1240212761:2009-04-20T15:32:41.503+0000:The solution I am work is general and applies to pipeline children as well.

Also I should remember to add a DEBUG logging the routes as:
- routes (with details)
- routes (with no details, eg all error handler and interceptors are not there, for easier spotting the route)
davsclaus:1240273003:2009-04-21T08:16:43.738+0000:1240273003:2009-04-21T08:16:43.738+0000:It should work now.

trunk: 767064
davsclaus:1258775879:2009-11-21T11:57:59.316+0000:1258775879:2009-11-21T11:57:59.316+0000:Closing all 2.0M2 tickets"
0,CAMEL-1547,Bug,Major,"1.5.0, 1.6.0, 2.0-M1",None,"
None
",Closed,Fixed,"1.6.1, 2.0-M2",Willem Jiang,Willem Jiang,0,0,2009-04-20 08:16:30+00:00,2009-11-21 11:57:59+00:00,"The InterceptStrategy of Delayer and StreamCaching can't tell if the camelContext's InterceptStrategies has the instance of Delayer or StreamCaching.
So the  InterceptStrategy of Delayer and StreamCaching  will be added to the CamelContext's InterceptStrategies, when the CamelContext  is restarted.","davsclaus:1240359064:2009-04-22T08:11:04.350+0000:1240359081:2009-04-22T08:11:21.159+0000:Willem there is now also a HandleFault interceptor strategy that might need same fix. This is on *trunk only*
davsclaus:1241041462:2009-04-30T05:44:22.324+0000:1241041462:2009-04-30T05:44:22.324+0000:Willem can you update status on this as Hadrian would like to be able to build 1.6.1 RC
njiang:1241050965:2009-04-30T08:22:45.817+0000:1241050965:2009-04-30T08:22:45.817+0000:trunk
http://svn.apache.org/viewvc?rev=766633&view=rev
camel-1.x
http://svn.apache.org/viewvc?rev=766635&view=rev
njiang:1241051521:2009-04-30T08:32:01.488+0000:1241051521:2009-04-30T08:32:01.488+0000:I just checked the code of HandleFault on the trunk, every thing looks good.
davsclaus:1258775879:2009-11-21T11:57:59.293+0000:1258775879:2009-11-21T11:57:59.293+0000:Closing all 2.0M2 tickets"
0,CAMEL-1546,Bug,Major,2.0-M1,,"
None
",Closed,Not A Problem,None,Unassigned,Frank Schwarz,0,0,2009-04-20 06:30:48+00:00,2009-04-20 12:36:28+00:00,"<camelContext xmlns=""http://camel.apache.org/schema/spring"">
	<onException>
		<exception>java.lang.Exception</exception>
		<!-- no retry, just dump the error -->
		<handled><constant>true</constant></handled>
		<convertBodyTo type=""java.lang.String"" />
		<to uri=""bean:ErrorMessageTransformProcessor"" />
		<to uri=""freemarker:error.ftl"" />
		<to uri=""file:///C:/temp/camel/err"" />
	</onException>
...
	<route>
		<from uri=""jms:queue:InQueue""/>
		<aggregate batchTimeout=""5000"" strategyRef=""MyAggregationStrategy"">
			<correlationExpression>      
				<header>MyCorrelationId</header>
			</correlationExpression>
			<to uri=""bean:AggregatedItemsTransformProcessor"" /> ***
			<to uri=""jms:queue:OutQueue"" />
		</aggregate>
	</route>
</camel>


If in the bean *** occurs an exception, nothing happens. Debugging shows that the exception handler is not triggered. Nothing is logged.","njiang:1240185340:2009-04-20T07:55:40.144+0000:1240185340:2009-04-20T07:55:40.144+0000:You need to do something for aggregating the exception in your MyAggregationStrategy, as we do in UseLatestAggrationStrategy[1].
[1] https://svn.apache.org/repos/asf/camel/trunk/camel-core/src/main/java/org/apache/camel/processor/aggregate/UseLatestAggregationStrategy.java
fs5:1240188026:2009-04-20T08:40:26.855+0000:1240188026:2009-04-20T08:40:26.855+0000:The exception occurs after the aggregation being complete, so the aggregation strategy is not invoked any more. 
Lets put it differently: The bean ""AggregatedItemsTransformProcessor"" already has the aggregation-outcome as its input and is now throwing an exception.

Am I misusing the DSL?
fs5:1240188500:2009-04-20T08:48:20.613+0000:1240188500:2009-04-20T08:48:20.613+0000:""Nothing happens"" means, even the message is dropped (to nowhere)
davsclaus:1240188750:2009-04-20T08:52:30.880+0000:1240188750:2009-04-20T08:52:30.880+0000:The Aggregator is based on the BatchProcessor that has this _feature_ or flaw :)

There should be a ticket related related to this and how exceptions should be handled with the BatchProcessor.
davsclaus:1240188856:2009-04-20T08:54:16.574+0000:1240188856:2009-04-20T08:54:16.574+0000:Franks you should move the </aggregate> further up to not include the bean you want to be triggered outside the aggregator.

So what you want to do is like this
{code:xml}
<route>
<from uri=""jms:queue:InQueue""/>
<aggregate batchTimeout=""5000"" strategyRef=""MyAggregationStrategy"">
<correlationExpression> 
<header>MyCorrelationId</header>
</correlationExpression>
</aggregate>
<!-- end the aggregator, so the route below happens after we have aggregated -->
<to uri=""bean:AggregatedItemsTransformProcessor"" />
<to uri=""jms:queue:OutQueue"" />
</route>
{code}
fs5:1240189734:2009-04-20T09:08:54.234+0000:1240189734:2009-04-20T09:08:54.234+0000:This configuration is not possible, as there has to be a processor within <aggregate>

Caused by: java.lang.IllegalArgumentException: processor must be specified
        at org.apache.camel.util.ObjectHelper.notNull(ObjectHelper.java:170)
        at org.apache.camel.processor.BatchProcessor.<init>(BatchProcessor.java:55)
        at org.apache.camel.processor.Aggregator.<init>(Aggregator.java:59)
        at org.apache.camel.processor.Aggregator.<init>(Aggregator.java:49)
        at org.apache.camel.model.AggregateDefinition.createAggregator(AggregateDefinition.java:158)
        at org.apache.camel.model.AggregateDefinition.createProcessor(AggregateDefinition.java:111)
        at org.apache.camel.model.ProcessorDefinition.createOutputsProcessor(ProcessorDefinition.java:2044)
        at org.apache.camel.model.ProcessorDefinition.createOutputsProcessor(ProcessorDefinition.java:95)
        at org.apache.camel.model.InterceptorDefinition.createProcessor(InterceptorDefinition.java:67)
        at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:1939)
        at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:99)
        at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:309)
        at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:121)
        at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:481)
        at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:777)
        at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:759)
        at org.apache.camel.spring.SpringCamelContext.maybeDoStart(SpringCamelContext.java:165)
        at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:160)
        at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:50)
        at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:95)
        at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:114)
        at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:78)
        at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)
        at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:76)
        at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:274)
        at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:736)
        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:383)
        at org.jboss.spring.factory.NamedXmlApplicationContext.<init>(NamedXmlApplicationContext.java:58)
        at org.jboss.spring.factory.NamedXmlApplicationContext.<init>(NamedXmlApplicationContext.java:47)
        at org.jboss.spring.deployers.ApplicationContextDeployer$1.doCreate(ApplicationContextDeployer.java:41)
        at org.jboss.spring.deployers.ApplicationContextDeployer$1.doCreate(ApplicationContextDeployer.java:44)
        at org.jboss.spring.deployers.AbstractSpringMetaDataDeployer$SpringDeploymentVisitor.deploy(AbstractSpringMetaDataDeployer.java:72)
        at org.jboss.spring.deployers.AbstractSpringMetaDataDeployer$SpringDeploymentVisitor.deploy(AbstractSpringMetaDataDeployer.java:58)
        at org.jboss.deployers.spi.deployer.helpers.AbstractRealDeployerWithInput.deploy(AbstractRealDeployerWithInput.java:125)
        ... 27 more
davsclaus:1240191088:2009-04-20T09:31:28.445+0000:1240191102:2009-04-20T09:31:42.266+0000:Frank can you try adding an empty/noop processor?
Could be an issue how the aggregator model is build and how you define where it *ends*.
And I suspect it.

*Anyway splitting into a sub route should work, also to indicate that your route is two fold*
You can split you route into a sub route using seda to force async, that should work.

{code}
<route>
<from uri=""jms:queue:InQueue""/>
  <aggregate batchTimeout=""5000"" strategyRef=""MyAggregationStrategy"">
    <correlationExpression> 
      <header>MyCorrelationId</header>
    </correlationExpression>
    <to uri=""seda:processAggregated""/>
</aggregate>
</route>

<route>
  <from uri=""seda:processAggregated""/>
  <to uri=""bean:AggregatedItemsTransformProcessor"" />
  <to uri=""jms:queue:OutQueue"" />
</route>
{code}
fs5:1240199527:2009-04-20T11:52:07.562+0000:1240199527:2009-04-20T11:52:07.562+0000:Thank you for your advice. This was also my workaround in the first place.

I am closing this issue because of the fact that it is still unclear, whether the reported behavior is by design or is a bug.
It seems to me that the observed behavior is a mixture of me misusing the DSL and the aggregator component being unable to process exceptions, thrown by one of its destination.

So, someone who considers this behavior has to be fixed, please reopen the case.
davsclaus:1240199900:2009-04-20T11:58:20.432+0000:1240199900:2009-04-20T11:58:20.432+0000:Frank

I had a ""sleep"" on this (actually a walk with the dog) and my suspicion is that the error handler is not wrapped around each child output in the aggregator.
So whenever an exception occurs its propagated back to the aggregator (based on batch processor) that has this (flaw/feature) that it swallows exceptions.

So when you split the route into a sub route outside the aggreagator then the error handler is intercepted as expected.

The remedy is pobably to ensure the logic that applies the error handler also can handle the aggregator and its children as well.




davsclaus:1240202188:2009-04-20T12:36:28.067+0000:1240202188:2009-04-20T12:36:28.067+0000:Franks

Good news. I am working on this and have some prototype code working. But it will basically support your route out of the box."
0,CAMEL-1545,Task,Minor,2.0-M1,None,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2009-04-20 04:46:11+00:00,2009-11-21 11:57:59+00:00,No Desc,"davsclaus:1240174026:2009-04-20T04:47:06.160+0000:1240174026:2009-04-20T04:47:06.160+0000:trunk: 766571
davsclaus:1258775879:2009-11-21T11:57:59.261+0000:1258775879:2009-11-21T11:57:59.261+0000:Closing all 2.0M2 tickets"
0,CAMEL-1544,Bug,Major,"1.4.0, 1.5.0, 1.6.0, 2.0-M1",None,"
None
",Closed,Fixed,"1.6.1, 2.0-M2",Willem Jiang,Willem Jiang,0,0,2009-04-20 03:00:45+00:00,2009-11-21 11:57:59+00:00,"If you restart the camel context ,you will get into trouble of creating multiple consumers.
Here is the mail thread with talks about it.
http://www.nabble.com/Multiple-consumers-getting-created-in-custom-endpoint-td22928845.html#a22928845","njiang:1240439303:2009-04-23T06:28:23.348+0000:1240439303:2009-04-23T06:28:23.348+0000:trunk
http://svn.apache.org/viewvc?rev=766564&view=rev
http://svn.apache.org/viewvc?rev=766633&view=rev
camel-1.x
http://svn.apache.org/viewvc?rev=766635&view=rev
davsclaus:1258775879:2009-11-21T11:57:59.229+0000:1258775879:2009-11-21T11:57:59.229+0000:Closing all 2.0M2 tickets"
0,CAMEL-1543,Improvement,Major,2.0-M1,"1.6.1, 2.0-M2","
None
",Closed,Fixed,"1.6.1, 2.0-M2",Claus Ibsen,Frank Schwarz,0,0,2009-04-19 15:27:14+00:00,2009-11-21 11:57:59+00:00,"In case of a JMS message, header information is redundantly stored in org.apache.camel.component.jms.JmsMessage (here Camel-Message) and in its javax.jms.Message jmsMessage delegate (here JMS-Message). Currently you cannot remove effectively any header from the Camel-Message instance as in the next processing step those removed headers resurrect from the underlying JMS-Message.


Please provide any means to remove or or at least mask out those headers from the underlying JMS-Message.","marat:1240144425:2009-04-19T20:33:45.724+0000:1240144425:2009-04-19T20:33:45.724+0000:Good point.

If I recall correctly as a work around you could instruct the runtime to always create a new javax.jms.Message between from and to steps (alwaysCopyMessage=true), though this is not very efficient when used between the same JMS broker providers on from() and to() sides.
davsclaus:1240869274:2009-04-28T05:54:34.374+0000:1240869274:2009-04-28T05:54:34.374+0000:trunk: 769251.
1.x: 769255.
davsclaus:1240869479:2009-04-28T05:57:59.185+0000:1240869479:2009-04-28T05:57:59.185+0000:Also fixed in 1.6.1
davsclaus:1258775879:2009-11-21T11:57:59.207+0000:1258775879:2009-11-21T11:57:59.207+0000:Closing all 2.0M2 tickets"
0,CAMEL-1542,New Feature,Minor,"1.6.0, 2.0-M1",2.3.0,"
None
",Closed,Won't Fix,2.3.0,Unassigned,Claus Ibsen,0,0,2009-04-19 08:45:09+00:00,2011-04-24 10:01:33+00:00,"The Filter EIP currently silently ignore messages that it ignores.


We should add an option to configure it to throw a CamelExchangeException or some new exception that indicates its rejected.","davsclaus:1266386446:2010-02-17T14:00:46.147+0000:1266386446:2010-02-17T14:00:46.147+0000:This is how the filter works. 
davsclaus:1303610493:2011-04-24T10:01:33.012+0000:1303610493:2011-04-24T10:01:33.012+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-1541,Improvement,Major,2.0-M1,None,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Frank Schwarz,0,0,2009-04-19 07:32:41+00:00,2009-11-21 11:57:59+00:00,"It would be quite handy to have a predefined string constant for the headers ""CamelFilePath"" and ""CamelFileParent"" (in interface Exchange)","fs5:1240097833:2009-04-19T07:37:13.850+0000:1240097833:2009-04-19T07:37:13.850+0000:Not to mention: CamelFileRelativePath
marat:1240143935:2009-04-19T20:25:35.874+0000:1240143935:2009-04-19T20:25:35.874+0000:may be use ExchangeProperty for a central exchange property  runtime registry and discovery and allow for type safe setters/getters?
davsclaus:1240548998:2009-04-24T12:56:38.962+0000:1240548998:2009-04-24T12:56:38.962+0000:trunk: 768292
davsclaus:1258775879:2009-11-21T11:57:59.173+0000:1258775879:2009-11-21T11:57:59.173+0000:Closing all 2.0M2 tickets"
0,CAMEL-1540,New Feature,Major,2.0-M1,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2009-04-19 07:20:32+00:00,2009-11-21 11:57:59+00:00,"The doCatch DSL is used to catch 1..N exceptions and handle them.


We should add support for onWhen just as we have on the exception clauses.


And we could also consider the handled predicate as well so its more aligned with all the power from the exception clauses.","davsclaus:1240112954:2009-04-19T11:49:14.902+0000:1240188545:2009-04-20T08:49:05.971+0000:- Create wiki page for try .. catch .. finally as its really powerful in Camel 2.0 *DONE*
http://cwiki.apache.org/confluence/display/CAMEL/Try+Catch+Finally

- Add the *handled* predicate *DONE*
davsclaus:1240121812:2009-04-19T14:16:52.418+0000:1240121812:2009-04-19T14:16:52.418+0000:Added first batch of improvements: rev 766471
davsclaus:1240185919:2009-04-20T08:05:19.586+0000:1240185919:2009-04-20T08:05:19.586+0000:Added the handled support as well: rev 766610
davsclaus:1258775879:2009-11-21T11:57:59.143+0000:1258775879:2009-11-21T11:57:59.143+0000:Closing all 2.0M2 tickets"
0,CAMEL-1539,Improvement,Minor,1.6.0,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Gert Vanthienen,Gert Vanthienen,0,0,2009-04-17 13:57:44+00:00,2009-11-21 11:57:59+00:00,JackRabbit 1.5.x JARs are OSGi bundles so upgrading to those to make the component more OSGi-aware.,"gertvanthienen:1239948436:2009-04-17T14:07:16.825+0000:1239948436:2009-04-17T14:07:16.825+0000:Fixed as part of CAMEL-1526 (cfr. http://svn.apache.org/viewvc?view=rev&revision=766016)
davsclaus:1258775879:2009-11-21T11:57:59.124+0000:1258775879:2009-11-21T11:57:59.124+0000:Closing all 2.0M2 tickets"
0,CAMEL-1538,Task,Minor,2.0-M1,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2009-04-17 13:11:19+00:00,2009-11-21 11:57:59+00:00,Spring DM have release 1.2.0 of camel-osgi in which we use some core jars.,"davsclaus:1239949281:2009-04-17T14:21:21.099+0000:1239949281:2009-04-17T14:21:21.099+0000:trunk: 766023
davsclaus:1258775879:2009-11-21T11:57:59.092+0000:1258775879:2009-11-21T11:57:59.092+0000:Closing all 2.0M2 tickets"
0,CAMEL-1537,New Feature,Minor,2.0-M1,2.3.0,"
None
",Closed,Fixed,2.3.0,Christian Müller,Claus Ibsen,1,1,2009-04-16 16:21:27+00:00,2011-04-24 09:57:33+00:00,"The current validator is a component and its a bit clumsy as it throws an exception if validation error.


So if we have a nice Predicate for it, it can be like a xpath predicate or the likes.


[17:58]  <jstrachan> http://camel.apache.org/validation.html
[17:58]  <ulhasb> jstrachan: thanks for the quick responses
[17:59]  <cibsen> jstrachan we should maybe have a predicate for schema validation
[17:59]  <cibsen> then you can route it a bit more nice without try .. catch
[18:00]  * fbolton has quit (""Leaving."")
[18:03]  * gertv has quit (Client closed connection)
[18:05]  <jstrachan> cibsen: yeah
[18:05]  <jstrachan> cibsen: maybe a kinda predicate language using the other validators? filter().validate(theValidationEndpointUri).to(""blah"")","muellerc:1271856810:2010-04-21T21:33:30.096+0000:1271856810:2010-04-21T21:33:30.096+0000:Currently I'm studying the Predicates, ProcessorDefinition, ...

In my opinion, we could provide the validation functionality for:
- xml validation
- bean validation (JSR 303)
- regExp validation for csv, fixed length, ...

I start with the regExp validation, because it's similar to the filter and choice predicate and it's a good starting point for me to discover this part of Camel... :-)

Currently, I can write a route like this to validate against a regular expression:

{code}
from(""direct:start"")
  .validate(body(String.class).regex(""^\\d{2}\\.\\d{2}\\.\\d{4}$""))
.to(""mock:result"");
{code}

To validate with the bean validation feature (JSR 303), I could imagine a route definition like this:

{code}
from(""direct:start"")
  .validate(body())
.to(""mock:result"");
{code}

or

{code}
from(""direct:start"")
  .validate(body()).group(Default.class)
.to(""mock:result"");
{code}

if you want to define the constraint group, which should be evaluated.

For the validation against an XML schema, I could imagine the following route definition:

{code}
from(""direct:start"")
  .validate(body()).resource(schema.xsd)
.to(""mock:result"");
{code}

What do you think?
davsclaus:1272005191:2010-04-23T14:46:31.875+0000:1272005191:2010-04-23T14:46:31.875+0000:If the {{validate}} DSL just leverages an {{org.apache.camel.Expression}} then we can hook in all kind of _shit_ to be validated.

You just use {{PredicateBuilder.toPredicate}} to convert the {{Expression}} to a predicate which then returns {{true}} or {{false}}.
Then its just a matter of thrown {{ValidationException}} if the validation failed, predicate was false.

Then as the examples shown above, its just a matter of adding fluent builders for that in Java DSL. And have some way of doing it in Spring XML as well. 
muellerc:1273243475:2010-05-07T22:44:35.968+0000:1273243475:2010-05-07T22:44:35.968+0000:Hello Claus!
Sorry for the late reply, but I was busy with another issue ([FELIX-2280|https://issues.apache.org/jira/browse/FELIX-2280])...

> If the validate DSL just leverages an org.apache.camel.Expression  then we can hook in all kind of shit to be validated. 
Does this mean you dislike the proposal? May be this is more what you have in mind?
{code}
from(""direct:start"")
  .validate(body(String.class)).regex(""^\\d{2}\\.\\d{2}\\.\\d{4}$"")
.to(""mock:result"");
{code}

> Then as the examples shown above, its just a matter of adding fluent builders for that in Java DSL. And have some way of doing it in Spring XML as well. 
Do you have another solution in mind? Please give me a hint, in which direction this development should go...

Regards,
Christian
davsclaus:1273528888:2010-05-11T06:01:28.216+0000:1273528888:2010-05-11T06:01:28.216+0000:No your proposal is fine. Its in line what I have in mind as well.
muellerc:1274273563:2010-05-19T20:52:43.738+0000:1274273563:2010-05-19T20:52:43.738+0000:I spend some hous to understand the camel-core components. I have now finished the first of tree steps, implementing the validation DSL for regular expressions. I attached the patch and hope that someone could give me a feedback whether or not I'm on the right way. The unit test shows best what you can now do:

{code}
public class ValidateRegExpTest extends ContextTestSupport {
    
    private Endpoint startEndpoint;
    private MockEndpoint resultEndpoint;
    
    @Override
    protected void setUp() throws Exception {
        super.setUp();
        
        startEndpoint = resolveMandatoryEndpoint(""direct:start"", Endpoint.class);
        resultEndpoint = resolveMandatoryEndpoint(""mock:result"", MockEndpoint.class);
    }

    public void testSendMatchingMessage() throws Exception {
        resultEndpoint.expectedMessageCount(1);

        template.sendBody(startEndpoint, ""01.01.2010"");
        
        resultEndpoint.assertIsSatisfied();
    }

    public void testSendNotMatchingMessage() throws Exception {
        resultEndpoint.expectedMessageCount(0);

        try {
            template.sendBody(startEndpoint, ""1.1.2010"");
            fail(""CamelExecutionException expected"");
        } catch (CamelExecutionException e) {
            // expected
            assertTrue(e.getCause() instanceof RegExpValidationException);
            String message = ((RegExpValidationException) e.getCause()).getMessage();
            assertEquals(""Validation failed for Predicate[{bodyAs[java.lang.String]}.matches('^\\d{2}\\.\\d{2}\\.\\d{4}$')]. Exchange[Message: 1.1.2010]"", message);
        }

        resultEndpoint.assertIsSatisfied();
    }


    protected RouteBuilder createRouteBuilder() {
        return new RouteBuilder() {
            public void configure() {
                from(""direct:start"")
                .validate(body(String.class)).regex(""^\\d{2}\\.\\d{2}\\.\\d{4}$"")
                .to(""mock:result"");
            }
        };
    }
}
{code}

Thanks,
Christian
njiang:1274300977:2010-05-20T04:29:37.614+0000:1274300977:2010-05-20T04:29:37.614+0000:Hi Christian,

I just went through your patch,  and did some changes on your patch before I committed the patch.

1. As the new added Validate is not just for RegExp, so I changed the class names
  RegExpValidatingProcessor to PredicateValidatingProcessor
  RegExpValidateException PredicateValidationException
2. Added a String member in the ValidateDefinition
3. I didn't figure out how to set the ValueBuilder from XML, so I added the a TODO note for it

Willem
     
davsclaus:1274305093:2010-05-20T05:38:13.512+0000:1274305093:2010-05-20T05:38:13.512+0000:Willem you was a bit to fast there to commit the patch.

We already have the pieces in the core, and all was needed was just to add the validate in the DSL which hooks up with the Predicate/Expression concept of Camel.
And it can be integrated with XML by requiring an ExpressionNodeDefiniton (i think thats the name, but see eg. DelayDefinition).

Then that Expression is just evaluated as a Predicate and if its false an exception is thrown.
davsclaus:1274307749:2010-05-20T06:22:29.026+0000:1274307749:2010-05-20T06:22:29.026+0000:Its not as bad as first sight. I have polished the code a bit to make it as it should be.
And add some Spring XML examples also.
davsclaus:1274307913:2010-05-20T06:25:13.279+0000:1274307913:2010-05-20T06:25:13.279+0000:Sorry that ExpressionNodeDefinition was actually {{ExpressionSubElementDefinition}} and you use those when you need additional expressions in an EIP.
For example Aggregator which uses expressions for its completion conditions.

The validator is very simple so it can do as it does extend ExpressionNode and we are all set.
davsclaus:1274308600:2010-05-20T06:36:40.995+0000:1274308600:2010-05-20T06:36:40.995+0000:trunk: 946538.

Polished the patch a bit and added tests for Spring XML.

We now need a documentation for this. It should be added to the list of EIPs.
muellerc:1274326616:2010-05-20T11:36:56.724+0000:1274326616:2010-05-20T11:36:56.724+0000:Thank you Willem and Claus,

and sorry for the confusion. I would only a feedback, whether or not I'm on the right way... :-)
I will have a look on the modified code and work on the bean and xml schema validation feature. I will also update the documentation in the next days.

I still learning how the Camel processor, predicate, expression, definition, ... staff works. I think I need some more hours for that.
I prefer to work next on the bean validation. I have the following DSL in my mind:

{code}
from(""direct:start"")
  .validate(body()).group(""javax.validation.groups.Default"")
.to(""mock:result"");
{code}

I'm not happy with ""group"", but I have no better idea. Alternatives I thought about are ""jsr303"" or ""bean""...
I'm also not sure, whether or not 

{code}
from(""direct:start"")
  .validate(body()).group(class(""javax.validation.groups.Default""))
.to(""mock:result"");
{code}

is better. Please guide my.

Thanks,
Christian
njiang:1274401056:2010-05-21T08:17:36.216+0000:1274401056:2010-05-21T08:17:36.216+0000:Hi ,

The change of Claus made just let the validate take the expression which can be a predicate, and it make the ValidateDefinition easy to understand.
Now I have question about the supporting the define the regex predicate in XML, I don't find a way to do that with simple expression tag.
Do we have plan to support it ?

Willem

davsclaus:1274401579:2010-05-21T08:26:19.454+0000:1274401579:2010-05-21T08:26:19.454+0000:Spring XML is not a programming language and hence you need to use scripting language or the likes.

The Camel EL = Simple can also do some operations
http://camel.apache.org/simple.html

So you can do something like
{code:xml}
<validate>
   <simple>${body} regex [foo|bar]</simple>
</validate>
{code}

To let the body match against the regex.
njiang:1274419075:2010-05-21T13:17:55.323+0000:1274419075:2010-05-21T13:17:55.323+0000:The Camel EL is powerful, I committed a patch which tests the spring regex Validate.
{code}
<camelContext id=""camel"" xmlns=""http://camel.apache.org/schema/spring"">
        <route>
            <from uri=""direct:start""/>
            <validate>
                <simple>${bodyAs(java.lang.String)} regex '^\d{2}\.\d{2}\.\d{4}$'</simple>            	
            </validate>
            <to uri=""mock:result""/>
        </route>
 </camelContext>
{code}
davsclaus:1274420572:2010-05-21T13:42:52.952+0000:1274420572:2010-05-21T13:42:52.952+0000:You should be able to omit {{java.lang.}} for those objects.

So you can just do
{{bodyAs(String)}}
muellerc:1274875971:2010-05-26T20:12:51.168+0000:1274875971:2010-05-26T20:12:51.168+0000:Claus, Willem,
I updated the wiki [EIP|https://cwiki.apache.org/confluence/display/CAMEL/EIP] page and added the 'Validate' EIP.
I also create the new [Validate|https://cwiki.apache.org/confluence/display/CAMEL/Validate] wiki page and updated the [2.3.0 Release Notes|https://cwiki.apache.org/confluence/display/CAMEL/Camel+2.3.0+Release].

It would be nice, if you could have a look on it.

Cheers,
Christian
davsclaus:1282612469:2010-08-24T09:14:29.321+0000:1282612469:2010-08-24T09:14:29.321+0000:This was already implement in Camel 2.3 afair
muellerc:1282618597:2010-08-24T10:56:37.308+0000:1282618597:2010-08-24T10:56:37.308+0000:Hello Claus!

I let this issue open, because we also planed to integrate the predicate validation for:
- xml schema
- relaxNG
- JSR303 (bean validation)

Because of my current time constraints and my not sufficient knowledge in this (Camel) area, I didn't implement this until now. :-(

Should we open new issues for this or do we discard this improvement?

Regards,
Christian
davsclaus:1282618790:2010-08-24T10:59:50.310+0000:1282618790:2010-08-24T10:59:50.310+0000:Just open tickets for these when you have the time. As the core feature is implemented in Camel 2.3 we need to close the ticket to indicate this.

davsclaus:1303610253:2011-04-24T09:57:33.950+0000:1303610253:2011-04-24T09:57:33.950+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-1536,Improvement,Major,None,None,"
None
",Closed,Fixed,2.0-M2,James Strachan,James Strachan,0,0,2009-04-16 15:36:13+00:00,2009-11-21 11:57:59+00:00,No Desc,"jstrachan:1239867648:2009-04-16T15:40:48.562+0000:1239867648:2009-04-16T15:40:48.562+0000:added a test case OSGiIntegrationTest using [Pax Exam|http://wiki.ops4j.org/display/paxexam/Pax+Exam]
jstrachan:1239867940:2009-04-16T15:45:40.615+0000:1239867940:2009-04-16T15:45:40.615+0000:btw the test case is here..

http://svn.apache.org/repos/asf/camel/trunk/tests/camel-itest-osgi/
http://svn.apache.org/repos/asf/camel/trunk/tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/OSGiIntegrationTest.java

gertvanthienen:1240290872:2009-04-21T13:14:32.435+0000:1240290872:2009-04-21T13:14:32.435+0000:These tests were failing on Hudson/TeamCity because they override the Maven local repository location using -Dmaven.repo.local=/some/dir.
Unfortunately, Pax Exam doesn't support this yet (cfr. [PAXEXAM-62|http://issues.ops4j.org/browse/PAXEXAM-62] and [PAXEXAM-64|http://issues.ops4j.org/browse/PAXEXAM-64]), so using a workaround using the Pax Exam Maven plugin to generate a config file to point to the right local Maven repo in http://svn.apache.org/viewvc?view=rev&revision=767141
davsclaus:1258775879:2009-11-21T11:57:59.046+0000:1258775879:2009-11-21T11:57:59.046+0000:Closing all 2.0M2 tickets"
0,CAMEL-1535,Bug,Major,2.0-M1,"1.6.1, 2.0-M2","
None
",Closed,Fixed,"1.6.1, 2.0-M2",Claus Ibsen,Claus Ibsen,0,0,2009-04-16 07:00:46+00:00,2009-11-21 11:57:59+00:00,"java.lang.AssertionException extends java.lang.Error


So the mock endpoint should deal with this and catch Throwable instead of Exception when it handles failures.","davsclaus:1239840695:2009-04-16T08:11:35.799+0000:1239840695:2009-04-16T08:11:35.799+0000:trunk: 765493

Camel 1.x did not suffer from this bug but I committed some cosmetic changes
1.x: 765501.



davsclaus:1258775879:2009-11-21T11:57:59.027+0000:1258775879:2009-11-21T11:57:59.027+0000:Closing all 2.0M2 tickets"
0,CAMEL-1534,Improvement,Minor,1.6.0,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Unassigned,Claus Ibsen,0,1,2009-04-16 04:00:07+00:00,2009-11-21 11:57:58+00:00,"The camel-ibatis component routes any result from the database so if a SELECT query returns 0 rows Camel will route an exchange.


We should add an option to iBatis to allow end users to filter out empty results so Camel only route an Exchange if there are > 0 rows.


See nabble:
http://www.nabble.com/IBatis-component-inconsistency-td23045297.html","joeluo:1240383306:2009-04-22T14:55:06.150+0000:1240383306:2009-04-22T14:55:06.150+0000:Hi, Claus

Here is the patch for this issue. I added an option ""routeEmptyResultSet"" onto polling consumer so it will not send an empty resultset to the next hop by default. 

However, if an iterator is used (""useIterator=true""), the ""routeEmptyResultSet"" won't have any effect as the empty list will not contain any individual object at all.
davsclaus:1240559015:2009-04-24T15:43:35.903+0000:1240559015:2009-04-24T15:43:35.903+0000:Thanks Joe for the patch. I have applied it.

trunk: 768334.
davsclaus:1258775878:2009-11-21T11:57:58.909+0000:1258775878:2009-11-21T11:57:58.909+0000:Closing all 2.0M2 tickets"
0,CAMEL-1533,Improvement,Major,2.0-M1,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2009-04-15 05:22:50+00:00,2009-11-21 11:57:58+00:00,"We should consider refactor the Exchange interface to only include one method.


Currently it has the following two methods



    /**
     * Returns the value of the expression on the given exchange
     *
     * @param exchange the message exchange on which to evaluate the expression
     * @return the value of the expression
     */
    Object evaluate(Exchange exchange);

    /**
     * Returns the value of the expression on the given exchange
     *
     * @param exchange the message exchange on which to evaluate the expression
     * @param type the expected type of the evaluation result
     * @return the value of the expression
     */
    <T> T evaluate(Exchange exchange, Class<T> type);




I suggest to keep only the last method, the one with the type parameter. You can always pass in Object.class if you dont care/know the type.","davsclaus:1239932225:2009-04-17T09:37:05.062+0000:1239932225:2009-04-17T09:37:05.062+0000:[11:38]  <jstrachan> yeah - lets go with the latter
[11:38]  <jstrachan> an impl can always ignore the type
[11:38]  <cibsen> yeah and you can pass in Object.class if you dont know/care
[11:38]  <jstrachan> yeah
[11:38]  <cibsen> finno


davsclaus:1239950592:2009-04-17T14:43:12.299+0000:1239950592:2009-04-17T14:43:12.299+0000:trunk: 766032
davsclaus:1258775878:2009-11-21T11:57:58.879+0000:1258775878:2009-11-21T11:57:58.879+0000:Closing all 2.0M2 tickets"
0,CAMEL-1532,Improvement,Major,2.0-M1,2.1.0,"
None
",Closed,Won't Fix,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-04-14 15:41:26+00:00,2010-02-07 09:55:21+00:00,"The InterceptorStrategy will wrap each node with the interceptor of choice.


This works fine when its needed such as:



tracer
delayer
StreamCacheInterceptor



But sometimes its sufficient to only wrap one time, in the start such as



UnitOfWork
Transaction policy



Currently the UnitOfWork is registering itself when all the from is created as event driven consumers.
We could have a similar list of one-shot interceptors etc. that gets registered here.


This allows the route path to only contain the needed interceptors instead of being added around each node.",davsclaus:1252837768:2009-09-13T18:29:28.196+0000:1252837768:2009-09-13T18:29:28.196+0000:Not needed anymore
0,CAMEL-1531,Improvement,Major,None,2.0-M2,"
None
",Closed,Fixed,2.0-M2,James Strachan,James Strachan,0,0,2009-04-14 14:35:52+00:00,2009-11-21 11:57:58+00:00,No Desc,"jstrachan:1239691243:2009-04-14T14:40:43.996+0000:1239691243:2009-04-14T14:40:43.996+0000:trunk now uses 2.0-beta-6
davsclaus:1258775878:2009-11-21T11:57:58.851+0000:1258775878:2009-11-21T11:57:58.851+0000:Closing all 2.0M2 tickets"
0,CAMEL-1530,Improvement,Major,2.0-M1,2.3.0,"
None
",Closed,Fixed,2.3.0,Christian Müller,Claus Ibsen,0,2,2009-04-14 13:03:26+00:00,2011-04-24 10:01:13+00:00,Upgrading httpclient from 3.1 to 4.0 requires changes in the camel-http code as the API has change quite a lot.,"davsclaus:1261088699:2009-12-18T06:24:59.241+0000:1261088699:2009-12-18T06:24:59.241+0000:Would be great to get done as HTTP 4.0 offers much better async request/reply support
muellerc:1261289681:2009-12-20T14:14:41.726+0000:1261289681:2009-12-20T14:14:41.726+0000:Hello Claus!

Do you expect ""only"" the migration to ""org.apache.httpcomponents/httpclient/4.0.1"" or something more?

I have done the migration to round about 80%...

Regards,
Christian
davsclaus:1261291032:2009-12-20T14:37:12.916+0000:1261291032:2009-12-20T14:37:12.916+0000:Excellent Christian. I think we should stick to migrate it from 3.1 to 4.0.1 at first.

camel-jetty builds on top of camel-http so I think we should keep it to a migration task only.

Then later we can adapt new features from 4.0. (e.g. async request/reply using toAsync etc.)
muellerc:1261302334:2009-12-20T17:45:34.458+0000:1261302334:2009-12-20T17:45:34.458+0000:Claus,
in the current TRUNK the test ""org.apache.camel.component.http.HttpReferenceParameterTest"" fails. I think, bacause ""http://localhost:8081?httpBindingRef=customBinding&httpClientConfigurerRef=customConfigurer"" is not a valid url (anymore) to configure bean references which are defined in the context (in this sample customBinding and customConfigurer). They should be prefixed with the ""#"" sign. In this case, the correct url is ""http://localhost:8080?httpBindingRef=#customBinding&httpClientConfigurerRef=#customConfigurer"".

I'm right?

Regards,
Christian
muellerc:1261303794:2009-12-20T18:09:54.269+0000:1261303794:2009-12-20T18:09:54.269+0000:I would also upgrade httpcore from 4.0 to 4.0.1 because httpclient depends on httpcore 4.0.1. You agree with that?
muellerc:1261316431:2009-12-20T21:40:31.948+0000:1261316431:2009-12-20T21:40:31.948+0000:Claus,
""org.apache.camel.component.http.HttpInvalidHttpClientConfigurationTest"" checks, that a FailedToCreateRouteException is thrown, if the endpoint url contains an invalid httpClient configuration like ""httpClient.xxx=true"". But with the HttpClient in 4.0, we configure the client with ""org.apache.http.params.BasicHttpParams"", which is like a map.
Should we delete this test or check the configuration against all valid HttpClient parameters?

Regards,
Christian
davsclaus:1261345488:2009-12-21T05:44:48.217+0000:1261345488:2009-12-21T05:44:48.217+0000:The {{HttpReferenceParameterTest}} works fine for me. Are you sure all you camel code is up-to-date from trunk? e.g. you need to build camel-core as well as it got stuff in there for the ref lookup?
davsclaus:1261345953:2009-12-21T05:52:33.673+0000:1261345953:2009-12-21T05:52:33.673+0000:Yeah for now lets delete the {{HttpInvalidHttpClientConfigurationTest}} test.

I can see its a {{Map}} structure now for configuring the client. Wonder how they validate the parameters, or do they just ignore unknown parameters?
How do you set the timeout on the client?

Later we can add support for grabbing httpClient.xxx parameters into a map.
{{httpClient.foo=123&httpClient.bar=cheese}}

Then we can grab those 2 parameters
{code}
foo=123
bar=cheese
{code}

And put the on the HttpParams map using
{code}
params.setParameter(""foo"", ""123"");
params.setParameter(""bar"", ""cheese"");
{code}

Then its easy for end users if they need a few http client parameters as they can specify that in the URL (as they could with http client 3.1)
muellerc:1261357403:2009-12-21T09:03:23.459+0000:1261357455:2009-12-21T09:04:15.070+0000:@Claus, I updated the HttpComponents createEndpoint method to

{code}
Map<String, Object> httpClientProperties = IntrospectionSupport.extractProperties(parameters, ""httpClient."");
for (Iterator<Map.Entry<String, Object>> it = httpClientProperties.entrySet().iterator(); it.hasNext();) {
    Map.Entry<String, Object> entry = it.next();
    String name = entry.getKey();
    clientParams.setParameter(name, httpClientProperties.get(name));
}
{code}

so, all httpClient options, provided in the endpoint url, will be set as HttpClient patameter. I have to check whether or not it is a problem for int, long, ... parameters.

My understanding how the HttpClient works is, that it takes the parameter he knows for some configurations and ignore the unknown parameters.

Regards,
Christian
davsclaus:1261357801:2009-12-21T09:10:01.597+0000:1261357801:2009-12-21T09:10:01.597+0000:Cool

Btw you can do
{code}
   clientParams.setParameter(entry.getKey(), entry.getValue());
{code}

Then you dont need to lookup the value once more :)
muellerc:1261358763:2009-12-21T09:26:03.478+0000:1261358763:2009-12-21T09:26:03.478+0000:@Claus, the HttpReferenceParameterTest also works fine for me, after I updated camel-core. Sorry for that...

muellerc:1261360742:2009-12-21T09:59:02.518+0000:1261360742:2009-12-21T09:59:02.518+0000:Thanks for the hint. :-) I updated the code.
Now, all 21 test run successfully.
I will provide some more test to ensure, that I dosn't brake down some functionality. :-)
I think a higher test coverage of camel-http (was 41,5%, is 45%, should be > 90%) is not a bad idea.

Regards,
Christian

davsclaus:1261361102:2009-12-21T10:05:02.248+0000:1261361102:2009-12-21T10:05:02.248+0000:The test coverage is much higher. camel-http is tested much more rigorously with camel-jetty. As jetty can act as the server it communicates with.

Its just that the default coverage reports is per maven module. If you combine camel-http and camel-jetty you will a hugh number such as 80-90%.
davsclaus:1261361148:2009-12-21T10:05:48.619+0000:1261361148:2009-12-21T10:05:48.619+0000:So next is camel-jetty to ensure it compiles as well and that all its tests also passes :)
muellerc:1261386562:2009-12-21T17:09:22.854+0000:1261386562:2009-12-21T17:09:22.854+0000:After some little changes, camel-jetty compiles, but some tests fails. :-(
So, I have to look where the problem is...
muellerc:1261387605:2009-12-21T17:26:45.506+0000:1261387605:2009-12-21T17:26:45.506+0000:@Claus, you asked for the client timeout some messages before. The ""problem"" is, that the timeout is configured as following:

{code}
httpParams.setParameter(ConnManagerPNames.MAX_CONNECTIONS_PER_ROUTE, new ConnPerRouteBean(5));
{code}

or alternative

{code}
ConnManagerParams.setMaxConnectionsPerRoute(httpParams, new ConnPerRouteBean(5));
{code}

The problem is, that the value is not a String or simple type. Do you have an idea, what is the best solution for this?

Regards,
Christian
davsclaus:1261391002:2009-12-21T18:23:22.746+0000:1261391002:2009-12-21T18:23:22.746+0000:Jesus this tops the most unfriendly configuration I have seen in long time. Wonder ever if they think that is easy to wire up with Spring XML ? 

And what does the {{ConPerRouteBean}} bring in that simply just {{5}} does not bring? At least a simple configuration with most common options where plain simple values can be used to set timeout, max connections and what not.

We can always make it a bit friendlier in the URI as we can offer easy to set options and mess with the ugly API underneath.

Christian does this apply for all the other kind of options to set on the HttpClient?
muellerc:1261391015:2009-12-21T18:23:35.754+0000:1261391015:2009-12-21T18:23:35.754+0000:Sorry Claus, I'm a little bit confusing in my last post.
That's not the configuration for the timeout, but another valid httpParam - which is not a String or primitive type.
At present, I prefere a builder which takes the map with the http client options and build the HttpParams object like:

{code}
public class HttpParamsBuilder {
    
    private Map<String, Object> clientHttpParams;
    
    public HttpParamsBuilder(Map<String, Object> clientHttpParams) {
        this.clientHttpParams = clientHttpParams;
    }

    /**
     * Build the HttpParams with the provided http client options
     *
     * @param client the client
     */
    public HttpParams toHttpParams() {
        HttpParams httpParams = new BasicHttpParams();
        
        if (clientHttpParams == null || clientHttpParams.isEmpty()) {
            return httpParams;
        }
        
        if (clientHttpParams.containsKey(ConnManagerPNames.MAX_CONNECTIONS_PER_ROUTE)) {
            String maxConnectionPerRoute = (String) clientHttpParams.get(ConnManagerPNames.MAX_CONNECTIONS_PER_ROUTE);
            ConnManagerParams.setMaxConnectionsPerRoute(httpParams, new ConnPerRouteBean(Integer.parseInt(maxConnectionPerRoute)));
        }
        
        if (clientHttpParams.containsKey(ConnManagerPNames.MAX_TOTAL_CONNECTIONS)) {
            String maxConnectionTotal = (String) clientHttpParams.get(ConnManagerPNames.MAX_TOTAL_CONNECTIONS);
            ConnManagerParams.setMaxTotalConnections(httpParams, Integer.parseInt(maxConnectionTotal));
        }
        
        if (clientHttpParams.containsKey(ConnManagerPNames.TIMEOUT)) {
            String timeout = (String) clientHttpParams.get(ConnManagerPNames.TIMEOUT);
            ConnManagerParams.setTimeout(httpParams, Long.parseLong(timeout));
        }
        
        return httpParams;
    }
}
{code}
muellerc:1261405026:2009-12-21T22:17:06.050+0000:1261405099:2009-12-21T22:18:19.781+0000:My ""solution"" is the following:

{code}
public class HttpParamsBuilder {
    
    private Map<String, Object> clientHttpParams;
    
    public HttpParamsBuilder(Map<String, Object> clientHttpParams) {
        this.clientHttpParams = clientHttpParams;
    }

    /**
     * Build the HttpParams with the provided http parameter
     *
     * @param client the client
     */
    public HttpParams toHttpParams() {
        HttpParams httpParams = new BasicHttpParams();
        Object value = null;
        
        if (clientHttpParams == null || clientHttpParams.isEmpty()) {
            return httpParams;
        }
        
        if (null != (value = clientHttpParams.remove(ConnManagerPNames.MAX_CONNECTIONS_PER_ROUTE))) {
            httpParams.setParameter(ConnManagerPNames.MAX_CONNECTIONS_PER_ROUTE, new ConnPerRouteBean(Integer.parseInt((String) value)));
        }
        
        if (null != (value = clientHttpParams.remove(ConnManagerPNames.MAX_TOTAL_CONNECTIONS))) {
            httpParams.setParameter(ConnManagerPNames.MAX_TOTAL_CONNECTIONS, Integer.parseInt((String) value));
        }
        
        if (null != (value = clientHttpParams.remove(ConnManagerPNames.TIMEOUT))) {
            httpParams.setParameter(ConnManagerPNames.TIMEOUT, Long.parseLong((String) value));
        }
        
        if (null != (value = clientHttpParams.remove(CoreConnectionPNames.SO_TIMEOUT))) {
            httpParams.setIntParameter(CoreConnectionPNames.SO_TIMEOUT, Integer.parseInt((String) value));
        }
        
        if (null != (value = clientHttpParams.remove(CoreConnectionPNames.TCP_NODELAY))) {
            httpParams.setBooleanParameter(CoreConnectionPNames.TCP_NODELAY, Boolean.parseBoolean((String) value));
        }
        
        if (null != (value = clientHttpParams.remove(CoreConnectionPNames.SOCKET_BUFFER_SIZE))) {
            httpParams.setIntParameter(CoreConnectionPNames.SOCKET_BUFFER_SIZE, Integer.parseInt((String) value));
        }
        
        if (null != (value = clientHttpParams.remove(CoreConnectionPNames.SO_LINGER))) {
            httpParams.setIntParameter(CoreConnectionPNames.SO_LINGER, Integer.parseInt((String) value));
        }
        
        if (null != (value = clientHttpParams.remove(CoreConnectionPNames.CONNECTION_TIMEOUT))) {
            httpParams.setIntParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, Integer.parseInt((String) value));
        }
        
        if (null != (value = clientHttpParams.remove(CoreConnectionPNames.STALE_CONNECTION_CHECK))) {
            httpParams.setBooleanParameter(CoreConnectionPNames.STALE_CONNECTION_CHECK, Boolean.parseBoolean((String) value));
        }
        
        if (null != (value = clientHttpParams.remove(CoreConnectionPNames.MAX_LINE_LENGTH))) {
            httpParams.setIntParameter(CoreConnectionPNames.MAX_LINE_LENGTH, Integer.parseInt((String) value));
        }
        
        if (null != (value = clientHttpParams.remove(CoreConnectionPNames.MAX_HEADER_COUNT))) {
            httpParams.setIntParameter(CoreConnectionPNames.MAX_HEADER_COUNT, Integer.parseInt((String) value));
        }
        
        if (null != (value = clientHttpParams.remove(CoreProtocolPNames.PROTOCOL_VERSION))) {
            if (""0.9"".equals(value)) {
                httpParams.setParameter(CoreProtocolPNames.PROTOCOL_VERSION, HttpVersion.HTTP_0_9);
            } else if (""1.0"".equals(value)) {
                httpParams.setParameter(CoreProtocolPNames.PROTOCOL_VERSION, HttpVersion.HTTP_1_0);
            } else if (""1.1"".equals(value)) {
                httpParams.setParameter(CoreProtocolPNames.PROTOCOL_VERSION, HttpVersion.HTTP_1_1);
            } else {
                throw new IllegalArgumentException(""'"" + value + ""' is not a valid value for property '"" + CoreProtocolPNames.PROTOCOL_VERSION + ""'"");
            }
        }
        
        if (null != (value = clientHttpParams.remove(CoreProtocolPNames.HTTP_ELEMENT_CHARSET))) {
            httpParams.setParameter(CoreProtocolPNames.HTTP_ELEMENT_CHARSET, (String) value);
        }
        
        if (null != (value = clientHttpParams.remove(CoreProtocolPNames.HTTP_CONTENT_CHARSET))) {
            httpParams.setParameter(CoreProtocolPNames.HTTP_CONTENT_CHARSET, (String) value);
        }
        
        if (null != (value = clientHttpParams.remove(CoreProtocolPNames.USER_AGENT))) {
            httpParams.setParameter(CoreProtocolPNames.USER_AGENT, (String) value);
        }
        
        if (null != (value = clientHttpParams.remove(CoreProtocolPNames.ORIGIN_SERVER))) {
            httpParams.setParameter(CoreProtocolPNames.ORIGIN_SERVER, (String) value);
        }
        
        if (null != (value = clientHttpParams.remove(CoreProtocolPNames.STRICT_TRANSFER_ENCODING))) {
            httpParams.setBooleanParameter(CoreProtocolPNames.STRICT_TRANSFER_ENCODING, Boolean.parseBoolean((String) value));
        }
        
        if (null != (value = clientHttpParams.remove(CoreProtocolPNames.USE_EXPECT_CONTINUE))) {
            httpParams.setBooleanParameter(CoreProtocolPNames.USE_EXPECT_CONTINUE, Boolean.parseBoolean((String) value));
        }
        
        if (null != (value = clientHttpParams.remove(CoreProtocolPNames.WAIT_FOR_CONTINUE))) {
            httpParams.setIntParameter(CoreProtocolPNames.WAIT_FOR_CONTINUE, Integer.parseInt((String) value));
        }
        
        // TODO: configure ClientPNames, AuthPNames, CookieSpecPNames, ConnConnectionPNames, ConnRoutePNames
        
        
        if (!clientHttpParams.isEmpty()) {
            throw new IllegalArgumentException(""Unknown parameters=["" + clientHttpParams + ""]"");
        }
        
        return httpParams;
    }
}
{code}

I'm not really happy with that, but I didn't have a better idea... :-(

Christian
davsclaus:1261430616:2009-12-22T05:23:36.550+0000:1261430616:2009-12-22T05:23:36.550+0000:Yeah not really nice as we then need to be constantly in sync with HTTP Client if they introduce new options etc.

Wonder if the neutral
{code}
httpParams.setParameter(key, value);
{code}

Works anyway. e.g. can you use it to set for example the {{CoreConnectionPNames.SO_TIMEOUT}} parameter?
I hope so as HttpParams could deal with the type conversions.

If so then the simple looping you had before is sufficient?
muellerc:1261448118:2009-12-22T10:15:18.262+0000:1261448118:2009-12-22T10:15:18.262+0000:Claus, that's what i mean... :-(

In org.apache.http.params.HttpConnectionParams.getSoTimeout(HttpParams), the code is the following:

{code}
    public static int getSoTimeout(final HttpParams params) {
        if (params == null) {
            throw new IllegalArgumentException(""HTTP parameters may not be null"");
        }
        return params.getIntParameter(CoreConnectionPNames.SO_TIMEOUT, 0);
    }
{code}

and org.apache.http.params.AbstractHttpParams.getIntParameter(String, int) is defined as:

{code}
    public int getIntParameter(final String name, int defaultValue) { 
        Object param = getParameter(name);
        if (param == null) {
            return defaultValue;
        }
        return ((Integer)param).intValue();
    }
{code}

So, if the so_timeout a String, we get a ClassCastException. There is no type conversion. I don't know why the way to configure the HttpClient is so inconvenient... :-(

Should I continue my work on HttpParamsBuilder or do you have a better idea (I'm offline from this evening until 12/28/2009)?

I also have to work on camel-http/camel-jetty, because 17 test fails in camel-jetty. All tests in camel-http succeed. If you agree, I will provide some more unit tests (may be not a camel route test) in camel-http because I think tests in camel-hhtp should fail, if there are issues in camel-http. What do you think?

Christian
olegk:1261454995:2009-12-22T12:09:55.231+0000:1261454995:2009-12-22T12:09:55.231+0000:> Jesus this tops the most unfriendly configuration I have seen in long time. 

DI framework unfriendly, maybe. However, this configuration API enables consumers of HttpClient services (1) selectively override client level settings at the request level and (2) introduce new or user defined parameters without breaking API compatibility

If you can think of a better approach that is more DI framework friendly while still allowing for 1 and 2, I would be in your debt

> Wonder ever if they think that is easy to wire up with Spring XML ?

Have you looked at the parameter bean classes?

http://hc.apache.org/httpcomponents-client/tutorial/html/fundamentals.html#d4e327

Oleg
davsclaus:1261459001:2009-12-22T13:16:41.901+0000:1261459001:2009-12-22T13:16:41.901+0000:> So, if the so_timeout a String, we get a ClassCastException. There is no type conversion. I don't know why the way to configure the HttpClient is so inconvenient... 

Yeah converting between String, Integer, Boolean, etc. for parameters is somewhat trivial and it would mean the world for end users if they can provide the values in e.g. plain text types. Eg. load options from a properties file and have it passed in as parameters.

I assume HTTP framework may deal with it internally as HTTP headers is passed as Strings but they most likely need to convert to/from those String types.
For example HTTP Status code to a integer.
davsclaus:1261459268:2009-12-22T13:21:08.117+0000:1261459268:2009-12-22T13:21:08.117+0000:@Oleg

Thanks for your pointers. I am just commenting on Christian as he is doing the work with upgrading to http client 4.0.


I did use 1 hour on an upgrade attempt like 6 months ago. From that work I recall the following:
The API in 4.0 is changed a bit / a fair bit AFAIR when I took a initial stab at upgrading the camel-http to 4.0. So I turned back at that time.
So I wonder if backwards comparability is really preserved anyway?


Anyway I think having unfriendly DI configuration is a _major_ mistake as a lot of users use it to configure and wire their apps.

davsclaus:1261459397:2009-12-22T13:23:17.583+0000:1261459397:2009-12-22T13:23:17.583+0000:Christian lets push this to 2.3 to keep camel-http using the older 3.1 client as the goal of Camel 2.2 is to be an easy upgrade over 2.1.

The goal of 2.2 is better shutdown and thread management.
And on top bug fixes and new features (which shouldn't influence existing features). Such as the new components you have contributed.


davsclaus:1261459884:2009-12-22T13:31:24.356+0000:1261459884:2009-12-22T13:31:24.356+0000:@Christian, @Oleg

@Oleg thank for the link. 

> HttpClient includes a number of bean classes that can used in order to initialize HttpParams objects using standard Java bean conventions.
This sounds interesting.

If we could know how many of these beans are, then we could use the Camel API to set those values automatic using its Introspection API.
Then I think we do not have the problem in camel with the _not so nice solution_ that Christian had to do.

Something like in HttpComponent in the createEndpoint method. Then we should be good to go.

{code}

        HttpClientParams clientParams = new HttpClientParams();

        IntrospectionSupport.setProperties(new HttpProtocolParamBean(params), parameters, ""httpClient."");
     IntrospectionSupport.setProperties(new HttpSomeOtherParamBean(params), parameters, ""httpClient."");
     IntrospectionSupport.setProperties(new HttpAndAnotherParamBean(params), parameters, ""httpClient."");

{code}
muellerc:1261460253:2009-12-22T13:37:33.053+0000:1261460253:2009-12-22T13:37:33.053+0000:Ok, lets push to 2.3
In the meantime, I will write some unit tests for camel-http for a safer and easier migration to httpclient 4.0..

Anything else I could do for camel 2.2?

And a merry Christmas... :-)
olegk:1261461323:2009-12-22T13:55:23.889+0000:1261461323:2009-12-22T13:55:23.889+0000:@Claus

> The API in 4.0 is changed a bit / a fair bit AFAIR when I took a initial stab at upgrading the camel-http to 4.0. So I turned back at that time.

The API in 4.0 was meant to change 'a fair bit' because the old core components dated back to the HttpClient 1.0 days had degraded into an utter incomprehensible mess no one was willing to maintain / work with. 

> So I wonder if backwards comparability is really preserved anyway?

No, it was not, because it was not meant to. HttpClient 4.0 was meant to be a complete ground-up rewrite. This was a collective decision of HC maintainers made as early as year 2004 (well before HttpClient 2.0 went final)

> Anyway I think having unfriendly DI configuration is a major mistake as a lot of users use it to configure and wire their apps.

Like it was a major mistake to not have hierarchical configuration back in 2004 to some people. I cannot make everyone happy, can I? The biggest problem is always the most immediate one. 

Anyways, it is fairly easy to wire up HTTP params with Spring when using parameter beans. It is even easier with Guice

Oleg
muellerc:1261461625:2009-12-22T14:00:25.289+0000:1261461625:2009-12-22T14:00:25.289+0000:@Oleg thank for the link. I will study the documentation. May be we can find a better solution for camel with your help...
davsclaus:1261528186:2009-12-23T08:29:46.341+0000:1261528186:2009-12-23T08:29:46.341+0000:@Oleg

I have much respect for the bold move to do a group-up rewrite. That is fantastic that you guys had the commitment to do that. Often a framework of the size of HTTP could have been large and thus much work to do. 

That makes much sense that upgrading from 3.1 to 4.0 does take a bit of work on our side as well :)


> Anyways, it is fairly easy to wire up HTTP params with Spring when using parameter beans. It is even easier with Guice
Yeah those beans seems to help. Wonder though if you could have one bean for all configurations, but I guess maybe that leads to one to _giant_ bean?

Thanks for the help, lets hope that Christian can use those beans to much easier configure HTTP Client from the free from URI parameters on the Camel endpoint.


olegk:1261533599:2009-12-23T09:59:59.061+0000:1261533599:2009-12-23T09:59:59.061+0000:@Christian, @Claus

I am well aware that upgrading from 3.1 to 4.0 may be painful as it will most certainly require certain adjustments to Camel HTTP transport given a radically different API and therefore I am willing to help.

As far as configuration is concerned the general recommendation to all users of HttpClient is to not attempt to tweak each an every parameter imaginable but rather let HttpClient pick up the default settings based on the execution context. You might want to provide a configuration bean for just the most essential parameters relevant for Camel: protocol version, socket and connect timeouts, connection pool settings. For advanced use cases you may want to provide a means of injecting a custom pre-configured HttpClient instance. The runtime behavior of HttpClient 4.0 can be customized in different ways, HTTP parameters being one among several. For instance, handling of more complex HTTP protocol aspects can be customized by replacing standard or adding custom protocol interceptors. I am not sure it is worthwhile trying to control each and every aspect of HttpClient initialization through Camel configuration. Just let the users inject an existing HttpClient instance and be done with it.

Cheers

Oleg
muellerc:1262587121:2010-01-04T14:38:41.532+0000:1262587121:2010-01-04T14:38:41.532+0000:@Oleg, after i read the httpclient documentation, the life is a little bit easier. :-)

With HttpProtocolParamBean and HttpConnectionParamBean I think we are able to configure 10 HTTP client parameter with the DI style and Camels type converter capabilities.

I think we can't use the method HttpProtocolParamBean.setVersion(HttpVersion), because HttpVersion is not a String or primitive. But we could contribute a HttpProtocolParamBean.setVersion(String) method, which accepts a string in the form ""major.minor"" like ""1.1"" and call the (new) method in HttpVersion.forVersion(String)
{code}
public class HttpProtocolParamBean extends HttpAbstractParamBean {
    
    public HttpProtocolParamBean (final HttpParams params) {
        super(params);
    }

    public void setVersion (final String version) {
        HttpProtocolParams.setVersion(params, HttpVersion.forVersion(version));
    }    
}
{code}

{code}
public final class HttpVersion extends ProtocolVersion
    implements Serializable {

    public ProtocolVersion forVersion(String version) {
        // parse string
        // set major and minor version
        forVersion(major, minor);
    }
}
{code}

But what is with the other 26 HTTP client params? Should/Could we contribute ParamBean's for these params to the httpclient project?
olegk:1262589073:2010-01-04T15:11:13.575+0000:1262589073:2010-01-04T15:11:13.575+0000:@Christian,

> I think we can't use the method HttpProtocolParamBean.setVersion(HttpVersion), because HttpVersion is not a String or primitive

I am not entirely sure why this is a problem. Why could not you just use a custom PropertyEditor to convert from String to HttpVersion, if you are using Spring DI, or similar mechanism, if you are using some other DI framework? I personally think this would make for a much cleaner solution.

> But what is with the other 26 HTTP client params? Should/Could we contribute ParamBean's for these params to the httpclient project?

You might be better off maintaining a small number of parameter beans for those parameters Camel cares about within the project. Alternatively we could consider starting an optional httpclient-spring or httpclient-di module within HC for Spring / DI specific classes.

Oleg
muellerc:1262600936:2010-01-04T18:28:56.661+0000:1262600936:2010-01-04T18:28:56.661+0000:@Claus,

as I wrote in one of my posts before, I think it's a good idea to have a good test coverage in camel-http itself. Otherwise it's difficult to find the real problem after we upgrade to httpclient 4.0 (because we have to change code in camel-http and camel-jetty), if some tests in camel-jetty fail but all camel-http tests succeed.

I started with some simple unit tests for the helper classes and I think I found a bug in org.apache.camel.component.http.helper.GZIPHelper. I added a patch file with unit test classes which show the problem. I also added a patch file with a fix for this problem.

After that, I would like to start to write some tests like we have in camel-ftps. We could start a local http test server and send our test requests to this server. What do you think about this?

Regards,
Christian
davsclaus:1262741899:2010-01-06T09:38:19.292+0000:1262741899:2010-01-06T09:38:19.292+0000:@Christian

Thanks for the patch. I have added most of the unit tests in rev: 896358.
I think the existing gzip code is fine as it will convert the payload to gzip based on InputStream or byte[] sources.

It appears as your patch assumes the byte[] is *already* in gzip format which is not how its meant to work. What you do is to set whatever payload you got and then camel-http will compress that to gzip. The payload can either by convertable to a stream or to byte[] (eg often from a a String).


davsclaus:1262742053:2010-01-06T09:40:53.305+0000:1262742053:2010-01-06T09:40:53.305+0000:@Christian

Yeah it would be ideal if each component could test itself 100% in isolation. But that is not always easy and doable without much effort.

That is why camel-http is tested using camel-jetty where jetty acts as the Server it must communicate with.
We do also have a tests/camel-itest module where we test multiple camel components together etc.

You are much welcome to contribute new tests but I fail to see how you can do that easily with camel-http without having to bring in Jetty and start it up and handle how to validate correct input received and return expected reply as well. Using camel-http + camel-jetty makes that much easier to do.
olegk:1262774765:2010-01-06T18:46:05.760+0000:1262774765:2010-01-06T18:46:05.760+0000:> Yeah it would be ideal if each component could test itself 100% in isolation. 

For what it is worth to you, HttpCore - a set of low level components HttpClient is based upon - has a full support for server side HTTP. In fact we use extensively for HttpClient test coverage [1]. Theoretically you could use the same framework to test camel-http, thus making additional external dependencies unnecessary.

Feel free to ignore me.

Oleg

[1]
http://svn.apache.org/repos/asf/httpcomponents/httpclient/branches/4.0.x/httpclient/src/test/java/org/apache/http/localserver/LocalTestServer.java
http://svn.apache.org/repos/asf/httpcomponents/httpclient/branches/4.0.x/httpclient/src/test/java/org/apache/http/client/protocol/TestRedirects.java
muellerc:1262828203:2010-01-07T09:36:43.171+0000:1262828203:2010-01-07T09:36:43.171+0000:@Oleg,

I found the tests and that's the reason why I would like to start to write some more tests for camel-http... :-)

Christian
muellerc:1263550786:2010-01-15T18:19:46.916+0000:1263550948:2010-01-15T18:22:28.798+0000:@Oleg,
first of all, I will say thank you for the good documentation of httpclient you pointed out.

@Claus,
after studding the documentation and the tests from httpclient, I made the following plan:
1. Develop a abstract base class for all camel-http tests which starts and stops the local http test server from the httpclient project (called HttpServerTestSupport). Develop this with httpclient 4.0.1, so that we dosn't have to change the test if we migrate to 4.0.1 with camel-http. -> finished
2. Change the existing tests to subclass HttpServerTestSupport and send the requests to this server (instead of google search). -> in progress
3. Add tests for authentication, compression, using proxy, https, ... -> in progress
4. Migrate camel-http to httpclient 4.0.1.

For a better understanding, I post the HttpServerTestSupport, one migrated simple http GET test and one http handler which validate the request against our expectations and set the propper response:

{code:title=org.apache.camel.component.http.HttpServerTestSupport.java|borderStyle=solid}
public abstract class HttpServerTestSupport extends CamelTestSupport {

	protected LocalTestServer localServer;
	
    @Override
    public void setUp() throws Exception {
        localServer = new LocalTestServer(getBasicHttpProcessor(), getHttpParams());
        registerHandlers(localServer);
        localServer.start();
        
        super.setUp();
    }
	
	@Override
    public void tearDown() throws Exception {
    	super.tearDown();
    	
        if (localServer != null) {
            localServer.stop();
        }
    }
	
    protected BasicHttpProcessor getBasicHttpProcessor() {
		return null;
	}
    
	protected HttpParams getHttpParams() {
		return null;
	}
	
	protected void registerHandlers(LocalTestServer server) {
	}
	
	/**
	 * Obtains the host name of the local test server.
	 * 
	 * @return hostName
	 */
	protected String getHostName() {
		return localServer.getServiceHostName();
	}
	
	/**
	 * Obtains the port of the local test server.
	 * 
	 * @return port
	 */
	protected int getPort() {
		return localServer.getServicePort();
	}
}
{code}

I modified the existing test to subclass HttpServerTestSupport and added tree new header expectations:

{code:title=org.apache.camel.component.http.HttpGetTest.java|borderStyle=solid}
public class HttpGetTest extends HttpServerTestSupport {
    protected String expectedText = ""activemq"";
    
    @Test
    public void testHttpGet() throws Exception {
        MockEndpoint mockEndpoint = resolveMandatoryEndpoint(""mock:results"", MockEndpoint.class);
        mockEndpoint.expectedMessageCount(1);

        template.sendBody(""direct:start"", null);

        mockEndpoint.assertIsSatisfied();
        List<Exchange> list = mockEndpoint.getReceivedExchanges();
        Exchange exchange = list.get(0);
        assertNotNull(""exchange"", exchange);

        Message in = exchange.getIn();
        assertNotNull(""in"", in);

        Map<String, Object> headers = in.getHeaders();

        log.debug(""Headers: "" + headers);
        checkHeaders(headers);       

        String body = in.getBody(String.class);

        log.debug(""Body: "" + body);
        assertNotNull(""Should have a body!"", body);
        assertTrue(""body should contain: "" + expectedText, body.contains(expectedText));
    }

    protected void checkHeaders(Map<String, Object> headers) {
        assertTrue(""Should be more than one header but was: "" + headers, headers.size() > 0);
        
        assertEquals(HttpStatus.SC_OK, headers.get(Exchange.HTTP_RESPONSE_CODE));
        assertEquals(""8"", headers.get(""Content-Length""));
        assertEquals(""text/plain; charset=ASCII"", headers.get(""Content-Type""));
    }
    
    @Override
	protected void registerHandlers(LocalTestServer server) {
		server.register(""/search"", new SimpleValidationHandler(""GET"", ""hl=en&q=activemq"", null, expectedText));
	}

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            public void configure() {
                from(""direct:start"").setHeader(Exchange.HTTP_QUERY, constant(""hl=en&q=activemq""))
                    .to(""http://"" + getHostName() + "":"" + getPort() + ""/search"").to(""mock:results"");
            }
        };
    }
}
{code}

The org.apache.http.protocol.HttpRequestHandler, which is responsible for processing the request (and validation against our expectations):

{code:title=org.apache.camel.component.http.handler.SimpleValidationHandler.java|borderStyle=solid}
public class SimpleValidationHandler implements HttpRequestHandler {
	
	private String expectedMethod;
	private String expectedQuery;
	private Object expectedContent;
	private String responseContent;
	
	public SimpleValidationHandler(String expectedMethod, String expectedQuery, Object expectedContent, String responseContent) {
		this.expectedMethod = expectedMethod;
		this.expectedQuery = expectedQuery;
		this.expectedContent = expectedContent;
		this.responseContent = responseContent;
	}

    public void handle(final HttpRequest request, final HttpResponse response, final HttpContext context) throws HttpException, IOException {
    	if (expectedMethod != null && !expectedMethod.equals(request.getRequestLine().getMethod())) {
    		response.setStatusCode(HttpStatus.SC_METHOD_FAILURE);
    		return;
    	}
    	
        try {
			if (expectedQuery != null && !expectedQuery.equals(new URI(request.getRequestLine().getUri()).getQuery())) {
			    response.setStatusCode(HttpStatus.SC_BAD_REQUEST);
			    return;
			}
		} catch (URISyntaxException e) {
			throw new IOException(e);
		}
		
		if (expectedContent != null) {
			RequestEntity entity = ((EntityEnclosingMethod) request).getRequestEntity();
			if (entity instanceof StringRequestEntity) {
				String content = ((StringRequestEntity) entity).getContent();
				if (!expectedContent.equals(content)) {
					response.setStatusCode(HttpStatus.SC_BAD_REQUEST);
				}
			} else {
				response.setStatusCode(HttpStatus.SC_BAD_REQUEST);
			}
		}
        
        response.setStatusCode(HttpStatus.SC_OK);
        response.setEntity(new StringEntity(responseContent, HTTP.ASCII));
    }
}
{code}

Analog to this, I have ready the authentication test and authentication handler.

What do you think?

Regards,
Christian
davsclaus:1263603937:2010-01-16T09:05:37.896+0000:1263603937:2010-01-16T09:05:37.896+0000:+1

Christian great work, yeah its a good plan. 
muellerc:1264843636:2010-01-30T17:27:16.125+0000:1264843636:2010-01-30T17:27:16.125+0000:Hey Claus,

I finished my work on the unit tests (see attachment). I increased the number of tests from 40 to 68. Now, 
- all of the camel-http tests run without an internet connection
- we have a test for compression
- we have tests for authentication
- we have tests for working with proxies
- we have tests for http over ssl
- we have tests for all http methods
- we have tests for the 'charset' exchange property
- we have tests for the socket timeout
- we have tests for the 'throwExceptionOnFailure' option

I don't know, if you want to apply the tests by now for the 2.2 release or not before 2.3. I added the dependencies to http client 4.0.1 temporarily in the camel-http pom.xml, so we could have dependencies to both versions (3.1 for the component and 4.0.1 for the tests).

During writing the tests, I thought about the following thinks. What do you think?
- Because camel-http should not used as a consumer, should we remove the HttpConsumer and the HttpPollingConsumer in 2.3 and throw an exception, if somebody uses camel-http in a from route?
- Because httpClient changed the keys of the http params, we also changes the documentation for camel-http httpClient params and our users has to change there applications. We do not map the old names to the new ones.
- I think the documentation for configuring the charset is wrong. Setting the charset with the following url 'httpClient.contentCharset=ISO-8859-1' has no impact (please have a look on HttpCharsetTest.sendCharsetInQuery). EntityEnclosingMethod (line 499) writes the content of the StringRequestEntity, which is a byte array generated with the os default charset, and not with the charset we have configured in the http client.

@Oleg: Which impact has the property 'contentCharset' in HttpClientParams on the client site (version 3.1)? StringRequestEntity don't use this parameter to generate the byte array...

Regards, 
Christian
olegk:1264862088:2010-01-30T22:34:48.904+0000:1264862088:2010-01-30T22:34:48.904+0000:@Christian

> Which impact has the property 'contentCharset' in HttpClientParams on the client site (version 3.1)?
> StringRequestEntity don't use this parameter to generate the byte array...

This parameter is used when an HTTP response message does not explicitly specify a charset of the response body.

Oleg
mrt1nz:1264898838:2010-01-31T08:47:18.994+0000:1264898838:2010-01-31T08:47:18.994+0000:@Christian

> Because camel-http should not used as a consumer, should we remove the HttpConsumer and the 
> HttpPollingConsumer in 2.3 and throw an exception, if somebody uses camel-http in a from route?

camel-servlet and camel-gae (ghttp and gtask components) are using the consumer, so we need to keep it. 

Regards,
Martin



davsclaus:1264900845:2010-01-31T09:20:45.092+0000:1264900845:2010-01-31T09:20:45.092+0000:And camel-jetty as well AFAIR

Christian good work, we will get that into 2.3.
muellerc:1265075191:2010-02-02T09:46:31.908+0000:1265075191:2010-02-02T09:46:31.908+0000:@Claus,

also camel-cxf and camel-restlet have direct dependencies to commons-httpclient:commons-httpclient:jar:3.1.

{code}
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: HTTP
[INFO]    task-segment: [dependency:tree]
[INFO] ------------------------------------------------------------------------
[INFO] [dependency:tree {execution: default-cli}]
[INFO] org.apache.camel:camel-http:bundle:2.2-SNAPSHOT
...
[INFO] +- commons-httpclient:commons-httpclient:jar:3.1:compile
{code}

{code}
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: CXF
[INFO]    task-segment: [dependency:tree]
[INFO] ------------------------------------------------------------------------
[INFO] [dependency:tree {execution: default-cli}]
[INFO] org.apache.camel:camel-cxf:bundle:2.2-SNAPSHOT
...
[INFO] +- commons-httpclient:commons-httpclient:jar:3.1:test
{code}

{code}
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Restlet
[INFO]    task-segment: [dependency:tree]
[INFO] ------------------------------------------------------------------------
[INFO] [dependency:tree {execution: default-cli}]
[INFO] org.apache.camel:camel-restlet:bundle:2.2-SNAPSHOT
...
[INFO] +- commons-httpclient:commons-httpclient:jar:3.1:test (scope not updated to compile)
{code}

I would prefers to add a new dependency to org.apache.httpcomponents.httpclient.4.0.1 in camel-parent with this issue and open 2 other issues for camel-cxf and camel-restlet. With the last patch of this both, we remove the dependency to commons-httpclient:commons-httpclient:jar:3.1.

What do you think?

Regards,
Christian
davsclaus:1265078872:2010-02-02T10:47:52.818+0000:1265078872:2010-02-02T10:47:52.818+0000:CXF and Reslet is using commons httpclient for *testing* only. But it will of course be nice to have it all upgraded to use v4.0.1. But the important aspect of this ticket was to get camel-http to use client 4.0.1 so camel end users benefit from this.
muellerc:1265081913:2010-02-02T11:38:33.013+0000:1265081913:2010-02-02T11:38:33.013+0000:I understood. Because this ticket should not affect camel-cxf and
camel-restlet, I opened two new tickets for these components:
https://issues.apache.org/activemq/browse/CAMEL-2437
https://issues.apache.org/activemq/browse/CAMEL-2438

Regards,
Christian

njiang:1265082837:2010-02-02T11:53:57.642+0000:1265082837:2010-02-02T11:53:57.642+0000:Hi Christian

You don't need to change anything of the camel-cxf and camel-restlet.. 
When your patch applied into camel-http, the camel-cxf and camel-restlet will pick up httpclient 4.0.1 automatically.
Because the httpclient dependency of camel-cxf and camel-restlet is introduced from camel-http.

muellerc:1265265787:2010-02-04T14:43:07.712+0000:1265265787:2010-02-04T14:43:07.712+0000:Willem,
camel-restlet and camel-cxf have direct dependencies to commons-httpclient (scope test). That's the reason, why I opened to new issues to upgrade these components after we upgraded camel-http.
muellerc:1265266111:2010-02-04T14:48:31.577+0000:1265266111:2010-02-04T14:48:31.577+0000:Oleg,
this means, that the parameter 'contentCharset' in HttpClientParams has no impact how the request is encoded? It is only used for encoding the response, if the response entity hasn't this information? Only to clarify this for me...
Thanks

olegk:1265286227:2010-02-04T20:23:47.113+0000:1265286227:2010-02-04T20:23:47.113+0000:@Christian

> the parameter 'contentCharset' in HttpClientParams has no impact how the request is encoded? 
> It is only used for encoding the response, if the response entity hasn't this information?

Yes, that is exactly the case.

Oleg


muellerc:1265294023:2010-02-04T22:33:43.698+0000:1265294023:2010-02-04T22:33:43.698+0000:Thanks Oleg.
I updated the camel-http wiki page.
muellerc:1265897722:2010-02-11T22:15:22.998+0000:1265897722:2010-02-11T22:15:22.998+0000:Claus,
I finished the upgrade to httpClient 4.0.1. It was a bigger step than I thought. Because camel-jetty, camel-servlet and camel-gae also use camel-http and some classes from the old httpClient, I must also patch this components. I split the patch into patches for the individual components, because I think it's easier for you to show what I have changed.

The keystore 'keystore.ks' (borrowed from camel-jetty) must be copied into the folder 'components/camel-http/src/test/resources'.

May be we have to discuss one topic: In org.apache.camel.component.http.HttpComponent.configureHttpParams() I use some *Bean classes, provided from the new httpClient library to configure the org.apache.http.params.HttpParams (as we discussed before). But not for all org.apache.http.params.HttpParams parameter, a *Bean class is provided to set the params. Should we do provide a *Bean class for this parameter (-1) or should we document this in the wiki (+1)? Because the user can provide a org.apache.camel.component.http.HttpClientConfigurer, he can do some advanced configuration in this way.

If you agree with the patch, I will update the wiki page in the next week.

Regards,
Christian
muellerc:1266471568:2010-02-18T13:39:28.371+0000:1266471568:2010-02-18T13:39:28.371+0000:Attached my eclipse camel-http project, as Claus requested for this big patch.
muellerc:1266471938:2010-02-18T13:45:38.625+0000:1266471938:2010-02-18T13:45:38.625+0000:Attached my eclipse camel-jetty project, as Claus requested for this big patch.
davsclaus:1266817078:2010-02-22T13:37:58.899+0000:1266817078:2010-02-22T13:37:58.899+0000:I have started looking into this
davsclaus:1266817441:2010-02-22T13:44:01.182+0000:1266817441:2010-02-22T13:44:01.182+0000:Is there an OSGi bundle for Apache HTTP Client 4.0.1? 
davsclaus:1266820363:2010-02-22T14:32:43.425+0000:1266820363:2010-02-22T14:32:43.425+0000:Got all the patches sorted now. Now the bug questions is if it all works well together :)
davsclaus:1266821508:2010-02-22T14:51:48.516+0000:1266821508:2010-02-22T14:51:48.516+0000:camel-atom must use http client 3.1, as abdera uses it.
davsclaus:1266821996:2010-02-22T14:59:56.016+0000:1266821996:2010-02-22T14:59:56.016+0000:camel-restlet must use http client 3.1, as restlet uses it
davsclaus:1266822053:2010-02-22T15:00:53.063+0000:1266822053:2010-02-22T15:00:53.063+0000:But restlet 2.0.x has upgraded to HTTP Client 4.0.1 so they are just keeping restlet 1.1.x on the 3.1 version
davsclaus:1266877983:2010-02-23T06:33:03.917+0000:1266877983:2010-02-23T06:33:03.917+0000:@Christian
The {{/<camel_root>/tests}} have not been patched.

I frankly deleted the http related tests as they where configuring HTTP Client from Spring XML.
This is easy to do in 3.1 but *hard* to do in 4.0.1.

For example changing the default max 2 connections per connection to eg 5 requires a lot more work according to
http://hc.apache.org/httpcomponents-client/tutorial/html/connmgmt.html#d4e558


@Oleg
I wonder why you must provide a SchemeRegistry to the ThreadSafeClientConnectionManager etc.? Is it not possible to let it default create its own registry using http port 80 and https at 443.? I see a convention over configuration win there?
http://hc.apache.org/httpcomponents-client/tutorial/html/connmgmt.html#d4e558

Maybe I missed something but I only used 10 min to browse the docu and all the examples I saw was pure Java configured examples.


muellerc:1266885509:2010-02-23T08:38:29.361+0000:1266885509:2010-02-23T08:38:29.361+0000:Claus,
One notice: At beginning to implement/update httpClient, I created the Schema registry for http and https by default. The problem here was, that once created the 'org.apache.http.conn.ssl.SSLSocketFactory' with the static method 'getSocketFactory()', it will reuse the underling 'javax.net.ssl.SSLSocketFactory'. This means, that if the system properties 'javax.net.ssl.*' is set after the first httpClient instance is created, these properties has no effect (Because the first camel-http tests uses http, I run into this trouble). That's the reason, why I only register the Schema which is used and not both (by default).

Should I do something (patch the tests in '/<camel_root>/tests')? Sorry for the incomplete patch... :-(
davsclaus:1266885767:2010-02-23T08:42:47.127+0000:1266885767:2010-02-23T08:42:47.127+0000:Christian

Thanks for the info. Its fine with the itests. You are welcome to try to fix those http tests in itest so we can add them back later. For now they are deleted.
The problem is to setup the connection manager in Spring XML is not easy. 

I do think we should offer end users to more easy to configure the SafeThreadConnectionManager options such as its various pool numbers.
But we can add that after this big patch.
davsclaus:1266886909:2010-02-23T09:01:49.978+0000:1266886909:2010-02-23T09:01:49.978+0000:Applied patch with huge thanks to Christian Mueller.

trunk: 915247.


Still to do is to change the features.xml to use the http-client-osgi.4.0.1.jar.
davsclaus:1266887396:2010-02-23T09:09:56.469+0000:1266887396:2010-02-23T09:09:56.469+0000:trunk: 915252.

Upgraded the features.xml file to use http-client-osgi.4.0.1.jar.
muellerc:1266887622:2010-02-23T09:13:42.370+0000:1266887622:2010-02-23T09:13:42.370+0000:Thanks Claus. I will also update the wiki page...
davsclaus:1266888498:2010-02-23T09:28:18.994+0000:1266888498:2010-02-23T09:28:18.994+0000:[10:29]  <cibsen> gnodet I tried to install the httpclient-osgi bundle in FUSE ESB 4.2
[10:29]  <cibsen> [ 179] [Installed  ] [            ] [       ] [   60] Apache HttpClient OSGi bundle (4.0.1)
[10:29]  <cibsen> karaf@root> osgi:start 179
[10:29]  <cibsen> The bundle could not be resolved. Reason: Missing Constraint: Import-Package: org.apache.http; version=""0.0.0""
[10:29]  <cibsen> using
[10:29]  <cibsen> osgi:install mvn:org.apache.httpcomponents/httpclient-osgi/4.0.1
[10:30]  <cibsen> I recon they have some issue in their MANIFEST.MF file?

davsclaus:1266888850:2010-02-23T09:34:10.328+0000:1266888850:2010-02-23T09:34:10.328+0000:Ah httpcore-osgi.jar must be installed beforehand

trunk: 915257.
davsclaus:1266892792:2010-02-23T10:39:52.244+0000:1266892792:2010-02-23T10:39:52.244+0000:We should reuse http client as its meant to be shared among multiple producers, so when the component is shutting down we can shutdown the connection manager.
davsclaus:1266895765:2010-02-23T11:29:25.199+0000:1266895765:2010-02-23T11:29:25.199+0000:trunk: 915287.

Using a shared HttpClient and ThreadSafeClientConnManager.
Made it easier to configure maxTotalConnections and connectionsPerRoute.
Shutting down properly.
davsclaus:1266900530:2010-02-23T12:48:50.598+0000:1266900530:2010-02-23T12:48:50.598+0000:trunk: 915312.

Polished a bit.

I have updated the http wiki page.

I have set the default http threadpool to allow 200 concurrent connections with 20 per route.
This is similar to Jetty as well and the thread pool is shared so it makes sense to have it at 200 or so.


Christian feel free to update wiki page and/or provide patches for additional tests.
olegk:1266900649:2010-02-23T12:50:49.429+0000:1266900649:2010-02-23T12:50:49.429+0000:@Claus

I do have to admit ThreadSafeClientConnManager configuration can be a real PITA in 4.0. ThreadSafeClientConnManager in 4.1 can be configured using setter methods instead of HttpParams. I could also add a default no arg constructor that creates an instance of SchemeRegistry internally and populates it with default default socket factories for HTTP and HTTPS schemes.

Oleg
davsclaus:1266903412:2010-02-23T13:36:52.761+0000:1266903412:2010-02-23T13:36:52.761+0000:@Oleg

Yeah I think that would be cool if {{ThreadSafeClientConnManager}} is easier to configure using Spring XML style. End users may want to define this in XML and have eg. options for the pool settings in properties file with the help from Spring property placeholder.

At Camel I have expose the two options
- maxTotalConnections
- connectionsPerRoute
on the Camel HttpComponent which allows people to fairly easy configure those options how they like.
davsclaus:1266903441:2010-02-23T13:37:21.608+0000:1266903441:2010-02-23T13:37:21.608+0000:@Oleg

And I assume most people will use the {{ThreadSafeClientConnManager}} as its performant and offers pooling.
davsclaus:1266961673:2010-02-24T05:47:53.308+0000:1266961673:2010-02-24T05:47:53.308+0000:trunk: 915689.
muellerc:1267336456:2010-02-28T13:54:16.017+0000:1267336456:2010-02-28T13:54:16.017+0000:Claus,
I attached a patch which contains the upgraded old camel-itest, which you removed. Now, this tests also uses a local http test server (and no longer http://google.com).
muellerc:1267353021:2010-02-28T18:30:21.675+0000:1267353021:2010-02-28T18:30:21.675+0000:Claus,
I attached a patch which contains the upgraded old camel-itest, which you removed. I has build the first patch without running the sourcecheck profile.  So, that's my second trial...
Now, these tests also uses a local http test server (and no longer http://google.com). 
davsclaus:1267412133:2010-03-01T10:55:33.449+0000:1267412133:2010-03-01T10:55:33.449+0000:Thanks Christian for provided the patch for the itests.

trunk: 917465.
davsclaus:1303610473:2011-04-24T10:01:13.011+0000:1303610473:2011-04-24T10:01:13.011+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-1529,Bug,Minor,None,2.0-M3,"
None
",Closed,Fixed,2.0-M3,Willem Jiang,Cameron Braid,0,0,2009-04-14 11:50:55+00:00,2009-11-21 11:59:09+00:00,"[    SpringOsgiExtenderThread-4] PackageHelper                  DEBUG Failed to find out org.springframework.jms version: java.lang.NullPointerException
java.lang.NullPointerException
	at org.apache.camel.util.PackageHelper.isValidVersion(PackageHelper.java:47)
	at org.apache.camel.component.jms.JmsConfiguration.defaultCacheLevel(JmsConfiguration.java:1036)
	at org.apache.camel.component.jms.JmsConfiguration.configureMessageListenerContainer(JmsConfiguration.java:942)
	at org.apache.camel.component.jms.JmsConfiguration.createMessageListenerContainer(JmsConfiguration.java:417)
	at org.apache.camel.component.jms.JmsEndpoint.createConsumer(JmsEndpoint.java:161)
	at org.apache.camel.component.jms.JmsEndpoint.createConsumer(JmsEndpoint.java:51)
	at org.apache.camel.impl.EventDrivenConsumerRoute.addServices(EventDrivenConsumerRoute.java:61)
	at org.apache.camel.Route.getServicesForRoute(Route.java:74)
	at org.apache.camel.impl.RouteService.doStart(RouteService.java:77)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:54)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:773)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:94)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:113)
	at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:78)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:76)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:274)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:736)
	at org.springframework.osgi.context.support.AbstractOsgiBundleApplicationContext.finishRefresh(AbstractOsgiBundleApplicationContext.java:235)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$4.run(AbstractDelegatedExecutionApplicationContext.java:358)
	at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:320)
	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:136)
	at java.lang.Thread.run(Thread.java:619)


isValidVersion fortunately returns true when an exception occurs, so it gets passed this check anyway.","davsclaus:1240021918:2009-04-18T10:31:58.469+0000:1240021918:2009-04-18T10:31:58.469+0000:Willem something for you to look at in the OSGi land.

As the application runs fine I have lowered the priority. But would be nice to get the exception fixed so the log isnt spammed.
njiang:1240440605:2009-04-23T06:50:05.825+0000:1240440605:2009-04-23T06:50:05.825+0000:Since spring provides OSGi bundle after Spring 2.5.5, and  JmsConfiguration uses PackageHelper to check if the Spring version upper than 2.5.1.
 I'd like to add check of Null Point in  PackageHelper to walk around this issue.
njiang:1240443500:2009-04-23T07:38:20.912+0000:1240443500:2009-04-23T07:38:20.912+0000:trunk
 http://svn.apache.org/viewvc?rev=767824&view=rev
camel-1.x
 http://svn.apache.org/viewvc?rev=767829&view=rev
davsclaus:1258775949:2009-11-21T11:59:09.450+0000:1258775949:2009-11-21T11:59:09.450+0000:Closing all 2.0M3 tickets"
0,CAMEL-1498,Bug,Minor,1.6.0,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2009-03-28 10:49:34+00:00,2009-11-21 11:57:57+00:00,"If you for instance forget to add a colon as the scheme name, then Camel cannot find a component and will return null.


This happens typically when you mistype an URI: eg activemq.queue.foo instead of correct activemq:queue.foo",davsclaus:1258775877:2009-11-21T11:57:57.073+0000:1258775877:2009-11-21T11:57:57.073+0000:Closing all 2.0M2 tickets
0,CAMEL-1497,Bug,Major,1.6.0,"1.6.1, 2.0-M2","
None
",Closed,Fixed,"1.6.1, 2.0-M2",Claus Ibsen,Claus Ibsen,0,0,2009-03-28 10:37:52+00:00,2009-11-21 11:57:57+00:00,"The timeout values to set on Spring JmsTemplate is wrong. We should uses the provided constants on JmsTemplate for this



	/**
	 * Timeout value indicating that a receive operation should
	 * check if a message is immediately available without blocking.
	 */
	public static final long RECEIVE_TIMEOUT_NO_WAIT = -1;

	/**
	 * Timeout value indicating a blocking receive without timeout.
	 */
	public static final long RECEIVE_TIMEOUT_INDEFINITE_WAIT = 0;




Is the correct values. Looks like the values was reverted in the camel-jms code","davsclaus:1238209190:2009-03-28T10:59:50.898+0000:1238209190:2009-03-28T10:59:50.898+0000:trunk: 759453.
1.x: 759454.
rgavlin:1245671290:2009-06-22T19:48:10.496+0000:1245671290:2009-06-22T19:48:10.496+0000:Unfortunately, this commit broke the ability to use Camel 1.x with Spring JMS 2.0.x. Please consider using the correct integer values for the 1.x branch and use the Spring JMS 2.5.x-specific constants only for the trunk.

Thanks.
davsclaus:1245706650:2009-06-23T05:37:30.090+0000:1245706650:2009-06-23T05:37:30.090+0000:See ticket about the spring 2.0.x issue: CAMEL-1741
davsclaus:1258775877:2009-11-21T11:57:57.044+0000:1258775877:2009-11-21T11:57:57.044+0000:Closing all 2.0M2 tickets"
0,CAMEL-1496,Bug,Major,2.0-M1,"1.6.1, 2.0-M2","
None
",Closed,Fixed,"1.6.1, 2.0-M2",Claus Ibsen,Jeroen Reijn,0,1,2009-03-27 16:01:46+00:00,2009-11-21 11:57:57+00:00,"While configuring a route like:


<route>
 <from uri=""atom://http://somehost/?feed=1234567""/>
 <to uri=""seda:feeds""/>
</route>


camel throws an exception with:


Failed to resolve endpoint due to: org.apache.camel.ResolveEndpointFailedException: There are 1 parameters that couldn't be set on the endpoint","jreijn:1238504045:2009-03-31T20:54:05.636+0000:1238504045:2009-03-31T20:54:05.636+0000:Added new patch, which solves issue with file based URI's, which should not keep the request parameters, but http and https should.
davsclaus:1238712109:2009-04-03T06:41:49.184+0000:1238712109:2009-04-03T06:41:49.184+0000:trunk: 761536
1.x: 761538
jreijn:1239342067:2009-04-10T13:41:07.151+0000:1239342067:2009-04-10T13:41:07.151+0000:Thanks!
davsclaus:1258775877:2009-11-21T11:57:57.005+0000:1258775877:2009-11-21T11:57:57.005+0000:Closing all 2.0M2 tickets"
0,CAMEL-1495,Improvement,Major,1.6.0,2.0-M2,"
None
",Closed,Won't Fix,2.0-M2,Unassigned,Claus Ibsen,0,0,2009-03-27 09:36:14+00:00,2009-11-21 11:57:56+00:00,"Lets see if this is possible to alter.


End users can always use wireTap for fire and forget style messaging.","davsclaus:1238117824:2009-03-27T09:37:04.548+0000:1238117824:2009-03-27T09:37:04.548+0000:See nabble:
http://www.nabble.com/Camel-2.0---Multicast-issue----td22725597s22882.html

davsclaus:1238202446:2009-03-28T09:07:26.352+0000:1238202446:2009-03-28T09:07:26.352+0000:Use WireTap for fire and forget messaging.

multicast will wait until all messages is processed in the destinations before continue and this is how it should do.
davsclaus:1258775876:2009-11-21T11:57:56.975+0000:1258775876:2009-11-21T11:57:56.975+0000:Closing all 2.0M2 tickets"
0,CAMEL-1494,Improvement,Minor,None,2.0-M2,"
None
",Closed,Won't Fix,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2009-03-27 09:35:14+00:00,2009-11-21 11:57:56+00:00,Currently wireTap only supports 1 destination. We should support N destinations.,"davsclaus:1238202158:2009-03-28T09:02:38.292+0000:1238202158:2009-03-28T09:02:38.292+0000:WireTap is based on SendProcessor that is build for a single endpoint. 

End users just adds multiple wireTap if they need multiple destinations. 
davsclaus:1258775876:2009-11-21T11:57:56.951+0000:1258775876:2009-11-21T11:57:56.951+0000:Closing all 2.0M2 tickets"
0,CAMEL-1493,Improvement,Major,None,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,1,2009-03-27 07:38:04+00:00,2009-11-21 11:57:56+00:00,The sendBodyXXX methods on ProducerTemplate is InOnly so they should be void to better help the end user to use requestBody instead if he wants a InOut,"davsclaus:1238201420:2009-03-28T08:50:20.971+0000:1238201420:2009-03-28T08:50:20.971+0000:trunk: 759437

Use requestBody instead of sendBody if you want request/response.
davsclaus:1258775876:2009-11-21T11:57:56.900+0000:1258775876:2009-11-21T11:57:56.900+0000:Closing all 2.0M2 tickets"
0,CAMEL-1492,Bug,Major,2.0-M1,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Dejan Bosanac,0,0,2009-03-26 18:35:32+00:00,2009-11-21 11:57:56+00:00,See test failures in https://issues.apache.org/activemq/browse/AMQ-2182,"davsclaus:1238110286:2009-03-27T07:31:26.474+0000:1238110286:2009-03-27T07:31:26.474+0000:Dejan thanks for reporting. I modified your patch a bit.

trunk: 759042.

dejanb:1238116546:2009-03-27T09:15:46.713+0000:1238116546:2009-03-27T09:15:46.713+0000:Just one more minor change, which causes null-pointer exception in activemq-camel test
davsclaus:1238117336:2009-03-27T09:28:56.717+0000:1238117336:2009-03-27T09:28:56.717+0000:Sorry missed that one. Committed patch. Thanks.

trunk: 759071

davsclaus:1258775876:2009-11-21T11:57:56.866+0000:1258775876:2009-11-21T11:57:56.866+0000:Closing all 2.0M2 tickets"
0,CAMEL-1491,Improvement,Trivial,None,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2009-03-26 09:12:49+00:00,2009-11-21 11:57:56+00:00,eg just like getBody(Class type),"davsclaus:1238113046:2009-03-27T08:17:26.653+0000:1238113046:2009-03-27T08:17:26.653+0000:trunk: 759047
davsclaus:1258775876:2009-11-21T11:57:56.842+0000:1258775876:2009-11-21T11:57:56.842+0000:Closing all 2.0M2 tickets"
0,CAMEL-1490,Improvement,Major,"1.3.0, 1.4.0, 1.5.0, 1.6.0, 2.0-M1",None,"
None
",Closed,Fixed,"1.6.1, 2.0-M2",Willem Jiang,Willem Jiang,0,0,2009-03-26 07:26:56+00:00,2009-11-21 11:57:56+00:00,The static Main instance of Spring need to be change to protected for extension.,"njiang:1238025945:2009-03-26T08:05:45.296+0000:1238025945:2009-03-26T08:05:45.296+0000:trunk
http://svn.apache.org/viewvc?rev=758539&view=rev

camel-1.x branch
http://svn.apache.org/viewvc?rev=758541&view=rev
davsclaus:1258775876:2009-11-21T11:57:56.816+0000:1258775876:2009-11-21T11:57:56.816+0000:Closing all 2.0M2 tickets"
0,CAMEL-1489,Sub-task,Major,None,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Willem Jiang,Willem Jiang,0,0,2009-03-26 07:18:10+00:00,2009-11-21 11:57:56+00:00,No Desc,"njiang:1238025878:2009-03-26T08:04:38.076+0000:1238025878:2009-03-26T08:04:38.076+0000:http://svn.apache.org/viewvc?rev=758543&view=rev
davsclaus:1258775876:2009-11-21T11:57:56.685+0000:1258775876:2009-11-21T11:57:56.685+0000:Closing all 2.0M2 tickets"
0,CAMEL-1488,Bug,Major,2.0-M1,"1.6.1, 2.0-M2","
None
",Closed,Fixed,"1.6.1, 2.0-M2",Claus Ibsen,Bruce Elmore,0,1,2009-03-25 20:18:08+00:00,2009-11-21 11:57:56+00:00,"Camel can fail to determine the appropriate method to call on a bean that has overloaded (vs. overridden) methods. It will always call the first overloaded method, even if the parameter is not the same type as that of the message being processed.


The bug is in BeanInfo.overridesExistingMethod. Here's the offending code:


            for (int i = 0; i < info.getMethod().getParameterTypes().length; i++) {
                Class type1 = info.getMethod().getParameterTypes()[i];
                Class type2 = methodInfo.getMethod().getParameterTypes()[i];
                if (!type1.equals(type2)) 

{
                    continue;
                }

            }


            // same name, same parameters, then its overrides an existing class
            return info;


If the parameter types don't match, the continue statement is not going to do what you'd want. The author obviously intended the ""continue"" to continue with the next methodInfo. Instead, it checks the next parameter and will always return the current methodInfo  if it reaches this point.


Here's a unit test that exemplifies the issue:


----------------------------------


package biz.firethorn.hostinterface.camel;


import java.lang.reflect.Method;


import junit.framework.Assert;
import junit.framework.TestCase;


import org.apache.camel.CamelContext;
import org.apache.camel.Exchange;
import org.apache.camel.Message;
import org.apache.camel.RuntimeCamelException;
import org.apache.camel.component.bean.AmbiguousMethodCallException;
import org.apache.camel.component.bean.BeanInfo;
import org.apache.camel.component.bean.MethodInvocation;
import org.apache.camel.impl.DefaultCamelContext;
import org.apache.camel.impl.DefaultExchange;
import org.apache.camel.impl.DefaultMessage;


public class BeanInfoTest extends TestCase {


	public void test() throws Exception 

{
		
		CamelContext camelContext = new DefaultCamelContext();
		BeanInfo beanInfo = new BeanInfo(camelContext, Bean.class);
		
		Message message = new DefaultMessage();
		message.setBody(new RequestB());
		Exchange exchange = new DefaultExchange(camelContext);
		exchange.setIn(message);
		
		MethodInvocation methodInvocation = beanInfo.createInvocation(new Bean(), exchange);
		Method method = methodInvocation.getMethod();
		
		Assert.assertEquals(""doSomething"", method.getName());
		
		Assert.assertEquals(RequestB.class, method.getGenericParameterTypes()[0]);
	}

}


class Bean {
	public void doSomething(RequestA request) {	
	}


	public void doSomething(RequestB request) {
	}
}


class RequestA {
	public int i;
}


class RequestB {
	public String s;
}","davsclaus:1238022916:2009-03-26T07:15:16.972+0000:1238022916:2009-03-26T07:15:16.972+0000:Thanks Bruce.

I will look into it.
davsclaus:1238030585:2009-03-26T09:23:05.818+0000:1238030585:2009-03-26T09:23:05.818+0000:2.0: 758563
1.x: 758569
belmore:1238043823:2009-03-26T13:03:43.271+0000:1238043823:2009-03-26T13:03:43.271+0000:Claus,

Thanks for taking care of this so quickly! Greatly appreciated!

Bruce


davsclaus:1258775876:2009-11-21T11:57:56.631+0000:1258775876:2009-11-21T11:57:56.631+0000:Closing all 2.0M2 tickets"
0,CAMEL-1487,Bug,Major,None,,"
None
",Closed,Won't Fix,None,Willem Jiang,Moulliard Charles,0,1,2009-03-25 16:40:49+00:00,2010-02-07 09:55:21+00:00,"Hi,


A) Set Header not supported


The following camel spring DSL syntax deployed in a OSGI bundle (ServiceMix Kernel 1.2-SNAPSHOT) does not allow to the webservice to work :



		<!-- CXF route -->
		<camel:route>
			<camel:from uri=""cxf:bean:reportIncident"" />
			<camel:setHeader headerName=""origin"">
				<camel:constant>webservice</camel:constant>
			</camel:setHeader>
			<camel:convertBodyTo type=""org.apache.camel.example.reportincident.InputReportIncident"" />
....




Apparently adding a setHeader is not accepted by camel:cxf endpoint 


B) Server must be restarted


When I remove the setHeader from the camel route :



		<!-- CXF route -->
		<camel:route>
			<camel:from uri=""cxf:bean:reportIncident"" />
			<camel:convertBodyTo type=""org.apache.camel.example.reportincident.InputReportIncident"" />
....




and that I update the bundle, I must restart the ServiceMix Server in order to have a webService operational !!!!","cmoulliard:1238054447:2009-03-26T16:00:47.390+0000:1238054447:2009-03-26T16:00:47.390+0000:Hi,

With the modification committed today in camel-cxf, it is possible now to add a header. Nevertheless, the problem is always there if by example I would like to create a route like this where I call a spring bean :

{code}
		<!-- CXF route -->
		<camel:route>
			<camel:from uri=""cxf:bean:reportIncident"" />
			<!-- issue resolved 26/03/2009 -->
			<camel:setHeader headerName=""origin"">
				<camel:constant>webservice</camel:constant>
			</camel:setHeader>
			<camel:convertBodyTo type=""org.apache.camel.example.reportincident.InputReportIncident"" />
			<camel:to uri=""bean:webservice"" />
			<!-- <camel:to uri=""queuingservice:queue:in"" />  -->
			<camel:transform>
				<camel:method bean=""feedback"" method=""setOk"" />
			</camel:transform>
		</camel:route>


{code}
njiang:1238108799:2009-03-27T07:06:39.513+0000:1238108799:2009-03-27T07:06:39.513+0000:Hi Charles,

Can you give me more information about it is need to restart the ServiceMix Server to get the webService operational?
I don't know if it relates to the socket address reusing issue. 
Here are the note of CXF Jetty Engine which implements the http transport for CXF Endpoint.
        //if we shutdown the port, on SOME OS's/JVM's, if a client
        //in the same jvm had been talking to it at some point and keep alives
        //are on, then the port is held open for about 60 seconds
        //afterwards and if we restart, connections will then 
        //get sent into the old stuff where there are 
        //no longer any servant registered.   They pretty much just hang.
If you want to change the CXF endpoint configuration dynamically, I suggest you to use the CXF severlet transport 
to walk around this kind of issue. 

Willem

cmoulliard:1238112943:2009-03-27T08:15:43.590+0000:1238112943:2009-03-27T08:15:43.590+0000:Hi Willem,

Here is the scenario that I have to follow each time that I have a problem. For your information, this is not unique to CXF, I have also discovered something similar when deploying a DAO bundle using Hibernate (I was oblige in this case to restart also SMX : https://issues.apache.org/activemq/browse/SMX4KNL-255)

1) stop bundle
2) install bundle containing camel route using update command followed by start bundle. If there is a problem to configure the camel routes (like it was the case with the setHeader), then the WebService is not available from Jetty (http://localhost:8080/camel-incident/reportincident?wsdl)
3) I correct the camel routes, regenerate a bundle
4) so I stop my bundle, update it and start it. if I try to reach the web site : http://localhost:8080/camel-incident/reportincident?wsdl, I can't
5) I stop servicemix
6) I restart it
7) now I'm able to connect to the webservice

Remark : I also tested the procedure by stopping the bundle jetty and cxf but I have also to restart SMX in this case.

The most frustrating is that we don't see any error/warning message

Charles

njiang:1238112968:2009-03-27T08:16:08.642+0000:1238112968:2009-03-27T08:16:08.642+0000:Hi Charles,

I just talked with Freeman, he told me there is a OSGi transport which provides a more easy way to use servelt transport for CXF endpoint in OSGi.
You can find the example in the ${SMX4_HOM}\examples\cxf-osgi.

Hope that can be helpful to your problem of CXF endpoint republishing.

Willem

cmoulliard:1238114114:2009-03-27T08:35:14.207+0000:1238114114:2009-03-27T08:35:14.207+0000:Hi Willem,

I know this example but it is based on jaxws:endpoint which is the CXF endpoint and not camel-cxf endpoint. 

What is our strategy for OSGI projects when we have to combine Camel routes and webservices ? I mean what will be the recommendations that we will provide for the architects / developers : use jaxws:endpoint and not camel-cxf endpoint ?

Charles
njiang:1238115976:2009-03-27T09:06:16.490+0000:1238115976:2009-03-27T09:06:16.490+0000:Hi Charles,

For the configuration perspective, CXF endpoint and camel-cxf endpoint holds the same information.
Since they are using in two different library, they have different  namespace and tag.
But Your CXF endpoint's configuration knowledge still work for camel-cxf endpoint :)

The user should keep in mind what kind of endpoint (CXF endpoint or the camel-cxf endpoint) they want to create in the Spring Application Context.

Willem

njiang:1238201471:2009-03-28T08:51:11.580+0000:1238201471:2009-03-28T08:51:11.580+0000:I managed to redeploy the camel-cxf endpoint in osgi by using the cxf-osgi transport.
Here is the configuration file which base on the camel-1.x , you may need to change it for using camel2.0
{code}
<?xml version=""1.0"" encoding=""UTF-8""?>
<beans xmlns=""http://www.springframework.org/schema/beans""
	xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
	xmlns:camel=""http://activemq.apache.org/camel/schema/spring""
	xmlns:osgi=""http://www.springframework.org/schema/osgi""
	xmlns:cxf=""http://activemq.apache.org/camel/schema/cxfEndpoint""
	xsi:schemaLocation=""
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
	http://www.springframework.org/schema/osgi
	http://www.springframework.org/schema/osgi/spring-osgi.xsd
	http://activemq.apache.org/camel/schema/osgi
	http://activemq.apache.org/camel/schema/osgi/camel-osgi-1.6.0.xsd		
	http://activemq.apache.org/camel/schema/spring
	http://activemq.apache.org/camel/schema/spring/camel-spring-1.6.0.xsd
	http://activemq.apache.org/camel/schema/cxfEndpoint http://activemq.apache.org/camel/schema/cxf/camel-cxf-1.6.0.xsd"">
		
 <import resource=""classpath:META-INF/cxf/cxf.xml"" />
 <import resource=""classpath:META-INF/cxf/cxf-extension-soap.xml"" />
 <import resource=""classpath:META-INF/cxf/cxf-extension-http.xml"" />
 <import resource=""classpath:META-INF/cxf/osgi/cxf-extension-osgi.xml"" />  
 
	<bean id=""myBean"" class=""org.apache.camel.example.reportincident.internal.MyBean"" />
	
	<!-- webservice endpoint --> 
	<cxf:cxfEndpoint id=""reportIncident""
		address=""/example/incident""
		serviceClass=""org.apache.camel.example.reportincident.ReportIncidentEndpoint""
		xmlns:s=""http://reportincident.example.camel.apache.org"">
	</cxf:cxfEndpoint>
	
	<camelContext trace=""true"" xmlns=""http://activemq.apache.org/camel/schema/osgi"">

		<!-- Receive WS message -->
		<camel:route>
			<camel:from uri=""cxf:bean:reportIncident"" />
			<!-- issue resolved 26/03/2009 -->
			<camel:setHeader headerName=""origin"">
				<camel:constant>webservice</camel:constant>
			</camel:setHeader>
			<camel:convertBodyTo type=""org.apache.camel.example.reportincident.InputReportIncident"" />
			<camel:to uri=""bean:myBean"" />
			<!--camel:transform>
				<camel:method bean=""feedback"" method=""setOk"" />
			</camel:transform-->
		</camel:route>

	</camelContext>
</beans>
{code}"
0,CAMEL-1486,Improvement,Trivial,None,Future,"
None
",Closed,Fixed,Future,Claus Ibsen,Claus Ibsen,0,0,2009-03-25 11:01:07+00:00,2010-02-07 09:55:21+00:00,"A new option on the Log component, eg the LogFormatter or what this config was named.


Append ... if the line is to long, otherwise log the entire line","davsclaus:1238117125:2009-03-27T09:25:25.029+0000:1238117125:2009-03-27T09:25:25.029+0000:Added new option *maxChars* to Log and Trace formatter and updated wiki

trunk: 759069"
0,CAMEL-1485,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.0-M2,Willem Jiang,Willem Jiang,0,0,2009-03-25 10:39:23+00:00,2009-11-21 11:57:56+00:00,The Main class could extends the spring Main class and take the arguments of the spring java configuration's basedPackages and configClass,"njiang:1237949266:2009-03-25T10:47:46.070+0000:1237949266:2009-03-25T10:47:46.070+0000:http://svn.apache.org/viewvc?rev=758208&view=rev
njiang:1239834812:2009-04-16T06:33:32.387+0000:1239834812:2009-04-16T06:33:32.387+0000:I am out of office from 13th April to 24th April, I will reply your
letter when I come back.

davsclaus:1258775876:2009-11-21T11:57:56.587+0000:1258775876:2009-11-21T11:57:56.587+0000:Closing all 2.0M2 tickets"
0,CAMEL-1484,New Feature,Major,1.6.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-03-25 10:36:11+00:00,2010-02-07 09:55:21+00:00,"Some DSL supports options such as throttle, delay etc.


We should support being able at runtime to change the options with JMX and the Camel web console.",
0,CAMEL-1483,New Feature,Major,"1.6.0, 2.0.0",2.2.0,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Claus Ibsen,1,1,2009-03-25 10:28:39+00:00,2010-02-07 09:55:21+00:00,"Introduce a GracefulShutdownAware interface (in lack of better name) that components can support.


It allows the component to eg deny any new incoming messages.


Can be used by JMS, File, Http, Mina etc. to better support graceful shutdown as they will deny new messages.


James have a good idea on this one.","davsclaus:1237948177:2009-03-25T10:29:37.660+0000:1237948177:2009-03-25T10:29:37.660+0000:[11:15]  <jstrachan> I guess for some things, its no biggie - e.g. stop all the JMS consumers and HTTP consumers first
[11:15]  <jstrachan> as sending to JMS endpoints is still fine even after the JMS consumers stop
[11:15]  <cibsen> yeah
[11:16]  <cibsen> file consumer as well
[11:16]  <jstrachan> i.e. stopping all incoming endpoints should be fine for real networked stuff (database, jms, http, mina etc)
[11:16]  <jstrachan> yeah
[11:16]  <jstrachan> its just in memory stuff like SEDA that its a tad tricky
[11:16]  <jstrachan> so maybe we only mark things like JMS, file, database, HTTP as GracefulShutdownAware (or whatever we call it)
[11:17]  <jstrachan> i.e. stuff that you can still send to after the consumer stops
[11:17]  <jstrachan> then ordering doesn't matter
[11:17]  <cibsen> yes good idea
[11:17]  <jstrachan> then we know we really can gracefully shut down all those puppies
[11:17]  <cibsen> and you should not have many messages in SEDA queus anyway as its in memory only and fast
[11:17]  <jstrachan> yeah
[11:18]  <jstrachan> once all the graceful stuff is shut down, we could maybe wait a bit for SEDA queues to empty up to some timeout or something
[11:18]  <cibsen> so we can just give it some time to settle down before stopping
[11:18]  <jstrachan> yeah
[11:18]  <jstrachan> not sure if MessageListenerContainer supports graceful shutdown, we'd have to check
[11:18]  <cibsen> we can use timeout for now and later support a stategy that monitors the queues and see if they are empty
[11:19]  <cibsen> that one is a beast to shutdown in correct ordering with AMQ, Spring and Camel
davsclaus:1254553572:2009-10-03T15:06:12.303+0000:1254553572:2009-10-03T15:06:12.303+0000:We can better offer graceful shutdown when we can control in which the routes are started and stopped
davsclaus:1254553757:2009-10-03T15:09:17.047+0000:1254553757:2009-10-03T15:09:17.047+0000:We also have the inflight repository now that can inform how many messages are currently being routed.

This allows us to peek this value and wait shutting down until this value reaches zero.

There should be some form of timeout etc. to prevent deadlocking by waiting for that inflight to reach zero.

And Camel should offer a more range of shutdown operations
- shutdownNow
- shutdownGraceful
- shutdownGraceful(timeout)

davsclaus:1261215022:2009-12-19T17:30:22.555+0000:1261215022:2009-12-19T17:30:22.555+0000:I got some basic graceful shutdown up and running. Looks good so far.

I am opting for to make graceful shutdown the default in Camel and have it failsafe with a timeout that can tackle if there should be a weird situation where there are inflight exchanges which seems to never complete.

It will of course be pluggable and configurable.

It works with pending messages on seda queues and it waits for inflight exchanges to be completed.
And it stops those routes which can safely be stopped so Camel wont intake new exchanges while other routes are still routing those remaining exchanges.

There will be an interface to use by other components to indicate that they are like the seda and have pending in memory messages that Camel should wait for as well.
davsclaus:1261283100:2009-12-20T12:25:00.855+0000:1261283100:2009-12-20T12:25:00.855+0000:See more details at
http://old.nabble.com/-NEW--Camel-2.2---Graceful-Shutdown---Feedback-welcome-ts26862323.html
davsclaus:1261283245:2009-12-20T12:27:25.234+0000:1261283245:2009-12-20T12:27:25.234+0000:trunk: 892587.
davsclaus:1261288399:2009-12-20T13:53:19.658+0000:1261288399:2009-12-20T13:53:19.658+0000:trunk: 892595.

Is now JMX managed as well
davsclaus:1261445378:2009-12-22T09:29:38.396+0000:1261445378:2009-12-22T09:29:38.396+0000:Should honor {{SuspendableService}} to suspend routes over shutdown before it waits for all the inflight exchanges to complete.
After all exchanges is complete then its shutdown for real afterwards.
davsclaus:1261445687:2009-12-22T09:34:47.126+0000:1261445687:2009-12-22T09:34:47.126+0000:It would be ideal if {{Consumer}} extends {{SuspendableService}} instead of {{Service}} which would allow for a better and less bumpy graceful shutdown. As its suspended it will just block any incoming messages but still keep the remainder of the routes running. This allows with breeze to run the inflight exchanges to completion. And after this we can safely shutdown for real.
davsclaus:1261451894:2009-12-22T11:18:14.531+0000:1261451894:2009-12-22T11:18:14.531+0000:Improved a bit. Now it honors SuspendableService during graceful shutdown.

trunk: 893138.
davsclaus:1261800074:2009-12-26T12:01:14.064+0000:1261800074:2009-12-26T12:01:14.064+0000:trunk: 893963.

Added fine grained control for graceful shutdown (work in progress).


davsclaus:1261810713:2009-12-26T14:58:33.592+0000:1261810713:2009-12-26T14:58:33.592+0000:trunk: 893983.

Graceful shutdown now have fine grained control on batch consumers to whether to shutdown after current tasks or wait until the entire batch group has been completed."
0,CAMEL-1482,Bug,Major,1.6.0,"2.0-M1, 1.6.1","
None
",Closed,Won't Fix,"2.0-M1, 1.6.1",Willem Jiang,Aaron Crickenberger,0,0,2009-03-24 13:46:47+00:00,2009-10-24 11:16:12+00:00,"Per CAMEL-1345 camel-example-osgi's camelContext.xml now refers to http://camel.apache.org/schema/osgi.  It no longer deploys in ServiceMix Kernel 1.1.0/camel 1.x due the osgi namespace being unresolvable.  


If 1.x's camel-osgi/META-INF/spring.schemas is updated to trunk's copy, or a trailing newline is added, the problem goes away.","njiang:1237877206:2009-03-24T14:46:46.119+0000:1237877206:2009-03-24T14:46:46.119+0000:Hi Aaron,

I don't know if you are using the camel 1.6's camel-example-osgi. The camel context namespace is http://activemq.apache.org/camel/schema/osgi.
Since we don't update the camel-osgi spring.schemas file in Camel 1.x, I will add the newline to make sure Camel1.x support the new target name space.

Willem
acricken:1237878972:2009-03-24T15:16:12.115+0000:1237878972:2009-03-24T15:16:12.115+0000:Whoops, you're completely correct.  I was accidentally using camel 2.0's camel-example-osgi camelContext.xml.  This is a non-issue (even w/o the trailing newline) if I use camel 1.6's.  Thanks for setting me straight!
njiang:1237921370:2009-03-25T03:02:50.382+0000:1237921370:2009-03-25T03:02:50.382+0000:Since we don't change the camel-spring.xsd and camel-osgi.xsd schema's target namespace , I can't update the spring.schemas and spring.handler in CAMEL-1.x branch.
I will mark this JIRA resloved without fixing."
0,CAMEL-1481,Improvement,Major,"1.6.0, 2.0-M1","1.6.1, 2.0-M2","
None
",Closed,Fixed,"1.6.1, 2.0-M2",Willem Jiang,Willem Jiang,0,0,2009-03-24 11:09:32+00:00,2010-11-27 06:42:57+00:00,"Since ServiceMix4 also supports the old JBI service unit and the classloader is not osgi bundle class loader, 
the OsgiResolverUtil should use the regular classloader if the osgi bundle classloader can't find any class.","njiang:1238097237:2009-03-27T03:53:57.665+0000:1238097237:2009-03-27T03:53:57.665+0000:trunk
http://svn.apache.org/viewvc?rev=757790&view=rev
camel 1.x branch
http://svn.apache.org/viewvc?rev=757863&view=rev
davsclaus:1258775876:2009-11-21T11:57:56.555+0000:1258775876:2009-11-21T11:57:56.555+0000:Closing all 2.0M2 tickets"
0,CAMEL-1480,Bug,Major,2.0-M1,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2009-03-24 07:10:42+00:00,2009-11-21 11:57:56+00:00,"See nabble:
http://www.nabble.com/Apache-Camel-2.0-M1-java.lang.ClassCastException%3A-org.apache.camel.component.jms.JmsConfiguration%24CamelJmsTeemplate102-td22665483s22882.html


The ClassCastException is because of the old JMS API is used.
Camel should test whether the template is 1.1 or 1.0.2 and cast to correct type.","davsclaus:1237854826:2009-03-24T08:33:46.247+0000:1237854826:2009-03-24T08:33:46.247+0000:Committed revision 757686.
davsclaus:1258775876:2009-11-21T11:57:56.530+0000:1258775876:2009-11-21T11:57:56.530+0000:Closing all 2.0M2 tickets"
0,CAMEL-1479,Task,Major,None,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,2,2009-03-23 13:50:12+00:00,2013-03-08 10:07:02+00:00,"Its an unused feature and really just complicates if you can on per. individual route set some other error handling strategy than what applies normally with



global error handler
per route error handler","davsclaus:1237794113:2009-03-23T15:41:53.776+0000:1237794113:2009-03-23T15:41:53.776+0000:Committed revision 757415.
davsclaus:1258775876:2009-11-21T11:57:56.509+0000:1258775876:2009-11-21T11:57:56.509+0000:Closing all 2.0M2 tickets
raulvk:1362707585:2013-03-08T09:53:05.843+0000:1362707585:2013-03-08T09:53:05.843+0000:This issue was fixed a long time ago, but the constructs linger in all DSLs and they indeed manipulate things underneath, i.e. they are not noops. It all seems a bit contradictory. Are they simple leftovers? Can we remove the DSL constructs in Camel 3.0?
davsclaus:1362708422:2013-03-08T10:07:02.727+0000:1362708422:2013-03-08T10:07:02.727+0000:The failover EIP leverages this option.

And yes for Camel 3.0 we should remove it from the DSL as thats where we have the change to make these kind of changes."
0,CAMEL-1478,New Feature,Major,None,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2009-03-23 06:08:23+00:00,2009-11-21 11:57:56+00:00,"Add a new rollback DSL so you can force an Exchange to rollback in a route. Can be used with the choice DSL to eg test a predicate and rollback.


Today you need to write your own processor and throw an exception, or set an exception on the Exchange.","davsclaus:1237760586:2009-03-23T06:23:06.331+0000:1237762796:2009-03-23T06:59:56.077+0000:trunk: 757326, 757330
davsclaus:1237762458:2009-03-23T06:54:18.859+0000:1237762458:2009-03-23T06:54:18.859+0000:Also added attribute to pass in a String to explain why the rollback. The attribute is optional.
davsclaus:1258775876:2009-11-21T11:57:56.342+0000:1258775876:2009-11-21T11:57:56.342+0000:Closing all 2.0M2 tickets"
0,CAMEL-1477,Bug,Major,1.6.0,"1.6.1, 2.0-M2","
None
",Closed,Fixed,"1.6.1, 2.0-M2",Claus Ibsen,Claus Ibsen,0,0,2009-03-23 04:54:32+00:00,2009-11-21 11:57:56+00:00,"When using routeBuilderRef instead of package to configure route builder in spring XML then the former does not work if you have eg endpoint defined as well and injected the endpoint using EndpointInjected



    @EndpointInject(name = ""data"")
    protected Endpoint data;

    public void configure() throws Exception {
        // configure a global transacted error handler
        errorHandler(transactionErrorHandler(required));

        from(data)
        ...
}




And the Spring DSL



    <bean id=""route"" class=""org.apache.camel.itest.tx.JmsToHttpWithRollbackRoute""/>

    <!-- Camel context -->
    <camelContext id=""camel"" xmlns=""http://camel.apache.org/schema/spring"">
        <!-- use our route -->
        <routeBuilder ref=""route""/>

        <!-- define our data endpoint as the activemq queue we send a message to -->
        <endpoint id=""data"" uri=""activemq:queue:data""/>
    </camelContext>","davsclaus:1237756744:2009-03-23T05:19:04.831+0000:1237756744:2009-03-23T05:19:04.831+0000:Okay its the *autowireRouteBuilders* attribute on camel context causing this.

Its kinda auto installing any beans in Spring DSL that is a route builder and thus we get our route 2x installed.
But the first time it cannot run the camel bean post processor that injects the Camel annotations. 

So we need to @deprecated/remove this feature and rely only on people adding refs to it.
Also this feature is very questionable as end users want to have control of which routes is used. 
davsclaus:1237762410:2009-03-23T06:53:30.406+0000:1237762410:2009-03-23T06:53:30.406+0000:trunk: 757326
1.x: 757329
davsclaus:1258775876:2009-11-21T11:57:56.309+0000:1258775876:2009-11-21T11:57:56.309+0000:Closing all 2.0M2 tickets"
0,CAMEL-1476,Improvement,Minor,None,"1.6.1, 2.0-M2","
None
",Closed,Fixed,"1.6.1, 2.0-M2",William Tam,William Tam,0,0,2009-03-22 15:14:55+00:00,2009-11-21 11:57:56+00:00,"In trunk, make sure to use the DataFormat in CxfConstants.","wtam:1237712435:2009-03-22T17:00:35.365+0000:1237712435:2009-03-22T17:00:35.365+0000:Committed revision 757214. - 1.x
Committed revision 757216. - Trunk

wtam:1237715015:2009-03-22T17:43:35.971+0000:1237715015:2009-03-22T17:43:35.971+0000:Trunk: Committed revision 757221.

wtam:1237832119:2009-03-24T02:15:19.462+0000:1237832119:2009-03-24T02:15:19.462+0000:1.x: Committed revision 757638.

davsclaus:1258775876:2009-11-21T11:57:56.287+0000:1258775876:2009-11-21T11:57:56.287+0000:Closing all 2.0M2 tickets"
0,CAMEL-1475,Bug,Major,1.6.0,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2009-03-22 11:45:29+00:00,2009-11-21 11:57:56+00:00,"See TransactionalClientWithRollbackTest in camel-spring


The .policy(required) is needed in the routes even though we have a global transaction error handler with a default policy set:



                 errorHandler(transactionErrorHandler(required));




So Camel should fallback and use the global policy if the route itself does not have a policy defined.","davsclaus:1238840052:2009-04-04T18:14:12.918+0000:1238840052:2009-04-04T18:14:12.918+0000:I am thinking that we should have a discussion on this matter how to let the TX configuration be easier in Camel

The codebase requires the {{policy}} to be defined in the route to properly configure a route as transacted.
This is in fact fine as it explicit declare the route as transacted.

However policy is a generic term, so we could consider renaming it to transacted

Then the error handler configuration could probably be optional as if its missing the transacted could auto create one on demand, such as looking for a TX manager in the registry or how we can make it easier.


davsclaus:1238973063:2009-04-06T07:11:03.992+0000:1238973063:2009-04-06T07:11:03.992+0000:Okay the {{policy}} is required to define a route as transacted. Then we do not need to configure the error handler as transactional, and thus we can just do:

{code:java}
                Policy required = context.getRegistry().lookup(""PROPAGATION_REQUIRED"", SpringTransactionPolicy.class);

                // set the required policy for this route so its transacted
                from(""direct:okay"").policy(required).
                    setBody(constant(""Tiger in Action"")).beanRef(""bookService"").
                    setBody(constant(""Elephant in Action"")).beanRef(""bookService"");
{code}

davsclaus:1238973337:2009-04-06T07:15:37.477+0000:1238973337:2009-04-06T07:15:37.477+0000:Maybe we can add some convention over configuration so we can auto lookup the SpringTransactionPolicy

So we can shorten the route to:
{code:java}
                // set the required policy for this route
                from(""direct:okay"").policy(""PROPAGATION_REQUIRED"").
                    setBody(constant(""Tiger in Action"")).beanRef(""bookService"").
                    setBody(constant(""Elephant in Action"")).beanRef(""bookService"");
{code}

Maybe we can have a nicer default name for {{PROPAGATION_REQUIRED}}.
{code:java}
                // set the required policy for this route
                from(""direct:okay"").policy(""REQUIRED"").
                    setBody(constant(""Tiger in Action"")).beanRef(""bookService"").
                    setBody(constant(""Elephant in Action"")).beanRef(""bookService"");
{code}

Or it defaults to required if no parameters specified

{code:java}
                // set the required policy for this route
                from(""direct:okay"").policy().
                    setBody(constant(""Tiger in Action"")).beanRef(""bookService"").
                    setBody(constant(""Elephant in Action"")).beanRef(""bookService"");
{code}

And while we are at it, maybe the *policy* itself could be renamed to something that better reflects its a transaction
{code:java}
                // this route is transacted
                from(""direct:okay"").transacted().
                    setBody(constant(""Tiger in Action"")).beanRef(""bookService"").
                    setBody(constant(""Elephant in Action"")).beanRef(""bookService"");
{code}
davsclaus:1238977012:2009-04-06T08:16:52.103+0000:1238977012:2009-04-06T08:16:52.103+0000:See discussion at
http://www.nabble.com/-DISCUSS----Camel-2.0---Easier-Camel-Spring-Transaction-configuration-td22904091.html

davsclaus:1238983627:2009-04-06T10:07:07.247+0000:1238983627:2009-04-06T10:07:07.247+0000:Improved the configuration as the TransactedErrorHandlerBuilder is not needed to be configured.

trunk: 762267

davsclaus:1238987544:2009-04-06T11:12:24.257+0000:1238987544:2009-04-06T11:12:24.257+0000:Okay got this baby working now
{code:java}
                from(""direct:okay"")
                    // marks this route as transacted, and we dont pass in any parameters so we
                    // will auto lookup and use the Policy defined in the spring XML file
                    .transacted()
                    .setBody(constant(""Tiger in Action"")).beanRef(""bookService"")
                    .setBody(constant(""Elephant in Action"")).beanRef(""bookService"");
{code}

And with the Spring XML below Camel will lookup beans with the type {{org.apache.camel.spi.Policy}} and if there are 1 policy defined it will use that as default.

{code:xml}
    <!-- START SNIPPET: e1 -->
    <!-- datasource to the database -->
    <bean id=""dataSource"" class=""org.springframework.jdbc.datasource.DriverManagerDataSource"">
        <property name=""driverClassName"" value=""org.hsqldb.jdbcDriver""/>
        <property name=""url"" value=""jdbc:hsqldb:mem:camel""/>
        <property name=""username"" value=""sa""/>
        <property name=""password"" value=""""/>
    </bean>

    <!-- spring transaction manager -->
    <bean id=""txManager"" class=""org.springframework.jdbc.datasource.DataSourceTransactionManager"">
        <property name=""dataSource"" ref=""dataSource""/>
    </bean>

    <!-- policy for required transaction used in our Camel routes -->
    <bean id=""PROPAGATION_REQUIRED"" class=""org.apache.camel.spring.spi.SpringTransactionPolicy"">
        <property name=""transactionManager"" ref=""txManager""/>
    </bean>

    <!-- bean for book business logic -->
    <bean id=""bookService"" class=""org.apache.camel.spring.interceptor.BookService"">
        <property name=""dataSource"" ref=""dataSource""/>
    </bean>
    <!-- END SNIPPET: e1 -->
{code}

Next step is to make it even easier, eg to be able to lookup the PlatformManager and if there is 1 single defined use that one and use REQUIRED by default.
Then we can loose the PROPAGATION_REQUIRED bean.
davsclaus:1239058927:2009-04-07T07:02:07.155+0000:1239058927:2009-04-07T07:02:07.155+0000:New Revision: 762641

Introduced transacted DSL keyword to more clearly state a route is transacted. Also Camel can autolookup the spring transaction policy, hence to make the Spring XML configuration a bit easier.


davsclaus:1239062849:2009-04-07T08:07:29.628+0000:1239062849:2009-04-07T08:07:29.628+0000:And now Spring DSL is also easier
trunk: 762645.

davsclaus:1239062860:2009-04-07T08:07:40.178+0000:1239667509:2009-04-14T08:05:09.944+0000:Update wiki page *DONE*
davsclaus:1239660695:2009-04-14T06:11:35.452+0000:1239660695:2009-04-14T06:11:35.452+0000:Camel can now auto lookup the PlatformTransactionManager so the PROPAGATION_REQUIRED spring bean is not needed anymore, if you want to use the default settings.
trunk: 764683
davsclaus:1239661076:2009-04-14T06:17:56.587+0000:1239661076:2009-04-14T06:17:56.587+0000:I was working on letting the JMS component auto lookup the TX manager as well. Patch attached.

However want to discuss it a bit more, eg what if the platform manager in Spring XML is not JMS based, eg a DataSource based = DataSourceTransactionManager. Then I assume the JMS component cannot work anyway.

And the Spring PlatformTransactionManager does not support any operations to determine if it supports your resource type (JMS, JDBC, etc.).

But it makes great sense when you have define a JTA TX manager.

But of course you just need to define the transactionManager property on the ActiveMQComponent then you are good to go anyway.
Such as:
{code:xml}
    <!-- define our activemq component -->
    <bean id=""activemq"" class=""org.apache.activemq.camel.component.ActiveMQComponent"">
        <property name=""connectionFactory"" ref=""jmsConnectionFactory""/>
        <!-- define the jms consumer/producer as transacted -->
        <property name=""transacted"" value=""true""/>
        <property name=""transactionManager"" ref=""jmsTransactionManager""/>
    </bean>
{code}

So what we are talking about is being able to loose the last property
        <property name=""transactionManager"" ref=""jmsTransactionManager""/>
And have Camel auto lookup the TX manager.



davsclaus:1239932025:2009-04-17T09:33:45.092+0000:1239932025:2009-04-17T09:33:45.092+0000:Keeping the JMS component as is.

Last piece off code committed: 765920
davsclaus:1258775876:2009-11-21T11:57:56.250+0000:1258775876:2009-11-21T11:57:56.250+0000:Closing all 2.0M2 tickets"
0,CAMEL-1474,Bug,Major,1.6.0,"1.6.1, 2.0-M2","
None
",Closed,Fixed,"1.6.1, 2.0-M2",William Tam,Marat Gubaidullin,0,0,2009-03-20 19:26:34+00:00,2009-11-21 11:57:56+00:00,"Currently if there is a Camel route that involves two or more cxf endpoints, then the on the wire message headers such as SOAP headers are dropped.


This fix enables one to relay these headers along the route or preserve the old behaviour and drop the headers. 


Headers relay/drop is bidirectional. Both out-of-band (not defined  in WSDL contract) and in-band (defined in WSDL contract) headers are supported.


Relaying headers can be further customized by implementing additional logic inside of MessageHeadersRelay interface. 


The default behaviour is to relay headers provided that  an instance of MessageHeadersRelay bound to message binding namespace allows a header to be relayed. 


Please see .../components/camel-cxf/src/test/java/org/apache/camel/component/cxf/soap/headers/CxfMessageHeadersRelayTest.java for details on how this is done.


Attached is the patch that provides this functionality.


Thanks,
Marat","wtam:1237550998:2009-03-20T20:09:58.293+0000:1237550998:2009-03-20T20:09:58.293+0000:Patch applied (r756742).  Big thanks to Marat.   I'll propagate fix to trunk.

davsclaus:1237599989:2009-03-21T09:46:29.221+0000:1237599989:2009-03-21T09:46:29.221+0000:Remember to update the wiki as well with this new feature
wtam:1238009524:2009-03-26T03:32:04.806+0000:1238009524:2009-03-26T03:32:04.806+0000:Trunk: Committed revision 758505.

davsclaus:1238053047:2009-03-26T15:37:27.251+0000:1238053047:2009-03-26T15:37:27.251+0000:William

You need to fix the SMX side as well. You now get failure in SMX when running Camel 2.0 trunk there:
{code}
13:41:14,211 | WARN  | nerContainer-323 | DefaultMessageListenerContainer  | AbstractMessageListenerContainer  646 | Execution of JMS message listener failed    
java.lang.NoSuchMethodError: org.apache.camel.spi.HeaderFilterStrategy.applyFilterToCamelHeaders(Ljava/lang/String;Ljava/lang/Object;)Z                          
        at org.apache.camel.component.mail.MailBinding.appendHeadersFromCamelMessage(MailBinding.java:126)                                                      
        at org.apache.camel.component.mail.MailBinding.populateMailMessage(MailBinding.java:82)                                                                  
        at org.apache.camel.component.mail.MailProducer$1.prepare(MailProducer.java:48)                                                                          
        at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:354)                                                                
        at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:346)                                                                
        at org.apache.camel.component.mail.MailProducer.process(MailProducer.java:46)                                                                            
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:69)                                                                              
        at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:49)                                                                  
        at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:78)                                                                      
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:115)                                                            
        at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43)           
{code}
wtam:1238054737:2009-03-26T16:05:37.519+0000:1238054737:2009-03-26T16:05:37.519+0000:Thanks Claus. I'll fix SMX
wtam:1238056063:2009-03-26T16:27:43.954+0000:1238056063:2009-03-26T16:27:43.954+0000:@claus
Actually, it looks like your camel-mail hasn't been reinstalled?  Is it possible?
wtam:1238056962:2009-03-26T16:42:42.863+0000:1238056962:2009-03-26T16:42:42.863+0000:@claus
Actually, it looks like the your camel-mail hasn't been
rebuilt/reinstalled?  Is it possible?


davsclaus:1238057021:2009-03-26T16:43:41.205+0000:1238057021:2009-03-26T16:43:41.205+0000:@William

What do you mean with camel-mail?
davsclaus:1238057057:2009-03-26T16:44:17.281+0000:1238057057:2009-03-26T16:44:17.281+0000:Ah

The above stacktrace is from an end user on camel IRC. So maybe he just needs to rebuild all Camel components?
wtam:1238058348:2009-03-26T17:05:48.377+0000:1238058348:2009-03-26T17:05:48.377+0000:Yea, I'd make sure all component are rebuilt and re-install.  From the stackstrace, it looks like camel-mail component is still invoking the old method of HeaderFilterStrategy that does not have a new Exchange argument.
davsclaus:1258775876:2009-11-21T11:57:56.205+0000:1258775876:2009-11-21T11:57:56.205+0000:Closing all 2.0M2 tickets"
0,CAMEL-1473,New Feature,Major,2.0-M1,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Scott Clasen,0,0,2009-03-20 13:03:10+00:00,2010-02-07 09:55:21+00:00,"Since routes are now stoppable and startable, there should be a configuration option for routes in DSL and XML that lest you have routes stopped by default, which can later be started via the camelContext.","davsclaus:1252837856:2009-09-13T18:30:56.660+0000:1252837856:2009-09-13T18:30:56.660+0000:Do you have a real life use case where this is needed?
scott.clasen:1252905652:2009-09-14T13:20:52.996+0000:1252905652:2009-09-14T13:20:52.996+0000:Yes, I do.

I have a camel context that I want to, on startup, process all messages from a given endpoint, before processing messages from the ""main"" endpoint. Something like this...

<camel:camelContext:>
    <camel:route>
            <camel:from uri=""direct:placeholder""/>
            <!-- should be <camel:from uri=""jms:queue:mainQueue"" autoStartup=""false""/> -->
             <camel:to uri=""bean:workBean""/>
        </camel:route>
        <camel:route>
            <camel:from uri=""jms:queue:onStartupQueue""/>
            <camel:to uri=""bean:workBean""/>
        </camel:route>
</camel:camelContext>

Without the ability to declare the routes which should start when the context starts, I have to declare a placeholder endpoint   (direct:placeholder) that will never recvieve any messages. Once I am done with the ""startupQueue"", I shut the startupQueue route down, replace the placeholder uri with the ""real uri"" (jms:queue:mainQueue) and restart the main route. 

If I want to stop and then later  restart the context, I have to do the same kind of gymnastics, but in reverse, resetting the placeholder route on camel context shutdown, so that when the context is restarted , i dont process messages from the main queue.  

davsclaus:1252905970:2009-09-14T13:26:10.362+0000:1252905970:2009-09-14T13:26:10.362+0000:In the future when time permits we should take a look at adding ordering of routes so you can define a start / shutdown order as well.

In which it by default will shutdown in reverse order of startup, but allowing you to customize this as you see fit.
Wonder if we should have some attribute with an integer for the order, that is like the order id that servlets use.

Anyway at first we could add an attribute autoStartup on the <route> tag so you can disable starting certain routes when Camel starts.
davsclaus:1253001331:2009-09-15T15:55:31.167+0000:1253001331:2009-09-15T15:55:31.167+0000:trunk: 815376."
0,CAMEL-1472,New Feature,Major,None,None,"
None
",Closed,Fixed,2.2.0,Ashwin J. Karpe,Claus Ibsen,0,0,2009-03-20 09:46:23+00:00,2010-02-07 09:55:21+00:00,We should add a new component for Apache Lucene integration,"akarpe:1261952900:2009-12-28T06:28:20.408+0000:1261981992:2009-12-28T14:33:12.359+0000:Hi Claus, Jon & Hadrian, 

I have created a new Apache Lucene Component & Query processor and have attached a patch along with a zip file containing the code for your review.  I have also added the requisite unit tests and ensured that the code undergoes checkstyle validation.

The component works as follows

Lucene Producer: Index Creation example
----------------------------------------------------------
{code}
       context.addRoutes(new RouteBuilder() {
            public void configure() {
                from(""direct:start"").
                    to(""lucene://stdQuotesIndex?analyzerRef=#stdAnalyzer&indexDir=#std&srcDir=#load_dir"").
                    to(""mock:result"");

            }
        });
{code}

where each URI parameter setting does the following 
       - analyzerRef:  can be any valid implementation of Lucene Directory Analyzer (StandardAnalyzer, WhitespaceAnalyzer, StopAnalyzer... etc)
       - srcDir: an optional directory location for loading Text or XML documents at endpoint or Lucene Index creation.    

Once created the index can take any exchange body and store its contents in the index.

Important Note: Lucene stipulates that the index be created upfront and then used in a read only mode later for any querying. Hence the index cannot be in flux during query processing. This requires the Lucene Producer to have received its payloads upfront and created the index before any queries can be logged against it.  

Since the URI settings cannot be directly passed, I pass them using the JNDI registry associated with the the Default Component (example shown below).  

Example: Providing values for the Lucene URI
--------------------------------------------------------------
{code}
    @Override
    protected JndiRegistry createRegistry() throws Exception {
        JndiRegistry registry = new JndiRegistry(createJndiContext());
        registry.bind(""std"", new File(""target/stdindexDir""));
        registry.bind(""load_dir"", new File(""src/test/resources/sources""));
        registry.bind(""stdAnalyzer"", new StandardAnalyzer(Version.LUCENE_CURRENT));
        return registry;
    }
{code}

I have also added a Query Processor that is fully capable of running any queries (including wildcards etc) against a Lucene Document Index and present the results in a schema driven XML format (example provided below)

Example:  Query Processor for Lucene called LuceneSearcher
-------------------------------------------------------------------------------------
{code}
       context.addRoutes(new RouteBuilder() {
            public void configure() {
                
                from(""direct:start"").
                    setHeader(""QUERY"", constant(""Rodney Dangerfield"")).
                    process(new LuceneSearcher(""target/stdindexDir"", analyzer, null, 20)).
                    to(""mock:searchResult"");
            }
        });  
{code}

Example: Search Results presentation Format
----------------------------------------------------------------
{code:xml}
<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
<hits xmlns=""http://camel.apache.org/lucene/SearchData"">
      <numberOfHits>2</numberOfHits>
      <hit>
             <number>1</number>
             <hitLocation>15</hitLocation>
             <score>0.9453935</score>
             <data>I worked in a pet store and people kept asking how big I?d get. - Rodney Dangerfield</data>
      </hit>
      <hit>
              <number>2</number>
              <hitLocation>13</hitLocation>
              <score>0.8272193</score>
              <data>I tell ya when I was a kid, all I knew was rejection. My yo-yo, it never came back. - Rodney Dangerfield</data>
      </hit>
</hits>
{code}

I used the latest version of Lucene version 3.0 for the implementation but this can be moved up easily over time since I have no hard restrictions on Lucene versions. The API sets could be different moving backwards though. I have not verified this.... Lucene has undergone a lot of change in each subsequent version it seems :). The good news is that for the most part they offer backward compatibility for API's.

Please find attached the patch as well as a zip file containing the code.

Can you please review and please let me know what you think. I would be happy to update the documentation once I get your feedback and am happy to make any needed changes.

Cheers,

Ashwin...

edit: updated to use code snippets
akarpe:1261953048:2009-12-28T06:30:48.638+0000:1261953048:2009-12-28T06:30:48.638+0000:Pls see attached zip files for your review
davsclaus:1261982725:2009-12-28T14:45:25.994+0000:1261982725:2009-12-28T14:45:25.994+0000:I wonder if its feasible to let the QueryProcessor be integrated into the component so you can use {{.to(""lucene:XXXX"")}} and have some options XXX to make it stand out that its a query and *not* insert.

We can even have a command on the uri, eg. {{""lucene:insert:xxx?yyy""}} or {{""lucene:query:xxx?yyy""}}
akarpe:1261984242:2009-12-28T15:10:42.880+0000:1261984741:2009-12-28T15:19:01.677+0000:Hi Claus,

It should definitely be possible to do that... The only question I have is philosophical as to whether it is ok to do so. The differences between components and processors is rather academic in that components represent endpoints and processors don't... Technically I do not see any reason why the Lucene component itself could not do more.

If you would like me to implement the Query Processor in this fashion I would be happy to do so. I would have preferred a DSL associated processor way, but givent that it requires changes in camel-core and creates unnecessary dependencies and bloat, I avoided this approach. In the absence of that the command on the URI is quite elegant. The Component now has to do a teeny bit more in dealing with the configuration.

Please let me know.

Cheers,

Ashwin... 
hadrian:1261988171:2009-12-28T16:16:11.401+0000:1261994055:2009-12-28T17:54:15.379+0000:Ashwin,

Not at all. There is very clear semantic distinction between the components, endpoints, processors, producers, consumers and a few more core Camel concepts.. Components implement one or a set of related technologies, such as protocols, languages, dataformats, etc. Endpoints represent abstractions of interaction points with a system that uses said technologies. Consumers are the entities that can accept messages using a protocol, and pass it down to a processor, Producers are entities that get a messages from some producers and pass them along to an (external) system using a protocol. The key artifact that binds all this together is the uri that allows you to: uniquely identify an endpoint, determine what component implements it and provides the configuration that determines endpoint behavior.

I like Claus' suggestion of uri {{""lucene:<action>:<config>""}}. It's clean and does not require any change in the core.

That said, another nice contribution! Many thanks and keep them coming.
davsclaus:1261988648:2009-12-28T16:24:08.397+0000:1261988648:2009-12-28T16:24:08.397+0000:Yeah wel said Hadrian.

The raw processors is a bit to low level and has a kind of ugly DSL smell to it.
Most other components offer most interaction with it through _endpoints_ so I think you should try making search part of this as well.

When that is said you can still keep the logic in a Processor when some end users can leverage without the need for an endpoint.
That allows you to use both worlds.

And also a kudo for me for working on yet another Camel component.
akarpe:1261994567:2009-12-28T18:02:47.681+0000:1261994567:2009-12-28T18:02:47.681+0000:Hi Claus & Hadrian,

I agree with both the definitions and recommendations. I will go ahead and update the component to support both insert and query capability via the URI.

I will also as Claus suggested keep the processor around as well for users who would like to use the processor without directly referring to an endpoint.

Cheers,

Ashwin...
njiang:1262111657:2009-12-30T02:34:17.108+0000:1262111657:2009-12-30T02:34:17.108+0000:Hi Ashwin,

You may take the camel-jdbc component as an example, the camel-lucent component does the same thing :)
akarpe:1262147534:2009-12-30T12:32:14.334+0000:1262147534:2009-12-30T12:32:14.334+0000:Hi Willem,

Thanks for the pointer. I will check it out. BTW, I am making good progress on this so I should be able to put a new package together in the next couple of days (if I can get the kids to behave that is :) )

Cheers,

Ashwin...
akarpe:1262217256:2009-12-31T07:54:16.123+0000:1262217349:2009-12-31T07:55:49.343+0000:Hi Claus, Willem & Hadrian,

Please find attached an updated patch and zip file (20091231) containing the recommended changes 
      - Added a Producer with the ability to query Lucene using the URI convention
{code}
                from(""direct:start"").
                    setHeader(""QUERY"", constant(""Seinfeld"")).
                    to(""lucene:MyIndex:query?analyzerRef=#whitespaceAnalyzer&indexDir=#whitespace&maxHits=20"").
                    to(""direct:next"");
{code}
     - Modified the Producer to provide an ability to performs inserts using the URI convention
{code}
                from(""direct:start"").
                    to(""lucene:MyIndex:insert?analyzerRef=#stdAnalyzer&indexDir=#std&srcDir=#load_dir"").
                    to(""mock:result"");
{code}

I also changed the name of the Processor to search the Lucene Index from LuceneSearcher to LuceneQueryProcessor. The LuceneSearcher now is a more focused class for performing the search operation.

Please let me know if you have any questions or have further suggestions.

Cheers,

Ashwin...

P.S. Wish you all a happy new year (2010)...       
davsclaus:1262218449:2009-12-31T08:14:09.311+0000:1262218449:2009-12-31T08:14:09.311+0000:Ashwin cool

One note about the option names. We generally do *not* use xxxRef anymore as we can do # lookup now.

So I propose to rename {{analyzerRef}} to {{analyzer}} and then let it be of type Analyzer or whatever Lucene object type its supposed to be. Then the getter/setter on the Endpoint is using rich types (e.g. not just plain String). Then if you use IoC or other stuff then you can inject those real types.

Did it make sense?
akarpe:1262235036:2009-12-31T12:50:36.780+0000:1262235690:2009-12-31T13:01:30.167+0000:Claus,

Sure, No worries. I will change the URI Query parameter to analyzer from analyzerRef.

Also to clarify, do you mean I should use component.lookup(...) instead of component.resolveAndRemoveReferenceParameter(...) and then pass the Analyzer as any other Spring injected bean that can be pulled using # lookup

I will make the change, test and resubmit...

Ashwin...
akarpe:1262464849:2010-01-03T04:40:49.472+0000:1262464962:2010-01-03T04:42:42.842+0000:Hi Claus ,

I have made the change you suggested and am attaching the patch and zip file with the code. I am also removing the earlier attachments.

If you need me to do something, please let me know. If you approve and would like me to add documentation to the wiki, I would be happy to do so.

Cheers,

Ashwin...

akarpe:1262589657:2010-01-04T15:20:57.445+0000:1262589657:2010-01-04T15:20:57.445+0000:Hi Claus,

Can you please let me know what you think of the submission as it stands now.

Cheers,

Ashwin...
davsclaus:1262605014:2010-01-04T19:36:54.860+0000:1262605014:2010-01-04T19:36:54.860+0000:Ashwin

*Having the following comments, in a bit of messy order as its type as I looked at the code:*
1) Why does JettyConfiguration have a LuceneComponent field? I would assume a xxConfiguration is a simple object that is like a getter/setter that can easily be configured in Spring XML but also can do some URL parsing as well. It should likely also have a default no-arg ctr so you can create it from spring XML more easily. Ah you should probably pass the Component in the {{parseURL}} method so you can use it locally only in this method and leave all the getter/setter for easy Spring XML config as well.
2) The code for parsing the authority could be a bit smarter, however we only have 2 operations so I assume it do. 
3) I dont like the default of the indexDir to be {{target/index}} which smells like a maven folder for unit testing
4) The getMaxHits code could be prettier, eg use that getAndRemoveParameter and then put it in settings afterards. Then you can use Camel Type convert to get it as a integer and avoid the ugly JDK converter and type case code
5) The operation parameter can be an enum and Camel can auto convert to it from a String (case insensitve AFAIR). Just a note.
6) No need to INFO log creating a producer. camel-core have logging for creating consumers/producers already. And INFO logging is to high and the logging info does not provide good details anyway. So please remove it.
7) LuceneEndpoint is preferred to have a default no arg ctr as well and have getter/setter to configure it so you can create that endpoint easily as well. There are some components which is not possible like that, eg Jetty, Http etc. But this one is simple enough for that.
8) Why is the endpoint *non singleton*? Most endpoints can be singleton out of the box
9) The debug loggin in LucenIndexer looks like TRACE logging to me. Try to mimimize DEBUG logging a bit and use TRACE for the very verbose stuff
10) I wonder if the body *cannot* be converted to String should the indexer skip the entire Exchange? Or should some exception be thrown. You can use getMandatoryBody if the body must exist.
11) LuceneProducer. Remove that INFO logging which has no value. camel-core has logging already for starting and stopping resource in Camel
12) I dont think you need to store endpoint in LuceneProducer as the super got it already
13) Dont use NPE exception but throw an IllegalArgumentException instead if some parameters or value is missing. 
14) LucenseSearcher again use TRACE logging for that kind of logging
15) Dont use IOConverter directly to just do a new File(folder) to avoid that hard dependency
16) LuceneQueryProcessor - Dont swallow exceptions and dont use e.printStrackTrace(). This error seems so severe that the exception should be rethrown
17) Remove code that is commented out
18) Why does the search return data as a XML String. Why not have some POJO class with the search result. And let end user marshal to XML if you *really* need XML. I am not keen on this. 



And use isXXXEnabled for those loggers to avoid overhead when that level is not enabled
akarpe:1262642037:2010-01-05T05:53:57.938+0000:1262642037:2010-01-05T05:53:57.938+0000:Hi Claus,

I have made the needed changes and attached the new patch and zip files following modification and appropriate testing.

Please find the updates based on your suggestions

Cheers,

Ashwin...

===============================================
Having the following comments, in a bit of messy order as its type as I looked at the code:
1) Why does JettyConfiguration have a LuceneComponent field? I would assume a xxConfiguration is a simple object that is like a getter/setter that can easily be configured in Spring XML but also can do some URL parsing as well. It should likely also have a default no-arg ctr so you can create it from spring XML more easily. Ah you should probably pass the Component in the parseURL method so you can use it locally only in this method and leave all the getter/setter for easy Spring XML config as well.
Ashwin: Done

2) The code for parsing the authority could be a bit smarter, however we only have 2 operations so I assume it do. 
Ashwin: Done

3) I dont like the default of the indexDir to be target/index which smells like a maven folder for unit testing
Ashwin: Done. Changed target/index to ./indexDirectory

4) The getMaxHits code could be prettier, eg use that getAndRemoveParameter and then put it in settings afterards. Then you can use Camel Type convert to get it as a integer and avoid the ugly JDK converter and type case code
Ashwin: Was unclear on what to do here. Did not change.

5) The operation parameter can be an enum and Camel can auto convert to it from a String (case insensitve AFAIR). Just a note.
Ashwin: Was unclear on what to do here. Did not change.

6) No need to INFO log creating a producer. camel-core have logging for creating consumers/producers already. And INFO logging is to high and the logging info does not provide good details anyway. So please remove it.
Ashwin: Done

7) LuceneEndpoint is preferred to have a default no arg ctr as well and have getter/setter to configure it so you can create that endpoint easily as well. There are some components which is not possible like that, eg Jetty, Http etc. But this one is simple enough for that.
Ashwin: Done

8) Why is the endpoint non singleton? Most endpoints can be singleton out of the box
Ashwin: Done. Changed to singleton

9) The debug loggin in LucenIndexer looks like TRACE logging to me. Try to mimimize DEBUG logging a bit and use TRACE for the very verbose stuff
Ashwin: Done.

10) I wonder if the body cannot be converted to String should the indexer skip the entire Exchange? Or should some exception be thrown. You can use getMandatoryBody if the body must exist.
Ashwin: Done

11) LuceneProducer. Remove that INFO logging which has no value. camel-core has logging already for starting and stopping resource in Camel
Ashwin: Done

12) I dont think you need to store endpoint in LuceneProducer as the super got it already
Ashwin: Done

13) Dont use NPE exception but throw an IllegalArgumentException instead if some parameters or value is missing. 
Ashwin: Done

14) LucenseSearcher again use TRACE logging for that kind of logging
Ashwin: Done

15) Dont use IOConverter directly to just do a new File(folder) to avoid that hard dependency
Ashwin: Done

16) LuceneQueryProcessor - Dont swallow exceptions and dont use e.printStrackTrace(). This error seems so severe that the exception should be rethrown
Ashwin: Done

17) Remove code that is commented out
Ashwin: Done. Sorry about that. It slipped in :)

18) Why does the search return data as a XML String. Why not have some POJO class with the search result. And let end user marshal to XML if you really need XML. I am not keen on this. 
Ashwin: Done. Changed to data structure and removed the JAXB marshaller, schemas etc.

And use isXXXEnabled for those loggers to avoid overhead when that level is not enabled
Ashwin: Done
====================================================================

davsclaus:1262644153:2010-01-05T06:29:13.285+0000:1262644153:2010-01-05T06:29:13.285+0000:Ashwin looks great. I will get it in 2.2.

I may have a few modifications such as letting the Hit classes be serializable and provide a toString on these classes so they can be easy logged etc.
davsclaus:1262647490:2010-01-05T07:24:50.397+0000:1262647490:2010-01-05T07:24:50.397+0000:trunk: 895924.

Ashwin do you mind taking a stab at creating the wiki documentation?
akarpe:1262872044:2010-01-07T21:47:24.514+0000:1262872044:2010-01-07T21:47:24.514+0000:Hi Claus,

Sure thing. I will put ts together right away.

Cheers,

Ashwin...
akarpe:1262897167:2010-01-08T04:46:07.954+0000:1262897167:2010-01-08T04:46:07.954+0000:Hi Claus,

I have created the wiki documentation for Lucene and added the link to the component list.

Cheers,

Ashwin... 


davsclaus:1262901576:2010-01-08T05:59:36.120+0000:1262901576:2010-01-08T05:59:36.120+0000:Thanks Ashwin"
0,CAMEL-1471,Sub-task,Minor,2.0.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Unassigned,Claus Ibsen,0,1,2009-03-20 09:45:22+00:00,2011-04-24 10:01:02+00:00,See James comment on the parent issue,"carloc:1245017805:2009-06-15T06:16:45.894+0000:1245017805:2009-06-15T06:16:45.894+0000:We have a usecase in which we need to be able to connect to two hosts. We need to be able to switch between hosts whenever the connection to one fails. When the connection to host1 fails, we move to host2.
At the same time that we support failover, we need to be able to do round robin on both of them. So if both of them are alive, the camel router dynamically assigns a host to me.  Thanks. So more or less the feature that we are looking for is to be able to do both failover and round robin.
carloc:1245017984:2009-06-15T06:19:44.919+0000:1245017984:2009-06-15T06:19:44.919+0000:oh and another thing, can you include a counter on the number of exceptiosn that occurr.

For example, if there are already 5 instances of this exception, I can kill this node and move to the next one.

Another thing is, how do I put up a node again once it  is already alive.
davsclaus:1269833898:2010-03-29T11:38:18.029+0000:1269833898:2010-03-29T11:38:18.029+0000:The failover LB in Camel 2.3 now supports round robin.


davsclaus:1269833956:2010-03-29T11:39:16.666+0000:1269833956:2010-03-29T11:39:16.666+0000:The round robin mode of failover will just keep trying the next in the list and then eventually hit the one that previously failed. So you do not need to do anything to pop it up
davsclaus:1303610462:2011-04-24T10:01:02.774+0000:1303610462:2011-04-24T10:01:02.774+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-1470,Improvement,Major,1.6.0,"1.6.1, 2.0-M2","
None
",Closed,Fixed,"1.6.1, 2.0-M2",Claus Ibsen,Claus Ibsen,0,0,2009-03-20 06:37:06+00:00,2009-11-21 11:57:56+00:00,"The connection is created one time.


It should be able to check if its connected and if not do a reconnection on the fly.
Just as others, such as mina.","davsclaus:1237505763:2009-03-20T07:36:03.687+0000:1237505763:2009-03-20T07:36:03.687+0000:Trunk: Committed revision 756348.
1.x: Committed revision 756358.
davsclaus:1258775876:2009-11-21T11:57:56.184+0000:1258775876:2009-11-21T11:57:56.184+0000:Closing all 2.0M2 tickets"
0,CAMEL-1469,Task,Major,None,"1.6.1, 2.0-M2","
None
",Closed,Fixed,"1.6.1, 2.0-M2",Willem Jiang,Willem Jiang,0,0,2009-03-20 06:13:35+00:00,2009-11-21 11:57:56+00:00,"CXF 2.2 is released , it's time to upgrade the CXF version for camel-cxf component.","njiang:1237508871:2009-03-20T08:27:51.526+0000:1237508871:2009-03-20T08:27:51.526+0000:http://svn.apache.org/viewvc?rev=756344&view=rev
njiang:1238532652:2009-04-01T04:50:52.304+0000:1238532652:2009-04-01T04:50:52.304+0000:Also applied the patch into  camel 1.x branch
http://svn.apache.org/viewvc?rev=759973&view=rev
davsclaus:1258775876:2009-11-21T11:57:56.136+0000:1258775876:2009-11-21T11:57:56.136+0000:Closing all 2.0M2 tickets"
0,CAMEL-1468,Improvement,Major,None,"1.6.1, 2.0-M2","
None
",Closed,Fixed,"1.6.1, 2.0-M2",Willem Jiang,Willem Jiang,0,0,2009-03-20 02:27:18+00:00,2009-11-21 11:57:56+00:00,"Since we can get the camel context properties from exchange, it makes sense to add the camelContextProperties express in the expression builder.","njiang:1237517170:2009-03-20T10:46:10.805+0000:1237517170:2009-03-20T10:46:10.805+0000:trunk
http://svn.apache.org/viewvc?rev=756313&view=rev
camel-1.x
http://svn.apache.org/viewvc?rev=756318&view=rev
davsclaus:1258775876:2009-11-21T11:57:56.077+0000:1258775876:2009-11-21T11:57:56.077+0000:Closing all 2.0M2 tickets"
0,CAMEL-1467,Bug,Major,None,"1.6.1, 2.0-M2","
None
",Closed,Fixed,"1.6.1, 2.0-M2",Claus Ibsen,Orton Huang,0,0,2009-03-19 17:35:22+00:00,2010-07-08 05:15:50+00:00,"on publishing messages lots of messages using XMPP component (layered on top of Smack 3.0.4/3.1.0 client), Out of Memory Exception occurs. 


With standard JVM settings, client runs out of memory at around 6600 messages sent. With -Xmx1024M set, client runs out at ~110K messages sent.


Appears that on a


chat.sendMessage(message);


The server sends the message back and the messages needs to be processed on the client side or the client will continue filling its local queue until it runs out of memory


FIX:


For XmppPrivateChatProducer and XmppGroupChatProducer, need to insert chat.nextMessage() after chat.sendMessage()


 public void process(Exchange exchange) {
   ...
        try 

{
            chat.sendMessage(message);
            chat.nextMessage();
        }

 catch (XMPPException e) 

{
            throw new RuntimeXmppException(e);
        }

    }","davsclaus:1237505778:2009-03-20T07:36:18.081+0000:1237505778:2009-03-20T07:36:18.081+0000:Trunk: Committed revision 756348.
1.x: Committed revision 756358.
davsclaus:1237505853:2009-03-20T07:37:33.187+0000:1237505853:2009-03-20T07:37:33.187+0000:@Orton

{{     chat.nextMessage();}} was only available in XmppGroupChatProducer. So I have only fixed it 1 place.
On XmppPrivateChatProducer the method does not exists.



othuang:1237534843:2009-03-20T15:40:43.010+0000:1237534843:2009-03-20T15:40:43.010+0000:Hi Claus,

Good to hear from you again. Hope you're doing well

Sorry bout the confusion.

In XmppPrivateChatProducer, the method that needs to be updated is:

I added the chat.nextMessage() after the chat.sendMessage(message) (line 73) below:

Thanks!

------

  public void process(Exchange exchange) {
        String threadId = exchange.getExchangeId();

        try {
            ChatManager chatManager = endpoint.getConnection().getChatManager();
            Chat chat = chatManager.getThreadChat(threadId);

            if (chat == null) {
                chat = chatManager.createChat(getParticipant(), threadId, new MessageListener() {
                    public void processMessage(Chat chat, Message message) {
                        // not here to do conversation
                    }
                });
            }

            // TODO it would be nice if we could reuse the message from the exchange
            Message message = new Message();
            message.setTo(participant);
            message.setThread(threadId);
            message.setType(Message.Type.normal);

            endpoint.getBinding().populateXmppMessage(message, exchange);
            if (LOG.isDebugEnabled()) {
                LOG.debug("">>>> message: "" + message.getBody());
            }

            chat.sendMessage(message);
            // receive the return message here - orton
            chat.nextMessage();
        } catch (XMPPException e) {
            throw new RuntimeXmppException(e);
        }
    }





davsclaus:1237542667:2009-03-20T17:51:07.851+0000:1237542667:2009-03-20T17:51:07.851+0000:Orton

There are *no* nextMessage() on the chat object in XmppPrivateChatProducer.
Only the other one got the method.
othuang:1237545284:2009-03-20T18:34:44.243+0000:1237545284:2009-03-20T18:34:44.243+0000:Hi Claus,

Ah, sorry little confusion. The nextMessage() needs to be in there to avoid the OOM exception...



Orton


On 3/20/09 12:52 PM, ""Claus Ibsen (JIRA)"" <jira@apache.org> wrote:



    [ https://issues.apache.org/activemq/browse/CAMEL-1467?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel=50715#action_50715 ]

Claus Ibsen commented on CAMEL-1467:
------------------------------------

Orton

There are *no* nextMessage() on the chat object in XmppPrivateChatProducer.
Only the other one got the method.


--
This message is automatically generated by JIRA.
-
You can reply to this email to add a comment to the issue online.



othuang:1238001595:2009-03-26T01:19:55.562+0000:1238001595:2009-03-26T01:19:55.562+0000:Hi Claus,

Just downloaded the Camel 1.6.1 version... Do you think you can make the same XMPP fixes in 1.6.1 that you made in 2.0?


FIX:
For XmppPrivateChatProducer and XmppGroupChatProducer, need to insert chat.nextMessage() after chat.sendMessage()
 public void process(Exchange exchange) {
    ...
         try {
             chat.sendMessage(message);
             chat.nextMessage(); // <----- this line needed!
         } catch (XMPPException e) {
             throw new RuntimeXmppException(e);
         }
           }


Thanks!!
Orton


On 3/20/09 12:52 PM, ""Claus Ibsen (JIRA)"" <jira@apache.org> wrote:



    [ https://issues.apache.org/activemq/browse/CAMEL-1467?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel=50715#action_50715 ]

Claus Ibsen commented on CAMEL-1467:
------------------------------------

Orton

There are *no* nextMessage() on the chat object in XmppPrivateChatProducer.
Only the other one got the method.


--
This message is automatically generated by JIRA.
-
You can reply to this email to add a comment to the issue online.



othuang:1238001596:2009-03-26T01:19:56.049+0000:1238001596:2009-03-26T01:19:56.049+0000:Hi Claus,

Just downloaded the Camel 1.6.1 version... Do you think you can make the same XMPP fixes in 1.6.1 that you made in 2.0?


FIX:
For XmppPrivateChatProducer and XmppGroupChatProducer, need to insert chat.nextMessage() after chat.sendMessage()
 public void process(Exchange exchange) {
    ...
         try {
             chat.sendMessage(message);
             chat.nextMessage(); // <----- this line needed!
         } catch (XMPPException e) {
             throw new RuntimeXmppException(e);
         }
           }


Thanks!!
Orton


On 3/20/09 12:52 PM, ""Claus Ibsen (JIRA)"" <jira@apache.org> wrote:



    [ https://issues.apache.org/activemq/browse/CAMEL-1467?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel=50715#action_50715 ]

Claus Ibsen commented on CAMEL-1467:
------------------------------------

Orton

There are *no* nextMessage() on the chat object in XmppPrivateChatProducer.
Only the other one got the method.


--
This message is automatically generated by JIRA.
-
You can reply to this email to add a comment to the issue online.



davsclaus:1238108459:2009-03-27T07:00:59.785+0000:1238108459:2009-03-27T07:00:59.785+0000:Fixed it on XmppConsumer as well. Thanks orton

trunk:  759033, 759036
1.x: 759035
davsclaus:1258775876:2009-11-21T11:57:56.040+0000:1258775876:2009-11-21T11:57:56.040+0000:Closing all 2.0M2 tickets
mark.ford:1278389696:2010-07-06T12:14:56.638+0000:1278389696:2010-07-06T12:14:56.638+0000:The patch for this bug was removed in revision 779121. The result is that the XMPPConsumer does not remove the message from the MultiUserChat and the possibility for an OutOfMemoryException still exists.

The OOM occurs because the org.jivesoftware.smackx.muc.RoomListenerMultiplexor is a packet listener that contains a collector that stores all of the messages received up to a hard coded limit of 65k messages. These messages are not removed unless muc.pollMessage() or muc.nextMessage() is called. I'm not sure the reason behind storing these messages in a collector. 

I have tested this in 2.1.0 and 2.3.0 and reviewed the code in 2.4-SNAPSHOT. I can supply a test case if needed.

mark.ford:1278397630:2010-07-06T14:27:10.381+0000:1278397630:2010-07-06T14:27:10.381+0000:Here's a relevant defect from the smack library:

http://www.igniterealtime.org/issues/browse/SMACK-129
davsclaus:1278401350:2010-07-06T15:29:10.074+0000:1278401350:2010-07-06T15:29:10.074+0000:Yeah Mark a test case and a patch is much welcome.
davsclaus:1278537350:2010-07-08T05:15:50.263+0000:1278537350:2010-07-08T05:15:50.263+0000:This issue is continued at CAMEL-2922"
0,CAMEL-1466,Bug,Major,2.0-M1,,"
None
",Closed,Won't Fix,None,Willem Jiang,Moulliard Charles,0,1,2009-03-19 07:55:00+00:00,2010-02-07 09:55:21+00:00,"I have created two bundles :  



one for the files generated by wsdl2java of CXF = bundle reportingincident.service (= bundle A)
and the other for my camel-context using these files = bundle reportingincident.camel (= bundle B)



In the bundle A, I have created a directory under META-INF called wsdl where my reporting_incident.wsdl file is and exported the package (in this case, the wsdl file) using the syntax : <Export-Package>META-INF.wsdl</Export-Package>


The bundle B imports the package META-INF.wsdl using the following syntax
<Import-Package>META-INF.wsdl</Import-Package>


Unfortunately, when Camel-cxf endpoint and CXF are created and started during the load of the camel-context, Cxf claims that it does not find the file under c:/xxxx/vvvv/apache-servicemix-kernet-1.1.0-SNAPSHOT/bin/reporting_incident.wsdl


According to the documentation of camel-cxf endpoint, the wsdl file defined for the parameter wsdlUrl is loaded through the classpath. 


http://www.nabble.com/forum/ViewPost.jtp?post=22582759&framed=y","davsclaus:1243067996:2009-05-23T16:39:56.459+0000:1243067996:2009-05-23T16:39:56.459+0000:Charles is this still an issue or can we close it?
cmoulliard:1243207180:2009-05-25T07:19:40.478+0000:1243207180:2009-05-25T07:19:40.478+0000:From my point of view, this ticket must not be closed. There is a classloading issue (specific to OSGI) that must be solved.
sweber:1250052424:2009-08-12T12:47:04.298+0000:1250052424:2009-08-12T12:47:04.298+0000:This maybe help to bypass this problem:
http://pastebin.com/f4a8c27f4

njiang:1252219313:2009-09-06T14:41:53.664+0000:1252219313:2009-09-06T14:41:53.664+0000:@Charles

I just tested if you add the ""classpath:"" before the wsdl url, CXF will try to use the thread context classloader to load the wsdl file.
And it will work for you case :)
"
0,CAMEL-1465,Improvement,Minor,2.0.0,None,"
None
",Closed,Fixed,2.0-M2,Willem Jiang,Willem Jiang,0,1,2009-03-18 06:40:33+00:00,2009-11-21 11:57:55+00:00,"We should provide the Spring configuration which equals to the Java DSL route rule in camel-example-reportincident, as some user prefer to use Spring.","njiang:1237330609:2009-03-18T06:56:49.159+0000:1237330609:2009-03-18T06:56:49.159+0000:trunk
http://svn.apache.org/viewvc?rev=755489&view=rev
cmoulliard:1237343564:2009-03-18T10:32:44.114+0000:1237343564:2009-03-18T10:32:44.114+0000:@Willem,

There are two camel-config.xml files in the resources directory. 

This one must be removed : C:\Workspace\apache-camel-source\examples\camel-example-reportincident\src\main\resources\camel-config.xml
davsclaus:1258775875:2009-11-21T11:57:55.979+0000:1258775875:2009-11-21T11:57:55.979+0000:Closing all 2.0M2 tickets"
0,CAMEL-1463,Bug,Major,1.6.0,"1.6.1, 2.0-M2","
None
",Closed,Fixed,"1.6.1, 2.0-M2",Claus Ibsen,Claus Ibsen,0,0,2009-03-17 08:27:47+00:00,2009-11-21 11:57:55+00:00,"See nabble:
http://www.nabble.com/StreamCaching-in-Camel-1.6-td22305654s22882.html


I will add an unit test that demonstrates this:
org.apache.camel.processor.ChoiceNoErrorHandlerTest


The route should at all time not contain any error handler at all, regardless wether JMX is enabled or not.","davsclaus:1237253362:2009-03-17T09:29:22.480+0000:1237253362:2009-03-17T09:29:22.480+0000:I have committed a unit test showing the bug
Committed revision 755163.

org.apache.camel.processor.ChoiceNoErrorHandlerTest

The bug is not fixed yet, only a test to show the bug
davsclaus:1237264888:2009-03-17T12:41:28.845+0000:1237264888:2009-03-17T12:41:28.845+0000:Lowering priority to major.

This bug is only manifested when
- disabled error handler = noErrorHandler (not default)
- disabled JMX (not default)
davsclaus:1237278276:2009-03-17T16:24:36.450+0000:1237278276:2009-03-17T16:24:36.450+0000:Its the {{InstrumentationErrorHandlerWrappingStrategy}} that is the culprint.

With JMX enable camel context gets this strategy added that skips interceptors.
But with no JMX we do not have a such a strategy and thus a default error handler is added
davsclaus:1237331138:2009-03-18T07:05:38.446+0000:1237331138:2009-03-18T07:05:38.446+0000:Yes got it now.

Trunk: Committed revision 755487.
1.x: Committed revision 755493.
davsclaus:1258775875:2009-11-21T11:57:55.947+0000:1258775875:2009-11-21T11:57:55.947+0000:Closing all 2.0M2 tickets"
0,CAMEL-1462,Bug,Major,1.6.0,"1.6.1, 2.0-M2","
None
",Closed,Fixed,"1.6.1, 2.0-M2",Claus Ibsen,Claus Ibsen,0,0,2009-03-17 05:43:34+00:00,2009-11-21 11:57:55+00:00,"If you run Camel on OC4j then it will by default not grant access to its JMX MbeanServer.


So if you use jmxAgent in Camel spring configuration it is setup but Camel cannot access it and it causes a NPE when you do endpoint lookup later.","davsclaus:1237246555:2009-03-17T07:35:55.667+0000:1237246555:2009-03-17T07:35:55.667+0000:Trunk: Committed revision 755136.
1.x: Committed revision 755138.

Camel will now fallback to Non JMX if it cannot access it on Camel context startup.
It is logged at WARN level.
davsclaus:1258775875:2009-11-21T11:57:55.929+0000:1258775875:2009-11-21T11:57:55.929+0000:Closing all 2.0M2 tickets"
0,CAMEL-1461,Bug,Major,1.6.0,"1.6.1, 2.0-M2","
None
",Closed,Fixed,"1.6.1, 2.0-M2",Claus Ibsen,Michael Chen,0,1,2009-03-16 18:15:23+00:00,2009-11-21 11:57:55+00:00,"If a route contains a node that publishes to a topic, the route is incorrectly suspended for a default 20 seconds at the topic node.  Further, JmsProducer.java checks the MEP of the original request Exchange and not the endpoint of the topic.


For example, say I have a route built like this:



from(""activemq:queue:request"").
  to(""generate_news"").
  to(""activemq:topic:news"").
  to(""do_something_else"");




The original request is expecting a reply. However, after the ""news"" is pumped into the news topic, there is a default 20 second wait (requestTimeout).  This wait always results in the exception: ""The OUT message was not received within: 20000 millis on the exchange..."" 


After reading the JmsProducer code, I changed the route to the following:



from(""activemq:queue:request"").
  to(""generate_news"").
  to(""activemq:topic:news?exchangePattern=InOnly"").
  to(""do_something_else"");




This reveals the root of the bug, which is in the first few lines of method org.apache.camel.component.jms.JmsProducer.process(Exchange):



//
    public void process(final Exchange exchange) {
        final org.apache.camel.Message in = exchange.getIn();

        if (exchange.getPattern().isOutCapable()) {




The above if statement checks the MEP of the original request's Exchange and not the new endpoint of the news topic. This makes the above ""?exchangePattern=InOnly"" configuration useless, because the original request MEP is InOut.  The result is that after that 20 second time-out, the temporary queue for the original request has expired, so the whole request failed. Note that the next node ""do_something_else"" is never reached due to the time-out exception.","davsclaus:1237795229:2009-03-23T16:00:29.555+0000:1237795229:2009-03-23T16:00:29.555+0000:Have you tried the inOnly() DSL

{code}
from
to
inOnly(""activemq:topic:news"")
to
{code}
davsclaus:1237856849:2009-03-24T09:07:29.241+0000:1237856849:2009-03-24T09:07:29.241+0000:Okay I got this boiled down to
- when you sent an inOnly to the jms topic the JMSReplyTo is still there from the original JMS Message. This one needs to be cleared so Camel wont try to send a reply from the topic.

This can however be disabled on the endpoint with {{""activemq:topic:news?disableReplyTo=true""}}.

davsclaus:1237857061:2009-03-24T09:11:01.910+0000:1237864693:2009-03-24T11:18:13.041+0000:This one works:
{code}
                from(""activemq:queue:inbox"")
                    .to(""mock:inbox"")
                    .inOnly(""activemq:topic:order"")
                    .beanRef(""orderService"", ""handleOrder"");

                from(""activemq:topic:order?disableReplyTo=true"")
                    .to(""mock:topic"");
{code}

I will work on the {{disableReplyTo=true}} so it is not needed to be specified. 
davsclaus:1237864763:2009-03-24T11:19:23.125+0000:1238046131:2009-03-26T13:42:11.010+0000:Fixed now. The disableReplyTo is now not needed.

trunk: r757693, 757730, 758617
1.x: 757728, 758638
marat:1238777091:2009-04-04T00:44:51.503+0000:1238777091:2009-04-04T00:44:51.503+0000:Michael,

I think your analysis is incorrect. The from(...:queue/topic....) route would only create an INOUT Exchange if you've explicitly set a Message.replyTo field in the code that sent the message into this queue/topic in the first place. So if you did that then it is expected that the route will return a reply unless you explicitly set disableReplyTo=true in the from() endpoint. The replyTo value would have still been propagated, just the runtime would not create a consumer to expect a reply from the to() endpoint

Claus, 

I think the fact that the disableReplyTo=true does not mean that we need to reset the replyTo or correlationID on the outgoing message in the producer that belongs to to(...) endpoint

The example shows a case in point:

from(""amq-1:request"").to(""amq-2:request""); // route-1
from(""amq-2:reply"").to(""amq-1:reply""); // route-2

so you can have:

app-1 -> amq-1:request -> amq2:request -> app-2 -> amq-2:reply -> amq1:reply -> app-1

Here we have app-1 and app-2 have a conversion over two queues In fact if you want to do any kind of transactional bridging this is the pattern you'd have to use. 

Also when one would want to use CamelTemplate to produce messages to a JMS broker with the replyTo != null this change would reset replyTo = null unless explicitQosEnabled=true irrespective of whether we're sending to a destination that is used in a one-way or a two-way route.

So I'd revert the change as I think the use case that this bug was filed under can be simply resolved by using: from(""...?disableReplyTo=true"") and keeping the changes introduced changes to the contract that can really be avoided.

Marat
davsclaus:1238797043:2009-04-04T06:17:23.753+0000:1238797043:2009-04-04T06:17:23.753+0000:@Marat,

The problem is that the replyTo is inherited from the very first {{from(""activemq:queue:request"")}} when you send a replyTo JMS Message to it in the first place - then this replyTo is propagated in the the route.
And we dont want this replyTo propgated when you send to other JMS destinations, such as the topic.

The changes introduces check the MEP contract. If the MEP is *not* out capable then it wont set a {{JMSReplyTo}} on the {{javax.jms.Message}} object when Camel sends it. 
This is more correct than ignoring this fact, its very common to route messages with Camel using JMS and send it to other JMS destinations during the routing.

Remembering to add {{jmsDisableReplyTo=true}} is a pity workaround IMHO and many end users will face same problem as Michael and wont find the solution immediately. The JMS component has too many options and its hard to know which options to use for what. Maybe splitting the table into commonly used, rarely used and advanced only would help out. 
davsclaus:1238798039:2009-04-04T06:33:59.840+0000:1238798039:2009-04-04T06:33:59.840+0000:Oh and not to forget. What if the topic we sent to in the original sample is *not* based on Camel, then you cannot disable reply to on this destination.

What if the topic was a WebSphereMQ destination? 

marat:1238837870:2009-04-04T17:37:50.863+0000:1238838151:2009-04-04T17:42:31.679+0000:Claus,

I disagree. 

> The problem is that the replyTo is inherited from the very first from(""activemq:queue:request"") when you send a replyTo JMS Message to it in the first place - then this replyTo is propagated in the the route.

from() becomes an INOUT  *only* from the fact that the original message came with replyTo != null or you explicitly set a replyDestination as part of from() endpoint configuration.

The fact that the user choose to set the replyTo destination in the original message suggests that one wants to receive a reply to its original message. If the designer of the Camel route decided to drop this replyTo then he has to explicitly state that in the contract. Had Michael done that he'd be all set. 

You want to make his live easier and not to require this flag. Fine. 

But you just broke the old contract and now people that use CamleTemplate to send JMS messages with replyTo not null will have to set explicitQoSEnabled=true on the from() endpoint they send messages to! You will soon have people coming back and complaining about what I just described.


> And we dont want this replyTo propgated when you send to other JMS destinations, such as the topic.

Why not? It is a very reasonable default to have the replyTo destination (topic or queue) be relayed along the route as this was the message originator intention. You *could* plugin a HeaderFilterStrategy and exclude headers you wish were not propagated (including replyTo header). If HeaderFilterStrategy is not supported in JMS I'd rather fix this than keep the changes comitted.

> What if the topic we sent to in the original sample is not based on Camel, then you cannot disable reply to on this destination.

Why not? 

> What if the topic was a WebSphereMQ destination? 

If you have a cross broker message flow then you need to have alwaysCopyMessage=true as you will not be able to send a AMQ message with replyTo != null to WebSphere with replyTo != null  This is already supported today. The replyTo will be resolved using WebSphere session.

I still recommend to revert the change.

davsclaus:1238839547:2009-04-04T18:05:47.120+0000:1238839547:2009-04-04T18:05:47.120+0000:>> The problem is that the replyTo is inherited from the very first from(""activemq:queue:request"") when you send a replyTo JMS Message to it in the first place - then this replyTo is propagated in the the route.
> from() becomes an INOUT only from the fact that the original message came with replyTo != null or you explicitly set a replyDestination as part of from() endpoint configuration.
Agree

> The fact that the user choose to set the replyTo destination in the original message suggests that one wants to receive a reply to its original message. If the designer of the Camel route decided to drop this
> replyTo then he has to explicitly state that in the contract. Had Michael done that he'd be all set.
That is what he is in fact trying to do. He want to return a reply but at the same time send a fire and forget message to a topic. To send this ""fire and forget"" message he should use either:
- wireTap
- inOnly
- to with pattern=InOnly

The problem is that when he does that Camel will propagate the original JMS headers along, and then Camel itself sees that there is a JMSReplyTo and therefore it want to wait as well.

The original exchange will still be InOut and Camel will send a reply back. Its the _fire and forget_ JMS message that is the problem. This cannot be cleanup done out of the box with Camel if we revert the change, then you need to add clear all the JMS headers with a custom HeaderFilterStategy or whatever. This is not very easy. The route explicit states that its a _fire and forget_ and thus there should be *no* JMSReplyTo send.

The HeaderFilterStategy is a kinda advanced feature where you need to plug it in and add your own java implementation. This is not desired for doing a very common route such as spin off a _fire and forget_ while doing a JMS request/reply. 


> But you just broke the old contract and now people that use CamleTemplate to send JMS messages with replyTo not null will have to set explicitQoSEnabled=true on the from()
> endpoint they send messages to! You will soon have people coming back and complaining about what I just described.
What do you mean? If the use CamelTemplate and send a request/reply (eg requestXXX) then its an InOut and then the from endpoint should not have any special options.

For instance in the code below:
{code}
from(""activemq:queue:foo).to(""bean:bye"");

String out = template.requestBody(""activemq:queue:foo"", ""Hello"", String.class);
{code}

Assuming the {{bye}} bean returns a response such as: {{ return ""Bye World"" }} then the {{out}} String will contain the value returned = {{Bye World}}.

The method {{requestBody}} is used for *InOut* MEP and thus Camel will set a {{JMSReplyTo}} when it send the {{Hello}} message to the JMS foo queue. And when Camel receives this message it sees the JMSReplyTo and returns the response.

The contract is *not* broken.



>> What if the topic we sent to in the original sample is not based on Camel, then you cannot disable reply to on this destination.
> Why not?
Why should Camel send a JMSReplyTo to a MQ destination in the first place where we *do not* want a reply? Lets imagine the MQ destination is part of a production system you cannot change.
So what if it inspects this JMSReplyTo and want to send a reply that it was *never* intended to send. It was after all just a _fire and forget_ message that was send to it. 
marat:1238848208:2009-04-04T20:30:08.522+0000:1238848208:2009-04-04T20:30:08.522+0000:Claus,

Ok I think there are a couple of things going on. My tests are failing not due to replyTo being set to null but rather correlationID set to null. I'll explain bellow.

So let's take a look at the original requirement again.

> That is what he is in fact trying to do. He want to return a reply but at the same time send a fire and forget message to a topic.

So shouldn't his route look like this?

/* 1 */  from(""activemq:queue:inbox"")                         
/* 2 */  .inOnly(""mock:inbox"")                                
/* 3 */  .inOnly(""activemq:topic:order"")                  
/* 4 */  .beanRef(""orderService"", ""handleOrder"");  

So the steps are 

- Either a native JMS client or CamelTemplate send a message with replyTo != null to (1)
- (1) would propagate the replyTo and correlationID and will expect a reply for up to timeout
- (2) and (3) and (4) should send the messages along without expecting the reply, *but still propagating replyTo and correlationID*
Now whatever endpoint (2, 3, 4)  or some external consumer off (3) would take that replyTo and correlationID values and will send the reply back to (1) completing the flow

So the point Michael made about JMS component honoring the contract of the 'to' endpoints is valid. We need to fix this so that if this is an inOnly MEP on the to() endpoint we won't be expecting a reply on the to() endpoint but will still propagate replyTo and correlationID values

Now the reason my tests are all going busts is because of the following:

I have a bridge scenario between two independent JMS brokers say AMQ and WMQ with XA in between. I need to use two one way routes in order to accommodate that due to transactional semantics.

/*1 */ from(""amq:queue:request"").to(""mq:queue:request"");
/*2 */ from(""mq:queue:reply"").to(""amq:queue:reply"");

So in order to be able to correlate a request message (1) I load a correlationID, but since that change the correlationID is dropped and when (2) writes a reply message I miss them since their correlationID is null now.

So I think we can address both of the use cases if we were to still propagate replyTo and correlationID but honor the inOnly pattern of the to() endpoints even if the endpoint prior to it in the chain was an  in-out

What do you think?
davsclaus:1238850080:2009-04-04T21:01:20.083+0000:1238850080:2009-04-04T21:01:20.083+0000:Marat,

Just a quick reply.

In your bridge scenario have you tried the *preserveMessageQos=true* in the to destination?
That should keep the JMSReplyTo and JMSCorrelationID.

On a side note I do think there are two scenarios here that is difficult to support out of the box without special configuration.
Just the most obvious should be the default one, that is IMHO the problem Michael faced.

In your first example Camel will at (1) expect to return a reply, and that reply is when the current exchanges ends, and it ends after step (4). So the reply sent back is what the Exchange OUT message is after step (4) = what the order service bean returns.

On the other hand, if you for instance at step (3) had a consumer on the other side, that *also* sends a reply, then you end up with sending *x2* replies. To prevent this you have to set the *disableReplyTo* on the from endpoint, so Camel after step (4) does not return a reply, and the only reply is from the ""other side"".


> So the point Michael made about JMS component honoring the contract of the 'to' endpoints is valid. We need to fix this so that if this is an inOnly MEP on the to() endpoint 
> we won't be expecting a reply on the to() endpoint but will still propagate replyTo and correlationID values
We can only fix this in the JMS Producer to *not* listen for a reply. But the problem is that if we also propagate JMSReplyTo/JMSCorrelationID then the consumer does not know its an *inOnly* and this consumer can/will still send a reply. If this consumer is also Camel then it will send a reply to the JMSReplyTo, and thus we end up with the *x2* reply situation, even thought the to was set with a {{pattern=InOnly}}. As I understand there are no MEP standard for JMS, so we cannot propate the JMSReplyTo/JMSCorrelationID and then at the same time tell the consumer, *not* to send a reply.

What do you think?
davsclaus:1238851291:2009-04-04T21:21:31.986+0000:1238851291:2009-04-04T21:21:31.986+0000:> So I think we can address both of the use cases if we were to still propagate replyTo and correlationID but honor the inOnly pattern of the to() endpoints even
> if the endpoint prior to it in the chain was an  in-out
Yeah, that should be our goal. We agree here.

That should already be possible if you set the *preserveMessageQos=true* option in the *to*. That instructs Camel JMSProducer to _not_ drop the JMSReplyTo/JMSCorrelationID. See JMSProducer.java around codeline 275.

Eg we kinda have reverse the problem between your bridge and Michaels use-case, for which must configure the JMS endpoints with special options.
Before Michael had to se the disableReplyTo=true on his from route. This was in fact quite wrong as the consumer could have been a non Camel one.
Well never the less its fixed now.

Now its your situation that has to set the special *preserveMessageQos=true* on the to endpoint, eg when sending.

So dont we have the solution now?
marat:1238883389:2009-04-05T06:16:29.610+0000:1238883389:2009-04-05T06:16:29.610+0000:Claus,

Yes I did manage to get all of the tests to pass before I restarted this thread, but as you said my use case is now quite cumbersome and I think it really does not have to be.

Please take a look at the patch attached. I think this will keep all happy. 

I also show how the use case you described could be implemented. That is when one wants to have a request/reply over a queue and then also send a message (notification) over a topic and then collect correlated acknowledgement message(s) that those notification have been received.

source app -> queue:request -> target app -> queue:reply -> source app
                     -> topic:notification

topic:notification -> notification subscriber app 1 -> queue:notificationAck
topic:notification -> notification subscriber app 2 -> queue:notificationAck
queue:notificationAck -> source app correlates ack using original request correlationID or a unique selector

The usual use case for topics are one way messages, so if the user really wants to reply to destination that came with a message received over a topic then the receiver should be ready to accept more than one reply correlated on the same source message. Since a request/reply pattern is 1 request 1 reply, then the reply destination embedded in the message that came over a topic should really be decoupled from the destination used to receive a reply from request/reply pattern.

davsclaus:1238886765:2009-04-05T07:12:45.789+0000:1238886765:2009-04-05T07:12:45.789+0000:Marat,

> Yes I did manage to get all of the tests to pass before I restarted this thread, but as you said my use case is now quite cumbersome and I think it really does not have to be.
Did you try the option I suggested?


> Please take a look at the patch attached. I think this will keep all happy.
Thanks a lot for the patch and that you kept pushing your views. And not the least had the patience to explain it in details so I could understand it :)

I have applied the patch:
trunk: 762047
1.x: 762050


> The usual use case for topics are one way messages, so if the user really wants to reply to destination that came with a message received over a topic then the receiver
> should be ready to accept more than one reply correlated on the same source message. 
Agree

> Since a request/reply pattern is 1 request 1 reply, then the reply destination embedded in the message
> that came over a topic should really be decoupled from the destination used to receive a reply from request/reply pattern.
Agree if you by decoupled mean the original request/reply pattern - eg the original caller JMSReplyTo should be decoupled from the JMSReplyTo that came over the topic. 


marat:1238998328:2009-04-06T14:12:08.685+0000:1238998328:2009-04-06T14:12:08.685+0000:Claus,

Thanks for applying the patch. Yes I was aware that I could work around the change made, but with the patch you just applied no changes will be required either to my tests/demos and Michael will still be happy.

Cheers,
Marat
davsclaus:1258775875:2009-11-21T11:57:55.883+0000:1258775875:2009-11-21T11:57:55.883+0000:Closing all 2.0M2 tickets"
0,CAMEL-1460,Improvement,Minor,None,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2009-03-16 06:46:37+00:00,2009-11-21 11:57:55+00:00,I am doing a bit of cleanup in DLC and it should also be possible to set a Endpoint as a reference from eg Spring,"davsclaus:1237161155:2009-03-16T07:52:35.134+0000:1237161155:2009-03-16T07:52:35.134+0000:Committed revision 754836.



davsclaus:1258775875:2009-11-21T11:57:55.864+0000:1258775875:2009-11-21T11:57:55.864+0000:Closing all 2.0M2 tickets"
0,CAMEL-1459,Improvement,Critical,None,None,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2009-03-16 06:36:25+00:00,2009-11-21 11:57:55+00:00,"See nabble:
http://www.nabble.com/Camel-2.0---About-type-converter-degrade-performance-issue-td22532536s22882.html","davsclaus:1237347498:2009-03-18T11:38:18.936+0000:1237347498:2009-03-18T11:38:18.936+0000:Game plans is:
- Add getMandatoryBody(Class type) to {{org.apache.camel.Message}} that will thrown a NoTypeConvertException if not possible to convert.
- Existing getBody() will *not* throw the exception but return {{null}} if no convertions possible

- Add mandatoryConvertTo(Class type, Object value) to {{org.apache.camel.spil.TypeConverter}} that will thrown a NoTypeConvertException if not possible to convert.
- Existing convertBody() will *not* throw the exception but return {{null}} if no convertions possible
davsclaus:1237428342:2009-03-19T10:05:42.161+0000:1237436067:2009-03-19T12:14:27.845+0000:Committed revision 755890 and 755958
davsclaus:1258775875:2009-11-21T11:57:55.844+0000:1258775875:2009-11-21T11:57:55.844+0000:Closing all 2.0M2 tickets"
0,CAMEL-1458,New Feature,Major,None,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2009-03-14 15:14:52+00:00,2009-11-21 11:57:55+00:00,"We need SPI for FactoryFinder to allow 3rd part containers to integrate with Camel if they have some problems with classloading/resource loading.
Eg in camel-osgi we find resources using bundles.


But this will benefit JBoss and other platforms as well.","davsclaus:1237015188:2009-03-14T15:19:48.942+0000:1237017221:2009-03-14T15:53:41.212+0000:Committed revision 754461.
Committed revision 754465.

davsclaus:1258775875:2009-11-21T11:57:55.806+0000:1258775875:2009-11-21T11:57:55.806+0000:Closing all 2.0M2 tickets"
0,CAMEL-1457,Improvement,Minor,None,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2009-03-13 12:38:53+00:00,2009-11-21 11:57:55+00:00,"Relates to the work of improving the BeanInfo algorithm for detecting method to invoke



        public String handleFailure(String order, @ExchangeException Exception e) {
            return ""Failure"";
        }

        public String handleOrder(String order) {
            return ""Order"";
        }




Should select handleOrder if the Exchange has no exception. And handleFailure if it has an Exception.","davsclaus:1236926476:2009-03-13T14:41:16.488+0000:1236926476:2009-03-13T14:41:16.488+0000:Bean Binding will now prefer methods with Exception if the Exchange has an exception set. Otherwise it fall backs to regular methods without Exception parameters.

Committed revision 753284.
davsclaus:1236926526:2009-03-13T14:42:06.936+0000:1236926526:2009-03-13T14:42:06.936+0000:And you dont have to provide the @ExchangeException anymore. Camel will be able to provide the Exception if you just define an Exception type

{code}
public void handleFailure(String body, Exception cause) {
...
{code}
davsclaus:1258775875:2009-11-21T11:57:55.787+0000:1258775875:2009-11-21T11:57:55.787+0000:Closing all 2.0M2 tickets"
0,CAMEL-1456,Improvement,Major,None,"1.6.1, 2.0-M2","
None
",Closed,Fixed,"1.6.1, 2.0-M2",Willem Jiang,Willem Jiang,0,0,2009-03-13 03:33:37+00:00,2009-11-21 11:57:55+00:00,"I got a user request for creating a default camel context  without any spring application context involved.


"" As you may remember, i did an integration in JOnAS 5.1.X application server (Ali Tokmen did it for JOnAS 4). JOnAS 5.X works on an OSGi gateway. My goal is to provide a service that could manage CamelContext. I use iPOJO to take care of the OSGi aspects, but that's just a detail here. The issue i have with the SpringCamelContext is when we get the factory, we then ask for a CamelContext (with the present factoryBean, we get a SpringCamelContext) but this one needs an ApplicationContext. In my case, i don't have it. The way i use my service is the following :


   1. First i'm deploying on the gateway the camel bundles that i need
   2. I then deploy my bundle that provides the CamelService on the OSGi GateWay
   3. I deploy an other bundle that uses this service. This bundle asks for CamelContext, set the routes it needs using the service, and so on ...


I never use spring in my environment, that's why i need to get a DefaultCamelContext, mainly because of the ApplicationContext that is needed.""


So we can support the user to do this by adding a CamelContextFactory in the camel-osgi module.","renaultg:1236903729:2009-03-13T08:22:09.790+0000:1236903729:2009-03-13T08:22:09.790+0000:Thanks for the add. I'll check this as soon as i can, and then close the issue.
njiang:1236904227:2009-03-13T08:30:27.112+0000:1236904227:2009-03-13T08:30:27.112+0000:Applied patch into trunk
http://svn.apache.org/viewvc?rev=753101&view=rev
1.x branch
http://svn.apache.org/viewvc?rev=753115&view=rev
davsclaus:1258775875:2009-11-21T11:57:55.745+0000:1258775875:2009-11-21T11:57:55.745+0000:Closing all 2.0M2 tickets"
0,CAMEL-1455,Improvement,Minor,None,None,"
None
",Resolved,Not A Problem,2.8.0,Claus Ibsen,James Strachan,0,0,2009-03-12 17:45:02+00:00,2011-06-29 11:36:21+00:00,"I spotted that spring-events doesn't match for starters.


When we find we need to change the name of the wiki page to match the component/language ID we could create dummy wiki pages which just 

{include}

 the real pages using the confluence include macro - or rename the wiki page and we could create symlink / redirects to the new page?","davsclaus:1236898075:2009-03-13T06:47:55.196+0000:1236898075:2009-03-13T06:47:55.196+0000:James I have been thinking about adding some kind of MetaModel class that contains meta data about a given component/language/type converter/data format and what else we have in Camel.

for starters it could be a repository you query with the given name

MetaDataModel model = MetaDataRepository.getMetaDataForLanguage(""xpath"");

It could of course also just be a Map with keys for the meta data. Then its more flexible.

Then we could contain
- link to official documentation in our wiki
- description
- relates to
- since, eg requires Camel 2.1
- artifact id, which .jar it comes from
- and what else

I do think at the same time we should consider if we can change how components, languages, data formats, type converters are loading on the fly in Camel today.

I would like it to be component based, so there is a META-INF/service/camel/plugin file that has a complete list of what this current .jar contains
- 0..n components
- 0..n data formats
- 0..n type converters
- 0..n languages

And if the .jar can not be loaded succesfully eg because of missing 3rd part .jars then we can report that as well. To avoid this problem with the type converters going crazy!

Then also at assembly time we will be able to scan all .jars for ths plugin file and generate a master list that we can provide in camel-core so when someone asks for a component with scheme: pop3 then it will be able to report that you need: camel-main.jar in the classpath.

Maybe we need a discussion on the dev forum?"
0,CAMEL-1454,Bug,Major,1.6.0,"2.0-M1, 1.6.1","
None
",Closed,Fixed,"2.0-M1, 1.6.1",William Tam,William Tam,0,0,2009-03-12 17:04:50+00:00,2009-07-31 06:34:14+00:00,"If you convert the CxfWsdlFirstTest to run in PAYLOAD mode (by simply changing the endpoint URI in Spring xml), the client.getPerson() invocation will fail.","wtam:1236856165:2009-03-12T19:09:25.980+0000:1236856165:2009-03-12T19:09:25.980+0000:camel-1.x:  Committed revision 752974.
trunk: Committed revision 752956.
davsclaus:1248993254:2009-07-31T06:34:14.446+0000:1248993254:2009-07-31T06:34:14.446+0000:Closing 2.0m1 tickets"
0,CAMEL-1453,Task,Major,None,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Jonathan Anstey,Jonathan Anstey,0,0,2009-03-12 14:06:58+00:00,2009-11-21 11:57:55+00:00,"Well, upgrade when its available at central here http://repo1.maven.org/maven2/rome/rome/1.0


Announcement: https://rome.dev.java.net/servlets/ReadMsg?list=users&msgNo=1732",davsclaus:1258775875:2009-11-21T11:57:55.718+0000:1258775875:2009-11-21T11:57:55.718+0000:Closing all 2.0M2 tickets
0,CAMEL-1452,Improvement,Major,None,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Claus Ibsen,0,0,2009-03-12 11:37:58+00:00,2009-07-31 06:34:13+00:00,"A new interface IsSingleton to let Injector be smart and return the shared instance instead of creating a new instance all the type.


Avoids creating so many objects when running Camel.","davsclaus:1236842657:2009-03-12T15:24:17.280+0000:1236842657:2009-03-12T15:24:17.280+0000:Committed revision 752893.
davsclaus:1248993253:2009-07-31T06:34:13.711+0000:1248993253:2009-07-31T06:34:13.711+0000:Closing 2.0m1 tickets"
0,CAMEL-1451,Improvement,Minor,"1.5.0, 1.6.0",2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Claus Ibsen,0,0,2009-03-12 04:42:01+00:00,2009-07-31 06:34:13+00:00,"Just as the file component does with its build in support for idempotent. It should add to it last, eg after processing.


See nabble:
http://www.nabble.com/Problem-with-IdempotentConsumer-td22467720s22882.html","davsclaus:1236807009:2009-03-12T05:30:09.552+0000:1236807009:2009-03-12T05:30:09.552+0000:Committed revision 752775.
davsclaus:1248993253:2009-07-31T06:34:13.691+0000:1248993253:2009-07-31T06:34:13.691+0000:Closing 2.0m1 tickets"
0,CAMEL-1450,Improvement,Minor,1.6.0,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Stephen Mullins,1,0,2009-03-11 18:27:11+00:00,2009-11-21 11:57:55+00:00,"Currently, when adding endpoints to the mbean server, all endpoints are wrapped with ManagedEndpoint.  This does not allow for custom attributes or operations to be exposed on the custom endpoints.  I would like the InstrumentationLifecycleStrategy.onEndpointAdd() method to first check if the endpoint is annotated with ManagedResource, if it is then register that endpoint; if the endpoint is not annotated with ManagedResource then wrap it with ManagedEndpoint and register.  This way all endpoints still get registered but any custom attributes or operations will be exposed through jmx.","davsclaus:1236803350:2009-03-12T04:29:10.725+0000:1236803350:2009-03-12T04:29:10.725+0000:Stephen is working on a patch

See nabble:
http://www.nabble.com/Adding-custom-mbeans-to-camel-JMX-mbeanserver-td22421517s22882.html

smullins:1236948556:2009-03-13T20:49:16.178+0000:1236948556:2009-03-13T20:49:16.178+0000:patch is attached.  This is my first time so please let me know if I've messed something up.
davsclaus:1236983884:2009-03-14T06:38:04.010+0000:1236983925:2009-03-14T06:38:45.631+0000:Stephen, Hadrian

We cannot have imports to Spring .jars in camel-core.jar. We need to use reflection or other techniques to avoid having the import
import org.springframework.jmx.export.annotation.ManagedResource

You can for example use: camelContext.getClassResolver
to lookup the class at runtime.

This allows us to run Camel where people dont have Spring jars.
davsclaus:1238475284:2009-03-31T12:54:44.160+0000:1238475284:2009-03-31T12:54:44.160+0000:Stephen, any update on this one?
smullins:1238479446:2009-03-31T14:04:06.056+0000:1238479446:2009-03-31T14:04:06.056+0000:Hey sorry I haven't redone this patch yet.  I'm going to knock it out today for sure.  I have been busy working on a new router written in camel for Orbitz.  I'll get to this today, sorry again for the delay.
davsclaus:1238480148:2009-03-31T14:15:48.995+0000:1238480148:2009-03-31T14:15:48.995+0000:Thanks for the update Stephen. No worry I just wanted to give a ping in case you wanted to help out with the last hurdle.

As I am closing down issues to keep 2.0 within sight for a Q2 2009 release.
smullins:1238504342:2009-03-31T20:59:02.373+0000:1238504342:2009-03-31T20:59:02.373+0000:Ok I've removed the dependency on Spring in favor of using the camelContext.resolveClass() to get the annotation, then using java reflection to invoke the objectName() method on it.
davsclaus:1238572756:2009-04-01T15:59:16.998+0000:1238572756:2009-04-01T15:59:16.998+0000:TODO: Update the CXF wiki page
davsclaus:1238574875:2009-04-01T16:34:35.210+0000:1238574875:2009-04-01T16:34:35.210+0000:Thanks Stephen. I have committed the patch

trunk: 760956.
smullins:1238579566:2009-04-01T17:52:46.409+0000:1238579566:2009-04-01T17:52:46.409+0000:W00t, thank you!  Let me know if there's anything else I can help with :)
davsclaus:1258775875:2009-11-21T11:57:55.694+0000:1258775875:2009-11-21T11:57:55.694+0000:Closing all 2.0M2 tickets"
0,CAMEL-1449,Bug,Critical,2.0.0,2.0-M2,"
None
",Closed,Won't Fix,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2009-03-11 14:01:10+00:00,2009-11-21 11:57:55+00:00,"By default the DLC will mark an Exchange as been handled if it could not redeliver it and will log it at ERROR level = the default DLC settings.


But it should not mark the Exchange as handled, if there has not been configured to do so in



DLC.handled(true)
onException(Foo.class).handled(true)



So in that regard it will still LOG it at ERROR level but the Exchange seen by the original caller, or eg a FileConsumer will still se the Exchange as both failed and not handled.


Only if end user configure the route to use handled(true) it should mark the Exchange as handled.","davsclaus:1236762323:2009-03-11T17:05:23.506+0000:1236762323:2009-03-11T17:05:23.506+0000:Maybe the default DLC that just logs at ERROR should *not* mark the Exchange as handled.

Then the individual onException can do it on their will
davsclaus:1238474871:2009-03-31T12:47:51.498+0000:1238474871:2009-03-31T12:47:51.498+0000:We change default in 2.0 to have no error handler by default
davsclaus:1258775875:2009-11-21T11:57:55.665+0000:1258775875:2009-11-21T11:57:55.665+0000:Closing all 2.0M2 tickets"
0,CAMEL-1448,Bug,Critical,1.6.0,"2.0-M1, 1.6.1","
None
",Closed,Fixed,"2.0-M1, 1.6.1",Claus Ibsen,Claus Ibsen,0,0,2009-03-11 08:34:00+00:00,2009-07-31 06:34:13+00:00,"Only applies for 1.x as 2.0 have a totally redone FTP+File component.


Have discovered that the camel-ftp component deletes/moves the file before processing; so, if processing fails, then the file is not available for redelivery.","davsclaus:1236732858:2009-03-11T08:54:18.653+0000:1236732858:2009-03-11T08:54:18.653+0000:1.x: Committed revision 752410.
davsclaus:1248993253:2009-07-31T06:34:13.672+0000:1248993253:2009-07-31T06:34:13.672+0000:Closing 2.0m1 tickets"
0,CAMEL-1417,Bug,Critical,1.6.0,"2.0-M1, 1.6.1","
None
",Closed,Fixed,"2.0-M1, 1.6.1",Claus Ibsen,Claus Ibsen,0,0,2009-03-04 08:26:41+00:00,2009-07-31 06:34:11+00:00,"Since StreamCache is default turned on it cause to many convters attempt that fails in MessageSupport.


No type converter available to convert from type: java.lang.Integer to the required type: org.apache.camel.StreamCache with value 1


It hurts performance to much. 


See nabble:
http://www.nabble.com/Performance-and-MessageSupport.getBody-%281.6.0%29-td22291841s22882.html","davsclaus:1236135481:2009-03-04T10:58:01.393+0000:1236135481:2009-03-04T10:58:01.393+0000:Trunk: Committed revision 749956.
1.x: Committed revision 749962.
davsclaus:1248993251:2009-07-31T06:34:11.486+0000:1248993251:2009-07-31T06:34:11.486+0000:Closing 2.0m1 tickets"
0,CAMEL-1416,Bug,Major,2.0.0,2.0-M1,"
None
",Closed,Fixed,2.0-M1,William Tam,William Tam,0,0,2009-03-03 20:35:41+00:00,2009-07-31 06:34:11+00:00,"See issue reported in mailing list.
http://www.nabble.com/camel-cxf-endpoint---error-%3A-Failed-to-convert-property-value-of-type--...-tp22312601p22312601.html","wtam:1236088176:2009-03-03T21:49:36.472+0000:1236088176:2009-03-03T21:49:36.472+0000:Committed revision 749772.
cmoulliard:1236141769:2009-03-04T12:42:49.492+0000:1236141769:2009-03-04T12:42:49.492+0000:I have retested and everything is ok.
davsclaus:1248993251:2009-07-31T06:34:11.410+0000:1248993251:2009-07-31T06:34:11.410+0000:Closing 2.0m1 tickets"
0,CAMEL-1415,Improvement,Major,None,None,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,James Strachan,0,0,2009-03-03 19:44:11+00:00,2009-11-21 11:57:55+00:00,No Desc,"davsclaus:1242627002:2009-05-18T14:10:02.405+0000:1242627002:2009-05-18T14:10:02.405+0000:We got the new *onCompletion* DSL where you can do custom routing in eg when its failed only.

And thus there you can send the compensating transaction message. This happen in a 2nd route by itself and thus dont interfere with the original route.
davsclaus:1258775875:2009-11-21T11:57:55.454+0000:1258775875:2009-11-21T11:57:55.454+0000:Closing all 2.0M2 tickets"
0,CAMEL-1414,Bug,Major,2.0.0,"2.0-M1, 1.6.1","
None
",Closed,Fixed,"2.0-M1, 1.6.1",Willem Jiang,Nicolas Bouillon,0,0,2009-03-03 14:37:47+00:00,2009-07-31 06:34:11+00:00,"When using this kind of route
<from uri=""activemq:queue:test""/>
<camel:process ref=""mailProcessor"" />
<to uri=""smtp://localhost:25?to=user@localhost"" />


and trying to enrich the message in the mailProcessor with


exchange.getIn().addAttachment(""attachement.txt"",
                new DataHandler(""Hello world"", ""text/plain""));


The received mail doesn't contains any attachment.


If the input ""from"" is a ""direct"" instead of activemq, it works fine.


Inspecting source code,  MessageSupport.copyFrom(Message that) does
getAttachments().putAll(that.getAttachments());
but the child class JmsMessage doesn't.","bouil:1236062870:2009-03-03T14:47:50.076+0000:1236062870:2009-03-03T14:47:50.076+0000:Attached patch against components/camel-jms/
njiang:1236066395:2009-03-03T15:46:35.163+0000:1236066395:2009-03-03T15:46:35.163+0000:Applied patch with thanks to Nicolas.
trunk
http://svn.apache.org/viewvc?rev=749628&view=rev
1.x branch
http://svn.apache.org/viewvc?rev=749631&view=rev
davsclaus:1248993251:2009-07-31T06:34:11.359+0000:1248993251:2009-07-31T06:34:11.359+0000:Closing 2.0m1 tickets"
0,CAMEL-1413,Improvement,Major,1.6.0,"2.0-M1, 1.6.1","
None
",Closed,Fixed,"2.0-M1, 1.6.1",Willem Jiang,Willem Jiang,0,0,2009-03-03 10:58:05+00:00,2009-07-31 06:34:11+00:00,"If we always caching the Stream message in the memory, we will get an OutOfMemoryError  if we are caching the big size streams.
In CXF , we will cache the big stream into a file instead of using the memory if the stream is big than 64K to get around this kind of issue.


I think we need to implement a same stream caching in Camel now.","davsclaus:1236049528:2009-03-03T11:05:28.105+0000:1236049528:2009-03-03T11:05:28.105+0000:4k isnt that on the low side? There should be some config to set the thredshold and the directory to use
davsclaus:1236049611:2009-03-03T11:06:51.775+0000:1236049611:2009-03-03T11:06:51.775+0000:Maybe there are some cache algorithms for eg having a memory buffer of eg. 5mb and then if overrun it can spool to disk.

So if you are under 5mb the 4kb streams can still be cached in memory.
njiang:1236060278:2009-03-03T14:04:38.681+0000:1236060278:2009-03-03T14:04:38.681+0000:Yes, I think we could get some configuration (such size, temp directory) in camel context for it.


njiang:1236295971:2009-03-06T07:32:51.415+0000:1236295971:2009-03-06T07:32:51.415+0000:
http://svn.apache.org/viewvc?rev=749936&view=rev

http://svn.apache.org/viewvc?rev=750396&view=rev
njiang:1236814904:2009-03-12T07:41:44.549+0000:1236814904:2009-03-12T07:41:44.549+0000:Merge the patch into 1.x branch
http://svn.apache.org/viewvc?rev=752756&view=rev
http://svn.apache.org/viewvc?rev=752763&view=rev
davsclaus:1248993251:2009-07-31T06:34:11.336+0000:1248993251:2009-07-31T06:34:11.336+0000:Closing 2.0m1 tickets"
0,CAMEL-1412,Bug,Major,1.6.0,"2.0-M1, 1.6.1","
None
",Closed,Fixed,"2.0-M1, 1.6.1",Willem Jiang,Willem Jiang,0,0,2009-03-03 09:58:51+00:00,2009-07-31 06:34:11+00:00,"Here is the mail thread which discusses about it.
http://www.nabble.com/Classloading-and-OSGI-to22303475.html#a22303475","njiang:1236296154:2009-03-06T07:35:54.564+0000:1236296154:2009-03-06T07:35:54.564+0000:trunk
http://svn.apache.org/viewvc?rev=749574&view=rev
1.x
http://svn.apache.org/viewvc?rev=749591&view=rev
davsclaus:1248993251:2009-07-31T06:34:11.300+0000:1248993251:2009-07-31T06:34:11.300+0000:Closing 2.0m1 tickets"
0,CAMEL-1411,Bug,Critical,1.6.0,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Claus Ibsen,1,1,2009-03-03 09:24:47+00:00,2009-07-31 06:34:11+00:00,Add the skeleton and let Willem add the stuff in camel-osgi,"davsclaus:1236048554:2009-03-03T10:49:14.151+0000:1236048554:2009-03-03T10:49:14.151+0000:Send mail to dev forum for discussion first.
davsclaus:1236057441:2009-03-03T13:17:21.734+0000:1236057441:2009-03-03T13:17:21.734+0000:This is also related to let ResolverUtil be pluggable so you can let it work in other platforms such as JBoss, WebSphere.

Will add stuff for both strategies to be pluggable.
njiang:1236059998:2009-03-03T13:59:58.145+0000:1236059998:2009-03-03T13:59:58.145+0000:Since some ResolverUtil created without any  camel context involved,  we need to find more specify way to do this.
davsclaus:1236061451:2009-03-03T14:24:11.749+0000:1236061451:2009-03-03T14:24:11.749+0000:ResolverUtil is used in
camel-spring
camel-osgi
camel-bindy
camel-core

I got the stuff on camel-core working. I know I can get bindy working as well as it can get hold of the camel context when doing marhsall/unmarshal.

camel-spring and camel-osgi should be possible. camel-spring is creating the camel-context.
And camel-osgi should set its osgi aware resolvers instead of the default one when it creates the camel context.

So I do think its doable.
njiang:1236062399:2009-03-03T14:39:59.320+0000:1236062399:2009-03-03T14:39:59.320+0000:So we need to add a method in camel context to get a right ResolverUtil now.
davsclaus:1236062723:2009-03-03T14:45:23.066+0000:1236062723:2009-03-03T14:45:23.066+0000:Yes I am adding a new SPI interface for the pluggable resolvers. And having getters/setters on the CamelContext so you can plugin which one you want to use.

And let camel-spring auto discover them in the spring bean registry if any provided so it can be automatic set just by declaring a bean in spring XML
davsclaus:1236070735:2009-03-03T16:58:55.430+0000:1236070735:2009-03-03T16:58:55.430+0000:I have committed it to trunk. There is now a getClassResolver() on CamelContext that works as ObjectHelper does.

But it allows us to provide another class resolver for OSGi if needed. 
cmoulliard:1236126702:2009-03-04T08:31:42.819+0000:1236126702:2009-03-04T08:31:42.819+0000:Do I have to change something in Camel-bindy code or the modification will be transparent not matter if deployment is done on osgi server or not ?
hadrian:1236151529:2009-03-04T15:25:29.605+0000:1236151529:2009-03-04T15:25:29.605+0000:@Charles, yes, there should be no difference if the deployment is in an osgi container or not.
cmoulliard:1236151778:2009-03-04T15:29:38.318+0000:1236151778:2009-03-04T15:29:38.318+0000:I made a test and everything works fine. Thanks ;-)
davsclaus:1248993251:2009-07-31T06:34:11.245+0000:1248993251:2009-07-31T06:34:11.245+0000:Closing 2.0m1 tickets"
0,CAMEL-1410,Task,Major,2.0-M1,None,"
None
",Closed,Won't Fix,None,Unassigned,Hadrian Zbarcea,0,0,2009-03-02 16:25:57+00:00,2010-02-07 09:55:21+00:00,"There were quite a few questions about dependencies in Camel.  Camel is not including dependencies in the jars to keep them smaller.  This means that many components do not work out of the box as some might expect, and making sure that all the dependencies are in the classpath is left to the user.


The proposal is to include a paragraph in the wiki with what the dependencies for that component are and where they could be downloaded from, to make it explicit.","davsclaus:1244184050:2009-06-05T14:40:50.203+0000:1244184050:2009-06-05T14:40:50.203+0000:If the maven reports was actually updated / generated then people could look at the maven dependency report.

So if we can get the deploy to do a maven site updated as well then we got this for free.
davsclaus:1252838991:2009-09-13T18:49:51.299+0000:1252838991:2009-09-13T18:49:51.299+0000:To much labor work to do this. The maven reports should be generated on release builds that people can use."
0,CAMEL-1409,Bug,Minor,1.6.0,"2.0-M1, 1.6.1","
None
",Closed,Duplicate,"2.0-M1, 1.6.1",Willem Jiang,Ivan Dubrov,0,0,2009-03-02 11:25:00+00:00,2009-03-23 08:41:22+00:00,"Jetty component includes http.requestMethod in response. The reason is that HttpHeaderFilterStrategy does not do ""toLower"" for ""HttpMethods.HTTP_METHOD"" and filter is in lowercase mode for Jetty.","wfrag:1235964343:2009-03-02T11:25:43.062+0000:1235964343:2009-03-02T11:25:43.062+0000:Fix.
njiang:1235967258:2009-03-02T12:14:18.201+0000:1235967258:2009-03-02T12:14:18.201+0000:This issue is duplicated with  CAMEL-1352.
The patch is in the trunk and 1.x branch."
0,CAMEL-1408,Bug,Major,2.0-M1,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Claus Ibsen,0,0,2009-02-28 16:36:21+00:00,2009-07-31 06:34:11+00:00,"See nabble:
http://www.nabble.com/File%3A-using-absolute-file-paths-with-moveExpressions-td22253199.html","davsclaus:1235813880:2009-02-28T17:38:00.918+0000:1235813880:2009-02-28T17:38:00.918+0000:Committed revision 748891.
davsclaus:1248993251:2009-07-31T06:34:11.154+0000:1248993251:2009-07-31T06:34:11.154+0000:Closing 2.0m1 tickets"
0,CAMEL-1407,Improvement,Major,1.6.0,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Claus Ibsen,0,0,2009-02-28 14:16:35+00:00,2009-07-31 06:34:10+00:00,"See nabble:
http://www.nabble.com/Re%3A-Camel-quartz-td22247508.html","davsclaus:1235805086:2009-02-28T15:11:26.098+0000:1235805086:2009-02-28T15:11:26.098+0000:Committed revision 748864.

Will keep the fix on 2.0 as it changes the signature how to configure the quartz component.
davsclaus:1235805910:2009-02-28T15:25:10.225+0000:1235805910:2009-02-28T15:25:10.225+0000:Upgraded to Quartz 1.6.4 as well
davsclaus:1248993250:2009-07-31T06:34:10.410+0000:1248993250:2009-07-31T06:34:10.410+0000:Closing 2.0m1 tickets"
0,CAMEL-1406,Bug,Major,1.6.0,"2.0-M1, 1.6.1","
None
",Closed,Fixed,"2.0-M1, 1.6.1",Claus Ibsen,Claus Ibsen,0,0,2009-02-28 10:03:56+00:00,2009-07-31 06:34:10+00:00,"See nabble:
http://www.nabble.com/Re%3A-Delayer%3A-%22Transport-disposed%22-at-JVM-Shutdown-td22202577s22882.html","davsclaus:1235797028:2009-02-28T12:57:08.611+0000:1235797028:2009-02-28T12:57:08.611+0000:Trunk: 748821
1.x: 748841
davsclaus:1248993250:2009-07-31T06:34:10.369+0000:1248993250:2009-07-31T06:34:10.369+0000:Closing 2.0m1 tickets"
0,CAMEL-1405,Improvement,Major,None,None,"
None
",Closed,Fixed,2.0-M1,James Strachan,James Strachan,0,0,2009-02-27 12:18:15+00:00,2009-07-31 06:34:10+00:00,No Desc,"davsclaus:1235711566:2009-02-27T13:12:46.576+0000:1235711566:2009-02-27T13:12:46.576+0000:There is a JMSConstants for the property.
davsclaus:1248993250:2009-07-31T06:34:10.324+0000:1248993250:2009-07-31T06:34:10.324+0000:Closing 2.0m1 tickets"
0,CAMEL-1404,New Feature,Major,None,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Unassigned,Claus Ibsen,0,0,2009-02-27 09:58:55+00:00,2009-07-31 06:34:10+00:00,"Add a new SPI interface so we can support pluggable ResolverUtil classes.


So for instance JBoss can provide one so they can integrate with Camel
http://codeandtell.wordpress.com/2009/02/26/apache-camel-jboss-5/


And the SPI should be possible to set on CamelContext","davsclaus:1236057548:2009-03-03T13:19:08.188+0000:1236057548:2009-03-03T13:19:08.188+0000:Camel should auto look in spring registry for any beans of type: PackageScanClassResolver and use this instanace instead of default one.
Like we do with Tracer etc.
davsclaus:1236069629:2009-03-03T16:40:29.233+0000:1236069629:2009-03-03T16:40:29.233+0000:Committed revision 749648.

Just add a bean instance to spring XML that is an instance of {{PackageScanClassResolver}} and Camel will use it over its default one.

For the Java DSL there is getter/setter on the CamelContext
davsclaus:1248993250:2009-07-31T06:34:10.286+0000:1248993250:2009-07-31T06:34:10.286+0000:Closing 2.0m1 tickets"
0,CAMEL-1403,Bug,Major,None,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Gert Vanthienen,0,0,2009-02-27 08:54:32+00:00,2009-07-31 06:34:10+00:00,Cfr. http://hudson.zones.apache.org/hudson/job/Camel/35/  – the build was hanging on the Camel itests,"davsclaus:1235726541:2009-02-27T17:22:21.266+0000:1235726541:2009-02-27T17:22:21.266+0000:Found the problem in a unit test. Fixed it by adding mocks so it will fail after 20 sec in case of problems.

Committed revision 748606.

davsclaus:1248993250:2009-07-31T06:34:10.236+0000:1248993250:2009-07-31T06:34:10.236+0000:Closing 2.0m1 tickets"
0,CAMEL-1402,Task,Minor,None,2.0-M1,"
None
",Closed,Won't Fix,2.0-M1,Claus Ibsen,Claus Ibsen,0,0,2009-02-27 07:57:41+00:00,2009-10-24 11:16:12+00:00,It does not depend on anything in camel-spring so we might as well move it to the core,davsclaus:1236041600:2009-03-03T08:53:20.161+0000:1236041600:2009-03-03T08:53:20.161+0000:Test component requires using the annotations to inject a proxy for consuming. So it must be in camel-spring.
0,CAMEL-1401,Bug,Critical,"1.5.0, 1.6.0","2.0-M1, 1.6.1","
None
",Closed,Fixed,"2.0-M1, 1.6.1",Claus Ibsen,Ivan Dubrov,0,0,2009-02-27 06:31:24+00:00,2009-07-31 06:34:10+00:00,"JaxbDataFormat reuses the Marshaller/Unmarshaller instances.


However, according to the https://jaxb.dev.java.net/faq/index.html#threadSafety, Marshaller/Unmarshaller instances are NOT thread safe, so you can't use them from separate threads at the same time.


Due to this we are getting exceptions from the JAXB implementation (like ClassCastException or ""org.xml.sax.SAXException: FWK005 parse may not be called while parsing.""). Everything works nice with our custom JaxbDataFormat that creates new Unmarshaller/Marshaller instance on every request.


Also, lazy-creating instances (like JAXBContext) in getter methods is not thread-safe as well (because explicit synchronization is required).","davsclaus:1235691110:2009-02-27T07:31:50.408+0000:1235691110:2009-02-27T07:31:50.408+0000:Thanks for reporting this. I will get it fixed asap.
davsclaus:1235697162:2009-02-27T09:12:42.794+0000:1235697162:2009-02-27T09:12:42.794+0000:Trunk: Committed revision 748436.
1.x: Committed revision 748450.
davsclaus:1248993250:2009-07-31T06:34:10.202+0000:1248993250:2009-07-31T06:34:10.202+0000:Closing 2.0m1 tickets"
0,CAMEL-1400,Bug,Major,None,"2.0-M1, 1.6.1","
None
",Closed,Fixed,"2.0-M1, 1.6.1",William Tam,William Tam,0,0,2009-02-27 04:53:43+00:00,2019-10-03 02:41:00+00:00,"More details can be found in this mail thread.
http://www.nabble.com/Restlet-Component-Fault-Handling-tp22173327p22173327.html","wtam:1235682055:2009-02-27T05:00:55.581+0000:1235682055:2009-02-27T05:00:55.581+0000:committed to trunk: Committed revision 748392.
committed to 1.x: Committed revision 748393.
davsclaus:1248993249:2009-07-31T06:34:09.990+0000:1248993249:2009-07-31T06:34:09.990+0000:Closing 2.0m1 tickets"
0,CAMEL-1399,Task,Major,None,None,"
None
",Closed,Fixed,2.4.0,Jonathan Anstey,Jonathan Anstey,0,0,2009-02-26 14:14:03+00:00,2011-04-24 09:57:13+00:00,"Basically a reminder for me to do this when Camel 2.0 goes out.


Will need to put up a patch here http://jira.codehaus.org/browse/ARCHETYPE","janstey:1246513878:2009-07-02T13:51:18.758+0000:1246513878:2009-07-02T13:51:18.758+0000:We have a released version of this at central now. I've attached a patch to the ARCHETYPE issue tracker here

http://jira.codehaus.org/browse/ARCHETYPE-249
davsclaus:1258027548:2009-11-12T20:05:48.331+0000:1258027548:2009-11-12T20:05:48.331+0000:Who can we ping to get it into the maven stuff?
janstey:1258027981:2009-11-12T20:13:01.742+0000:1258027981:2009-11-12T20:13:01.742+0000:Pings have been sent out. Hopefully we can close this one out soon!
janstey:1281781803:2010-08-14T18:30:03.579+0000:1281781803:2010-08-14T18:30:03.579+0000:This is included with the Maven archetype plugin now. When running mvn archetype:generate we get these in the list

{code}
45: remote -> camel-archetype-activemq (Creates a new Camel project that configures and interacts with ActiveMQ.)
46: remote -> camel-archetype-component (Creates a new Camel component.)
47: remote -> camel-archetype-java (Creates a new Camel project using Java DSL.)
48: remote -> camel-archetype-scala (Creates a new Camel project using Scala DSL.)
49: remote -> camel-archetype-spring (Creates a new Camel project with added Spring DSL support.)
50: remote -> camel-archetype-war (Creates a new Camel project that deploys the Camel Web Console, REST API, and your routes as a WAR)
{code}
davsclaus:1303610233:2011-04-24T09:57:13.085+0000:1303610233:2011-04-24T09:57:13.085+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-1398,Sub-task,Major,None,None,"
None
",Closed,Won't Fix,2.4.0,Unassigned,Claus Ibsen,0,0,2009-02-26 10:52:04+00:00,2011-04-24 09:57:38+00:00,No Desc,"davsclaus:1235616773:2009-02-26T10:52:53.474+0000:1235616773:2009-02-26T10:52:53.474+0000:When you send a message from the web console to an endpoint from a form it adds all the browser http headers.

We should not add these. There should be a very basic form where you can add headers if needed.
jstrachan:1278030107:2010-07-02T08:21:47.439+0000:1278030107:2010-07-02T08:21:47.439+0000:I actually think including the http headers is useful; folks get to see what the headers are.

I guess we could have a flag on the form submission to whether or not they should be included or not.

Folks can always use a route to filter out what headers they want to accept etc?
davsclaus:1278537431:2010-07-08T05:17:11.893+0000:1278537431:2010-07-08T05:17:11.893+0000:Yeah lets keep it as is
davsclaus:1303610258:2011-04-24T09:57:38.530+0000:1303610258:2011-04-24T09:57:38.530+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-1397,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Claus Ibsen,1,0,2009-02-26 10:48:38+00:00,2011-04-24 09:57:27+00:00,No Desc,"davsclaus:1235616664:2009-02-26T10:51:04.880+0000:1235616664:2009-02-26T10:51:04.880+0000:Just ideas:

Number of
- camel contexts
- number of routes
- number of endpoints
- number of messages browsable
- number of type converters
- number of languages
- number of data formats
- number of consumers
- number of producers
- uptime
- time for last message received
- time for last message failed with exception

We have some of these metrics on the JMX side but maybe we need to make em avail from the web console as well.
 
boday:1281985453:2010-08-17T03:04:13.736+0000:1281985453:2010-08-17T03:04:13.736+0000:Claus, are you opposed to using JMX APIs to get to these metrics?  I built a custom web console for a client last year to manage Camel routes and ActiveMQ queues using JMX APIs.  I could integrate a similar approach with the camel-web project to meet this and a few other requirements.  The attached patch has a basic implementation of this (adding ""ExchangesCompleted"" count to the route list page).  Let me know if you like this approach and I'll take it a bit further...thanks
boday:1282597288:2010-08-24T05:01:28.324+0000:1282597288:2010-08-24T05:01:28.324+0000:I added a patch with revised code to retrieve metrics and to display a few more on the route list page (Inflight Exchanges, Avg Processing Time)


davsclaus:1282610329:2010-08-24T08:38:49.223+0000:1282610329:2010-08-24T08:38:49.223+0000:Ben thanks for working on this.

I am hoping we could expose the stats without the need for JMX. For example JMX is not often possible in the cloud or some restricted environments.
So moving forward it would be best if Camel provided access to the stats regardless if JMX is enabled or not. However currently we don't have this.

I will add a note about this for the Camel 3.0 roadmap.

In the mean time we could rely on JMX in the camel-web to fetch the stats. However we need to honor if JMX has been enabled or not.
Also unit tests would be awesome.


boday:1293397230:2010-12-27T05:00:30.920+0000:1293397230:2010-12-27T05:00:30.920+0000:Claus, I added a revised patch to include basic JMX enabled detection, added isJMXDisabled() helper to CamelContext, a few unit tests and more route metrics (see the screen shot).  

Let me know if continuing this approach is worthwhile or if a larger rework of this area is necessary (as indicated by the roadmap and other comments)....

thanks...Ben

davsclaus:1293760971:2010-12-31T10:02:51.994+0000:1293760971:2010-12-31T10:02:51.994+0000:Thanks Ben for the patch and working on this.

Yeah in the future we should allow to gather those stats using REST with/without JMX enabled. But thats another story.

I have modified your patch a bit
- removing thread local for date formatter (overkill)
- fixed message time first, which was wrongly set to last
- introduce an interface for RouteStatistics, which we later can provide an alternative impl of

Fell free to improve. For example the / separator in the web console could be in different color / bold, etc to make it easier to spot, especially in the date time column which also uses / separators.
davsclaus:1293760980:2010-12-31T10:03:00.728+0000:1293760980:2010-12-31T10:03:00.728+0000:trunk: 1054080.
davsclaus:1303610247:2011-04-24T09:57:27.663+0000:1303610247:2011-04-24T09:57:27.663+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-1396,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2009-02-26 10:46:48+00:00,2011-04-24 09:58:11+00:00,No Desc,"davsclaus:1235616495:2009-02-26T10:48:15.133+0000:1235616495:2009-02-26T10:48:15.133+0000:When viewing a message received on an endpoint you can see its content: properties, headers and body.
It should also display the type of these values: String, byte[], File, Stream etc.

Could also use hover over yellow boxes for that, but I would prefer it was also listed directly. Especially the body as you want to know its type.
davsclaus:1293775412:2010-12-31T14:03:32.293+0000:1293775412:2010-12-31T14:03:32.293+0000:The web console already show some information about types.
davsclaus:1303610291:2011-04-24T09:58:11.066+0000:1303610291:2011-04-24T09:58:11.066+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-1395,Task,Major,None,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Hadrian Zbarcea,Claus Ibsen,0,0,2009-02-26 10:16:03+00:00,2009-07-31 06:34:09+00:00,"From James


As an aside I wonder if one of these days we should refactor
org.apache.camel.model.*Type to be *Definition as thats kinda what
they are - the logical, design type definition of routes. For example
the SplitterDefintion just defines how to create a  Splitter, its not
a Splitter (the Processor in the processor package).","davsclaus:1235614870:2009-02-26T10:21:10.208+0000:1235614870:2009-02-26T10:21:10.208+0000:Dont start until next week
davsclaus:1236300566:2009-03-06T08:49:26.362+0000:1236300566:2009-03-06T08:49:26.362+0000:Hadrian could you also rename 

ExceptionDefinition -> OnExceptionDefinition
AggregatorDefinition -> AggregateDefinition
DelayerDefinition -> DelayDefinition
ThrotterlDefinition -> ThrottleDefinition
ResequencerDefintion -> ResequenceDefinition
SplitterDefinition -> SplitDefinition
EnricherDefintion -> EnrichDefinition


Then they are also in line with the DSL name changes to use verbs for action.
davsclaus:1236300642:2009-03-06T08:50:42.330+0000:1236300642:2009-03-06T08:50:42.330+0000:And we should consider the xxxRef to be xxxRefDefinition also. As they are all defintions of the model.

And in fact I am wondering if xxxRef is a bad name, it should be without the Ref. But we should get a talk with James about this.
davsclaus:1236656377:2009-03-10T11:39:37.186+0000:1236656377:2009-03-10T11:39:37.186+0000:Hadrian the build of M1 can start
davsclaus:1248993249:2009-07-31T06:34:09.968+0000:1248993249:2009-07-31T06:34:09.968+0000:Closing 2.0m1 tickets"
0,CAMEL-1394,Sub-task,Trivial,None,,"
None
",Closed,Won't Fix,None,Unassigned,James Strachan,0,0,2009-02-26 10:13:15+00:00,2011-04-24 10:00:57+00:00,"e.g. when navigating the converters in the Web Console it would be nice if it linked to the current javadoc for the project - so users could se something like...


convert from Document to String then see the method XmlConverter .toDOMDocument(String)


The tricky thing is gonna be working out the javadoc URL - as we need to know the camel module its in to figure out the URL","jstrachan:1235614493:2009-02-26T10:14:53.967+0000:1235614493:2009-02-26T10:14:53.967+0000:we might also want to expose a few more attributes on the TypeConverter interface - such as  the Method it invokes (if there is one) and whether its an instance of static method etc
davsclaus:1235614999:2009-02-26T10:23:19.033+0000:1235614999:2009-02-26T10:23:19.033+0000:We also have @FallbackConverter for generic type converters that is tried when the regular converters fail.
davsclaus:1247957652:2009-07-19T06:54:12.999+0000:1247957652:2009-07-19T06:54:12.999+0000:This is part of a bigger picture to be able to provide more metadata about the stuff we output in the web console.
davsclaus:1273918804:2010-05-15T18:20:04.903+0000:1273918804:2010-05-15T18:20:04.903+0000:Seeing the javadoc for the converters does not bring much value as there usually isnt any relevant information. The method signature speaks for itself with from -> to in the type converter.
davsclaus:1303610457:2011-04-24T10:00:57.552+0000:1303610457:2011-04-24T10:00:57.552+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-1393,Sub-task,Major,None,None,"
None
",Closed,Won't Fix,None,Unassigned,James Strachan,0,0,2009-02-26 09:10:36+00:00,2010-02-07 09:55:21+00:00,No Desc,davsclaus:1256645145:2009-10-27T20:05:45.734+0000:1256645145:2009-10-27T20:05:45.734+0000:Lets not create too many tasks we newer is capable of implementing.
0,CAMEL-1392,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.1.0,Xueqiang Mi,James Strachan,0,1,2009-02-26 09:10:19+00:00,2010-02-07 09:55:21+00:00,No Desc,"janstey:1245127414:2009-06-16T12:43:34.303+0000:1245127414:2009-06-16T12:43:34.303+0000:Xueqiang is looking into this as part of the groovy web console addition.
xueqiang.mi:1246230029:2009-06-29T07:00:29.306+0000:1246253423:2009-06-29T13:30:23.649+0000:Now the GroovyRenderer can support most of the route definition on page: http://camel.apache.org/enterprise-integration-patterns.html. 
But there are some bug for the ExpressionDefinition process. https://issues.apache.org/activemq/browse/CAMEL-1769 is created to report the bug on ExpressionDefinition render.
janstey:1246266774:2009-06-29T17:12:54.665+0000:1246266774:2009-06-29T17:12:54.665+0000:Nice work Xueqiang. A few comments before I will commit this to trunk:

- Each time the route is edited, we get a new route id (route1, route2, route3, etc...). The original route id should be preserved.
- We probably won't be able to support rendering closure expressions nicely unfortunately... a closure could be arbitrary Groovy code, which makes things very difficult. You may want to move on with the project and keep CAMEL-1769 as a known bug for now. Of course, you are MORE than welcome to give it a bit more thought/come up with a solution :) 
- Just as an FYI we'll eventually want to move the text renderer API to camel-core and the Groovy renderer to camel-groovy - its fine for now since this is still experimental. Maybe when the project is closer to completion later this summer you can do this work.
- You should start adding in some unit tests for the renderer so we can keep track of what we know is rendering correctly.

janstey:1246617271:2009-07-03T18:34:31.535+0000:1246617271:2009-07-03T18:34:31.535+0000:Quickly trying this new code drop out before leaving for the day :) In the GroovyRendererTest I noticed pretty much all routes defined in the supported list get rendered like ""from(""direct:start"",).to(""mock:result"")"". Example output:

{code}
dsl: from(""direct:start"").unmarshal().serialization().to(""mock:result"")
after rendered: 
import org.apache.camel.language.groovy.GroovyRouteBuilder;
class GroovyRoute extends GroovyRouteBuilder {
void configure() {
from(""direct:start"",).to(""mock:result"")
}
}
{code}

Not sure if this is a bug in the renderer or the test case. Care to fix that up?

Also unit tests typically contain assertions on the output of a piece of code to make sure its operating correctly. In your case the test should be asserting that the output of the renderer is correct. Currently we have to verify this by looking at the output.
janstey:1246618215:2009-07-03T18:50:15.937+0000:1246618215:2009-07-03T18:50:15.937+0000:Also, instead of duplicating the dataformat types (and loadbalancer types too), you should be able to grab the short names through the JAXB metadata. Like so

{code}
dataFormat.getClass().getAnnotation(XmlRootElement.class).name()
{code}
xueqiang.mi:1246701511:2009-07-04T17:58:31.599+0000:1246701511:2009-07-04T17:58:31.599+0000:Fixed the test bug and add some dsl support.
xueqiang.mi:1247031674:2009-07-08T13:41:14.182+0000:1247031674:2009-07-08T13:41:14.182+0000:Add a bundle of test cases to demonstrate which DSL have been supported by groovy renderer.
Tomorrow will start the user guide of it.
xueqiang.mi:1247729157:2009-07-16T15:25:57.862+0000:1247729157:2009-07-16T15:25:57.862+0000:Improve some code in groovy renderer.
xueqiang.mi:1247889982:2009-07-18T12:06:22.053+0000:1247889982:2009-07-18T12:06:22.053+0000:add setHeader, setProperty, removeHeader, removeProperty DSLs support.
davsclaus:1247957517:2009-07-19T06:51:57.878+0000:1247957517:2009-07-19T06:51:57.878+0000:Jonathan I assume you got it covered to get the patches into the codebase?
janstey:1248078872:2009-07-20T16:34:32.752+0000:1248078872:2009-07-20T16:34:32.752+0000:Xueqiang,

I just committed your latest patch in rev 795901. Good work! Glad to see you are making progress supporting the various DSL methods. The hardcodings (like loadbalancer, byte[], etc..) still kinda worry me but are acceptable I guess since we have tests now that will let us know when things need to be updated.

Don't have any more comments at the moment. I suggest continuing with your work of supporting more of the DSL methods this week.
xueqiang.mi:1248231503:2009-07-22T10:58:23.214+0000:1248231503:2009-07-22T10:58:23.214+0000:Added:
1. javascript for avoiding to re-build a route without any changes;
2. encoder the endpoint URI (TODO task of [camel 1839|https://issues.apache.org/activemq/browse/CAMEL-1839])
janstey:1248236429:2009-07-22T12:20:29.089+0000:1248236429:2009-07-22T12:20:29.089+0000:Looks great Xueqiang. Keep up the good work.

I've committed your patch here http://svn.apache.org/viewvc?rev=796685&view=rev

Cheers,
Jon
xueqiang.mi:1249495934:2009-08-06T02:12:14.658+0000:1249495934:2009-08-06T02:12:14.658+0000:add OnException, OnCompletion, AOP and Resequence DSLs support
xueqiang.mi:1249617963:2009-08-07T12:06:03.323+0000:1249618026:2009-08-07T12:07:06.287+0000:add Split, InterceptFrom, InterceptSendToEndpoint DSL support
improve LoadBalancer, Stream, StreamCaching support
xueqiang.mi:1249711735:2009-08-08T14:08:55.480+0000:1249711735:2009-08-08T14:08:55.480+0000:add renderRoutes method for groovy renderer
improve InterceptFrom support
xueqiang.mi:1249857817:2009-08-10T06:43:37.548+0000:1249857817:2009-08-10T06:43:37.548+0000:add Rollback, Stop DSL support
improve predicateRenderer and add test cases for it.
janstey:1249972163:2009-08-11T14:29:23.860+0000:1249972163:2009-08-11T14:29:23.860+0000:Xueqiang,

I just committed your latest patch. Keep up the good work!

http://svn.apache.org/viewvc?rev=803128&view=rev
xueqiang.mi:1250387639:2009-08-16T09:53:59.109+0000:1250387639:2009-08-16T09:53:59.109+0000:add some test cases and DSL support
janstey:1250443334:2009-08-17T01:22:14.226+0000:1250443334:2009-08-17T01:22:14.226+0000:Hi Xueqiang,

I just tried to apply camel-20090816.patch against the latest trunk and it failed. I noticed a couple of errors like duplicated diffs, etc in the patch file. How did you generate it?
janstey:1250443766:2009-08-17T01:29:26.694+0000:1250443766:2009-08-17T01:29:26.694+0000:Ah, I see there was some checkstyle fixes made today to camel-web. Xueqiang, could you update to the latest trunk and re-submit your patch?

Cheers,
Jon
xueqiang.mi:1250449041:2009-08-17T02:57:21.576+0000:1250449041:2009-08-17T02:57:21.576+0000:Oh, I will check it again and re-submit it some later.
davsclaus:1250454857:2009-08-17T04:34:17.644+0000:1250454857:2009-08-17T04:34:17.644+0000:Xuegiang

Could you build with checkstyle and make sure the patches are compliant with checkstyle. See more here to run it:
http://camel.apache.org/building.html

As it causes us to have to manually fix it later. And this weekend Hadrian had to use quite some time on this that causes further delay on a 2.0 release.

xueqiang.mi:1250496658:2009-08-17T16:10:58.830+0000:1250496658:2009-08-17T16:10:58.830+0000:There is a code style error I can't fix. I don't know why it occurs though I modify that line of code.
[INFO] Velocity successfully started.
[INFO] [checkstyle:checkstyle {execution: validate}]
[INFO] Starting audit...
F:\camel\trunk\components\camel-web\src\main\java\org\apache\camel\web\util\OutputDefinitionRenderer.java:60:5: Executable statement co
unt is 89 (max allowed is 75).
Audit done.
janstey:1250497775:2009-08-17T16:29:35.064+0000:1250497775:2009-08-17T16:29:35.064+0000:I think the method is just too long. Factor it out into several smaller methods to see if that helps. I did a quick test where I basically commented out half of the method and it passed.
xueqiang.mi:1250523249:2009-08-17T23:34:09.769+0000:1250523249:2009-08-17T23:34:09.769+0000:yep, I thought you meant to refact the mothod name rather the method body. 
Now when shortening the method, the error really goes away.
Thanks.
janstey:1250568951:2009-08-18T12:15:51.123+0000:1250568951:2009-08-18T12:15:51.123+0000:Committed camel-20090818.patch in rev http://svn.apache.org/viewvc?rev=805381&view=rev
xueqiang.mi:1250821175:2009-08-21T10:19:35.229+0000:1250821175:2009-08-21T10:19:35.229+0000:Add filter().xpath() support;
Let  camel reserve the original id on the newest route after editing
janstey:1250830226:2009-08-21T12:50:26.559+0000:1250830226:2009-08-21T12:50:26.559+0000:Committed your latest patch in http://svn.apache.org/viewvc?rev=806533&view=rev

Glad to see you got rid of that temp context! :)
xueqiang.mi:1251850823:2009-09-02T08:20:23.685+0000:1251850823:2009-09-02T08:20:23.685+0000:Add create new route and view all routes link on routes page;
Let route editor return into sitemesh decorator

njiang:1251851661:2009-09-02T08:34:21.170+0000:1251851661:2009-09-02T08:34:21.170+0000:@ Xueqiang

Can you take a look the unit tests in the org.apache.camel.web.groovy which are commented out ?
There are about 10 tests which do work now.

xueqiang.mi:1251960249:2009-09-03T14:44:09.873+0000:1251960249:2009-09-03T14:44:09.873+0000:I read the unit tests and will fix some of them asap. But not all of them can be fixed at current version. A page listing the unsupported features on web console is created: [Unsupported Groovy DSL Features on Web Console].
janstey:1251970822:2009-09-03T17:40:22.306+0000:1251970822:2009-09-03T17:40:22.306+0000:Xueqiang,

Just took a look at your latest patch; liking the create route feature! Not sure about the view all routes though... looks bit messy IMHO and I doubt folks would always want to view their routes as only Groovy... maybe disable that screen for now? I also had a few test failures after applying the patch

{code}
Failed tests: 
  testTracePerRotueManual(org.apache.camel.web.groovy.TracingDSLTest)
  testInterceptFromUriRegex(org.apache.camel.web.groovy.InterceptFromDSLTest)
  testInterceptFromUriSimpleLog(org.apache.camel.web.groovy.InterceptFromDSLTest)
  testInterceptFromUriWildcard(org.apache.camel.web.groovy.InterceptFromDSLTest)

Tests run: 162, Failures: 4, Errors: 0, Skipped: 14
{code}
xueqiang.mi:1252039112:2009-09-04T12:38:32.136+0000:1252039112:2009-09-04T12:38:32.136+0000:del the view all routes page;
fixed the bug willem and jonathan mentioned here.
janstey:1252054304:2009-09-04T16:51:44.490+0000:1252054304:2009-09-04T16:51:44.490+0000:Thanks Xueqiang, I've just committed your latest

See http://svn.apache.org/viewvc?rev=811485&view=rev
janstey:1254288671:2009-09-30T13:31:11.896+0000:1254288671:2009-09-30T13:31:11.896+0000:Calling this complete.

Xueqiang, feel free to make any changes to the web console under new tickets as they happen."
0,CAMEL-1391,Sub-task,Major,None,None,"
None
",Closed,Won't Fix,2.5.0,Unassigned,James Strachan,0,0,2009-02-26 09:10:06+00:00,2011-04-24 09:58:13+00:00,No Desc,davsclaus:1303610293:2011-04-24T09:58:13.536+0000:1303610293:2011-04-24T09:58:13.536+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-1390,Sub-task,Major,None,None,"
None
",Closed,Won't Fix,2.1.0,Unassigned,James Strachan,0,0,2009-02-26 09:06:04+00:00,2010-02-07 09:55:21+00:00,No Desc,davsclaus:1252840221:2009-09-13T19:10:21.058+0000:1252840221:2009-09-13T19:10:21.058+0000:I think we stick with Groovy and Scala which should be easier to render than old school Java code
0,CAMEL-1389,New Feature,Minor,None,None,"
None
",Closed,Won't Fix,2.5.0,Unassigned,James Strachan,0,1,2009-02-26 09:05:05+00:00,2011-04-24 09:57:39+00:00,"We could do with an interface to be able to turn a RouteType or RoutesType into a textual representation.


Maybe something like



public interface TextRenderer {
  void renderRoute(Appendable buffer, RouteType route);
  void renderRoutes(Appendable buffer, RoutesType route);
}




The XML one is quite simple - we'd just use JAXB.


For other languages (Java / Scala / Groovy / Ruby) we'd need some kind of visitor pattern for navigating the Routes/Route tree to turn each node into some neat language expression; so folks could extend some visitor thingy and include the specific Scala (say) code","davsclaus:1284860436:2010-09-19T09:40:36.142+0000:1284860436:2010-09-19T09:40:36.142+0000:Lets keep the camel-web simple and have the XML render only
davsclaus:1303610259:2011-04-24T09:57:39.227+0000:1303610259:2011-04-24T09:57:39.227+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-1388,Improvement,Trivial,None,None,"
None
",Resolved,Won't Fix,2.8.0,Claus Ibsen,James Strachan,0,0,2009-02-26 09:03:45+00:00,2011-06-29 11:36:52+00:00,e.g. from the web console,davsclaus:1239673046:2009-04-14T09:37:26.518+0000:1239673046:2009-04-14T09:37:26.518+0000:We will continue to work on the web console in 2.1. So this ticket is moved to 2.1
0,CAMEL-1387,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,James Strachan,0,0,2009-02-26 09:02:21+00:00,2009-07-31 06:34:09+00:00,which for now can just return the known instances,"davsclaus:1236842637:2009-03-12T15:23:57.128+0000:1236842637:2009-03-12T15:23:57.128+0000:Committed revision 752893.

Added getXXXNames() to return a List<String> with the name.
davsclaus:1248993249:2009-07-31T06:34:09.915+0000:1248993249:2009-07-31T06:34:09.915+0000:Closing 2.0m1 tickets"
0,CAMEL-1386,Improvement,Minor,None,None,"
None
",Resolved,Fixed,2.12.0,Unassigned,James Strachan,0,1,2009-02-26 09:00:25+00:00,2013-05-24 09:43:58+00:00,"There's no way to know what languages or components are available (other than looking at all objects in the registry but lots of components/languages are never in the registry) - we only know the ones that have been registered (used).


This is because we dynamically create them on the fly by looking up the /META-INF/services/.../$name file. The downside is I don't think we can list - say - the files in 



/META-INF/services/org/apache/camel/component/*



 on the classpath - due to the ClassLoader API; you can only look up resources by name.


It might be nice to load them all on startup so we can iterate through them all - so from a tooling/UI perspective we can list them all.


For example in the Web Console we can then show all the available components folks can use if they wish and similarly languages.


To implement this we could maybe hack the maven plugin we mention in CAMEL-1385 (which we'll start using in each camel module which defines a component/language/converter) so that we generate some canonical file which links to the component/language.


e.g. for JMS we might already have this file on the classpath



/META-INF/services/org/apache/camel/component/jms




but generically we can't auto-discover all the component names. So maybe we also generate a little file



/META-INF/services/org/apache/camel/componentName




which just contains the component name (i.e. 'jms').


Then we can load all of the available /META-INF/services/org/apache/camel/componentName files - read their contents and then load the ""jms"" component along with all the other ones we find.


Ditto for languages too. We don't have this problem for type converters as we already load those on startup.","gertvanthienen:1235612398:2009-02-26T09:39:58.995+0000:1235612398:2009-02-26T09:39:58.995+0000:Do you mean like keeping a ComponentRegistry of some kind to lookup the component by name instead of doing the lookup with the META-INF file when reading it from the endpoint URI? 

I think filling the registry might be somewhat different, depending on the runtime environment:
- For a plain Java environment, scanning the classpath for a file like you suggested would be nice way to handle it
- When using Spring, we could also take a look at the ApplicationContext for finding other Compent implementations and registering them
- For an OSGi environment, it would be nice to build a BundleListener/Activator to add components to the registry as soon as the bundle is started. 

jstrachan:1235613428:2009-02-26T09:57:08.673+0000:1235613428:2009-02-26T09:57:08.673+0000:Agreed with all of that Gert yes.

I guess what I'm saying is - we should try to eagerly load the component and language instances and register them with the CamelContext so we can query for the available Component / Language instances that are available for use.

So with spring we can do this on startup - finding all beans in the applicationContext which implement Component/Language - and by eagerly loading the files from the classpath for stuff not configured in spring (like we do for converters).

I agree - for OSGi this would need to be a bundle listener to add/remove components/languages dynamically
jstrachan:1369359838:2013-05-24T09:43:58.796+0000:1369359838:2013-05-24T09:43:58.796+0000:This seems fixed at least for the non-osgi case with the findComponentNames() MBean method on the Camel context"
0,CAMEL-1385,Improvement,Major,None,None,"
None
",Closed,Won't Fix,2.6.0,Willem Jiang,James Strachan,0,0,2009-02-26 08:28:24+00:00,2011-04-24 09:57:25+00:00,"It can be frustrating seeing lots of stack traces with random ClassNotFoundException. Its also pretty hard to know what jars are required for any component. While folks using Maven don't always have this issue - folks who slap jars into a WEB-INF/lib directory or use Ant - frequently miss jars from the classpath.


When we try to load a class for a component, language, converter (or any other auto-discovery mechanisms we have) we should know the 'camel module' and therefore the dependencies it requires. e.g. if resolving the ""jms"" component we should know its ""camel-jms"" doing the lookup. Then we can look in some canonical place for the list of jar dependencies (groupId/artifactId/version) which camel-jms requires and then inform the user of the dependencies it requires.  e.g. we look for org.apache.camel.jms.dependencies.properties on the classpath and use that to list the actual compile time dependencies (generated at build time from maven).


FWIW there's a maven plugin I hacked for servicemix which does something kinda similar - dumping maven dependencies into a properties file (so you don't need to depend on some maven library stuff to be able to easily grok what your dependencies are).


http://svn.apache.org/repos/asf/servicemix/maven-plugins/depends-maven-plugin/trunk/


which generates a dependencies file
http://svn.apache.org/repos/asf/servicemix/maven-plugins/depends-maven-plugin/trunk/src/main/java/org/apache/servicemix/tooling/depends/GenerateDependsFileMojo.java


So I'm thinking we should put a dependencies file in the package that the component/language/converters are defined in - then that single file can be looked up by any code and shared across component/language/converter discovery. 


So we could reuse the same plugin - but just overload the output file to change from



${project.build.directory}/classes/META-INF/maven/dependencies.properties




to be



${project.build.directory}/classes/META-INF/maven/org/apache/camel/jms/dependencies.properties




e.g. put a file org.apache.camel.jms.dependencies.properties on the classpath; then when loading a component/language/converter class in that package, we look for the dependencies properties file (and maybe keep walking up the package hierarchy until we find one).


Then whenever we try to load a component/language/converter (or indeed do any String -> class conversion) we can discover the available $package/dependencies.properties files and use that information to produce useful warnings about missing classes etc.


It'd be awesome if we could list the actual missing library .


e.g. if you try and use ""activemq"" component and stuff is missing on the classpath (and we seem to see something like this alot on the forums etc)....



WARN: Camel tried to load the 'activemq' component defined in org.apache.activemq:activemq-camel:5.3.0 but you were missing the following jars from your classpath org.apache.geronimo.specs:jta.jar:1.234, ....




However even if we just had a way to list the dependencies we expect and the user could do the diff themselves it'd be really helpful. (I wonder if we can figure out if a jar is present on the classpath based on a groupId/artifactId/version? - maybe looking internally for the pom.xml that Maven shoves in META-INF?).","davsclaus:1293775740:2010-12-31T14:09:00.488+0000:1293775740:2010-12-31T14:09:00.488+0000:Apache Karaf and OSGi is using features to install all what you need.
davsclaus:1303610245:2011-04-24T09:57:25.401+0000:1303610245:2011-04-24T09:57:25.401+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-1384,Bug,Major,1.6.0,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Michael Chen,0,0,2009-02-25 17:54:15+00:00,2009-07-31 06:34:09+00:00,"The utility method org.apache.camel.util.ExchangeHelper.copyResults() is use by many core classes. However, this method does not properly support MEP InOptionalOut.


Assuming in an InOptionalOut exchange, having no out message means just that – no out message should be sent, then the following lines in this method



//
            Message out = source.getOut(false);
            if (out != null) {
                result.getOut(true).copyFrom(out);
            } else {
                // no results so lets copy the last input




should be changed to:



//
            Message out = source.getOut(false);
            if (out != null) {
                result.getOut(true).copyFrom(out);
            } else if (result.getPattern() == ExchangePattern.InOptionalOut) {
                result.setOut(null);
            } else {
                // no results so lets copy the last input","davsclaus:1235700024:2009-02-27T10:00:24.485+0000:1235700024:2009-02-27T10:00:24.485+0000:Committed revision 748469.
davsclaus:1248993249:2009-07-31T06:34:09.859+0000:1248993249:2009-07-31T06:34:09.859+0000:Closing 2.0m1 tickets"
0,CAMEL-1383,Sub-task,Major,None,2.5.0,"
None
",Closed,Won't Fix,2.5.0,Unassigned,James Strachan,0,0,2009-02-25 15:29:52+00:00,2011-04-24 09:57:24+00:00,using a text search to find a message (using headers/body) or using xpath/EL or whatever,"jstrachan:1235547521:2009-02-25T15:38:41.005+0000:1235547521:2009-02-25T15:38:41.005+0000:we could support a RAM only lucene based search too...
http://javatechniques.com/blog/lucene-in-memory-text-search-example/
davsclaus:1284860633:2010-09-19T09:43:53.427+0000:1284860633:2010-09-19T09:43:53.427+0000:Lets keep the camel-web simple and easy for now
davsclaus:1303610244:2011-04-24T09:57:24.969+0000:1303610244:2011-04-24T09:57:24.969+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-1382,Improvement,Major,None,None,"
None
",Closed,Won't Fix,2.0-M2,Unassigned,James Strachan,0,0,2009-02-25 12:06:15+00:00,2009-11-21 11:57:55+00:00,"it seems kinda confusing and am not sure if its got real value?


I'm just about to add a class I'm calling RouteService which is-a Service representing a runtime image of a RouteType which can be started/stopped. Am wondering if we zap Route - or if we just make Route be the RouteService?",davsclaus:1258775875:2009-11-21T11:57:55.398+0000:1258775875:2009-11-21T11:57:55.398+0000:Closing all 2.0M2 tickets
0,CAMEL-1381,New Feature,Major,None,2.6.0,"
None
",Closed,Won't Fix,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2009-02-25 10:09:15+00:00,2011-04-24 09:57:28+00:00,"The problem is when using predicates in the fluent builder you can not build an expression but only call a single predicate.


James gave a hint on a solution:
>> Minor issue but I have been trying to coax folks away from this form
>> of DSL (e.g. figure 15)
>>
>> when(header(""type"").
>>
>> to
>>
>> when().header(""type"")...
>>
>> not always applicable - but its just to let the IDE do better
>> completion and let us remove some of the kinda global bits of DSL we
>> still have lying around the code.
> Yeah I will go over and change the ones that is possible. However when
> you chain a method then its not possible, eg:
>
> when().header(""type"").isEqualTo(""foo"").to(""seda:foo"");


Yeah - for things like that we currently have to use the EL / simple /
XPath expression languages.


I guess we could add some DSL to build them maybe...


when().is().header(""foo"").equalTo(""something"").
or


when().is().header(""foo"").equalTo().header(""bar"");


i.e. the is() builds a kinda binary expression with the first
expression returning a binary expression which is then used to build
an == != > < <= >= type expression with another expression?


Not totally sure its worth it though 


So something like the ExpressionClause that can do this for expression, we can create a PredicateClause that preserves the original type so you can continue routing afterwards.",davsclaus:1303610248:2011-04-24T09:57:28.845+0000:1303610248:2011-04-24T09:57:28.845+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-1380,Task,Trivial,None,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Claus Ibsen,0,0,2009-02-25 07:45:48+00:00,2009-07-31 06:34:09+00:00,"<aggregate strategyRef=""bestQuote"">
                <correlationExpression>
                    <header id=""loandId""/>
                </correlationExpression>
                <completedPredicate>
                    <simple>${header.CamelAggregatedCount} > 2</simple>
                </completedPredicate>
            </aggregate>




Should be:



            <aggregate strategyRef=""bestQuote"">
                <correlationExpression>
                    <header id=""loandId""/>
                </correlationExpression>
                <completionPredicate>
                    <simple>${header.CamelAggregatedCount} > 2</simple>
                </completionPredicate>
            </aggregate>




So its in line with the correlation expression",davsclaus:1248993249:2009-07-31T06:34:09.795+0000:1248993249:2009-07-31T06:34:09.795+0000:Closing 2.0m1 tickets
0,CAMEL-1379,Bug,Major,1.5.0,"2.0-M1, 1.6.1","
None
",Closed,Fixed,"2.0-M1, 1.6.1",Willem Jiang,Christopher Hunt,0,0,2009-02-24 22:36:52+00:00,2009-03-17 14:20:33+00:00,"Establishing a MINA endpoint with a custom codec, and then establishing another without a custom codec is a problem. The second endpoint inherits the first endpoint's codec.


My recommendation is to not share configuration data between endpoint creation. I recommend that the MINA component instantiate a new configuration for each new endpoint instead of copying the previous configuration.


As a workaround the user can specify ""codec"" as a URI parameter with no value.","davsclaus:1235516891:2009-02-25T07:08:11.783+0000:1235516891:2009-02-25T07:08:11.783+0000:Please add an unit test verifying the fix, but adding 2 mina consumers:
- with custom codec
- no custom codec, eg textline=true

And backport the fix to 1.x if possible. Mina on trunk is changed a bit over 1.x
njiang:1235518018:2009-02-25T07:26:58.105+0000:1235518018:2009-02-25T07:26:58.105+0000:@ Claus

I'm working on the back porting to 1.x branch now and will add the unit test for it.
njiang:1235930611:2009-03-02T02:03:31.965+0000:1235930611:2009-03-02T02:03:31.965+0000:1.x banch 
http://svn.apache.org/viewvc?rev=747706&view=rev
"
0,CAMEL-1378,Improvement,Major,1.6.0,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Claus Ibsen,0,0,2009-02-24 16:22:36+00:00,2009-07-31 06:34:09+00:00,"Doing this bean binding:



        public List<String> route(@XPath(""/customer/id"") String customerId, @Header(""Location"") String location, Document body) {




The @Header does not have a default value, so you have to do this to get it to work:



        public List<String> route(@XPath(""/customer/id"") String customerId, @Header(name = ""Location"") String location, Document body) {




So we should support you do not have to set the name attribute.","davsclaus:1235465894:2009-02-24T16:58:14.869+0000:1235465894:2009-02-24T16:58:14.869+0000:Committed revision 747428.

Fixed @Property as well
davsclaus:1248993249:2009-07-31T06:34:09.723+0000:1248993249:2009-07-31T06:34:09.723+0000:Closing 2.0m1 tickets"
0,CAMEL-1377,Improvement,Major,None,None,"
None
",Closed,Fixed,2.0-M1,Jonathan Anstey,James Strachan,0,0,2009-02-24 13:59:12+00:00,2009-07-31 06:34:08+00:00,"e.g. see this project as a useful base


https://svn.apache.org/repos/asf/camel/trunk/components/camel-activemq-web/


which just depends on camel-web so it gets all the good stuff from the Camel Web Console but adds some new dependencies (components) and a different spring XML.


We should wrap up this behaviour so folks can do the same to create their own custom camel web apps","janstey:1235480999:2009-02-24T21:09:59.892+0000:1235480999:2009-02-24T21:09:59.892+0000:Put initial stab at this in revision 747543. Will look a bit tomorrow at adding docs and throwing another component into the sample route. 
davsclaus:1248993248:2009-07-31T06:34:08.949+0000:1248993248:2009-07-31T06:34:08.949+0000:Closing 2.0m1 tickets"
0,CAMEL-1376,Improvement,Major,None,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,James Strachan,0,0,2009-02-24 11:38:32+00:00,2009-07-31 06:34:08+00:00,"we should be able to do something like this...



from(""jetty:http://localhost:8585/cxf/HelloWorld"")
  .to(""http://localhost:8080/cxf/HelloWorld"")
   .wiretap(""seda:cheese"");




such that the seda:cheese gets the output of the HelloWorld service as an InOut - but the response is returned fine to the HTTP client. i.e. the presence of the wiretap() does not in any way affect the exchange - it appears to work exactly the same as



from(""jetty:http://localhost:8585/cxf/HelloWorld"")
  .to(""http://localhost:8080/cxf/HelloWorld"");




and any output of the seda:cheese does not affect the response to the HTTP client.","davsclaus:1236566630:2009-03-09T10:43:50.736+0000:1236566630:2009-03-09T10:43:50.736+0000:Committed revision 751648.
davsclaus:1248993248:2009-07-31T06:34:08.888+0000:1248993248:2009-07-31T06:34:08.888+0000:Closing 2.0m1 tickets"
0,CAMEL-1375,Improvement,Major,None,,"
None
",Closed,Fixed,None,James Strachan,James Strachan,0,0,2009-02-23 11:52:45+00:00,2010-02-07 09:55:21+00:00,which will help create persistent URIs in the camel-web for referring to JMS message exchanges by JMSMessageID,jstrachan:1235361953:2009-02-23T12:05:53.470+0000:1235361953:2009-02-23T12:05:53.470+0000:the JmsMessage now has a createExchangeId() which uses the underlying JMSMessageID
0,CAMEL-1374,Improvement,Major,None,"2.0-M1, 1.6.1","
None
",Closed,Fixed,"2.0-M1, 1.6.1",James Strachan,James Strachan,0,0,2009-02-23 10:59:51+00:00,2009-07-31 06:34:08+00:00,No Desc,"jstrachan:1235359273:2009-02-23T11:21:13.984+0000:1235359273:2009-02-23T11:21:13.984+0000:we now use the endpointUrl by default for non-singleton endpoints - appending "":counter"" if its not unique
njiang:1235423891:2009-02-24T05:18:11.343+0000:1235423891:2009-02-24T05:18:11.343+0000:Also applied this patch to Camel1.x branch
http://svn.apache.org/viewvc?rev=747264&view=rev
davsclaus:1248993248:2009-07-31T06:34:08.843+0000:1248993248:2009-07-31T06:34:08.843+0000:Closing 2.0m1 tickets"
0,CAMEL-1373,Task,Major,None,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Claus Ibsen,0,0,2009-02-23 09:28:47+00:00,2009-07-31 06:34:08+00:00,"We have agreed as part of the 2.0 API rework to use CamelCase header keys. Currently keys using dots violates the JMS spec and other protocols might have problems with them as well.


And Camel should of course use CamelCase 


And they are also easier to read, and less words to type.


There is a discussion on the dev forum about it - title ""Camel 2.0 - Keys for header problem""
Cant like using Nabble as they havent changed to TLP domain","davsclaus:1235377143:2009-02-23T16:19:03.081+0000:1235377143:2009-02-23T16:19:03.081+0000:camel-core *DONE*

Committed revision 747062.

davsclaus:1235540378:2009-02-25T13:39:38.961+0000:1235724819:2009-02-27T16:53:39.780+0000:camel-spring *DONE*
camel-jms *DONE*
came-http *DONE*
camel-jetty *DONE*
camel-cxf *DONE*
camel-atom *DONE*
camel-freemarker *DONE*
camel-hl7 *DONE*
camel-ibatis *DONE*
camel-irc *DONE*
camel-jcr *DONE*
camel-jdbc *DONE*
camel-jpa *DONE*
camel-restlet *DONE*
camel-rss *DONE*
camel-sql *DONE*
camel-stringtemplate *DONE*
camel-velocity *DONE*
davsclaus:1235725432:2009-02-27T17:03:52.250+0000:1235725432:2009-02-27T17:03:52.250+0000:Yes its done all components have changed keys to CamelCase syntax
davsclaus:1248993248:2009-07-31T06:34:08.761+0000:1248993248:2009-07-31T06:34:08.761+0000:Closing 2.0m1 tickets"
0,CAMEL-1372,New Feature,Major,None,2.4.0,"
None
",Closed,Fixed,2.4.0,Willem Jiang,Claus Ibsen,0,0,2009-02-23 06:06:59+00:00,2011-04-24 10:00:55+00:00,Just as the @RecipientList annotation we could add a @RoutingSlip as well so we can improve the POJO DSL.,davsclaus:1303610455:2011-04-24T10:00:55.108+0000:1303610455:2011-04-24T10:00:55.108+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-1371,New Feature,Major,None,2.4.0,"
None
",Closed,Fixed,2.4.0,Willem Jiang,Claus Ibsen,0,0,2009-02-23 05:28:37+00:00,2011-04-24 10:01:08+00:00,"The resequencer stream based uses Long for gap detection as Camel then knows if there is a gap if eg a number in between is missing.


However sometimes you can not convert/compute a Long that is in sequence based on your needs.
Imagine you consume files from a folder and want them to be resequenced so you process them in the correct order.


The file names have this pattern: YYYYMMDD-DNNN.txt. Where YYYYMMDD is the date pattern and D is a fixed string and NNN is a numeric value for that particular day.
Eg: 20090223-D001.txt, 20090223-D002.txt ...


So if we could add a predicate to the resequencer where I could impl. the gap detection, then I would be able to do:



from(""file://inbox"").resequence(header(""CamelFileName"")).gapPredicate(new MyGapPredicate()).timeout(60000).to(""bean:processFileInSequence"");




Where gapPredicate is the new feature. Think about a better name for it, than gap predicate!!","mrt1nz:1237115098:2009-03-15T19:04:58.598+0000:1237115098:2009-03-15T19:04:58.598+0000:In its current version you can customize gap detection by implementing {{org.apache.camel.processor.resequencer.ExpressionResultComparator}} and set it via the {{comparator()}} DSL element.

{code}
// Custom gap detection
ExpressionResultComparator myComparator = ...

// Resequencing route
from(...).resequence().stream().comparator(myComparator).to(...);
{code}

The comparator's relevant methods for gap detection are {{predecessor()}} and {{successor()}}. The {{compare()}} method (from {{java.util.Comparator}}) is needed to order elements in the resequencing queue:

{code}
public class MyComparator implements ExpressionResultComparator {
    ...
    public boolean predecessor(Exchange o1, Exchange o2) {
        // check if o1 is predecessor of o2
        ...
    }

    public boolean successor(Exchange o1, Exchange o2) {
        // check if o1 is sucessor of o2
        ...
    }

    public int compare(Exchange o1, Exchange o2) {
        // compare o1 to o2
        ...
    }
    ...
}
{code}

I see however that there are easier ways for implementing custom gap detection than implementing {{ExpressionResultComparator}} and like the idea to provide something more high-level as described by this issue. I can provide a patch if you want. At the moment, I'm not sure if a Camel {{Predicate}} or {{Expression}} is suitable for implementing custom gap detections. Do you mind if the interface for gap detection is resequencer-specific?

davsclaus:1237156497:2009-03-16T06:34:57.713+0000:1237156497:2009-03-16T06:34:57.713+0000:Martin. Feel free to go ahead. And no I do not mind if its a bit resequence specific.

And thank for the details about the ExpressionResultComparator.
njiang:1277061812:2010-06-21T03:23:32.883+0000:1277061812:2010-06-21T03:23:32.883+0000:Just added an unit test to show how to do it just by adding a custom expression.
Also update the resequence wiki doc for it.
davsclaus:1303610468:2011-04-24T10:01:08.232+0000:1303610468:2011-04-24T10:01:08.232+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-1370,Improvement,Major,None,"2.0-M1, 1.6.1","
None
",Closed,Fixed,"2.0-M1, 1.6.1",Willem Jiang,Willem Jiang,0,0,2009-02-23 03:47:45+00:00,2009-07-31 06:34:08+00:00,"Since the StreamSource holds a InputStream or a Reader , we just need to cache the InputStream or Reader  instead of turn it into Stream by using the transformer of the JAXP.","njiang:1235346331:2009-02-23T07:45:31.492+0000:1235346331:2009-02-23T07:45:31.492+0000:Applied patch into trunk
http://svn.apache.org/viewvc?rev=746872&view=rev
1.x branch
http://svn.apache.org/viewvc?rev=746876&view=rev
davsclaus:1248993248:2009-07-31T06:34:08.733+0000:1248993248:2009-07-31T06:34:08.733+0000:Closing 2.0m1 tickets"
0,CAMEL-1369,Task,Major,None,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Claus Ibsen,0,0,2009-02-22 09:07:50+00:00,2009-07-31 06:34:08+00:00,The old @MessageDriven is superseded by @Consume. So why not remove it in Camel 2.0?,"davsclaus:1236039496:2009-03-03T08:18:16.130+0000:1236039496:2009-03-03T08:18:16.130+0000:Committed revision 749562.
davsclaus:1248993248:2009-07-31T06:34:08.706+0000:1248993248:2009-07-31T06:34:08.706+0000:Closing 2.0m1 tickets"
0,CAMEL-1368,New Feature,Major,1.6.0,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Claus Ibsen,0,0,2009-02-22 07:58:35+00:00,2009-07-31 06:34:08+00:00,"For instance to do some custom code for all IOException we should support:



onException(IOException.class).onRedelivery(new MyIORedeliverPrcessor());




So you can have per exception clause that can overrule the default one on DLC (if any). Just as the failure processor.","davsclaus:1235284863:2009-02-22T14:41:03.606+0000:1235284863:2009-02-22T14:41:03.606+0000:Committed revision 746709.
davsclaus:1248993248:2009-07-31T06:34:08.631+0000:1248993248:2009-07-31T06:34:08.631+0000:Closing 2.0m1 tickets"
0,CAMEL-1337,Improvement,Major,1.5.0,"2.0-M1, 1.6.1","
None
",Closed,Fixed,"2.0-M1, 1.6.1",Willem Jiang,Willem Jiang,0,0,2009-02-13 02:21:50+00:00,2009-07-31 06:34:05+00:00,"<route>
  <from uri=""jetty:http://localhost:8084/services/simpleService""/>
    <choice>
     <when>
        <xpath>/sim:GetCapabilitiesRequest</xpath>
     </when>
     <when>
        <xpath>/sim:GetMetadataRequest</xpath>
     </when>
    </choice>
</route>




A messages that matches the first when statement (I tested with both the route above and a version where I swapped the two xpath statements to make sure it was not dependent on the actual message) throws no errors and a call that matches the second when statement throws the Premature end of file error.","njiang:1234463789:2009-02-13T02:36:29.242+0000:1234463789:2009-02-13T02:36:29.242+0000:Also committed a fix for XqureyBuilder.
njiang:1234831751:2009-02-17T08:49:11.596+0000:1234831751:2009-02-17T08:49:11.596+0000:trunk
http://svn.apache.org/viewvc?rev=743959&view=rev
http://svn.apache.org/viewvc?rev=743960&view=rev

1.x branch
http://svn.apache.org/viewvc?rev=743964&view=rev
davsclaus:1248993245:2009-07-31T06:34:05.878+0000:1248993245:2009-07-31T06:34:05.878+0000:Closing 2.0m1 tickets"
0,CAMEL-1336,Improvement,Major,1.5.0,Future,"
None
",Resolved,Won't Fix,Future,Hadrian Zbarcea,Hadrian Zbarcea,0,0,2009-02-12 17:34:04+00:00,2017-02-28 12:34:16+00:00,"This is a feature that has been requested by users a few times, and it's time to get addressed.


Camel does not really support 2x 1-way async messaging.  It sorta does in camel-jms, by sending a message to a queue and setting the ""JMSCorrelationID"" header.  For a ExchangePattern.InOut it immediately waits for a response (up to a timeout period) and gets the reply and continues processing.


There are a few issues with this approach:



this mechanism is not available across all camel components.  There are other camel components that support async 1 way messaging such as file/ftp, mail, mina, cxf, etc.
there can be no other processing between a message is sent and a reply is received.
the timeout value is short and keeps resources locked, we cannot have long running transactions



My proposal is to:



move the mechanism from jms into core (and improve it)
use a correlation mechanism (that will be different for different components, such as MessageID in camel-mail) to correlate inputs with outputs.  The correlation mechanism could be implicit or explicit.
provide a storage for pending 2x 1-way async UOWs (multiple options available)



A route would then look something like this:



from(""direct.start"")
    .setHeader(""reply-to"", constant(""hadrian@localhost; copy@localhost""))
    .correlate(header(""Message-ID""))
    .to(""smtp://someone@localhost?password=secret&to=otherone@localhost"")
from(""pop3://hadrian@localhost?password=secret).correlate(header(""Message-ID""))
    .from(""some-other-source"")
    .aggregate(header(""foo"")).to(""direct:end"");




note: the multiple from(s).



This also gives unlimited time for a reply to be received.
I don't think support for acid transactions makes any sense in such case.
The presence of correlate() in the pipeline causes automatic storage of the uow
The presence of correlate() after a from() causes the removal of the uow from persistent store.



Any ideas?","davsclaus:1258027328:2009-11-12T20:02:08.294+0000:1258027328:2009-11-12T20:02:08.294+0000:See CAMEL-2151 which has the base stuff in the camel-core for components which supports async request/reply can leverage.

"
0,CAMEL-1335,Task,Major,1.5.0,None,"
None
",Closed,Fixed,1.6.0,Hadrian Zbarcea,Hadrian Zbarcea,0,0,2009-02-12 03:12:50+00:00,2009-11-21 11:56:57+00:00,"There are a couple of dependencies on SNAPSHOT jars that need to be removed.



activemq-camel: use ""5.2.0"" instead of ""5.2-SNAPSHOT""
jersey: use ""1.0"" insead of ""1.0-ea-SNAPSHOT""",davsclaus:1258775817:2009-11-21T11:56:57.918+0000:1258775817:2009-11-21T11:56:57.918+0000:Closing all 1.6.0 issues
0,CAMEL-1334,Bug,Major,None,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Jonathan Anstey,Jonathan Anstey,0,0,2009-02-11 15:02:02+00:00,2009-07-31 06:34:05+00:00,"A FUSE user was having trouble using system properties to configure jetty to use ssl (jetty.ssl.keystore, jetty.ssl.keypassword, etc). Our wiki states that we can do this so I'm gonna look into whats going on here.


FYI as a workaround I suggested this:



<bean id=""jetty"" class=""org.apache.camel.component.jetty.JettyHttpComponent"">
  <property name=""sslPassword"" value=""password1""/>
  <property name=""sslKeyPassword"" value=""password2""/>
  <property name=""keystore"" value=""/home/brett/workspace/Camel-https/keystore""/>
</bean>  
  
<camelContext id=""camel"" xmlns=""http://camel.apache.org/schema/spring"">
  <route>
    <from uri=""jetty:https://localhost:8443/security""/>
    ...
  </route>
</camelContext>","janstey:1234343301:2009-02-11T17:08:21.698+0000:1234343301:2009-02-11T17:08:21.698+0000:Fixed this up in revision 743402.
davsclaus:1248993245:2009-07-31T06:34:05.817+0000:1248993245:2009-07-31T06:34:05.817+0000:Closing 2.0m1 tickets"
0,CAMEL-1333,Task,Major,1.5.0,None,"
None
",Closed,Fixed,"1.6.0, 2.0-M1",Hadrian Zbarcea,Hadrian Zbarcea,0,0,2009-02-10 23:22:14+00:00,2009-07-31 06:34:05+00:00,No Desc,"hadrian:1234333867:2009-02-11T14:31:07.131+0000:1234333867:2009-02-11T14:31:07.131+0000:Done, just forgot to close this.
njiang:1234397002:2009-02-12T08:03:22.736+0000:1234397002:2009-02-12T08:03:22.736+0000:Also update trunk pom to use CXF 2.1.4.
davsclaus:1248993245:2009-07-31T06:34:05.000+0000:1248993245:2009-07-31T06:34:05.000+0000:Closing 2.0m1 tickets"
0,CAMEL-1332,Bug,Major,"1.5.0, 2.0-M1",2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Gert Vanthienen,0,0,2009-02-10 15:37:13+00:00,2009-11-21 11:57:55+00:00,"Right now, there are two ways of enabling stream caching:



explicitly enable it through the DSL
implicitly enable it through e.g. a Multicast or DeadletterChannel



We should make that a single way of enablement or else document the rationale for the difference properly.","davsclaus:1239688562:2009-04-14T13:56:02.418+0000:1239688562:2009-04-14T13:56:02.418+0000:Gertv I think it should be just as the Tracer, and it should be enabled by default.

For instance if you do transacted routing (eg not using DeadLetterChannel) and content based router where you do xpath predicates then the payload is gonna be read multiple times. And therefore we need the cache to be default enabled.

We can add a easy switch in the Spring XML to disable it for people really not liking it, eg just like the Tracer.

Then we can remove the special code in DeadLetterChannel, Multicast that enables it.
davsclaus:1239695736:2009-04-14T15:55:36.686+0000:1239695736:2009-04-14T15:55:36.686+0000:gertv I got it now.

StreamCache is default enabled and only applied in the start of the route, to not clutter the route with unneeded wrappings.
gertvanthienen:1239698169:2009-04-14T16:36:09.503+0000:1239698169:2009-04-14T16:36:09.503+0000:Claus, I don't think enabling it at the start of the route is enough.  If you look at CAMEL-1271, the problem there was an InOut style interaction with an external service in the middle of the route.  If the response from the service is a streaming data type (e.g. a StreamSource), you would need to cache that as well to ensure proper handling. 
davsclaus:1239742507:2009-04-15T04:55:07.395+0000:1239742507:2009-04-15T04:55:07.395+0000:@Gert

Ah of course. Thanks a lot. I must have blundered. You can of course enrich or invoke external services that return data that is stream based, that of course also should be re readable using the cache interceptor.
davsclaus:1239758638:2009-04-15T09:23:58.821+0000:1239758638:2009-04-15T09:23:58.821+0000:trunk: 765089

There is a issue with TX routes and steam cache I need to sort it. There is a TODO in some unit tests in camel-spring that shows the problem.
I know what to do but I wanted to get this part with pure stream cache committed before I mess with TX error handler.
davsclaus:1239776746:2009-04-15T14:25:46.956+0000:1239776746:2009-04-15T14:25:46.956+0000:2nd part done. Now it works nicely with TX routes as well

trunk: 765211

Will keep this fix on trunk only as it will impact 1.6 API and we dont wanna do a 1.7 release.
davsclaus:1258775875:2009-11-21T11:57:55.340+0000:1258775875:2009-11-21T11:57:55.340+0000:Closing all 2.0M2 tickets"
0,CAMEL-1331,Improvement,Major,None,None,"
None
",Closed,Fixed,"1.6.0, 2.0-M1",Jonathan Anstey,Jonathan Anstey,0,0,2009-02-10 14:05:26+00:00,2009-07-31 06:34:04+00:00,No Desc,"janstey:1234247903:2009-02-10T14:38:23.195+0000:1234247903:2009-02-10T14:38:23.195+0000:Added example in rev 742976 and docs here http://cwiki.apache.org/confluence/display/CAMEL/Detour
davsclaus:1248993244:2009-07-31T06:34:04.980+0000:1248993244:2009-07-31T06:34:04.980+0000:Closing 2.0m1 tickets"
0,CAMEL-1330,Bug,Major,1.5.0,None,"
None
",Closed,Fixed,"1.6.0, 2.0-M1",Willem Jiang,Willem Jiang,0,0,2009-02-10 13:33:47+00:00,2009-07-31 06:34:04+00:00,"Here is the mail thread which talks about it.
http://markmail.org/message/4qvwufpboro3lj34?q=camel-cxf+Soap-Fault+not+returned+as+500+http+error+code","njiang:1234328757:2009-02-11T13:05:57.728+0000:1234328757:2009-02-11T13:05:57.728+0000:trunk
http://svn.apache.org/viewvc?rev=743229&view=rev
1.x
http://svn.apache.org/viewvc?rev=743243&view=rev
davsclaus:1248993244:2009-07-31T06:34:04.920+0000:1248993244:2009-07-31T06:34:04.920+0000:Closing 2.0m1 tickets"
0,CAMEL-1329,Improvement,Major,None,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",William Tam,William Tam,0,0,2009-02-10 04:59:13+00:00,2009-07-31 06:34:04+00:00,"request raised in user forum.
http://www.nabble.com/restlet-component-and-query-string-parameters-tp21923270s22882p21923270.html","wtam:1234214095:2009-02-10T05:14:55.168+0000:1234214095:2009-02-10T05:14:55.168+0000:camel-1.x: Committed revision 742855.
2.0 trunk: Committed revision 742854.


davsclaus:1248993244:2009-07-31T06:34:04.898+0000:1248993244:2009-07-31T06:34:04.898+0000:Closing 2.0m1 tickets"
0,CAMEL-1328,Improvement,Major,1.5.0,"2.0-M1, 1.6.1","
None
",Closed,Won't Fix,"2.0-M1, 1.6.1",Claus Ibsen,Claus Ibsen,0,0,2009-02-09 13:05:03+00:00,2009-10-24 11:16:12+00:00,"You need to do this in spring DSL today:



<bean id=""http"" class=""org.apache.camel.component.http.HttpComponent"">
  <property name=""httpConnectionManager"" ref=""myHttpConnectionManager""/>
</bean>

<bean id=""myHttpConnectionMananger"" class=""org.apache.commons.httpclient.MultiThreadedHttpConnectionManager"">
   <property name=""parms"" value=""myParams""/>
</bean>

<bean id=""myParams"" class=""org.apache.commons.httpclient.params.HttpConnectionManagerParams"">
   <property name=""maxConnectionsPerHost"" value=""5""/>
</bean>




What if the HttpConnectionManagerParams could be set in the URI with all the introspection support we already have for httpClient. prefix for URI options.


We need a similar prefix for the connection manager, so you can set eg setMaxConnectionsPerHost","davsclaus:1234160208:2009-02-09T14:16:48.102+0000:1234160208:2009-02-09T14:16:48.102+0000:As the HttpConnectionManagerParams is global for all http endpoints it might be confusing if you do something like this:

{code:java}
                from(""seda:withConversion"").thread(5).to(""http://www.google.com/search?httpConnectionManager.defaultMaxConnectionsPerHost=5"")
                    .convertBodyTo(String.class).to(""mock:results"");

                from(""seda:withoutConversion"").thread(5).to(""http://www.google.com/search"")
                    .to(""mock:results"");
{code}

In the first route we configure the global to use 5, and in the latter we dont configure anything, so it will use the global configuration that was previously set (=5)

The reason is that HttpComponent has a shared HttpConnectionManager.

So we cant support different configuration, if you do this:
{code:java}
                from(""a"").to(""http://www.google.com/search?httpConnectionManager.defaultMaxConnectionsPerHost=3"")
                from(""b"").to(""http://www.google.com/search?httpConnectionManager.defaultMaxConnectionsPerHost=4"")
                from(""c"").to(""http://www.google.com/search?httpConnectionManager.defaultMaxConnectionsPerHost=5"")
{code}

We could just avoid exposing URI options in the endpoint, but then end users need to set all this stuff manually and it can be cumbersome.


davsclaus:1234161880:2009-02-09T14:44:40.451+0000:1234161880:2009-02-09T14:44:40.451+0000:Wont fixing this one, as the httpConnectionManager is on the http component and thus shared for all its endpoints it creates. So if you have 2 routes using http and you
configure them differently it will be on this single shared instance and thus confusing."
0,CAMEL-1327,Improvement,Minor,None,"2.0-M1, 1.6.1","
None
",Closed,Fixed,"2.0-M1, 1.6.1",Willem Jiang,roberto rojas,0,0,2009-02-09 04:18:36+00:00,2009-07-31 06:34:04+00:00,The Camel-Http component is missing support GZIP content encoding. The supplied patch proposes a way to solve that.,"rjrojas:1234124441:2009-02-09T04:20:41.118+0000:1234124441:2009-02-09T04:20:41.118+0000:Attached proposed patch.
hadrian:1234127304:2009-02-09T05:08:24.272+0000:1234127304:2009-02-09T05:08:24.272+0000:I should do a bit of digging, but it's late.  However iirc this popped on the mailing lists a while ago and I think the idea was to not put something like this in the http component because it has broader use.

@Willem, could we discuss this a bit on the dev@list?

@Roberto, many thanks for the patch. Look for this functionality in camel soon.
njiang:1234130729:2009-02-09T06:05:29.012+0000:1234130729:2009-02-09T06:05:29.012+0000:@Hadrian
I just went through the patch , the GZIP content encoding is only enabled for the http producer  when the message has the GZIPHelper.CONTENT_ENCODING header.

But I don't know if  Roberto take the consideration of it will effect the camel-jetty component.
Maybe I need to add some test case in camel-jetty to verify it.
rjrojas:1234165700:2009-02-09T15:48:20.173+0000:1234165700:2009-02-09T15:48:20.173+0000:@Hadrian
   You're welcome. I wanted to provide something hoping that at least it will spark some conversations about it.

@Willem
Yes, the camel-jetty is affected by this change, specially in the changes made to the DefaultHttpBinding.doWriteResponse method.
I failed to provide more adequate test cases, but let me know if you need an extra set of hands to help with more test cases and stuff. 

@All
For inbound and outbound from camel-http, for the moment, users could workaround it by using Type Converters. That's how I did in a test case I was working on.
For the camel-jetty, inbound could be worked around with a Type Converter, but,  as far as I can tell, the user will have to provide his own version of a HttpBindings for the outbound scenario repeating or overriding all the logic in the doWriteReponse method.

romkal:1234225858:2009-02-10T08:30:58.109+0000:1234225858:2009-02-10T08:30:58.109+0000:This issue relates to more general CAMEL-1320 issue, that proposes adding GZIP Data Format to Camel. While they are not 100% the same, it would be possible to use filter and ungzip the message, or gzip it back later while adding/testing Content-Encoding header
njiang:1234229760:2009-02-10T09:36:00.260+0000:1234229760:2009-02-10T09:36:00.260+0000:Applied patch with thanks to Roberto

@ Roberto
After added some jetty unit tests,  I made some changes in the HttpDefaultBinding to get it support the GZIP out of box :)
BTW, I guess you are using Camel 1.x branch code to create the patch,  and I only commit the codes into the trunk (CAMEL 2.x), so please check out trunk code for verification. 

@ Roman
I think current http component's GZIP  is a transport level support,  and the user of the application level will not get touch with the gzipped data. 
Please check out the JettyContentTypeTest.java for more information.

rjrojas:1234248885:2009-02-10T14:54:45.863+0000:1234248885:2009-02-10T14:54:45.863+0000:@Willem
Thanks your help with this issue. The customer I was helping is using Camel 1.5.x within SMX 3.3.x. I'll try to use Camel 2.x and see if that works for them. 
rjrojas:1234354575:2009-02-11T20:16:15.262+0000:1234354575:2009-02-11T20:16:15.262+0000: @Willem
 I was testing the patch added to Camel 2.x using SMX 3.3.x and I came across an interesting issue. The camel-jetty is not automatically decompressing the InputStream
when a request with 'Content-Type' is set to 'gzip' comes in.  The reason being the fact that the HttpRequest is being transformed into a StreamCacheConverter$InputStreamCache
object. This causes the problem of the HttpConverter methods added in the patch not to be called.  It turns out that I'm missing another call to the GZIPHelper in the DefaultHttpBinding class that would fix this. The attached patch (gzip-content-encoding-delta.patch) fixes the issue. 
njiang:1234385317:2009-02-12T04:48:37.688+0000:1234385317:2009-02-12T04:48:37.688+0000:@Roberto

I applied your patch and also updated the test case.  Please let me know if there is any issue about it.
davsclaus:1234395920:2009-02-12T07:45:20.126+0000:1234395920:2009-02-12T07:45:20.126+0000:Willem is this applied to trunk only? Could you set the version numbers on this JIRA ticket?
njiang:1234396843:2009-02-12T08:00:43.765+0000:1234396843:2009-02-12T08:00:43.765+0000:Here is the version number for trunk
http://svn.apache.org/viewvc?rev=742898&view=rev
http://svn.apache.org/viewvc?rev=742906&view=rev
http://svn.apache.org/viewvc?rev=743613&view=rev

I am planing to merge them into 1.x branch also.
njiang:1234398308:2009-02-12T08:25:08.839+0000:1234398308:2009-02-12T08:25:08.839+0000:Also merge the change into the 1.x branch
http://svn.apache.org/viewvc?rev=743649&view=rev
http://svn.apache.org/viewvc?rev=743652&view=rev
rjrojas:1234432712:2009-02-12T17:58:32.336+0000:1234432712:2009-02-12T17:58:32.336+0000:@Willem
From what I can tell, 1.x branch works fine as well.
Thanks for your help.
davsclaus:1248993244:2009-07-31T06:34:04.862+0000:1248993244:2009-07-31T06:34:04.862+0000:Closing 2.0m1 tickets"
0,CAMEL-1326,Task,Major,1.5.0,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Willem Jiang,Willem Jiang,0,0,2009-02-09 02:04:25+00:00,2009-07-31 06:34:04+00:00,"Here is the thread which talks about it.
http://markmail.org/message/k47q6zo7zu4hchms?q=Circular+dependency+in+camel-jms&page=1",davsclaus:1248993244:2009-07-31T06:34:04.805+0000:1248993244:2009-07-31T06:34:04.805+0000:Closing 2.0m1 tickets
0,CAMEL-1325,Bug,Major,1.5.0,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Unassigned,Trev,0,1,2009-02-08 21:33:07+00:00,2009-07-31 06:34:04+00:00,"When I applied the CAMEL-1301 fix (thanks Claus) I hit two more NullPointerExceptions caused by code that assumes that the context classloader will never be null.


Here's the relevant part of one stack trace:


java.lang.NullPointerException
 at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.findPackages(AnnotationTypeConverterLoader.java:97)
 at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.findPackageNames(AnnotationTypeConverterLoader.java:91)


And the other:


java.lang.NullPointerException
 at org.apache.camel.util.ResolverUtil.getResources(ResolverUtil.java:402)
 at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:313)
 at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:290)


A patch is attached.","hadrian:1234102648:2009-02-08T22:17:28.009+0000:1234102648:2009-02-08T22:17:28.009+0000:Patch applied on the camel-1.5 branch.  Trunk will follow soon.  Thanks Trev for discovering this and providing a patch.
hadrian:1234105816:2009-02-08T23:10:16.717+0000:1234105816:2009-02-08T23:10:16.717+0000:Patch applied with thanks!
davsclaus:1248993244:2009-07-31T06:34:04.775+0000:1248993244:2009-07-31T06:34:04.775+0000:Closing 2.0m1 tickets"
0,CAMEL-1324,Task,Minor,2.0.0,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Claus Ibsen,0,0,2009-02-08 09:17:00+00:00,2009-07-31 06:34:04+00:00,"We have 3 options for each: move and preMove


We should consolidate that into only 1 option for each. We can leverage the expression that can handle the pre- and postfix options as well.","davsclaus:1234070042:2009-02-08T13:14:02.815+0000:1234070042:2009-02-08T13:14:02.815+0000:Committed revision 742087.
davsclaus:1248993244:2009-07-31T06:34:04.048+0000:1248993244:2009-07-31T06:34:04.048+0000:Closing 2.0m1 tickets"
0,CAMEL-1323,Task,Major,2.0.0,None,"
None
",Closed,Fixed,2.0-M1,Hadrian Zbarcea,Hadrian Zbarcea,0,0,2009-02-07 05:26:59+00:00,2009-07-31 06:34:03+00:00,"Replace ""http://activemq.apache.org/camel/schema/"" with ""http://camel.apache.org/schema/"" on the trunk.


The camel-1.x should stay unchanged.  Old versions of the schema will continue to be available from the AMQ site.","hadrian:1233963226:2009-02-07T07:33:46.379+0000:1233963226:2009-02-07T07:33:46.379+0000:I am almost done with this, if there won't be many changes in xml files over the weekend it will be in by Mon.
davsclaus:1248993243:2009-07-31T06:34:03.990+0000:1248993243:2009-07-31T06:34:03.990+0000:Closing 2.0m1 tickets"
0,CAMEL-1322,Test,Major,2.0.0,None,"
None
",Closed,Won't Fix,2.0-M1,Unassigned,rpicardi,0,0,2009-02-07 01:15:18+00:00,2009-03-17 03:36:58+00:00,"hi,
i'm developing a gridgain component to integrate camel with grid system opensource. 


I've developed Consumer ,Component ,Endpoint and Producer with basic features but i 've a problem on JUnit test using this route configuration


	from(""ggain:org.apache.camel.component.ggain.GridHelloWorldTask?discoveryMode=0"").to(""file://data/expectedOutput2"");


My endpoint process the request using but doesn't route to File component in order to write result .


I've also tested it using mock:result as endpoint but nothing.


Thanks in advance for your feedback.","davsclaus:1233962664:2009-02-07T07:24:24.970+0000:1233962664:2009-02-07T07:24:24.970+0000:Raffaele

Could you please use the user/dec camel forum for such issues?

The JIRA tracker should only be used when we are have established what is wrong and can write a more precise report what is wrong.

You can try a processor instead and see what comes there, instead of file/mock

from(xx).process(new Processor() 
// and then do some System.out or start using a debugger and set a breakpoint in your processor.
"
0,CAMEL-1321,Bug,Critical,1.5.0,1.6.0,"
None
",Closed,Fixed,1.6.0,Claus Ibsen,Hadrian Zbarcea,0,0,2009-02-07 01:03:17+00:00,2009-11-21 11:56:56+00:00,"See message thread:


http://www.nabble.com/Classloading-leak-in-camel-jaxb-component-td21879801s22882.html","davsclaus:1233962441:2009-02-07T07:20:41.808+0000:1233962441:2009-02-07T07:20:41.808+0000:I gave it a crude try to do a simple fix.

trunk: 741848
1.x: 741849
njiang:1234293246:2009-02-11T03:14:06.727+0000:1234293246:2009-02-11T03:14:06.727+0000:I think Claus did a quick fix for it last week.
@ Claus 
Could you verified it  ?
davsclaus:1234306162:2009-02-11T06:49:22.919+0000:1234306162:2009-02-11T06:49:22.919+0000:@Willem

Yeah I have committed a fix and wrote on the user forum to the end user he should try it out. But no response.
davsclaus:1234308347:2009-02-11T07:25:47.842+0000:1234308347:2009-02-11T07:25:47.842+0000:I wrote an email to the end user to get his attention
davsclaus:1234328130:2009-02-11T12:55:30.467+0000:1234328130:2009-02-11T12:55:30.467+0000:I do think its resolved. So setting it as fixed for now, so Hadrian can build a 1.6.0 release very soon.
davsclaus:1258775816:2009-11-21T11:56:56.882+0000:1258775816:2009-11-21T11:56:56.882+0000:Closing all 1.6.0 issues"
0,CAMEL-1320,New Feature,Minor,None,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Roman Kalukiewicz,Roman Kalukiewicz,0,0,2009-02-06 14:55:23+00:00,2009-11-21 11:57:55+00:00,Let's create gzip data format. Would be useful for http trafic that can have Content-Encoding: gzip,"davsclaus:1234427570:2009-02-12T16:32:50.545+0000:1234427570:2009-02-12T16:32:50.545+0000:Roman

How is this related to the zip data format recently added?
http://camel.apache.org/zip-dataformat.html

romkal:1234493362:2009-02-13T10:49:22.250+0000:1234493362:2009-02-13T10:49:22.250+0000:It is very similar to zip data format - it even uses the same deflate algorithm. The point is, that zip data format uses deflate algorithm directly, while gzip would use gzip file format, that is (I believe more popular).

http://java.sun.com/j2se/1.5.0/docs/api/java/util/zip/GZIPInputStream.html
http://java.sun.com/j2se/1.5.0/docs/api/java/util/zip/InflaterInputStream.html

The problem with zip data format is that is is not a zip really - zip is a format that compresses set of files, while our zip data format doesn't - it just compresses data using compression algorithm of zip.
On the other hand gzip is a format that compresses data (not files), uses the same algorithm, but has its own headers, that has to be interpreted.

I even believe that our zip data format should be renamed to 'deflate' data format as it is the name that describes what it really is.
romkal:1237447096:2009-03-19T15:18:16.838+0000:1237447096:2009-03-19T15:18:16.838+0000:Created gzip data format
davsclaus:1237452196:2009-03-19T16:43:16.432+0000:1237452196:2009-03-19T16:43:16.432+0000:Great. You probably need to add it to the jaxb file as well in the model package.

Otherwise it wont show up in Spring XML.
davsclaus:1237452224:2009-03-19T16:43:44.057+0000:1237452224:2009-03-19T16:43:44.057+0000:And we need to add it to the wiki page as well, under data formats. 
romkal:1237507896:2009-03-20T08:11:36.052+0000:1237507896:2009-03-20T08:11:36.052+0000:Both things done.

Documentation to be found at:
http://cwiki.apache.org/confluence/display/CAMEL/GZip+data+format
davsclaus:1258775875:2009-11-21T11:57:55.306+0000:1258775875:2009-11-21T11:57:55.306+0000:Closing all 2.0M2 tickets"
0,CAMEL-1319,Improvement,Minor,None,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Claus Ibsen,0,0,2009-02-06 06:28:52+00:00,2009-07-31 06:34:03+00:00,"As we have:
excludedNamePostfix
excludedNamePrefix


We should also have
includeNamePostfix
includeNamePrefix


And excluded should lose the last d, so its *exclude*Name


If end users is using both, then exclude should take precedence.


The include is for end users to do some thing as


includeNamePostfix=.txt


to eg consume all .txt files. And not having to mess with reg exp.","davsclaus:1233874969:2009-02-06T07:02:49.048+0000:1233874969:2009-02-06T07:02:49.048+0000:davsclaus:(svn)camel[trunk:741417]/camel-core$ svn commit --message ""CAMEL-1319: Added includeNameXX options to the file component."" 
Sending        camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java
Sending        camel-core/src/main/java/org/apache/camel/component/file/FileEndpoint.java
Sending        camel-core/src/main/java/org/apache/camel/component/file/GenericFileConsumer.java
Sending        camel-core/src/main/java/org/apache/camel/component/file/GenericFileEndpoint.java
Sending        camel-core/src/test/java/org/apache/camel/component/file/FileConsumerExcludeNameTest.java
Adding         camel-core/src/test/java/org/apache/camel/component/file/FileConsumerIncludeAndExcludeNameTest.java
Adding         camel-core/src/test/java/org/apache/camel/component/file/FileConsumerIncludeNameTest.java
Transmitting file data .......
Committed revision 741441.
davsclaus:1248993243:2009-07-31T06:34:03.969+0000:1248993243:2009-07-31T06:34:03.969+0000:Closing 2.0m1 tickets"
0,CAMEL-1318,Task,Major,None,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Willem Jiang,Willem Jiang,0,0,2009-02-06 05:27:11+00:00,2009-07-31 06:34:03+00:00,"Recent file component refactoring  always normalized file path, but for the remote file , we don't need to do that .",davsclaus:1248993243:2009-07-31T06:34:03.948+0000:1248993243:2009-07-31T06:34:03.948+0000:Closing 2.0m1 tickets
0,CAMEL-1317,Improvement,Major,None,None,"
None
",Closed,Fixed,2.0-M1,Jonathan Anstey,Jonathan Anstey,0,0,2009-02-05 14:40:46+00:00,2009-07-31 06:34:03+00:00,We can definitely do this in Camel already... just need an example/docs for it.,"janstey:1233839261:2009-02-05T21:07:41.331+0000:1233839261:2009-02-05T21:07:41.331+0000:Added example for this in rev 741254. Also added wiki docs here http://cwiki.apache.org/confluence/display/CAMEL/Claim+Check.
davsclaus:1248993243:2009-07-31T06:34:03.891+0000:1248993243:2009-07-31T06:34:03.891+0000:Closing 2.0m1 tickets"
0,CAMEL-1316,Improvement,Major,None,None,"
None
",Closed,Won't Fix,None,Unassigned,Moulliard Charles,0,0,2009-02-05 14:21:32+00:00,2010-02-07 09:55:20+00:00,"May I suggest to organize the Camel web documentation site differently and to structure the documentation by grouping the pages/information relevant of the release ?



This will allow to avoid to mix in the wiki pages information of camel release 1.0 with 1.5, 2.0 and so on (see camel-file component as a good example).
Information is versionned and users can see features or modifications added to the different release.



now : http://cwiki.apache.org/CAMEL/file.html


--> http://cwiki.apache.org/CAMEL/1.0/file.html
--> http://cwiki.apache.org/CAMEL/1.5/file.html
--> http://cwiki.apache.org/CAMEL/2.x/file.html","davsclaus:1233880525:2009-02-06T08:35:25.097+0000:1233880525:2009-02-06T08:35:25.097+0000:Charles it will be to much time consuming to keep wiki documentation per. release.

I agree that, since the File and FTP component has been totally rewritten in Camel 2.0, the documentation can be a bit confused.
I have therefore created a File2 and FTP2 page for the Camel 2.0. 

If you want documentation of eg a specific release then you can check the manual. Its html/pdf copy of the wiki documentation when the release was generated.
We start shipping them in Camel 1.6, but there should be some old releases on the server.
davsclaus:1233880551:2009-02-06T08:35:51.835+0000:1233880551:2009-02-06T08:35:51.835+0000:Marking this as wont fix."
0,CAMEL-1315,Improvement,Major,None,None,"
None
",Closed,Fixed,2.0-M1,Jonathan Anstey,Jonathan Anstey,0,0,2009-02-04 18:24:17+00:00,2009-07-31 06:34:03+00:00,"We currently don't have this one in the list. I'm gonna do up an example/doc using existing Camel features.


http://www.enterpriseintegrationpatterns.com/DistributionAggregate.html","janstey:1233747041:2009-02-04T19:30:41.486+0000:1233747041:2009-02-04T19:30:41.486+0000:Code added in rev 740822. Wiki docs added here [http://cwiki.apache.org/confluence/display/CAMEL/Composed+Message+Processor]
davsclaus:1248993243:2009-07-31T06:34:03.870+0000:1248993243:2009-07-31T06:34:03.870+0000:Closing 2.0m1 tickets"
0,CAMEL-1314,Task,Minor,2.0.0,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Willem Jiang,Claus Ibsen,0,0,2009-02-04 06:29:19+00:00,2009-07-31 06:34:03+00:00,"An end user reported that this example might not work out of the box in Tomcat.


Needed to import some cxf imports in the cxf-config.xml file.
Just created this ticket to remember to look into it",davsclaus:1248993243:2009-07-31T06:34:03.853+0000:1248993243:2009-07-31T06:34:03.853+0000:Closing 2.0m1 tickets
0,CAMEL-1313,Task,Major,None,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Willem Jiang,Willem Jiang,0,0,2009-02-04 04:24:14+00:00,2009-07-31 06:34:03+00:00,"With the patch of CAMEL-1307 , some of camel-ftp unit tests failed in windows.",davsclaus:1248993243:2009-07-31T06:34:03.798+0000:1248993243:2009-07-31T06:34:03.798+0000:Closing 2.0m1 tickets
0,CAMEL-1312,Bug,Major,None,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",William Tam,William Tam,0,0,2009-02-03 22:58:27+00:00,2009-07-31 06:34:03+00:00,No Desc,"wtam:1233692285:2009-02-04T04:18:05.482+0000:1233692285:2009-02-04T04:18:05.482+0000:2.0 trunk: Committed revision 740596.
1.5 branch: Committed revision 740599.
davsclaus:1248993243:2009-07-31T06:34:03.106+0000:1248993243:2009-07-31T06:34:03.106+0000:Closing 2.0m1 tickets"
0,CAMEL-1311,Improvement,Major,None,None,"
None
",Closed,Won't Fix,2.6.0,Willem Jiang,James Strachan,0,0,2009-02-03 18:13:53+00:00,2011-04-24 09:57:30+00:00,"See this tweet ...


http://twitter.com/casron/statuses/1172707316


not exactly sure how we can do it though  I wonder if when we know there is a class missing, we can deduce some groupId + artifact Id that is typically missing, then we can report on the jars (and the dependencies) missing for that group ID and artifact ID? e.g. if we know that (say) XStream jar is missing, can we report the camel-xstream dependencies that are missing?


This typically occurs when we use the apache-camel uber-jar and then the converters can't be registered due to the dependencies not being there. So how about adding (say) camel-xstream knows that jars it requires and has some kinda way (through Maven / OSGi tooling) to auto-generate a list of missing jars?","jstrachan:1233656109:2009-02-03T18:15:09.240+0000:1233656109:2009-02-03T18:15:09.240+0000:BTW a quick workaround is to just not use the uber jar.

Maybe the documentation needs to recommend folks don't use it unless they understand the dependencies?
carson:1233665230:2009-02-03T20:47:10.594+0000:1233665230:2009-02-03T20:47:10.594+0000:So I think the real issue here is that some of the optional parts log exceptions trying to find dependencies but don't fail. Looking at the logs can become confusing because of these exceptions since they aren't really meaningful. It could work just to hide those exceptions since you are already logging the fact that the part won't work without more dependencies. This led me to think that if I was told that I'm including x.jar that won't work because I don't have the dependencies needed I would just go and remove x.jar. I don't want the dependency list for x.jar, I just want to know that it needs to be removed unless I add the dependencies it needs to function. 
davsclaus:1293775680:2010-12-31T14:08:00.857+0000:1293775680:2010-12-31T14:08:00.857+0000:Apache Karaf and OSGi are using features to install all what you need.

davsclaus:1303610250:2011-04-24T09:57:30.957+0000:1303610250:2011-04-24T09:57:30.957+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-1310,Improvement,Major,"1.5.0, 1.6.0",2.0-M2,"
None
",Closed,Won't Fix,2.0-M2,Claus Ibsen,Gert Vanthienen,0,0,2009-02-03 09:20:37+00:00,2009-11-21 11:57:55+00:00,"We should improve the default DelegateProcessor to support async Message handling as well.  Right now, adding a Tracer, Delayer, StreamCaching, ... to a Route breaks the ability to use asynchronous processing.","gertvanthienen:1234251646:2009-02-10T15:40:46.971+0000:1234251646:2009-02-10T15:40:46.971+0000:It's OK to move this to 1.6.1
davsclaus:1241041423:2009-04-30T05:43:43.081+0000:1241041423:2009-04-30T05:43:43.081+0000:I have looked into this and have a better plan for this, that will cleanup the camel internals so this ticket is not needed.

See
http://www.nabble.com/Camel-2.0-Async-Findings---Roadmap-to-a-solution-td23310165.html

davsclaus:1241640612:2009-05-07T04:10:12.541+0000:1241640612:2009-05-07T04:10:12.541+0000:The AsyncProcessor Is replaced by the new Async API. So this ticket is not needed.
davsclaus:1258775875:2009-11-21T11:57:55.285+0000:1258775875:2009-11-21T11:57:55.285+0000:Closing all 2.0M2 tickets"
0,CAMEL-1309,Bug,Major,None,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Claus Ibsen,Guillaume Nodet,0,0,2009-02-03 08:55:54+00:00,2009-07-31 06:34:03+00:00,No Desc,"davsclaus:1233623975:2009-02-03T09:19:35.106+0000:1233623975:2009-02-03T09:19:35.106+0000:Guillaumn can you elaborate?

StringSource extends Externalizable that implements Serializable

public class org.apache.camel.converter.jaxp.StringSource extends StreamSource implements Externalizable


In StreamCacheConverter there is a SourceCache that extends StringSource and its missing a no-args constructor.
Could that cause trouble? 

{code}
    /*
     * {@link StreamCache} implementation for {@link Source}s
     */
    private class SourceCache extends StringSource implements StreamCache {

        private static final long serialVersionUID = 4147248494104812945L;

        public SourceCache(String text) {
            super(text);
        }

        public void reset() {
            // do nothing here
        }

    }
{code}
gnodet:1233624829:2009-02-03T09:33:49.309+0000:1233624829:2009-02-03T09:33:49.309+0000:Yes, the problem is that there are possible null fields that throw exceptions when serialized.
The problem is that writeUTF barfs when given a null string.
Here is a patch I was planning to commit asap:

{code}
    public void writeExternal(ObjectOutput out) throws IOException {
        int b = ((text != null ? 0x01 : 0x00) + (encoding != null ? 0x02 : 0x00)
                            + (getPublicId() != null ? 0x04 : 0x00) + (getSystemId() != null ? 0x08 : 0x00));
        out.writeByte(b);
        if ((b & 0x01) != 0) {
            out.writeUTF(text);
        }
        if ((b & 0x02) != 0) {
            out.writeUTF(encoding);
        }
        if ((b & 0x04) != 0) {
            out.writeUTF(getPublicId());
        }
        if ((b & 0x08) != 0) {
            out.writeUTF(getSystemId());
        }
    }

    public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
        int b = in.readByte();
        if ((b & 0x01) != 0) {
            text = in.readUTF();
        }
        if ((b & 0x02) != 0) {
            encoding = in.readUTF();
        }
        if ((b & 0x04) != 0) {
            setPublicId(in.readUTF());
        }
        if ((b & 0x08) != 0) {
            setSystemId(in.readUTF());
        }
    }
{code}
davsclaus:1233638171:2009-02-03T13:16:11.317+0000:1233638171:2009-02-03T13:16:11.317+0000:Trunk: 740295
1.x: 740297
davsclaus:1248993243:2009-07-31T06:34:03.081+0000:1248993243:2009-07-31T06:34:03.081+0000:Closing 2.0m1 tickets"
0,CAMEL-1308,New Feature,Major,None,2.0-M1,"
None
",Closed,Fixed,2.0-M1,William Tam,William Tam,0,0,2009-02-03 04:33:30+00:00,2009-07-31 06:34:03+00:00,No Desc,davsclaus:1248993243:2009-07-31T06:34:03.013+0000:1248993243:2009-07-31T06:34:03.013+0000:Closing 2.0m1 tickets
0,CAMEL-1307,Task,Minor,None,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Claus Ibsen,0,0,2009-02-02 12:36:53+00:00,2009-07-31 06:34:02+00:00,"We use FTP Server from Apache Mina to unit test camel-ftp itself.


Upgrading to RC2 is complex as the API changed too much and the setPort method is inaccessible
Created a ticket about it
https://issues.apache.org/jira/browse/FTPSERVER-271


The code below is the partiual upgrade, until hitting the setPort issue.



    protected void initFtpServer() throws Exception {
        ftpServerContext = new DefaultFtpServerContext();

        // setup user management to read our users.properties and use clear text passwords
        File file = new File(""./src/test/resources/users.properties"").getAbsoluteFile();
        PropertiesUserManager uman = new PropertiesUserManager(new ClearTextPasswordEncryptor(), file, ""admin"");
        ftpServerContext.setUserManager(uman);

        ftpServer = new DefaultFtpServer(ftpServerContext);

        if (port < 21000) {
            throw new IllegalArgumentException(""Port number is not initialized in an expected range: "" + getPort());
        }
        ftpServer.getListener(""default"").setPort(port);
    }","davsclaus:1233612797:2009-02-03T06:13:17.546+0000:1233612797:2009-02-03T06:13:17.546+0000:Upgraded to 1.0.0-RC2
davsclaus:1235895477:2009-03-01T16:17:57.658+0000:1235895477:2009-03-01T16:17:57.658+0000:v1.0.0 is released
davsclaus:1248993242:2009-07-31T06:34:02.992+0000:1248993242:2009-07-31T06:34:02.992+0000:Closing 2.0m1 tickets"
0,CAMEL-1306,Task,Major,None,None,"
None
",Closed,Fixed,2.0-M1,Willem Jiang,Willem Jiang,0,0,2009-02-01 08:21:21+00:00,2009-07-31 06:34:02+00:00,"There are about 10 unit tests of file are failed in Windows box with the patch of CAMEL-1241 , we need to fix them ASAP.",davsclaus:1248993242:2009-07-31T06:34:02.972+0000:1248993242:2009-07-31T06:34:02.972+0000:Closing 2.0m1 tickets
0,CAMEL-1305,Improvement,Minor,None,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Claus Ibsen,Claus Ibsen,0,0,2009-01-29 16:14:02+00:00,2009-07-31 06:34:02+00:00,Add missing delimiter DEFAULT and use it as default instead of AUTO,"davsclaus:1233217319:2009-01-29T16:21:59.878+0000:1233217319:2009-01-29T16:21:59.878+0000:Trunk: r738911
1.x: r738913
davsclaus:1248993242:2009-07-31T06:34:02.916+0000:1248993242:2009-07-31T06:34:02.916+0000:Closing 2.0m1 tickets"
0,CAMEL-1304,New Feature,Major,2.0.0,None,"
None
",Closed,Won't Fix,2.5.0,Hadrian Zbarcea,rpicardi,0,1,2009-01-29 08:49:55+00:00,2011-04-24 09:58:24+00:00,"Hi all, 


i'd like to have some feedback about the idea to develop a GridGain component for Camel. This Component will permit to invoke jobs to compute (Map & Reduce pattern) on a grid system very lightweight based as GridGain. 


Working and Contributing on Mule and Globus enterprise environments (no light   ) i've understand the power  of Camel and just now i'd like to use it with a GridGain. 


GridGain is squarelly focused on one thing - providing the best Java software middleware that allows to develop complex grid applications on the cloud infrastructure in a simple and productive way. 


Integrating them it will be possible obtain Scalability feature in application with high computing throughtput requirements using Apache Camel.","davsclaus:1233201833:2009-01-29T12:03:53.046+0000:1233201833:2009-01-29T12:03:53.046+0000:Sound awesome

We love contributions
http://camel.apache.org/contributing.html


rpicardi:1233203764:2009-01-29T12:36:04.132+0000:1233203764:2009-01-29T12:36:04.132+0000:Thanks a lot for your feedback.
I read contributions guidelines but I 'd like  to know if i can firstly begin develop this component and only after try to propose it to community. it is possible? I will follow discussion and issue tracker but just on development time about my component. 

thanks in advance again.

davsclaus:1233204203:2009-01-29T12:43:23.773+0000:1233204203:2009-01-29T12:43:23.773+0000:Yeah of course

Yes thats very good for you to start and when you think you have something ready to show and want feedback on then come back again.
rpicardi:1233207660:2009-01-29T13:41:00.740+0000:1233207660:2009-01-29T13:41:00.740+0000:ok. Thanks a lot. 
I will remain this issue opened until i will submit something to show . :) 

hadrian:1246300435:2009-06-30T02:33:55.904+0000:1246300435:2009-06-30T02:33:55.904+0000:Actually I talked with Nikita Ivanov about this in Raleigh a few months back.  

GridGain is also interested in this, to the point where, quite a while ago, they changed the licensing for their api and made it APL2.0 per James' request (see http://www.gridgainsystems.com/wiki/display/GG15UG/2007/12/19/GridGain+1.6+-+LGPL+and+Apache+Dual-Licensing).

GridGain is actually a pretty cool piece of technology, but I would be concerned about testing.  Afaik, their server side technology is still LGPL licensed only, so while we would be able to compile against GG, I am not sure how we will test.
rpicardi:1246317603:2009-06-30T07:20:03.032+0000:1246317603:2009-06-30T07:20:03.032+0000:Ok, i'd like understand better the question related to Licences. Can i continue to develop the component? I suspended it a few month ago.

>I am not sure how we will test.
why?


Thanks a lot.
davsclaus:1256645423:2009-10-27T20:10:23.021+0000:1256645423:2009-10-27T20:10:23.021+0000:Any updates on this?
rpicardi:1256647912:2009-10-27T20:51:52.790+0000:1256647912:2009-10-27T20:51:52.790+0000:I need to find another team member to' continue work .



Il giorno 27/ott/2009, alle ore 21.11, ""Claus Ibsen (JIRA)"" <jira@apache.org 


hadrian:1256659494:2009-10-28T00:04:54.029+0000:1256659494:2009-10-28T00:04:54.029+0000:Hi,

Actually I toyed with this a while ago and it's not hard to implement.  It would help in a few ways, one being distributing our own tests on multiple nodes and reduce the ridiculously long building time (but hey, we have some 4000 unit tests, something to brag about).

The issue is that gridgain repackaged and distribute their api under ASL2.0 at our own's jstrachan request quite a while ago.  The issue is that the nodes are still GPL so I have no idea how we could test such a component unless they would make available a mock or something as ASL2.0 as well.  I am willing to bet that they won't relicense the whole thing.  I spoke to Nikita some 6 months ago about this and it looks like the GG crowd is not quite happy about the prospect.

One alternative would be to implement and host it at the fuse forge and camel extra and depending on the community interest see if we could work something out with GG and move the component later at apache.
rpicardi:1256685952:2009-10-28T07:25:52.962+0000:1256685952:2009-10-28T07:25:52.962+0000:Ok Hadrian. Just now it is possible close this issue and host it on  
camel extra.
Please let me know if you agree with me.


Inviato da iPhone

Il giorno 28/ott/2009, alle ore 01.05, ""Hadrian Zbarcea (JIRA)"" <jira@apache.org 


hadrian:1256713395:2009-10-28T15:03:15.824+0000:1256713395:2009-10-28T15:03:15.824+0000:Ok, let's leave it as future and plan to put it in a separate repo for now like camel-extra.  I will assign this to me then.
davsclaus:1285489730:2010-09-26T16:28:50.914+0000:1285489730:2010-09-26T16:28:50.914+0000:Closing ticket which is not progressing.
davsclaus:1303610304:2011-04-24T09:58:24.352+0000:1303610304:2011-04-24T09:58:24.352+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-1303,Sub-task,Major,None,None,"
None
",Closed,Won't Fix,None,Claus Ibsen,Claus Ibsen,0,0,2009-01-29 07:32:23+00:00,2010-02-07 09:55:20+00:00,No Desc,"davsclaus:1233186361:2009-01-29T07:46:01.960+0000:1233186361:2009-01-29T07:46:01.960+0000:As bindy will support CSV, FixedLength and others its best to construct the DataFormat using regular Java new and use marshal(myBindyDataFormatObject)."
0,CAMEL-1302,Sub-task,Major,None,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Claus Ibsen,0,0,2009-01-29 07:31:42+00:00,2009-07-31 06:34:02+00:00,No Desc,"davsclaus:1233185575:2009-01-29T07:32:55.913+0000:1233185575:2009-01-29T07:32:55.913+0000:Charles I will add some skeletons wiki page and I would like you to fill in the documentation how to use your new component
cmoulliard:1233207249:2009-01-29T13:34:09.328+0000:1233207249:2009-01-29T13:34:09.328+0000:Great.
davsclaus:1233268023:2009-01-30T06:27:03.603+0000:1233268023:2009-01-30T06:27:03.603+0000:Charles the wiki page is here you should update:
http://camel.apache.org/bindy.html

cmoulliard:1233819526:2009-02-05T15:38:46.614+0000:1233819526:2009-02-05T15:38:46.614+0000:First draft of the documentation has been created.
cmoulliard:1234140858:2009-02-09T08:54:18.801+0000:1234140858:2009-02-09T08:54:18.801+0000:New column ""Record type"" has been added for the annotations
davsclaus:1234396352:2009-02-12T07:52:32.363+0000:1234396352:2009-02-12T07:52:32.363+0000:My comments to the wiki documentation at:
http://camel.apache.org/bindy.html

- The big table with the annotations is to detailed. I would like to just add 3 rows for each annotation and give the overall documentation what it is. Then you can do the detailed documentation under the table (not as a table)
- You definitely need a POJO code sample to show how the annotations works. You can use the Order / Client POJO classes you have.
- The code sample for the handleOrder bean (with the list iteratation). It should use the Order / Client POJO so you can see how you can get your POJO classes. Maybe you can add the POJO classes as generics.

For the code sample you can create real code, eg as an unit test and insert snippet comments, then we can automatic get this in the wiki documentation, so you dont need to copy it manaully.

// START SNIPPET: e1
some code here
// END SNIPPET: e1

// START SNIPPET: e2
some code here
// END SNIPPET: e2

And then you can refer to e1 or e2 in the wiki with a special wiki tag. I can show how.



cmoulliard:1234513979:2009-02-13T16:32:59.191+0000:1234513979:2009-02-13T16:32:59.191+0000:@Claus,

I have updated the documentation according to your remarks

Questions :

- Can you provide an example (perhaps a link) with snippet comments in unit test ?
- Regarding to your remark about handleOrder bean, how can I define my map as generic (Map<String, Object> model). The object can represent an Order, a Client class or whatever class defined in the model ?
davsclaus:1234676527:2009-02-15T13:42:07.956+0000:1234676527:2009-02-15T13:42:07.956+0000:@Charles

You add wiki snippets to code by inserting the following in the wiki page

{code}
{snippet:id=e1|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/processor/ChoiceCompoundPredicateTest.java}
{code}

Where id=e1 is refering to code comments in the .java file

{code:java}
                // START SNIPPET: e1
here is some code
                // END SNIPPET: e1
{code}

You can have multiple e1, so you can have: e2, e3. In fact you can name it anything, but I tend to name them e1, e2 ...
cmoulliard:1234830629:2009-02-17T08:30:29.541+0000:1234830629:2009-02-17T08:30:29.541+0000:@Claus,

I will not implement snippet now otherwise we need to patch (and probably re-patch with try-run) the existing code to test this point. I don't have the rights to commit directly my code so this is difficult for me to test.
davsclaus:1248993242:2009-07-31T06:34:02.890+0000:1248993242:2009-07-31T06:34:02.890+0000:Closing 2.0m1 tickets"
0,CAMEL-1301,Bug,Major,1.5.0,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Claus Ibsen,Trev,0,1,2009-01-29 01:52:37+00:00,2009-07-31 06:34:02+00:00,"My program works fine, when I run it as a normal Windows app.  But when I try to run it as a service, it throws a ""Could not auto create component: http"" which is caused by a NullPointerException which is caused by Thread.currentThread().getContextClassLoader() returning null.


A quick search found this ActiveMQ bug: http://issues.apache.org/activemq/browse/AMQ-1229 which is essentially identical.  If it's been fixed in ActiveMQ, probably you can just merge the fix from org.apache.activemq.util.FactoryFinder into org.apache.camel.util.FactoryFinder.


Incidentally, the fact that the context classloader is null has also been reported as a bug: http://issues.apache.org/jira/browse/DAEMON-100","davsclaus:1233201732:2009-01-29T12:02:12.368+0000:1233201732:2009-01-29T12:02:12.368+0000:Trev, could you paste the stacktrace please.

FactoryFinder delegates its classloading to ObjectHelper.loadClass and it looks like it handles the null. So a stacktrace is needed.
trev:1233261366:2009-01-30T04:36:06.833+0000:1233261366:2009-01-30T04:36:06.833+0000:ObjectHelper.loadClass returns a null, and eventually FactoryFinder.findClass passes that null to ConcurrentHashMap.put, which causes the NPE.  Stacktrace attached.
davsclaus:1233271750:2009-01-30T07:29:10.648+0000:1233271750:2009-01-30T07:29:10.648+0000:Trev, thanks for the stacktrace.

I am currently improving Camel to be able to handle the nulls.
davsclaus:1248993242:2009-07-31T06:34:02.864+0000:1248993242:2009-07-31T06:34:02.864+0000:Closing 2.0m1 tickets"
0,CAMEL-1300,New Feature,Major,None,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Claus Ibsen,0,0,2009-01-28 13:36:21+00:00,2009-07-31 06:34:02+00:00,"During the work with the Camel VFS we use org.apache.camel.component.file.GenericFile<T> as a wrapper object of the actual type (such as java.io.File, some FTP file, or whatever)


As java.io.File is central in many components we have type converters that can convert to/from java.io.File.
I am tired of adding copy of java.io.File converter methods with the signature of GenericFile<File> and delegate to the java.io.File method.


What is needed is type converter registry to be able to indirect/delegate to the wrapped object automatically.
For instance if we could implement some interface in GenericFile and it could just return the body and then we are home free.


Ticket created to remind me to look into it.


Maybe the camel-cxf component could use this as well for some of the POJO payloads as its uses some internal CXF ValueListHolder or what the class was named","davsclaus:1233187966:2009-01-29T08:12:46.980+0000:1233187966:2009-01-29T08:12:46.980+0000:Damm Camel is nice. Using Fallback type convert we got all the ingredients to bake this cake :)

davsclaus:1233200806:2009-01-29T11:46:46.053+0000:1233200806:2009-01-29T11:46:46.053+0000:davsclaus:(svn)camel[trunk:738760]/$ svn commit --message ""CAMEL-1300: Add @FallbackConverter for registering a fallback converter. Used by GenericFileConverter to allow us to delegte the from type to the wrapped body instead of the GenericFile that is just the wrapper class.""
Adding         camel-core/src/main/java/org/apache/camel/FallbackConverter.java
Sending        camel-core/src/main/java/org/apache/camel/component/file/GenericFileConverter.java
Sending        camel-core/src/main/java/org/apache/camel/converter/IOConverter.java
Sending        camel-core/src/main/java/org/apache/camel/converter/NIOConverter.java
Sending        camel-core/src/main/java/org/apache/camel/converter/jaxp/XmlConverter.java
Sending        camel-core/src/main/java/org/apache/camel/impl/ReportingTypeConverterRegistry.java
Sending        camel-core/src/main/java/org/apache/camel/impl/converter/AnnotationTypeConverterLoader.java
Sending        camel-core/src/main/java/org/apache/camel/impl/converter/DefaultTypeConverter.java
Adding         camel-core/src/main/java/org/apache/camel/impl/converter/InstanceMethodFallbackTypeConverter.java
Sending        camel-core/src/main/java/org/apache/camel/impl/converter/InstanceMethodTypeConverter.java
Adding         camel-core/src/main/java/org/apache/camel/impl/converter/StaticMethodFallbackTypeConverter.java
Sending        camel-core/src/main/java/org/apache/camel/spi/TypeConverterRegistry.java
Deleting       components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileConverter.java
Sending        components/camel-xmlbeans/src/main/java/org/apache/camel/converter/xmlbeans/XmlBeansConverter.java
Transmitting file data .............
Committed revision 738826.
davsclaus:1233200847:2009-01-29T11:47:27.497+0000:1233200847:2009-01-29T11:47:27.497+0000:Introduced @FallbackConverter for discovering annotations based fallback converters.

See updated type converter wiki


davsclaus:1248993242:2009-07-31T06:34:02.798+0000:1248993242:2009-07-31T06:34:02.798+0000:Closing 2.0m1 tickets"
0,CAMEL-1299,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.0-M1,Jonathan Anstey,Claus Ibsen,0,0,2009-01-28 07:48:42+00:00,2009-07-31 06:34:01+00:00,No Desc,"davsclaus:1233100206:2009-01-28T07:50:06.629+0000:1233100206:2009-01-28T07:50:06.629+0000:We need a property language so end users can use it for predicate and expressions in the routes. So its exposed in the Spring DSL

For instance if they want to do a choice route based on a Exchange property.
Also a FUSE end user is requesting this.

Also build a Java DSL sample to make sure it also works out of the box in the Java DSL as well
janstey:1233125193:2009-01-28T14:46:33.568+0000:1233125193:2009-01-28T14:46:33.568+0000:I can take a look at this when I get a chance.
janstey:1233309042:2009-01-30T17:50:42.548+0000:1233309042:2009-01-30T17:50:42.548+0000:Put in support for this in revs 739340, 739348. and 739349. Looking into adding wiki docs now.
janstey:1233311180:2009-01-30T18:26:20.863+0000:1233311180:2009-01-30T18:26:20.863+0000:Wiki docs here http://cwiki.apache.org/confluence/display/CAMEL/Property
davsclaus:1248993241:2009-07-31T06:34:01.997+0000:1248993241:2009-07-31T06:34:01.997+0000:Closing 2.0m1 tickets"
0,CAMEL-1298,Task,Minor,Future,Future,"
None
",Closed,Duplicate,Future,Unassigned,Ramon Buckland,0,0,2009-01-27 14:08:52+00:00,2010-02-07 09:54:19+00:00,"mvn -Psetup.eclipse is not working as expected.


The idea is that it builds a nice workspace with correct formatting rules as per project standard and performs a logical eclipse:eclipse on all projects.


it behaves differently to eclipse:eclipse however, dieing when it encounters (something about) new projects (such as a new component, perhaps not built yet ? is jat not in the repo ? )



 I have been playing with 'mvn -Psetup.eclipse -Declipse.workspace.dir=/path/to/your/workspace' and came across some more issues. 
 It seems that it configures the workspace okay, and then moves onto eclipse:eclipse for each project. (or building something in each project).
 That 'something fails', on various projects with classes not defined. 
 I suspect it might be because the actual jar is not in my local repo (not confirmed though) .. I gather this, perhaps, because the projects that it fails to compile are ones which are new (freemarker, my new commons-vfs) 
 hrmm .. not sure what it is.
 My eclipse workspace now has activemq code standards.
 (a note on that mvn -Psetup.eclipse) So I had a have a new component (commons-vfs). When I ran -Psetup.eclipse the first time. It failed stating that all my super classes were not available. (they are in camel-core) .. I mvn clean'd and reran. it still failed, so I commented it out of components/pom.xml
 3rd run - components/camel-freemarker failed with the same sort of error. Symbol not found (for superclasses it uses).",davsclaus:1259811568:2009-12-03T11:39:28.754+0000:1259811568:2009-12-03T11:39:28.754+0000:Willem have fixed it just recently
0,CAMEL-1297,Improvement,Major,1.5.0,"2.0-M1, 1.6.1","
None
",Closed,Fixed,"2.0-M1, 1.6.1",Roman Kalukiewicz,Roman Kalukiewicz,0,0,2009-01-27 12:34:16+00:00,2009-07-31 06:34:01+00:00,Currently SEDA endpoint processes only using 1 thread so it is impossible to easily configure few concurrent processings on 1 seda endpoint. I believe SEDA endpoint could be configured with some executor and/or thread number that we would like to use to process given flows.,"romkal:1234185676:2009-02-09T21:21:16.070+0000:1234185676:2009-02-09T21:21:16.070+0000:concurrentConsumers parameter can be configured. There is no way to provide any Executor as we need to maintain work queue containing Exchanges (to make it browsable). This means, that only ThreadPool can be used, as our task never ends (they pool work queue constantly)
mwc_tonesoft:1234526500:2009-02-13T20:01:40.727+0000:1234526500:2009-02-13T20:01:40.727+0000:Please also add this change to 1.5.1 release.
davsclaus:1234582038:2009-02-14T11:27:18.471+0000:1234582038:2009-02-14T11:27:18.471+0000:I backported the fix to 1.6.1

Committed revision 744482.

davsclaus:1248993241:2009-07-31T06:34:01.972+0000:1248993241:2009-07-31T06:34:01.972+0000:Closing 2.0m1 tickets"
0,CAMEL-1296,Bug,Major,1.5.0,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Claus Ibsen,Claus Ibsen,0,0,2009-01-27 07:27:08+00:00,2009-07-31 06:34:01+00:00,"See nabble
http://www.nabble.com/Camel-Remote-File-Producer---Recipient-List-Password-Issue-td21678952s22882.html


The bug is introduced with CAMEL-941","davsclaus:1233012510:2009-01-27T07:28:30.740+0000:1233012510:2009-01-27T07:28:30.740+0000:davsclaus:(svn)camel-1x[camel-1.x:736957]/components/camel-ftp$ svn commit --message ""CAMEL-1296: camel-ftp should condigure the endpoint with the full uri (caused by CAMEL-941).""
Sending        camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileComponent.java
Transmitting file data .
Committed revision 738016.
davsclaus:1233014599:2009-01-27T08:03:19.009+0000:1233014599:2009-01-27T08:03:19.009+0000:New Revision: 738019 on trunk
davsclaus:1248993241:2009-07-31T06:34:01.917+0000:1248993241:2009-07-31T06:34:01.917+0000:Closing 2.0m1 tickets"
0,CAMEL-1295,New Feature,Major,None,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Claus Ibsen,0,0,2009-01-25 10:09:12+00:00,2009-07-31 06:34:01+00:00,Use of local work directory to store remote content directly in a file. So you avoid reading 2gb in memory if you consume very big files.,"davsclaus:1234432800:2009-02-12T18:00:00.115+0000:1234432800:2009-02-12T18:00:00.115+0000:Got the basic done now.

So you can do:
{code}
from(""ftp:somewhere?localDirectory=/tmp"").to""(""file://inbox"");
{code}

And Camel will pass a java.io.File as the body, so when the file producer is writing the file in the inbox directory it will use the file handle given from the ftp consumer.

This allows us to:
- avoid reading the ftp content into memory
- storing directly to local files
- and pass file handles to file producer so it can do fast file channel stuff for writing files.
davsclaus:1234486017:2009-02-13T08:46:57.942+0000:1234486017:2009-02-13T08:46:57.942+0000:Committed revision 744032.
davsclaus:1248993241:2009-07-31T06:34:01.897+0000:1248993241:2009-07-31T06:34:01.897+0000:Closing 2.0m1 tickets"
0,CAMEL-1294,Improvement,Major,None,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Willem Jiang,Willem Jiang,0,0,2009-01-24 04:18:33+00:00,2009-07-31 06:34:01+00:00,"Here is a mail thread which holds the discussion 
http://www.nabble.com/cxf-spring-configuration-(camel-1.5.0)-td21627432s22882.html",davsclaus:1248993241:2009-07-31T06:34:01.878+0000:1248993241:2009-07-31T06:34:01.878+0000:Closing 2.0m1 tickets
0,CAMEL-1293,Improvement,Major,1.5.0,Future,"
None
",Closed,Won't Fix,Future,Willem Jiang,Claus Ibsen,0,0,2009-01-23 07:34:51+00:00,2010-02-07 09:54:19+00:00,"Idea from FUSE OS Community


Invoking a bean and you want to pass in an additional parameter (not from Exchange) such as


Such as



from(""activemq:gold"").to(""bean:orderSerivce?method=placeOrder&type=goldCustomer"")




The type parameter is maybe a String type in the placeOrder method that Camel should invoke with the text ""goldCustomer"".


We can kinda add this with @annotations to bind to the parameter name.


Maybe we could also support varargs in the java fluent builder with the .bean



from(""activemq:gold"").beanRef(orderSerivce, ""placeOrder"", ""goldCustomer"");




Well I just created the ticket to not forget about it.


Any thoughts from the other Riders?","njiang:1233781952:2009-02-05T05:12:32.168+0000:1233781952:2009-02-05T05:12:32.168+0000:How about set the header for the type ?
Camel already support it out of box :)
The DSL could be
{code}
from(""activemq:gold"").setHeader(""type"", constant(""goldCusomer"")).to(""bean:orderSerivce?method=placeOrder"");
{code}

You can use the bean's annotation for the parameter consuming
{code}
public class Foo {
	
        public void doSomething(@Header(name = ""type"") String type, @Body String body) {
		// process the inbound message here
       }

}
{code}

njiang:1233782111:2009-02-05T05:15:11.975+0000:1233782111:2009-02-05T05:15:11.975+0000:@Claus
I don't think the varargs is a good idea. 
It is not easy to find the right parameter variable in the placeOrder method to take the value of ""goldCustomer"".
njiang:1233889947:2009-02-06T11:12:27.923+0000:1233889947:2009-02-06T11:12:27.923+0000:I think we can resolved this issue now :)"
0,CAMEL-1292,Bug,Major,1.5.0,None,"
None
",Closed,Fixed,"1.6.0, 2.0-M1",Claus Ibsen,Claus Ibsen,0,0,2009-01-23 06:02:44+00:00,2009-07-31 06:34:01+00:00,"from(""direct:start"")
                    .setHeader(""foo"", constant(""bar""))
                    .to(""sql:select * from projects"")
                    .to(""mock:result"");




The foo header should be preserved so when its routed to the mock its still there.","davsclaus:1232662027:2009-01-23T06:07:07.892+0000:1232662027:2009-01-23T06:07:07.892+0000:Trunk: Committed revision 736953.
1.x: Committed revision 736957.
davsclaus:1248993241:2009-07-31T06:34:01.819+0000:1248993241:2009-07-31T06:34:01.819+0000:Closing 2.0m1 tickets"
0,CAMEL-1291,Improvement,Minor,None,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Claus Ibsen,0,0,2009-01-22 13:55:14+00:00,2009-07-31 06:34:01+00:00,"Currently its set off by default. We should set it to be enabled as its suites production usage.


For hot reloading during development the developer can set the contentCache=off if needed.


Note that Freemarker is caching by default","davsclaus:1232663418:2009-01-23T06:30:18.991+0000:1232663418:2009-01-23T06:30:18.991+0000:Look at camel-freemarker as well.

It should also add the resourceUri to the header as the freemarker does
davsclaus:1234258995:2009-02-10T17:43:15.956+0000:1234258995:2009-02-10T17:43:15.956+0000:Committed revision 743031.
davsclaus:1248993241:2009-07-31T06:34:01.130+0000:1248993241:2009-07-31T06:34:01.130+0000:Closing 2.0m1 tickets"
0,CAMEL-1290,Bug,Major,2.0.0,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Paddy Daly,0,0,2009-01-22 09:44:16+00:00,2009-07-31 06:34:01+00:00,"Consuming from a FTP server using the following endpoint cause a StringIndexOutOfBoundsException when using the rename strategy.


<endpoint id=""candidateUrl"" uri=""ftp://username@127.0.0.1?password=password&delete=true&binary=true&delay=10000&readLock=rename""/>


22 Jan 2009 09:36:59,501 ERROR [Thread: 1 org.apache.camel.component.file.remote.RemoteFileComponent
@8f7aa2] FtpConsumer.log(207) | String index out of range: -1
java.lang.StringIndexOutOfBoundsException: String index out of range: -1
        at java.lang.String.substring(String.java:1938)
        at org.apache.camel.component.file.remote.RemoteFile.getParent(RemoteFile.java:139)
        at org.apache.camel.component.file.remote.RemoteFile.changeFileName(RemoteFile.java:65)
        at org.apache.camel.component.file.remote.strategy.RemoteFileRenameExclusiveReadLockStrategy
.acquireExclusiveReadLock(RemoteFileRenameExclusiveReadLockStrategy.java:45)
        at org.apache.camel.component.file.remote.strategy.RemoteFileProcessStrategySupport.begin(Re
moteFileProcessStrategySupport.java:32)
        at org.apache.camel.component.file.remote.RemoteFileConsumer.processExchange(RemoteFileConsu
mer.java:131)
        at org.apache.camel.component.file.remote.RemoteFileConsumer.poll(RemoteFileConsumer.java:98
)
        at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:66)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
        at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(Scheduled
ThreadPoolExecutor.java:98)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(Schedule
dThreadPoolExecutor.java:181)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadP
oolExecutor.java:205)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
        at java.lang.Thread.run(Thread.java:619)


A workaround is to add a folder in the url like the following
<endpoint id=""candidateUrl"" uri=""ftp://username@127.0.0.1//myFolder/?password=password&delete=true&binary=true&delay=10000&readLock=rename""/>","davsclaus:1232663560:2009-01-23T06:32:40.896+0000:1232663560:2009-01-23T06:32:40.896+0000:Paddy thank for the bug report.

We are in the works of a big refactor in trunk to allow the file based transports to be much more reuseable between types (a kind of VFS in Camel itself)
So I will refrain from committing to the trunk right now in the FTP/File component.

We need to get this refactor done first, with help from Ramon Buckland that is working on this right now.


davsclaus:1232663640:2009-01-23T06:34:00.812+0000:1232663640:2009-01-23T06:34:00.812+0000:CAMEL-1241 must be done before we commit to FTP/File as CAMEL-1241 is a big refactor and we would like to keep the trunk code aligned with Ramon who is working on CAMEL-1241
rbuckland:1232902943:2009-01-26T01:02:23.433+0000:1232902943:2009-01-26T01:02:23.433+0000:The issue is caused by a call to getParentFile which assumes a / root path exists. Since there doesn't in an ""ftp"" server relative manner, the fix is simply to check first 

The patch and test case are attached. (see following) 
It does not affect Camel 1.5.x


The fix is simply a check on resolving the getParent method in the new GenericFile. This change is applied AFTER CAMEL-1241 - CAMEL-1241_Refactor_S-FTP_to_use_GenericYYY.patch is applied.

OLD
{code}
    public String getParent() {
        return getAbsoluteFileName().substring(0, getAbsoluteFileName().lastIndexOf(""/""));
    }
{code}

NEW
{code}
    public String getParent() {
	if (getAbsoluteFileName().lastIndexOf(""/"") > 0) {
	    return getAbsoluteFileName().substring(0, getAbsoluteFileName().lastIndexOf(""/""));
	} else {
	    return """";
	}
    }
{code}

rbuckland:1232903013:2009-01-26T01:03:33.655+0000:1232903013:2009-01-26T01:03:33.655+0000:This fix can (should) only be applied to CAMEL-1241 after 

CAMEL-1241_Refactor_S-FTP_to_use_GenericYYY.patch

is applied.
rbuckland:1232903090:2009-01-26T01:04:50.957+0000:1232903090:2009-01-26T01:04:50.957+0000:This is the test case.

It does NOT depend on 1241, of course, it will fail if the attached patch is not applied.
rbuckland:1232903327:2009-01-26T01:08:47.849+0000:1232903327:2009-01-26T01:08:47.849+0000:Claus, please apply patches as required.

In order 
1. (apply CAMEL-1241 - CAMEL-1241_Refactor_S-FTP_to_use_GenericYYY.patch ) 
2. two attached file (patch and test case)
davsclaus:1232945120:2009-01-26T12:45:20.945+0000:1232945120:2009-01-26T12:45:20.945+0000:@Paddy

The fix should have been committed just recently.

But the fix is part of a big refactor of the, underlying file transport in Camel, that the FTP now sits on top off. So please test it a bit throughly as there might have slipped a bug in the refactor. Its still an ongoing refactor, but the FTP part should be mostly done.



watcher:1232956584:2009-01-26T15:56:24.048+0000:1232956584:2009-01-26T15:56:24.048+0000:Claus
I should have more time to check this tomorrow. 
watcher:1233194095:2009-01-29T09:54:55.910+0000:1233194095:2009-01-29T09:54:55.910+0000:Its working now :-) 

I be able to test the new build more throughly next week and I'll report any problems I might find.
Sorry about the delay. 

-P
davsclaus:1248993241:2009-07-31T06:34:01.103+0000:1248993241:2009-07-31T06:34:01.103+0000:Closing 2.0m1 tickets"
0,CAMEL-1289,Task,Major,None,None,"
None
",Closed,Fixed,2.0-M1,William Tam,Claus Ibsen,0,0,2009-01-22 08:21:50+00:00,2009-07-31 06:34:01+00:00,"I am working on CAMEL-505 to allow 100% spring bean configuration of endpoints.


When we do this we bypass the xxxComponent that can only be used with the URI configuration.
Some components have the headerfilterstrategy that they pass down to the xxxEndpoint.


We might wanna consider having getter/setter for headerfilterstrategy on the endpoint itself for spring bean configuration
and to default set it to some value to ease the spring bean configuration.","wtam:1232610076:2009-01-22T15:41:16.377+0000:1232610076:2009-01-22T15:41:16.377+0000:I was thinking of that when I was refactoring camel-cxf.  Camel-cxf's headerfilterstrategy has been moved to endpoint.  I can take on this task for other components.
davsclaus:1232610381:2009-01-22T15:46:21.095+0000:1232610381:2009-01-22T15:46:21.095+0000:Great William

As I am working on letting all our Camel Components be configure using 100% spring bean style they need setters for all options.


davsclaus:1234404277:2009-02-12T10:04:37.381+0000:1234404277:2009-02-12T10:04:37.381+0000:Need to get this done for the 2.0 API changes.
davsclaus:1234415871:2009-02-12T13:17:51.472+0000:1234420401:2009-02-12T14:33:21.531+0000:camel-cxf *DONE by Wiliam Tam*
camel-jms *DONE, is okay with both on component/endpoint for this complicated component*
camel-http *DONE*
camel-mail *DONE*
camel-xmpp *DONE*
camel-jhc
camel-restlet *DONE, is to tied to the component, not possible*
davsclaus:1234420509:2009-02-12T14:35:09.496+0000:1234420509:2009-02-12T14:35:09.496+0000:William I did fix a few of them as I needed it for CAMEL-505 and that we get this into the 2.0 API before we start releasing it.

Its okay if the filter is also on the component, so you can set a global filter that all endpoints inherit.

But if you are creating an endpoint manually (eg from spring xml using regular spring bean style) then it should be possible to set the filter if needed.
wtam:1234447262:2009-02-12T22:01:02.832+0000:1234447262:2009-02-12T22:01:02.832+0000:took care of camel-jhc (and camel-restlet).  Sorry about the hold up.
davsclaus:1234472660:2009-02-13T05:04:20.888+0000:1234472660:2009-02-13T05:04:20.888+0000:@William

Thanks a lot for the help. Great to get the API settled in 2.0.
davsclaus:1248993241:2009-07-31T06:34:01.007+0000:1248993241:2009-07-31T06:34:01.007+0000:Closing 2.0m1 tickets"
0,CAMEL-1288,Task,Minor,None,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Willem Jiang,Claus Ibsen,0,0,2009-01-22 08:10:09+00:00,2009-07-31 06:34:00+00:00,Spring Integration 1.0.1 is now in central maven repo.,"njiang:1234292624:2009-02-11T03:03:44.068+0000:1234292624:2009-02-11T03:03:44.068+0000:trunk
http://svn.apache.org/viewvc?rev=739733&view=rev
1.x
http://svn.apache.org/viewvc?rev=739737&view=rev
davsclaus:1248993240:2009-07-31T06:34:00.986+0000:1248993240:2009-07-31T06:34:00.986+0000:Closing 2.0m1 tickets"
0,CAMEL-1257,Bug,Major,1.5.0,None,"
None
",Closed,Fixed,"1.6.0, 2.0-M1",Claus Ibsen,Claus Ibsen,0,0,2009-01-14 15:44:35+00:00,2009-07-31 06:33:58+00:00,src/main/resources/persistence.xml should be deleted from camel-jpa.jar,davsclaus:1248993238:2009-07-31T06:33:58.936+0000:1248993238:2009-07-31T06:33:58.936+0000:Closing 2.0m1 tickets
0,CAMEL-1256,Improvement,Major,1.5.0,2.0-M1,"
None
",Closed,Fixed,2.0-M1,William Tam,William Tam,0,0,2009-01-14 15:13:12+00:00,2009-07-31 06:33:58+00:00,"The camel-cxf component is dued for some code cleanup and refactoring.   We can clean some of of the interfaces and redundant code, etc.","wtam:1232302516:2009-01-19T02:15:16.786+0000:1232302516:2009-01-19T02:15:16.786+0000:A fix has been submitted.  Here is some highlights.

* The fix is for 2.0 only since it involves some APIs changes that is an overkill to keep it backward compatible.  Will update wiki.
* It depends on CXF 2.2-SNAPSHOT  now.   Will upgrade CXF once the next release of CXF is available.
* CxfBinding, Bus [CAMEL-1239], HeaderFilterStrategy can be looked up from registry by the ""#"" notation.
* Decouple CXF Message from Camel Message.  That is, users are no longer required to cast Camel's message body to CXF Message in order to access SOAP headers and body in PAYLOAD.  In PAYLOAD mode, Camel message body now returns a new type CxfPayload which contains SOAP headers and body.  With CxfPayload being the body in PAYLOAD mode, It makes using Camel converter to convert to other types pretty easy and transparent.
* Cleaning up the old CxfBinding and ""invoking context"".   Both tried to do Camel/CXF message binding.  CxfBinding is now an interface that an custom impl can be set on each endpoint.  HeaderFilterStrategy impl can also be set on each endpoint.
* [CAMEL-1254] support serviceClass=#bean 
* some major refactoring to make code cleaner.


davsclaus:1232313941:2009-01-19T05:25:41.827+0000:1232313941:2009-01-19T05:25:41.827+0000:Nice. I am looking forward to the PAYLOAD. My last gripe with camel-cxf is really that a manual convertBodyTo is needed.

BTW I get this maven issue now

[INFO] A required plugin was not found: Plugin could not be found - check that the goal name is correct: Unable to download the artifact from any repository

Try downloading the file manually from the project website.

Then, install it using the command: 
    mvn install:install-file -DgroupId=org.apache.cxf -DartifactId=cxf-codegen-plugin -Dversion=2.2-SNAPSHOT -Dpackaging=maven-plugin -Dfile=/path/to/file

Alternatively, if you host your own repository you can deploy the file there: 
    mvn deploy:deploy-file -DgroupId=org.apache.cxf -DartifactId=cxf-codegen-plugin -Dversion=2.2-SNAPSHOT -Dpackaging=maven-plugin -Dfile=/path/to/file -Durl=[url] -DrepositoryId=[id]


  org.apache.cxf:cxf-codegen-plugin:maven-plugin:2.2-SNAPSHOT

from the specified remote repositories:
  central (http://repo1.maven.org/maven2)

  org.apache.cxf:cxf-codegen-plugin:maven-plugin:2.2-SNAPSHOT

from the specified remote repositories:
  central (http://repo1.maven.org/maven2)

njiang:1232320957:2009-01-19T07:22:37.786+0000:1232320957:2009-01-19T07:22:37.786+0000:Ah, since we have the snapshot dependency on the CXF 2.2 , we need to add the snapshot maven repository in our pom.
I will did a quick fix it .

njiang:1232325189:2009-01-19T08:33:09.553+0000:1232325189:2009-01-19T08:33:09.553+0000:@Clause

I'm deploying a new version of CXF 2.2 snapshot (there is a patch for camel-cxf), you should have a successful build on camel-cxf two hours later :)
davsclaus:1248993238:2009-07-31T06:33:58.882+0000:1248993238:2009-07-31T06:33:58.882+0000:Closing 2.0m1 tickets"
0,CAMEL-1255,New Feature,Major,None,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Claus Ibsen,0,0,2009-01-14 12:42:43+00:00,2009-07-31 06:33:58+00:00,"We should provide a JpaTraceEventMessage in camel-jpa so end users can persist trace event messages using that instead of rolling out their own jpa or how to store it in the db.


TODO



implement feature DONE
create example how to use jpa trace events DONE
add wiki documentation DONE
improve camel-jpa wiki (setting persistence unit) DONE","davsclaus:1231913335:2009-01-14T14:08:55.338+0000:1231913335:2009-01-14T14:08:55.338+0000:davsclaus:(svn)camel[trunk:734376]/$ svn commit --message ""CAMEL-1255: Jpa based trace event message for storing trace events in a database. All jpa entity have CAMEL_ as prefix in table names.""
Adding         camel-core/src/main/java/org/apache/camel/processor/interceptor/DefaultTraceEventMessage.java
Sending        camel-core/src/main/java/org/apache/camel/processor/interceptor/TraceEventExchange.java
Replacing      camel-core/src/main/java/org/apache/camel/processor/interceptor/TraceEventMessage.java
Sending        camel-core/src/main/java/org/apache/camel/processor/interceptor/TraceInterceptor.java
Sending        camel-core/src/main/java/org/apache/camel/processor/interceptor/Tracer.java
Sending        camel-core/src/main/java/org/apache/camel/util/IntrospectionSupport.java
Sending        camel-core/src/test/java/org/apache/camel/processor/interceptor/TraceFormatterTest.java
Sending        camel-core/src/test/java/org/apache/camel/processor/interceptor/TraceInterceptorDestinationTest.java
Sending        components/camel-bam/src/main/java/org/apache/camel/bam/model/ActivityDefinition.java
Sending        components/camel-bam/src/main/java/org/apache/camel/bam/model/ActivityState.java
Sending        components/camel-bam/src/main/java/org/apache/camel/bam/model/ProcessDefinition.java
Sending        components/camel-bam/src/main/java/org/apache/camel/bam/model/ProcessInstance.java
Sending        components/camel-jpa/pom.xml
Sending        components/camel-jpa/src/main/java/org/apache/camel/processor/idempotent/jpa/MessageProcessed.java
Adding         components/camel-jpa/src/main/java/org/apache/camel/processor/interceptor
Adding         components/camel-jpa/src/main/java/org/apache/camel/processor/interceptor/JpaTraceEventMessage.java
Sending        components/camel-jpa/src/main/resources/META-INF/persistence.xml
Adding         components/camel-jpa/src/test/java/org/apache/camel/processor/interceptor
Adding         components/camel-jpa/src/test/java/org/apache/camel/processor/interceptor/JpaTraceEventMessageTest.java
Sending        components/camel-jpa/src/test/resources/META-INF/persistence.xml
Adding         components/camel-jpa/src/test/resources/org/apache/camel/processor/interceptor
Adding         components/camel-jpa/src/test/resources/org/apache/camel/processor/interceptor/springJpaTraveEvent.xml
Transmitting file data ...................
Committed revision 734401.
davsclaus:1232333091:2009-01-19T10:44:51.657+0000:1232333091:2009-01-19T10:44:51.657+0000:See the new example: camel-example-tracer
There is a link to its wiki documentation under the examples
davsclaus:1248993238:2009-07-31T06:33:58.861+0000:1248993238:2009-07-31T06:33:58.861+0000:Closing 2.0m1 tickets"
0,CAMEL-1254,Improvement,Minor,1.5.0,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",William Tam,Claus Ibsen,0,0,2009-01-14 07:50:46+00:00,2009-07-31 06:33:58+00:00,"Having an endpoint such as:



        String cxfEndpoint = ""cxf://http://localhost:8080/part-five/webservices/incident""
                + ""?serviceClass=org.apache.camel.example.reportincident.ReportIncidentEndpoint""
                + ""&wsdlURL=report_incident.wsdl"";




The serviceClass option currently only supports defining a FQN for the class. 


I think we need to support Registry lookup as well using the # notation. So you can do:



        String cxfEndpoint = ""cxf://http://localhost:8080/part-five/webservices/incident""
                + ""?serviceClass=#reportService""
                + ""&wsdlURL=report_incident.wsdl"";




And then have it defined in Spring XML:



<bean id=""reportService"" class=""..."">




The # notation is already supported if you use the cxf Spring XML configuration. We need this in the Java DSL as well.


Sorry if it already exists. But I got a hint from a Camel end user that it didn't","davsclaus:1231892831:2009-01-14T08:27:11.644+0000:1231892831:2009-01-14T08:27:11.644+0000:See also CAMEL-797 where Charles hint that setting a ref in XML is also not possible
njiang:1231962406:2009-01-15T03:46:46.856+0000:1231962406:2009-01-15T03:46:46.856+0000:The key point of issue is we need to find the SEI (service endpoint interface) from a bean's instance.

CXF is using org.apache.cxf.jaxws.support.JaxWsImplementorInfo to help us to get the SEI from a bean's instance.
Now we just need  to add the support of simple front endpoint on camel-cxf side.

So I think it is easy to add this kind of support in camel-cxf :)
njiang:1232061945:2009-01-16T07:25:45.120+0000:1232061945:2009-01-16T07:25:45.120+0000:@Clause
Since Camel will create a Spring injector which will turn ""#reportService"" into a instance of reportService, so we can only get the serviceClass with reportService toString() result.

So I just did a quick fix for this issue-- added a option serviceClassInstance, 
Camel will look up the registry with this instance name , and set the serviceClass  with this instance's real class.

wtam:1232088279:2009-01-16T14:44:39.263+0000:1232088279:2009-01-16T14:44:39.263+0000:Assign to me to remind me that my cleanup won't lose this fix in the merge.
wtam:1232303298:2009-01-19T02:28:18.533+0000:1232303298:2009-01-19T02:28:18.533+0000:I made serviceClass=#bean to work in 2.0.  (2.0 camel-cxf code is quite different now)  Basically, I added a setter in CxfEndpoint  that takes object type of ""Object"" and read the class out of it.  

{code}
    public void setServiceClass(Object instance) {
        serviceClass = instance.getClass().getName();
    }
{code}

I haven't done a lot of testing but I did update the test.

{code}
   public void testGetServiceClass() throws Exception {
        CxfEndpoint endpoint = createEndpoint(""cxf:bean:helloServiceEndpoint?serviceClass=#helloServiceImpl"");      
        assertEquals(""org.apache.camel.component.cxf.HelloServiceImpl"", endpoint.getServiceClass());
    }
{code}

There is one thing worth pointing out.  The producer endpoint requires service class to be an interface (due to proxy client factory bean) so I don't know if being able to set service class instance is very useful.  I guess we can revisit using proxy client factory bean.

I didn't port the serviceClassRef option to the 2.0 camel-cxf refactoring since we can do it with # notation.
njiang:1232306330:2009-01-19T03:18:50.670+0000:1232306330:2009-01-19T03:18:50.670+0000:@ William

Cool,  but here is one comment for getting the Class name from a instance in the spring context.
Since the spring instance could be wrapped by some AOP interceptor, you may not get the right class name if you just call the instance.getClass().getName().

Don't  worry ,  I will take care of that :).
njiang:1232324991:2009-01-19T08:29:51.800+0000:1232324991:2009-01-19T08:29:51.800+0000:@ William
I changed the code to be here, and it also fixed the CXF test failures on my box (JDK1.5.0_13)
{code}
public void setServiceClass(Object instance) {
       if (instance instanceof String) {
            serviceClass = (String) instance;
        } else {
            serviceClass = ClassHelper.getRealClass(instance).getName();
        }
 }
{code}
njiang:1232487562:2009-01-21T05:39:22.363+0000:1232487562:2009-01-21T05:39:22.363+0000:I removed the code of setServiceClass(String), because this code will
never be called in my box.
<error type=""java.lang.IllegalArgumentException""
message=""java.lang.String is not an
interface"">java.lang.IllegalArgumentException: java.lang.String is not
an interface
	at java.lang.reflect.Proxy.getProxyClass(Proxy.java:362)
	at java.lang.reflect.Proxy.newProxyInstance(Proxy.java:581)
	at
org.apache.cxf.frontend.ClientProxyFactoryBean.create(ClientProxyFactoryBean.java:118)
	at
org.apache.camel.component.cxf.CxfEndpoint.createClient(CxfEndpoint.java:240)
	at
org.apache.camel.component.cxf.CxfProducer.&lt;init&gt;(CxfProducer.java:60)
	at
org.apache.camel.component.cxf.CxfEndpoint.createProducer(CxfEndpoint.java:89)

Found this issue was caused by the IntrospectionSupport always return setServiceClass(Object ) instead of setServiceClass(String) in windows box.
I just filled a JIRA CAMEL-1279  for it.

cmoulliard:1232956466:2009-01-26T15:54:26.355+0000:1232956466:2009-01-26T15:54:26.355+0000:@Willem,

I have made a test but unfortunately, the following syntax does not work if I try to deploy my WAR in a OSGI server like Spring DM

      <bean id=""reportIncidentEndpoint"" class=""org.apache.camel.example.reportincident.service.ReportIncidentEndpoint""/>
                    
        <!-- webservice endpoint -->             
        <cxf:cxfEndpoint id=""reportIncident""
                     address=""/incident"" wsdlURL=""/WEB-INF/wsdl/report_incident.xml""
                     serviceClass=""#reportIncidentEndpoint""
                     endpointName=""s:ReportIncidentPort""
                     serviceName=""s:ReportIncidentService"" 
                     xmlns:s=""http://reportincident.example.camel.apache.org""
        />

remark : ReportIncidentEndpoint is the interface generated by wsdl2java. 

Error :

[2009-01-26 16:47:29.199] async-delivery-thread-1  e.server.web.dm.ServerOsgiBundleXmlWebApplicationContext.unknown E Refresh error
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'reportIncidentEndpoint' defined in OSGi resource[classpath:camel-context.xml|bnd.id=84|bnd.sym=org.apache.camel.example.reportincident.web]: Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [org.apache.camel.example.reportincident.service.ReportIncidentEndpoint]: Specified class is an interface
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:883)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:839)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:440)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:429)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:728)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:380)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.normalRefresh(AbstractDelegatedExecutionApplicationContext.java:148)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$NoDependenciesWaitRefreshExecutor.refresh(AbstractDelegatedExecutionApplicationContext.java:73)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.refresh(AbstractDelegatedExecutionApplicationContext.java:136)
	at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:255)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:199)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:45)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3843)
	at org.apache.catalina.core.StandardContext.start(StandardContext.java:4342)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:791)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:771)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:525)
	at com.springsource.server.servlet.tomcat.TomcatServletContainer.addContext(TomcatServletContainer.java:948)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.springframework.osgi.service.importer.support.internal.aop.ServiceInvoker.doInvoke(ServiceInvoker.java:64)
	at org.springframework.osgi.service.importer.support.internal.aop.ServiceInvoker.invoke(ServiceInvoker.java:78)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:131)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171)
	at org.springframework.osgi.service.importer.support.LocalBundleContextAdvice.invoke(LocalBundleContextAdvice.java:59)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:131)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204)
	at $Proxy43.addContext(Unknown Source)
	at com.springsource.server.web.core.WebModulePersonality.deploy(WebModulePersonality.java:391)
	at com.springsource.server.deployer.core.module.AbstractModule.deploy(AbstractModule.java:235)
	at com.springsource.server.deployer.core.module.StandardModule.onStarted(StandardModule.java:572)
	at com.springsource.server.deployer.core.module.DeployerBundleListener$2$1.run(DeployerBundleListener.java:148)
	at com.springsource.server.concurrent.core.ExecutorServiceDelegate$StatisticsGatheringRunnable.run(ExecutorServiceDelegate.java:137)
	at com.springsource.server.concurrent.core.ServerThreadPoolExecutor$1.run(ServerThreadPoolExecutor.java:145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
	at java.lang.Thread.run(Thread.java:619)

As you can see, Spring does not support to instantiate an interface in this case ?


wtam:1232968379:2009-01-26T19:12:59.598+0000:1232968379:2009-01-26T19:12:59.598+0000:@Charles
I think that is the case.   That's one of the reasons I suspect in
most usecase, users are better off spelling out the service endpoint
interface class.   Other edge cases includes bean object being a
proxy.  Willem addressed the case that the bean is a Spring AOP proxy
but we don't handle other type of proxies.

On Mon, Jan 26, 2009 at 10:55 AM, Charles Moulliard (JIRA)

cmoulliard:1234225701:2009-02-10T08:28:21.836+0000:1234225701:2009-02-10T08:28:21.836+0000:@William,

This is strange because I have made the following test.

1) Case 1 : bean reference passed to the serviceClass

      <bean id=""reportIncidentEndpoint"" class=""org.apache.camel.example.reportincident.service.ReportIncidentEndpoint""/>
                    
        <!-- webservice endpoint -->             
        <cxf:cxfEndpoint id=""reportIncident""
                     address=""/incident"" wsdlURL=""/WEB-INF/wsdl/report_incident.xml""
                     serviceClass=""#reportIncidentEndpoint""
                     endpointName=""s:ReportIncidentPort""
                     serviceName=""s:ReportIncidentService"" 
                     xmlns:s=""http://reportincident.example.camel.apache.org""
        />

This case generates the error reported hereunder. As we can see, the bean that Spring must be created point to the interface class generated by wsdl2java of CXF and does not reference any OSGI bean service. 

2) Case 2 : class defined in the serviceClass

        <!-- webservice endpoint -->             
        <cxf:cxfEndpoint id=""reportIncident""
                     address=""/incident"" wsdlURL=""/WEB-INF/wsdl/report_incident.xml""
                     serviceClass=""org.apache.camel.example.reportincident.service.ReportIncidentEndpoint""
                     endpointName=""s:ReportIncidentPort""
                     serviceName=""s:ReportIncidentService"" 
                     xmlns:s=""http://reportincident.example.camel.apache.org""
        />
   
This implementation works.

Question : How can I verify/check that the snapshots used (2.0 for Camel and 2.2 for CXF) include the modification ?
njiang:1234227256:2009-02-10T08:54:16.477+0000:1234227256:2009-02-10T08:54:16.477+0000:@Charles,

I think the fix for Case 1 only works in Camel 2.0.
Please feel free to try it out.

I think you just need to update camel version to 2.0-SNAPSHOT in the pom, maybe you need do some modification in you pom if you are using some other version of CXF.

BTW, I think CAMEL 2.0-SNAPSHOT should work with the fresh release CXF 2.1.4 :).
wtam:1234251988:2009-02-10T15:46:28.370+0000:1234251988:2009-02-10T15:46:28.370+0000:We only fixed the trunk (2,x).  
wtam:1234252163:2009-02-10T15:49:23.089+0000:1234252163:2009-02-10T15:49:23.089+0000:Actually, it has been fixed in 1.x, too.  But the property name is serviceClassInstance.  So, you can do something like serviceClassInstance=beanID in 1.x.  I will make sure it is mentioned in wiki.
davsclaus:1248993238:2009-07-31T06:33:58.811+0000:1248993238:2009-07-31T06:33:58.811+0000:Closing 2.0m1 tickets"
0,CAMEL-1253,Improvement,Major,None,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Willem Jiang,Willem Jiang,0,0,2009-01-14 05:59:57+00:00,2009-07-31 06:33:58+00:00,"Current Camel xlst component can't change the TransformerFactory according to the URI, if the user don't want to use the JDK's default TransformerFactory or there are no XLST package shipped in the JRE, the XSLT component can't work as we want.","njiang:1231898836:2009-01-14T10:07:16.492+0000:1231898836:2009-01-14T10:07:16.492+0000:Also updated the wiki page.
http://cwiki.apache.org/confluence/display/CAMEL/XSLT
davsclaus:1248993238:2009-07-31T06:33:58.105+0000:1248993238:2009-07-31T06:33:58.105+0000:Closing 2.0m1 tickets"
0,CAMEL-1252,Improvement,Major,None,None,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,James Strachan,0,0,2009-01-13 16:24:17+00:00,2009-07-31 06:33:58+00:00,"not everywhere, but there are places in the code where we might want to pass in an expectedType. If passed in, this value can be useful to the evaluation engine - for example we can pass this nicely through in the XPath / XQuery engines to avoid having to append XPath evaluations with text()","davsclaus:1234329391:2009-02-11T13:16:31.572+0000:1234329391:2009-02-11T13:16:31.572+0000:Committed revision 743330.
davsclaus:1248993238:2009-07-31T06:33:58.082+0000:1248993238:2009-07-31T06:33:58.082+0000:Closing 2.0m1 tickets"
0,CAMEL-1251,Improvement,Minor,1.5.0,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Claus Ibsen,Claus Ibsen,0,0,2009-01-13 12:02:17+00:00,2009-07-31 06:33:58+00:00,"The recipient list looks for a header with a value with the endpoints to send to.


It gets the list of destination using ObjectHelper.createIterator(value) that will detect what kind of object type it is and return an appropriate iterator.


We need to expose a attribute for a tokenizer attribute in Spring DSL. You cannot from Spring DSL use the expression builder, where you need the tokenizer for String delimited endpoints that I guess is a very common for setting multiple endpoints.","davsclaus:1231886426:2009-01-14T06:40:26.688+0000:1231886426:2009-01-14T06:40:26.688+0000:davsclaus:(svn)camel[trunk:734343]/$ svn commit --message ""CAMEL-1251: Dynamic recipient list not handles a single String with endpoints seperated with comma. Exposes a seperator attribute in Spring DSL to set it. Polished zip dataformat.""
Sending        camel-core/src/main/java/org/apache/camel/impl/ZipDataFormat.java
Sending        camel-core/src/main/java/org/apache/camel/model/RecipientListType.java
Sending        camel-core/src/main/java/org/apache/camel/model/dataformat/ZipDataFormat.java
Sending        camel-core/src/main/java/org/apache/camel/processor/RecipientList.java
Sending        camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java
Sending        camel-core/src/test/java/org/apache/camel/impl/ZipDataFormatTest.java
Adding         camel-core/src/test/java/org/apache/camel/processor/RecipientListWithStringDelimitedHeaderTest.java
Sending        camel-core/src/test/java/org/apache/camel/util/ObjectHelperTest.java
Adding         components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringRecipientListWithStringDelimitedHeaderTest.java
Adding         components/camel-spring/src/test/resources/org/apache/camel/spring/processor/recipientListWithStringDelimitedHeader.xml
Transmitting file data ..........
Committed revision 734348.
davsclaus:1231888300:2009-01-14T07:11:40.057+0000:1231888300:2009-01-14T07:11:40.057+0000:And in 1.x: Committed revision 734353.
davsclaus:1248993238:2009-07-31T06:33:58.061+0000:1248993238:2009-07-31T06:33:58.061+0000:Closing 2.0m1 tickets"
0,CAMEL-1250,Improvement,Minor,1.5.0,,"
None
",Closed,Not A Problem,None,Unassigned,Claus Ibsen,0,0,2009-01-13 09:07:08+00:00,2010-02-07 09:54:19+00:00,"Check out CAMEL-1249.


He wants to define a new component mailbox that is configured purely with Spring. And then refer to it in his routes. The issues is that its refered to without any scheme, so Camel think its an Endpoint to be looked up in the Registry.


We might wanna add a <component id=xxx ref=springbeanid> tag so we can add components from Spring DSL","njiang:1231810411:2009-01-13T09:33:31.777+0000:1231810411:2009-01-13T09:33:31.777+0000:Current camel support to get the components from registry(camel context), if you defined a mail component bean with id ""mail"", camel will find it by looking for the endpoint with uri start with ""mail:"".
{code}
<bean id=""mail"" class=""org.apache.camel.component.mail.MailComponent"">
{code}

if think spring also support that
{code}
<bean id=""mailAilas"" ref=""mail"">
{code}"
0,CAMEL-1249,Bug,Major,"1.4.0, 1.5.0","1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Claus Ibsen,Michael Chen,0,0,2009-01-12 18:06:03+00:00,2009-07-31 06:33:57+00:00,"A Camel org.apache.camel.component.mail.MailComponent is configured via Spring as:



<bean id=""mailbox"" class=""org.apache.camel.component.mail.MailComponent"">
  <property name=""configuration"">
    <bean id=""mailbox_config"" class=""org.apache.camel.component.mail.MailConfiguration"">
      <property name=""protocol""><value>pop3</value></property>
      <property name=""host""><value>mail.abc.com</value></property>
      <property name=""username""><value>test</value></property>
      <property name=""password""><value>test</value></property>
    </bean>
  </property>
</bean>




It is silly to use the hard-coded URI in Java code to create a mail endpoint. Instead I want to use the above method to specify everything (I mean everything) about how to access a mail server (send or receive) in different deployments.  Up to Camel 1.5, line 73 of MailComponent.createEndpoint() ignored the MailConfiguration variable MailComponent.configuration and created a new one to parse the URI. This defeats the Spring injection above, which is recommended by Camel's own User's Guide.


Line 73 and 74 should be changed from:



        MailConfiguration config = new MailConfiguration();
        config.configure(url);


to



        configuration.configure(url);


In addition, if the uri parameter equals the component name, createEndpoint() should not parse it at all, so that the following route builder will create the mail endpoint solely according to the Spring injection of MailConfiguration:



    from(""mailbox"").to(""my_queue"");","davsclaus:1231800802:2009-01-13T06:53:22.571+0000:1231880569:2009-01-14T05:02:49.182+0000:Thanks for reporting this. I have fixed it.

About the last one using your own component. You need to set the mail configuration to ignore scheme
   <property name=""ignoreUriScheme""><value>true</value></property>

And then ""mailbox"" needs to be added as a Component. That is easy from Java, but in Spring there might be some component XML tag to declare this.
If not then I think we need it.

*updated* with the correct property name
mwc_tonesoft:1231840919:2009-01-13T18:01:59.518+0000:1231840919:2009-01-13T18:01:59.518+0000:Claus,

Please correct your comment for this bug that mentioned the wrong 
property name. The correct name according to your source code change is 
""ignoreUriScheme"", not ""ignoreSchemeUri"".  It may cause confusion for 
others reading this fix.

Thank you

--Michael



davsclaus:1231880590:2009-01-14T05:03:10.281+0000:1231880590:2009-01-14T05:03:10.281+0000:Thanks Michael, I have updated it
davsclaus:1248993237:2009-07-31T06:33:57.998+0000:1248993237:2009-07-31T06:33:57.998+0000:Closing 2.0m1 tickets"
0,CAMEL-1248,Improvement,Major,None,None,"
None
",Closed,Duplicate,2.0-M1,Jonathan Anstey,James Strachan,0,0,2009-01-12 14:20:16+00:00,2009-10-24 11:16:12+00:00,"it looks from Andrej's blog post that maybe the XMPP code for Camel can be improved?


Wonder if its worth comparing his code to camel's code to see if there's something we can do to improve it - particularly being able to use Google Talk with Camel would be cool


http://www.andrejkoelewijn.com/wp/2008/12/30/using-google-talk-from-java-example/","davsclaus:1231745304:2009-01-12T15:28:24.185+0000:1231745304:2009-01-12T15:28:24.185+0000:James I think Jonathan have already fixed it.
jstrachan:1231745398:2009-01-12T15:29:58.847+0000:1231745398:2009-01-12T15:29:58.847+0000:OK no worries - just wanted to record it in case we'd missed it!
janstey:1232353576:2009-01-19T16:26:16.223+0000:1232353576:2009-01-19T16:26:16.223+0000:Yep this has been fixed :) See CAMEL-1209 for more details"
0,CAMEL-1247,Bug,Major,2.0.0,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Paddy Daly,0,0,2009-01-12 12:18:20+00:00,2009-07-31 06:33:57+00:00,http://www.nabble.com/SFTP-%3A-Polling---Cannot-list-directory-to21413159s22882.html,"watcher:1231810475:2009-01-13T09:34:35.010+0000:1231810475:2009-01-13T09:34:35.010+0000:Here's the log file for the following route

<endpoint id=""printerSFTP"" uri=""sftp://pdaly@127.0.0.1?password=password&amp;binary=true&amp;expression=done/${file:name}&amp;recursive=true&amp;delay=10000&amp;initialDelay=2000&amp;readLock=rename&amp;knownHostsFile=c://known_host&amp;filter=#myAntFilter""/>
davsclaus:1231810849:2009-01-13T09:40:49.527+0000:1231810849:2009-01-13T09:40:49.527+0000:Thanks for the log. Are you sure its using TRACE. I cant see any TRACE log lines in the file?



davsclaus:1231812903:2009-01-13T10:15:03.478+0000:1231812903:2009-01-13T10:15:03.478+0000:I think I got it now. Running full unit test with the fix
watcher:1231814024:2009-01-13T10:33:44.670+0000:1231814024:2009-01-13T10:33:44.670+0000:Sorry about that, here you go.
davsclaus:1231815822:2009-01-13T11:03:42.438+0000:1231815822:2009-01-13T11:03:42.438+0000:@Paddy

I have commited a fix to camel trunk. Would be lovely if you could test it.

You can wait X hours or how long it takes for Apache INFRA to build and deploy a new SNAPSHOT of Camel 2.0 or you can grab the source and build a camel-ftp jar yourself.

The fix is in r734095
davsclaus:1231817047:2009-01-13T11:24:07.332+0000:1231817047:2009-01-13T11:24:07.332+0000:This bug does not exists in 1.x
watcher:1231820498:2009-01-13T12:21:38.372+0000:1231820624:2009-01-13T12:23:44.923+0000:Claus 
The StringIndexOutOfBoundsException is fixed however I'm still getting an error.

Here is my directory structure.
    c:/folder/printer
                              /test1
                                      /incoming
                                      /outgoing
                              /test2
                                      /incoming
                                      /outgoing

I've set the user pdaly@127.0.0.1 to the root folder of c:/folder/printer

Here's the log from the sftp server


000000001358 2009-01-13 12:11:02.131690 UTC WinSSHD 5.04 [111] Info
  Session thread 1103 for Windows account 'pdaly' from 127.0.0.1:3431:
  Session channel 1: FlowSfsWin: Closed directory 'C:\folder\printer\test1'. Registered 1 successful
  operation. Listed 3 entries in 1 operation.

000000001359 2009-01-13 12:11:02.132952 UTC WinSSHD 5.04 [118] Info
  Session thread 1103 for Windows account 'pdaly' from 127.0.0.1:3431:
  Session channel 1: FlowSfsWin: Reading attributes for 'C:\folder\printer\incoming' (follow symlink)
  failed with NoSuchFile. GetFileAttributes() failed: Windows error 2: The system cannot find the file
  specified.

Is there something wrong with my filter

	<bean id=""myAntFilter"" class=""org.apache.camel.component.file.remote.AntPathMatcherRemoteFileFilter"">	   
	    <property name=""includes"" value=""**/incoming/*""/>
	    <property name=""excludes"" value=""**/outgoing/*""/>
	</bean>
 
above should be
star star/incoming/star


davsclaus:1231820956:2009-01-13T12:29:16.907+0000:1231820956:2009-01-13T12:29:16.907+0000:Hi

Looks like when it gets the file list it can not detect that the incoming is a directory and not a file. I will look in the code and try to get a fix for you to test again
davsclaus:1231821835:2009-01-13T12:43:55.755+0000:1231821835:2009-01-13T12:43:55.755+0000:@Paddy

I have commited a fix for the new problem

Sending        camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpConsumer.java
Transmitting file data .
Committed revision 734117.

watcher:1231826900:2009-01-13T14:08:20.310+0000:1231826900:2009-01-13T14:08:20.310+0000:I still get an error in SftpRemoteFileOperations

  Vector files = channel.ls(path);

when path equals ""incoming""

 WARN  An exception occured while polling: Endpoint[sftp://pdaly@127.0.0.1]: Cannot list directory: incoming
org.apache.camel.component.file.remote.RemoteFileOperationFailedException: Cannot list directory: incoming
	at org.apache.camel.component.file.remote.SftpRemoteFileOperations.listFiles(SftpRemoteFileOperations.java:270)
	at org.apache.camel.component.file.remote.SftpConsumer.pollDirectory(SftpConsumer.java:47)
	at org.apache.camel.component.file.remote.SftpConsumer.pollDirectory(SftpConsumer.java:53)
	at org.apache.camel.component.file.remote.SftpConsumer.pollDirectory(SftpConsumer.java:53)
	at org.apache.camel.component.file.remote.RemoteFileConsumer.poll(RemoteFileConsumer.java:65)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:66)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:619)
Caused by: 2: SfsStatusCode.NoSuchFile
	at com.jcraft.jsch.ChannelSftp.throwStatusError(Unknown Source)
	at com.jcraft.jsch.ChannelSftp.stat(Unknown Source)
	at com.jcraft.jsch.ChannelSftp.ls(Unknown Source)
	at org.apache.camel.component.file.remote.SftpRemoteFileOperations.listFiles(SftpRemoteFileOperations.java:264)
	... 14 more
[te.RemoteFileComponent@100d6ea] ScheduledPollConsumer    

davsclaus:1231827540:2009-01-13T14:19:00.126+0000:1231827540:2009-01-13T14:19:00.126+0000:Sorry I have found the bug.

The problem with the SFTP is that we dont have a java SFTP server we can use for automatic unit testing. So we run all the unit tests with the regular FTP component. The SFTP codebase is 98% identical to the FTP. But I found the bug with the sub folder stuff.

Will commit a patch shortly. 
davsclaus:1231827992:2009-01-13T14:26:32.243+0000:1231827992:2009-01-13T14:26:32.243+0000:@Paddy

I have commited a fix to trunk. Could you please test it? Sorry for the issues. However Camel FTP has had a major refactor in Camel 2.x compared to 1.x.


New Revision: 734141

watcher:1231829413:2009-01-13T14:50:13.597+0000:1231829413:2009-01-13T14:50:13.597+0000:Its processing the file ok now, however it fails to put the file into the done directory and throws the following exception.

[te.RemoteFileComponent@1c1e333] SftpConsumer                   ERROR Cannot delete file: /test1/inc
oming/.done/New Text Document.txt
org.apache.camel.component.file.remote.RemoteFileOperationFailedException: Cannot delete file: /test
1/incoming/.done/New Text Document.txt
        at org.apache.camel.component.file.remote.SftpRemoteFileOperations.deleteFile(SftpRemoteFile
Operations.java:138)
        at org.apache.camel.component.file.remote.strategy.RenameRemoteFileProcessStrategy.renameFil
e(RenameRemoteFileProcessStrategy.java:71)
        at org.apache.camel.component.file.remote.strategy.RenameRemoteFileProcessStrategy.commit(Re
nameRemoteFileProcessStrategy.java:65)
        at org.apache.camel.component.file.remote.RemoteFileConsumer.processStrategyCommit(RemoteFil
eConsumer.java:215)
        at org.apache.camel.component.file.remote.RemoteFileConsumer$1.done(RemoteFileConsumer.java:
170)
        at org.apache.camel.processor.UnitOfWorkProcessor$1.done(UnitOfWorkProcessor.java:57)
        at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java
:74)
davsclaus:1231832739:2009-01-13T15:45:39.831+0000:1231832739:2009-01-13T15:45:39.831+0000:Hi

Could you try a file without spaces in the file name?

watcher:1231832883:2009-01-13T15:48:03.910+0000:1231832883:2009-01-13T15:48:03.910+0000:same issue
davsclaus:1231833455:2009-01-13T15:57:35.816+0000:1231833455:2009-01-13T15:57:35.816+0000:@Paddy

I have commited a new fix to trunk about the move bug. Could you try it?

Committed revision 734164.

watcher:1231835554:2009-01-13T16:32:34.909+0000:1231835554:2009-01-13T16:32:34.909+0000:That works. :-) 

I tested folder names with spaces and file names with spaces too.

Thanks so much for your effort today.


davsclaus:1231880712:2009-01-14T05:05:12.604+0000:1231880712:2009-01-14T05:05:12.604+0000:Thanks with good help from Paddy we have fixed the issues with SFTP/FTP consumers in Camel 2.0. 

Paddy thanks for being patient and reporting and testing this issue. Much appreciated by the community.
davsclaus:1248993237:2009-07-31T06:33:57.946+0000:1248993237:2009-07-31T06:33:57.946+0000:Closing 2.0m1 tickets"
0,CAMEL-1246,New Feature,Major,None,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Claus Ibsen,0,0,2009-01-12 07:38:26+00:00,2009-07-31 06:33:57+00:00,"Currently Tracer only allows writing trace logs to the logger.


Some end users want to be able to specify a custom route/process where they can alter the trace message and store it in a database or what they would like.


We should add an option to set a destinationUri where we can route a TraceEventExchange containing information about the original exchange at the given time of interception.",davsclaus:1248993237:2009-07-31T06:33:57.927+0000:1248993237:2009-07-31T06:33:57.927+0000:Closing 2.0m1 tickets
0,CAMEL-1245,Improvement,Minor,1.5.0,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Claus Ibsen,0,0,2009-01-10 12:16:56+00:00,2009-07-31 06:33:57+00:00,"Currently we have pluggable TraceFormatter but TraceFormatter is a class, it should be an interface so end users can plugin all kind of formatters such as ones that can format to XML using XStream and whatnot",davsclaus:1248993237:2009-07-31T06:33:57.880+0000:1248993237:2009-07-31T06:33:57.880+0000:Closing 2.0m1 tickets
0,CAMEL-1244,Improvement,Trivial,None,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Willem Jiang,Hari Gangadharan,0,0,2009-01-09 19:12:13+00:00,2009-07-31 06:33:57+00:00,"Add a shutdown hook to so that it shuts down gracefully on HUP signal.


http://www.nabble.com/Two-questions%3A-Stopping-Camel-and-intercept-before-retry-td21323127s22882.html","harinair:1231505677:2009-01-09T20:54:37.572+0000:1231505677:2009-01-09T20:54:37.572+0000:Here is a patch to gracefully shut down Camel on Hangup signal / Ctrl-C

Two more file (an interface and a class) to attach
harinair:1231505763:2009-01-09T20:56:03.344+0000:1231505763:2009-01-09T20:56:03.344+0000:Interface Stopable and Class HangupInterceptor
davsclaus:1231828743:2009-01-13T14:39:03.884+0000:1231828743:2009-01-13T14:39:03.884+0000:Willem I think we could add a Main option so you can enable/disable the shutdown hook, with a sensible default. Maybe enabled.

And we might consider it overkill to add a Stopable interface, as its a JVM Shutdown.

I was wondering if Spring dont have something for this for people running Spring from a Main?
njiang:1231829748:2009-01-13T14:55:48.226+0000:1231829748:2009-01-13T14:55:48.226+0000:Yes, I am plan to remove the Stopable interface.
This Main class is also a part of camel:run plugin,  maybe it's the reason why we need to use this main class.
njiang:1231877602:2009-01-14T04:13:22.946+0000:1231877602:2009-01-14T04:13:22.946+0000:Applied patch with thanks to Hari.

njiang:1231877882:2009-01-14T04:18:02.820+0000:1231877882:2009-01-14T04:18:02.820+0000:@Claus

I don't think there is any user don't want shutdown Camel context gracefully.
Let's just put the shutdown hook in the Main class by default (no enable/disable option).
davsclaus:1248993237:2009-07-31T06:33:57.837+0000:1248993237:2009-07-31T06:33:57.837+0000:Closing 2.0m1 tickets"
0,CAMEL-1243,Improvement,Major,None,None,"
None
",Closed,Fixed,2.0-M1,Unassigned,James Strachan,0,0,2009-01-09 15:44:22+00:00,2009-07-31 06:33:57+00:00,No Desc,"jstrachan:1231494394:2009-01-09T17:46:34.711+0000:1231494394:2009-01-09T17:46:34.711+0000:see the Exchange.getFromEndpoint() which should be set now when sending to an endpoint or an endpoint generates an exchange
davsclaus:1248993237:2009-07-31T06:33:57.142+0000:1248993237:2009-07-31T06:33:57.142+0000:Closing 2.0m1 tickets"
0,CAMEL-1242,Improvement,Minor,2.0.0,Future,"
None
",Resolved,Not A Problem,Future,Claus Ibsen,Stephen Joyner,0,2,2009-01-09 15:14:30+00:00,2013-05-02 02:29:38+00:00,"The camel-cometd component will consume all messages sent to it whether it has a client subscribed to its enpoint channel or not. It would be preferable for the component not to consume messages until it has a subscribed client to receive the messages.


As it is currently written, the component ""eats"" messages, and this doesn't seem to be a desirable function.","davsclaus:1303354610:2011-04-21T10:56:50.872+0000:1303354610:2011-04-21T10:56:50.872+0000:I think we fixed this when upgrading to CometD 2.1.0 on trunk. Can you try with latest source code?
davsclaus:1341532826:2012-07-06T08:00:26.865+0000:1341532826:2012-07-06T08:00:26.865+0000:Reopen or comment if still a problem."
0,CAMEL-1241,New Feature,Major,2.0.0,None,"
None
",Closed,Won't Fix,Future,Unassigned,Ramon Buckland,0,0,2009-01-09 09:23:45+00:00,2011-04-24 10:00:43+00:00,"Add a new component camel-commons-vfs which utilises the commons-vfs library providing access to zip,jar,tgz,cifs,ftp and many other wonderful ""file"" type resources.


The component will go into camel 2.0 as the new camel-file and camel-ftp components have been re-written to support a better model.","rbuckland:1231728831:2009-01-12T10:53:51.624+0000:1231728831:2009-01-12T10:53:51.624+0000:I have been investigating how this change will impact / change the recent refactoring work for camel-file and camel-ftp.

There is a set of interfaces and some implementation largely named Remote* .. for example RemoteFileOperation.

This work will refactor some of these classes, making interfaces and sorting out some other interfaces.

I propose the following.

Pull-up a more generic set of interface and base classes, called Generic*.
-   These Generic iface/classes will be 90%-95% of the current Remote.. so largely a renaming.
- What is ""Remote"" specific, such as Hostname, will come to a lower ""remote"" implementation

commons-vfs will hang off the Generic and the existing camel-file can also hang off this generic set of classes.

Any comments ?
davsclaus:1231737846:2009-01-12T13:24:06.922+0000:1231737846:2009-01-12T13:24:06.922+0000:+1

Yeah when we poll the interfaces from camel-ftp into camel-core they need a rename to be generic, so GenericFileOperation will do.

I just wanted to be sure that commons-vfs can integrate with this approach using the interfaces from camel-ftp allowing us to have much more shared code for the different file based transports
- java.io.File
- regular FTP
- SFTP
- and now commons-vfs



rbuckland:1231738641:2009-01-12T13:37:21.884+0000:1231738641:2009-01-12T13:37:21.884+0000:Yes, it appears with the minor changes that the new 2.0 changes can be adapted without much hassle for more file goodness.
davsclaus:1231738963:2009-01-12T13:42:43.663+0000:1231738963:2009-01-12T13:42:43.663+0000:@Ramon

That is fantastic. Makes me smile the rest of the day :)
rbuckland:1232661932:2009-01-23T06:05:32.907+0000:1232661932:2009-01-23T06:05:32.907+0000:Attached is the refactoring to ""extract out"" the ""generic File stuff"" from the RemoteFile* implementation.

All the tests are working as they were with this refactoring.

Now I will create a commons-vfs implementation underneath the Generic*

Note, I am uploading this now so that other can see what I am currently doing, get an idea for it.

Hopefully I will have commons-vfs completed by tomorrow, at which time I will supply the new patch that is EVERYTHING including this attached one.
rbuckland:1232683333:2009-01-23T12:02:13.540+0000:1232683333:2009-01-23T12:02:13.540+0000:
As per Claus' suggestion. This is part 1  of the list below .. 

So if you can provide diffs in multiple steps. A rough plan like this:

{quote}
1) Generic* that are used by the FTP component
2) When #1 is commited to triunk and you code is aligned with trunk,
then move on to
3) Move Generic* from camel-ftp to camel-core
4) When #3 is commited to triunk and you code is aligned with trunk,
then move on to
5) You can start on commons-vfs component
6) Then we can take a look at the java generics stuff <T> and get that
done in the right way
7) Refactor File in camel-core to use the new generics
8) Add the new commons-vfs component when its ready and done
9) Add wiki doc for the new commons-vfs component
{quote}

davsclaus:1232690928:2009-01-23T14:08:48.861+0000:1232690928:2009-01-23T14:08:48.861+0000:Thanks for the patch.

I renamed the sorter to be GenericXXX as well so they all are starting with Generic. Then its easier to spot.
And also fixed the checkstyle issues. Please dont auto wrap the code. It gets ugly. 

We should add generics to these interfaces, later. (the <T> stuff.)
Its easier to do when we refactor the FTP component to use these base classes.


davsclaus:1232795114:2009-01-24T19:05:14.256+0000:1232795114:2009-01-24T19:05:14.256+0000:Ramon I have done some modifications to the camel-core in trunk.

I stated on #7 to get a due diligence test of the GenericXXX classes. I created a NewFileXXX that is the regular file integrating using the GenericXXX classes.
I basically got it working with both the consumer and the producer but have only tested it using two new unit tests. At present time I want it to not interfer with the regular File component as its used heavily in entire Camel for unit testing. So the NewFileXX must be rock solid before we let it replace the old one.

There a some TODOs in the code for stuff to consider and check upon. I do think the GenericFileOperations might could change to pass in the GenericFile instead of the T type I have now. But more work on that will tell.

Also from the FTP point of with, as I have added generics to it, I would like to see especially the SFTPConsumer if it can use it. I kinda remember it had a sucky API representing the remote FTP file.



rbuckland:1232821862:2009-01-25T02:31:02.391+0000:1232821862:2009-01-25T02:31:02.391+0000:Thanks Claus, I will integrate your changes on my trunk now and get it all working.

In my local working tree, I will be making sure that the FULL suit of tests for Camel pass before I push through the patch; as you say, File is used in a lot of places already. (as I also have seen).

Yes, you are right the SFTP API is a little different. I did start on pushing common ""code"" up one level below a remote implementation. But I'll revise again shortly.
davsclaus:1232842014:2009-01-25T08:06:54.230+0000:1232842014:2009-01-25T08:06:54.230+0000:I updated it yet again with a minor fix to add newfile as a componet scheme so its possible to test it by replacing ""file://"" with ""newfile://"".

The reason is so file and newfile can reside side by side until its rock solid and can replace file.

Ramon do you have any changes to the file component? If not I would like to get that sorted out. I would advice that you focus on the new commons-vfs component that you originally wanted to add. Or you can start refactoring the FTP/SFTP component to use GenericXXX.

What do you say?



rbuckland:1232847602:2009-01-25T09:40:02.705+0000:1232847602:2009-01-25T09:40:02.705+0000:I am about another hour or two from having the ftp/sftp using the new GenericXX components. From there I will add in the commons-vfs. Expect a patch soon.
rbuckland:1232875853:2009-01-25T17:30:53.186+0000:1232875853:2009-01-25T17:30:53.186+0000:This patch implements the GenericFile* classes / ifaces across the original Remote* classes.

Specifically, the following occurs with this patch.

(a) minor modifications to the new Generic* classes in camel-core (to support RemoteFile style endpoints)
(b) added a method to DefaultEndpoint to obtain the ""protocol"" in the uri (so we can re-lookup our META-INF file to find default strategy)
(c) refactored all the FTP tests to use target/ftpserver/home as the ftp server root, instead of res/

This patch readies the camel-core / camel-ftp (file based) so we can now implement commons-vfs into the fray.

All Tests are working as of diff revision.
rbuckland:1232903708:2009-01-26T01:15:08.547+0000:1232903708:2009-01-26T01:15:08.547+0000:COMPLETE             1) Generic* that are used by the FTP component
COMPLETE             2) When #1 is commited to triunk and you code is aligned with trunk, then move on to
COMPLETE             3) Move Generic* from camel-ftp to camel-core
WAITING COMMIT  4) When #3 is commited to triunk and you code is aligned with trunk, then move on to
INPROGRESS        5) You can start on commons-vfs component
INPROGRESS        6) Then we can take a look at the java generics stuff <T> and get that done in the right way
Claus STARTED    7) Refactor File in camel-core to use the new generics            
                                   8) Add the new commons-vfs component when its ready and done
                                   9) Add wiki doc for the new commons-vfs component
rbuckland:1232905161:2009-01-26T01:39:21.271+0000:1232905161:2009-01-26T01:39:21.271+0000:Fixed the patch (I had local uber pom.xml changes for future work not yet required) .. removed these.
rbuckland:1232926398:2009-01-26T07:33:18.720+0000:1232926398:2009-01-26T07:33:18.720+0000:Fixed the getUriEndpointProtocol (removed from DefaultEndpoint) 
and changed to GenericFileEndpoint.getScheme()

Broke patch into two 
   camel-core
   camel-ftp   (absolute or relative directory patch supplied)

Both need to be applied


rbuckland:1232926485:2009-01-26T07:34:45.859+0000:1232926485:2009-01-26T07:34:45.859+0000:In this patch release (CAMEL-1241_part2.zip)  is as follows 

* Included now is the patch fixing CAMEL-1290
* Patch files

============== The patch Files ===============
1.  For camel-core  (/trunk$ svn diff camel-core)
    File: CAMEL-1241_part2_camel-core.patch

=== For 2, use either ===
    Claus, you mentioned patching in through IDEA and I know eclipse roots projects at the pom.xml so I figured the patch is needed
    at that level (2b). Both are supplied. but have identical changes (of course)

2a. For camel-ftp   Generated at the project root.
    (/trunk$ svn diff components/camel-ftp)
    File: CAMEL-1241_part2_camel-ftp.patch
OR

2b. For camel-ftp   Generated at components/camel-ftp
    (/trunk/components$ svn diff camel-ftp)
    File: CAMEL-1241_part2_camel-ftp_relative_dir.patch

davsclaus:1232931580:2009-01-26T08:59:40.006+0000:1232931580:2009-01-26T08:59:40.006+0000:@Ramon

Patch hell for *camel-ftp*.
When you do delete/rename and all sort of stuff it gets messy.

Can you send the src files in a .zip as plain .java files? Only for *camel-ftp*

The camel-core is okay, only the AntPathMatcherGenericFileFilter is missing. Could you send it as well?

Sorry but svn patches gets messy when there are to much add/delete/rename going on.
And I guess the patch file should be ordered as well, I have a kinda deadlock where files patches look for a new class that does not exists since its being renamed and patched later in the file.
davsclaus:1232931611:2009-01-26T09:00:11.786+0000:1232931611:2009-01-26T09:00:11.786+0000:Oh btw IDEA can do the relative/base stuff. There is a strip trailing directories you can adjust.
rbuckland:1232935957:2009-01-26T10:12:37.186+0000:1232935957:2009-01-26T10:12:37.186+0000:Yes.. patch hell :-) 

Attached is all relevant new files or changes tar'd up.

And below is the deletions needed

svn rm components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileFilter.java
svn rm components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/strategy/DeleteRemoteFileProcessStrategy.java
svn rm components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/strategy/RemoteFileRenameExclusiveReadLockStrategy.java
svn rm components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/strategy/RemoteFileExpressionRenamer.java
svn rm components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/strategy/RemoteFileProcessStrategyFactory.java
svn rm components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/strategy/RemoteFileRenamer.java
svn rm components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/strategy/RenameRemoteFileProcessStrategy.java
svn rm components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/strategy/NoOpRemoteFileProcessStrategy.java
svn rm components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/strategy/DefaultRemoteFileRenamer.java
svn rm components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/strategy/RemoteFileProcessStrategySupport.java
svn rm components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/AntPathMatcherRemoteFileFilter.java

clove:1255608984:2009-10-15T20:16:24.502+0000:1255608984:2009-10-15T20:16:24.502+0000:What work has been done on the vfs component?  Any source for cifs writes or reads?

Thanks in advance
davsclaus:1255928952:2009-10-19T13:09:12.980+0000:1255928952:2009-10-19T13:09:12.980+0000:I do not think Ramon is working on this anymore.

Anyone feel free to take over and implement a camel-vfs component
davsclaus:1266386895:2010-02-17T14:08:15.032+0000:1266386895:2010-02-17T14:08:15.032+0000:commons-vfs is a dead project
davsclaus:1303610443:2011-04-24T10:00:43.507+0000:1303610443:2011-04-24T10:00:43.507+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-1240,Sub-task,Major,None,None,"
None
",Closed,Fixed,"1.6.0, 2.0-M1",Willem Jiang,Willem Jiang,0,0,2009-01-09 07:29:34+00:00,2009-07-31 06:33:57+00:00,No Desc,davsclaus:1248993237:2009-07-31T06:33:57.095+0000:1248993237:2009-07-31T06:33:57.095+0000:Closing 2.0m1 tickets
0,CAMEL-1239,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.0-M1,William Tam,Willem Jiang,0,0,2009-01-09 04:36:48+00:00,2009-07-31 06:33:57+00:00,No Desc,davsclaus:1248993237:2009-07-31T06:33:57.074+0000:1248993237:2009-07-31T06:33:57.074+0000:Closing 2.0m1 tickets
0,CAMEL-1238,Task,Major,"1.3.0, 1.4.0, 1.5.0",None,"
None
",Closed,Fixed,"1.6.0, 2.0-M1",Willem Jiang,Willem Jiang,0,0,2009-01-09 03:43:06+00:00,2009-07-31 06:33:57+00:00,"Here are some discussion in this mail thread[1]


[1] http://www.nabble.com/Quick-questions-in-CxfConsumer-code-td21360659s22882.html","njiang:1231446788:2009-01-09T04:33:08.212+0000:1231446788:2009-01-09T04:33:08.212+0000:Now we use the CXFEndpoint's bus instead of creating a new one.

TODO, 

We could add a busId option in the cxf uri to let the no-spring cxf endpoint to chose the bus from registry.
davsclaus:1248993237:2009-07-31T06:33:57.039+0000:1248993237:2009-07-31T06:33:57.039+0000:Closing 2.0m1 tickets"
0,CAMEL-1237,Improvement,Minor,None,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Stephen Joyner,0,0,2009-01-08 13:59:51+00:00,2009-07-31 06:33:56+00:00,"The camel-stream component is documented to support file and url parameters, but the code in the StreamEnpoint.java file didn't allow these properties to be set. This patch also adds the feature of keeping a text file open and reading lines from it as they are written by other processes or applications.","sjoyner:1231394965:2009-01-08T14:09:25.786+0000:1231394965:2009-01-08T14:09:25.786+0000:Patch to implement improvements described in issue.
sjoyner:1231403058:2009-01-08T16:24:18.254+0000:1231403058:2009-01-08T16:24:18.254+0000:The StreamConsumer.java needs to be spin off it's own thread when started if the scan file feature is used, because it will block the main thread from processing additional routes.
davsclaus:1232436772:2009-01-20T15:32:52.053+0000:1232436772:2009-01-20T15:32:52.053+0000:@Stephen

When using your patch and with a deamon thread I still get a thread hanging while stopping Camel.

""stream:in?initialPromptDelay=4000&promptDelay=2000&promptMessage=Enter some words: thread:1"" daemon prio=5 tid=0x01043d20 nid=0x9d4a00 runnable [0xb1011000..0xb1011d90]
        at java.io.FileInputStream.readBytes(Native Method)
        at java.io.FileInputStream.read(FileInputStream.java:194)
        at java.io.BufferedInputStream.read1(BufferedInputStream.java:254)
        at java.io.BufferedInputStream.read(BufferedInputStream.java:313)
        - locked <0x093253e8> (a java.io.BufferedInputStream)
        at sun.nio.cs.StreamDecoder$CharsetSD.readBytes(StreamDecoder.java:411)
        at sun.nio.cs.StreamDecoder$CharsetSD.implRead(StreamDecoder.java:453)
        at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:183)
        - locked <0x0a457118> (a java.io.InputStreamReader)
        at java.io.InputStreamReader.read(InputStreamReader.java:167)
        at java.io.BufferedReader.fill(BufferedReader.java:136)
        at java.io.BufferedReader.readLine(BufferedReader.java:299)
        - locked <0x0a457118> (a java.io.InputStreamReader)
        at java.io.BufferedReader.readLine(BufferedReader.java:362)
        at org.apache.camel.component.stream.StreamConsumer.readFromStream(StreamConsumer.java:128)
        at org.apache.camel.component.stream.StreamConsumer.run(StreamConsumer.java:96)
        at java.lang.Thread.run(Thread.java:613)

sjoyner:1232452101:2009-01-20T19:48:21.559+0000:1232452101:2009-01-20T19:48:21.559+0000:I believe this patch should fix the thread error. This diff was created against the head revision.
davsclaus:1232491550:2009-01-21T06:45:50.513+0000:1232491550:2009-01-21T06:45:50.513+0000:Commit to trunk: 736242.

Thanks Stephen for the patches.
davsclaus:1248993236:2009-07-31T06:33:56.990+0000:1248993236:2009-07-31T06:33:56.990+0000:Closing 2.0m1 tickets"
0,CAMEL-1236,Improvement,Major,2.0.0,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Claus Ibsen,0,0,2009-01-08 08:27:57+00:00,2009-07-31 06:33:56+00:00,"Would be nice to support the file language to set dynamic patterns for the starting folder/file to consume.


See nabble:
http://www.nabble.com/Mega-mega-%28VFS%29-file-handler-to21346374s22882.html","davsclaus:1233911643:2009-02-06T17:14:03.533+0000:1233911643:2009-02-06T17:14:03.533+0000:Introduced fileExpression for setting dynamic filename.
davsclaus:1248993236:2009-07-31T06:33:56.971+0000:1248993236:2009-07-31T06:33:56.971+0000:Closing 2.0m1 tickets"
0,CAMEL-1235,Improvement,Minor,1.5.0,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Unassigned,Claus Ibsen,0,0,2009-01-08 05:38:04+00:00,2009-07-31 06:33:56+00:00,"The TraceFormatter fixes the breadcrum to 65 chars. If you output the exchange id and its based on the computer name it can be long, and thus cut important parts such as the destination.


Allow it to be wider and add option to configure the length or let it be variable.


breadcrumLength = 65. Setting it to 0 will let it be flexible. Maybe bump the 65 to 80 to let it be bigger from the start.",davsclaus:1248993236:2009-07-31T06:33:56.952+0000:1248993236:2009-07-31T06:33:56.952+0000:Closing 2.0m1 tickets
0,CAMEL-1234,New Feature,Major,1.5.0,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Claus Ibsen,Claus Ibsen,0,0,2009-01-07 16:41:17+00:00,2009-07-31 06:33:56+00:00,"We should provide a out-of-the-box solution to allow end users to do some custom processing before DLC is attempting a redelivery on a given endpoint. The custom processing should only be executed once per redelivery.


Using the interceptor solution on the DLC wiki page will kick in for the remainder of the routing for redelivered exchanges, forcing end users to keep track that they only modify the exchange once per redelivery.


The custom processing could be a detour route path","davsclaus:1231317728:2009-01-07T16:42:08.186+0000:1231317728:2009-01-07T16:42:08.186+0000:See nabble
http://www.nabble.com/Two-questions%3A-Stopping-Camel-and-intercept-before-retry-to21323127s22882.html

davsclaus:1231380704:2009-01-08T10:11:44.352+0000:1231380704:2009-01-08T10:11:44.352+0000:This needs to be a new feature.

* onException is a failure processor and is invoked instead of doing redelivery. So you can alter routes in case a given exception is thrown
* intercept() kinda worked, but intercept doesn't sit between each and every node in the route graph.

Best option is to build in into the DeadLetterChannel as its the orchestrator of doing redelivery.
davsclaus:1231381567:2009-01-08T10:26:07.063+0000:1231381567:2009-01-08T10:26:07.063+0000:I think we need to introduce a new DSL for this to seperate it from onException and so it can be used without the need for onException

Something like this:
{code}
onRedeliver().to(""bean:whenWeRedeliver"").to(""log:myLogBeforeRedeliver"");
{code}

We can also add the predicate and even the thrown exception type to narrow down when its to be exectued - damm this is advanced

{code}
onRedeliver(IOException.class).to(""bean:whenWeRedeliver"").to(""log:myLogBeforeRedeliver"");
{code}

{code}
onRedeliver().when(header(""goldcustomer"")).to(""bean:redeliverGoldCustomer"");
{code}

But I guess this stuff might be a bit to advanced and overkill, the general use case is probably in some cases to be able to do a little custom processing before we attempt again.

It could also support scopes
- global
- per route

As we do with onException

Then you can have different behavior in different routes.
davsclaus:1231407093:2009-01-08T17:31:33.693+0000:1231407093:2009-01-08T17:31:33.693+0000:Ah the above requires a bit of code as DLC needs to have a strategy to pick the correct onRedelivery as well as it does for onException.

And it can get messy if during redeliver you have a complex route and it also throws an exception. What should now happens?

So I am gonna make a simpler solution where you can declare on onRedelivery Processor on the DLC that it invokes before redeliery. Then you can do a bit of custom alternation of the exchange before its resend. This covers most use-cases.

If the above is requested by end users we can take another look later.
davsclaus:1231415281:2009-01-08T19:48:01.755+0000:1231415281:2009-01-08T19:48:01.755+0000:Updated wiki page for Dead Letter Channel with doc how to use it and a sample

The Spring DSL sample is about the same to set the onRedelivery option to ref a Processor.
davsclaus:1248993236:2009-07-31T06:33:56.906+0000:1248993236:2009-07-31T06:33:56.906+0000:Closing 2.0m1 tickets"
0,CAMEL-1233,Bug,Critical,1.5.0,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Claus Ibsen,Claus Ibsen,0,0,2009-01-07 13:26:51+00:00,2009-07-31 06:33:56+00:00,"When exchanges is processed from pipeline they result is copyed as input to the next exchange. However during this copy Camel could potentially change the MEP to InOut. It should respect the original MEP.


The flaw is in ExchangeHelper#copyResults


Fixing this also forces end users to use the correct send/request method on ProducerTemplate. Now Camel will keep the MEP.
So if you are using send then its inOnly and then you the there is no result. Use request for InOut MEP's.


This breaks a few of our own unit testing that was using the wrong method.","davsclaus:1231306035:2009-01-07T13:27:15.107+0000:1231306035:2009-01-07T13:27:15.107+0000:I guess we should get it into 1.x as well?
davsclaus:1231313344:2009-01-07T15:29:04.424+0000:1231313344:2009-01-07T15:29:04.424+0000:The patch with the fix plus a few unit tests than should send the correct MEP when starting the route
davsclaus:1231315335:2009-01-07T16:02:15.304+0000:1231315335:2009-01-07T16:02:15.304+0000:Fixed in trunk

Sending        camel-core/src/main/java/org/apache/camel/util/ExchangeHelper.java
Sending        camel-core/src/test/java/org/apache/camel/processor/MultiCastAggregatorTest.java
Adding         camel-core/src/test/java/org/apache/camel/processor/PipelineMEPTest.java
Sending        camel-core/src/test/java/org/apache/camel/processor/PipelineTest.java
Sending        camel-core/src/test/java/org/apache/camel/processor/SplitterTest.java
Adding         camel-core/src/test/java/org/apache/camel/processor/onexception/InterceptAlterMessageBeforeRedeliveryTest.java
Transmitting file data ......
Committed revision 732378.
davsclaus:1231317997:2009-01-07T16:46:37.152+0000:1231317997:2009-01-07T16:46:37.152+0000:1.x branch: Committed revision 732393.
davsclaus:1248993236:2009-07-31T06:33:56.884+0000:1248993236:2009-07-31T06:33:56.884+0000:Closing 2.0m1 tickets"
0,CAMEL-1232,New Feature,Major,None,None,"
None
",Closed,Fixed,"1.6.0, 2.0-M1",Unassigned,Claus Ibsen,0,0,2009-01-07 13:11:18+00:00,2009-07-31 06:33:56+00:00,"Would be nice with a freemarker component for doing templating with freemarker.


Basically a copy of camel-velocity


However we must make sure Freemarker license is compliant with Apache
http://freemarker.sourceforge.net/docs/app_license.html
and its mentioned on the frontpage that its BSD style license
http://freemarker.sourceforge.net/index.html


Overview of licenses for apache
http://www.apache.org/legal/3party.html","davsclaus:1234242151:2009-02-10T13:02:31.498+0000:1234242151:2009-02-10T13:02:31.498+0000:I added Freemaker recently.
davsclaus:1248993236:2009-07-31T06:33:56.866+0000:1248993236:2009-07-31T06:33:56.866+0000:Closing 2.0m1 tickets"
0,CAMEL-1231,Test,Major,None,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Willem Jiang,Willem Jiang,0,0,2009-01-07 06:37:41+00:00,2009-07-31 06:33:56+00:00,"I am tired to test the camel-osgi stuff in an OSGI platform (it will take me more than half an hour the set up test environment), since spring-osgi provides a bunch of mock classes ,  I'd like to add some unit tests in camel-osgi module by leveraging the spring-osgi mock classes.",davsclaus:1248993236:2009-07-31T06:33:56.154+0000:1248993236:2009-07-31T06:33:56.154+0000:Closing 2.0m1 tickets
0,CAMEL-1230,Bug,Major,None,None,"
None
",Closed,Fixed,"1.6.0, 2.0-M1",Jonathan Anstey,Jonathan Anstey,0,0,2009-01-06 18:22:02+00:00,2009-07-31 06:33:56+00:00,"I'm getting this when running projects generated from the 1.x/2.x camel-archetype-activemq


Caused by: java.lang.ClassNotFoundException: org.apache.activemq.camel.component.ActiveMQComponent


Looking into this now...","janstey:1231237525:2009-01-06T18:25:25.206+0000:1231237525:2009-01-06T18:25:25.206+0000:Ah, there's an easy fix. The ActiveMQComponent moved out of activemq-core in version 5.2.0. I need to just add a dependency on activemq-camel and all is well. This is not a problem for our current release because 1.5.0 depended on ActiveMQ 5.1.0.
davsclaus:1231237610:2009-01-06T18:26:50.419+0000:1231237610:2009-01-06T18:26:50.419+0000:Yeah jon I was about to suggest this. 
janstey:1231238041:2009-01-06T18:34:01.134+0000:1231238041:2009-01-06T18:34:01.134+0000:Yeah, I remembered the component move soon after creating this JIRA... a bit too quick on the JIRA trigger finger I guess ;) The simple fix has been merged to 1.x/2.x now.
davsclaus:1248993236:2009-07-31T06:33:56.119+0000:1248993236:2009-07-31T06:33:56.119+0000:Closing 2.0m1 tickets"
0,CAMEL-1229,Improvement,Major,None,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Claus Ibsen,0,0,2009-01-06 07:10:37+00:00,2009-07-31 06:33:56+00:00,"Currently you can kinda do it in Java DSL (I dont think its possible in Spring DSL)



from(""foo"").from(""bar"").to(""log:hello"")




But we should be able to do it as



from(""foo"", ""bar"").to(""log:hello"")




Some end-users is requesting it, and he is using Spring DSL.


I created this ticket to not forget about it","davsclaus:1234932507:2009-02-18T12:48:27.958+0000:1234932507:2009-02-18T12:48:27.958+0000:Committed revision 745501.
davsclaus:1248993236:2009-07-31T06:33:56.082+0000:1248993236:2009-07-31T06:33:56.082+0000:Closing 2.0m1 tickets"
0,CAMEL-1228,Sub-task,Major,None,None,"
None
",Closed,Fixed,"1.6.0, 2.0-M1",Willem Jiang,Willem Jiang,0,0,2009-01-06 06:30:43+00:00,2009-07-31 06:33:56+00:00,"To make sure the Class.forName() can get what it wants
Also need to support to set the bundle activator .",davsclaus:1248993236:2009-07-31T06:33:56.021+0000:1248993236:2009-07-31T06:33:56.021+0000:Closing 2.0m1 tickets
0,CAMEL-1227,Test,Minor,"1.4.0, 1.5.0","1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Willem Jiang,Willem Jiang,0,0,2009-01-06 01:03:31+00:00,2009-07-31 06:33:55+00:00,Current  camel-itest-spring2.0 module has the  spring 2.x modules dependencies which are introduced by activemq-camel.,davsclaus:1248993235:2009-07-31T06:33:55.988+0000:1248993235:2009-07-31T06:33:55.988+0000:Closing 2.0m1 tickets
0,CAMEL-1226,Improvement,Minor,None,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Atle Prange,1,0,2009-01-05 14:56:57+00:00,2009-06-16 03:11:51+00:00,"Often one ends up with dsl expressions that build strings like:



 from(""direct:start"").to(""ldap:localhost:"" + port + ""?base="" + query);




Would in not be better to write



from(""direct:start"").to(""ldps:localhost:{1}?base={2}"", port, query);




, where ""

{1}"" means ""the first argument in the string varargs following. ( ""{1}

"" could of course be replaced by some expression that you like the format of)


To implementent this one could overload the from() and to() methods to accept a vararg array of Strings following the uri argument, and interpolate the uri with the varargs...","davsclaus:1231192375:2009-01-06T05:52:55.593+0000:1231192375:2009-01-06T05:52:55.593+0000:I think the builder for *to* already have varargs for a pipeline with N destinations. 
{code}
from(""direct:start"").to(""log:foo"", ""bean:validate"", ""bean:process"", ""mail:xxxx"")
{code}

So it can't really be done without adding some rules such as if the first parameter is a string and it has {1} placeholders then these remaining parameters are for these placeholders.
Or something like that. 

Any ideas?

But the idea is very cool and something I would like to have as well. Making the route much easier to read as well. I kinda miss Groovy and it's $ support for Strings. Damm Java starts to feel ""old""


davsclaus:1231192409:2009-01-06T05:53:29.196+0000:1231192409:2009-01-06T05:53:29.196+0000:And besides we might wanna thing if we can do something for this as well in the Spring DSL
prange:1231204025:2009-01-06T09:07:05.534+0000:1231204025:2009-01-06T09:07:05.534+0000:i guess the ugly way would be to define a new method that takes the 
string and vararg list that interpolates the string with the arguments. 
Suggestions for method names: uri(String templates, Objec ... values), 
interpolate(...), buildUri(...))

{code}
from(""direct:start"").to( intepolate( ""ldps:localhost:{1}?base={2}"", port, query) );
{code}





davsclaus:1231205905:2009-01-06T09:38:25.026+0000:1231205905:2009-01-06T09:38:25.026+0000:I anticipate you are thinking of using java.text.MessageFormat since the placeholders is what it's using.

Not a bad idea with the builder method. I dont think many end users is familiar with the intepolate term, so I kinda like:
- toUri
- buildUri
- formatUri
Or what is a good name.

For Spring DSL end users should use <endpoint id=""foo"" uri=""xxx""/> where you can use spring property placeholders
And then use ref for this endpoint. <to ref=""foo""/>
jstrachan:1231212914:2009-01-06T11:35:14.870+0000:1231212914:2009-01-06T11:35:14.870+0000:The spring property place holders works already AFAIK as you say

{code}
<endpoint id=""foo"" uri=""ldps:localhost:${port}?base=${query}""/>
{code}



jstrachan:1231213719:2009-01-06T11:48:39.911+0000:1231213719:2009-01-06T11:48:39.911+0000:BTW String.format() is part of the JDK now. So with a static import code would look like this...

{code}
from(""direct:start"").to( format( ""ldps:localhost:{1}?base={2}"", port, query) );
{code}

The great thing about this approach is you can use the format() method for any parameter that takes a string. It also works with varargs.

{code}
from(""direct:start"").
  to( format( ""ldps:localhost:{1}?base={2}"", port, query).
       format(""jms:{1}"", somequeue) );
{code}


jstrachan:1231213864:2009-01-06T11:51:04.981+0000:1231213864:2009-01-06T11:51:04.981+0000:If we do add a helper method - we should probably name it in line with the use of the static import.

so

{code}
from(""direct:start"").
  to( format( ""ldps:localhost:{1}?base={2}"", port, query) );
{code}

or

{code}
from(""direct:start"").
  toFormat( ""ldps:localhost:{1}?base={2}"", port, query);
{code}




prange:1231214045:2009-01-06T11:54:05.547+0000:1231214045:2009-01-06T11:54:05.547+0000:I have seen so many different ways of representing the placeholder, but 
why not use a java API standard.

Other examples are EL: #{0}, #{1}; StringFormat: %s, %s...





jstrachan:1231215466:2009-01-06T12:17:46.964+0000:1231215506:2009-01-06T12:18:26.380+0000:I'm thinking that we'd add something like this

{code}
public Builder toFormat(String format, Object... args) {
  return to(String.format(format, args));
}
{code}

Then use the same encoding conventions as the [String.format() method|http://java.sun.com/j2se/1.5.0/docs/api/java/lang/String.html#format(java.lang.String,%20java.lang.Object...)] using the [JDK standard format syntax|http://java.sun.com/j2se/1.5.0/docs/api/java/util/Formatter.html#syntax]
prange:1231228085:2009-01-06T15:48:05.459+0000:1231228085:2009-01-06T15:48:05.459+0000:That seems to do the trick, with the plus that it is already part of the 
JDK, and one could use some String.format static import elsewhere and 
still keep the same conventions.
If i could choose i would pick the method name ""format()"" instead of 
""toFormat()"", it seems more elegant to me....




jstrachan:1231228740:2009-01-06T15:59:00.066+0000:1231228740:2009-01-06T15:59:00.066+0000:the issue with 'format' is it reads like you are formatting the message - rather than formatting the URI string used to send a message to somewhere. So I think something like toFormat() or toUriFormat() is cleaner
prange:1231297625:2009-01-07T11:07:05.483+0000:1231297625:2009-01-07T11:07:05.483+0000:I agree with you.

Maybe buildUri() would be appropriate?




davsclaus:1231298236:2009-01-07T11:17:16.027+0000:1231298236:2009-01-07T11:17:16.027+0000:+1 to buildUri
davsclaus:1236903390:2009-03-13T08:16:30.072+0000:1236903390:2009-03-13T08:16:30.072+0000:I decided for a short notation - *toF* and *fromF*

{code}
                from(""direct:start"").toF(""file://%s?fileName=%s"", path, name);

                fromF(""file://%s?include=%s"", path, pattern).toF(""mock:%s"", result);
{code}
davsclaus:1236904065:2009-03-13T08:27:45.578+0000:1236904065:2009-03-13T08:27:45.578+0000:New Revision: 753155
prange:1236905858:2009-03-13T08:57:38.363+0000:1236905858:2009-03-13T08:57:38.363+0000:Good work!"
0,CAMEL-1225,Bug,Minor,1.5.0,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Jonathan Anstey,Claus Ibsen,0,0,2009-01-05 10:11:48+00:00,2009-07-31 06:33:55+00:00,"See nabble
http://www.nabble.com/Seda-StaticMethodTypeConverter-TransformerException-td21287333s22882.html


This type converter is needed by JBI containers so we should make sure the fix is correct.","janstey:1231139492:2009-01-05T15:11:32.632+0000:1231139492:2009-01-05T15:11:32.632+0000:Both converters were doing exactly the same thing so there was no harm in removing one.
davsclaus:1248993235:2009-07-31T06:33:55.967+0000:1248993235:2009-07-31T06:33:55.967+0000:Closing 2.0m1 tickets"
0,CAMEL-1224,Task,Major,None,,"
None
",Closed,Not A Problem,None,James Strachan,Claus Ibsen,0,0,2009-01-05 08:12:00+00:00,2011-04-24 10:01:39+00:00,"This one is for James


camel-spring class BeanDefinitionParser has some TODO that awaits bugs to be fixed in Spring. They are fixed in Spring 2.5.3.


So if for instance Camel 2.0 requires Spring 2.5.6 or later then we can safely fix this code as well.
But we could also consider staying Spring 2.0.x combatible and fix this in a later Camel release.


Any thoughts?


    // TODO the following code is copied from AbstractSimpleBeanDefinitionParser
    // it can be removed if ever the doParse() method is not final!
    // or the Spring bug http://jira.springframework.org/browse/SPR-4599 is resolved","jstrachan:1231139111:2009-01-05T15:05:11.642+0000:1231139111:2009-01-05T15:05:11.642+0000:Loads of folks seem to have 2.0.x or 2.5.x of spring - so I'd be nervous zapping that code for a while.

Maybe at some point we can depend on (say) 3.0 of spring in which case we can zap the code?

I think we should maybe push this issue back until some point when we can depend on a fairly high version of spring as being the base - e.g. whenever we demand 3.0 or something? Or maybe push back a few more versions or something?

Its really a non essential change - more a case of retiring custom patches
davsclaus:1303610499:2011-04-24T10:01:39.202+0000:1303610499:2011-04-24T10:01:39.202+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-1223,Sub-task,Major,"1.4.0, 1.5.0",None,"
None
",Closed,Fixed,"1.6.0, 2.0-M1",Willem Jiang,Willem Jiang,0,1,2009-01-05 00:36:03+00:00,2009-07-31 06:33:55+00:00,No Desc,"njiang:1231197806:2009-01-06T07:23:26.465+0000:1231197806:2009-01-06T07:23:26.465+0000:Current FactoryFinder will go through the class path to search the ""META-INF"", but in the OSGI environment, we need to use other API to do this meta-info searching.
We can provides two kinds of FactoryFinder  from camel. One is working for the more deployment, the other just for the OSGI.
Since we could tell if the camel context is for the OSGI environment, the camel context can delegate the creation of the FactoryFinder.

I just checked  the FactoryFinder's construction caller code, they all can access the camel context.
davsclaus:1248993235:2009-07-31T06:33:55.925+0000:1248993235:2009-07-31T06:33:55.925+0000:Closing 2.0m1 tickets"
0,CAMEL-1222,Improvement,Major,None,2.0-M2,"
None
",Closed,Won't Fix,2.0-M2,Unassigned,Claus Ibsen,0,0,2009-01-04 11:46:50+00:00,2009-11-21 11:57:55+00:00,"This ticket is created to not forget about this and get a discussion going.


When Camel handles redeliver using DLC for processors (org.apache.camel.Processor) and bean invocations (only in the special case where it operates directly on the Exchange = Exchange as parameter), then any changes that was done before is also present at the next redelivery attempt.
So for instance changing the body value, or adding a header etc. will cause these changes on the Exchange.


We should document this - especially for org.apache.camel.Processor. bean component end users is encouraged to use bean binding, that hasn't this issue (except for Headers, Properties).",davsclaus:1258775875:2009-11-21T11:57:55.160+0000:1258775875:2009-11-21T11:57:55.160+0000:Closing all 2.0M2 tickets
0,CAMEL-1221,Bug,Major,1.5.0,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Willem Jiang,Michael Mansell,0,0,2009-01-03 22:58:45+00:00,2009-07-31 06:33:55+00:00,"The camel-osgi component only supports loading Components via the OSGi bundles in the 1.5.0 release code. It looks like someone started to add more things that can be automatically loaded on the trunk, because there was a refactor to allow TypeConverters to be added via OSGi bundles. 


Definitely, adding Languages is still missing (both in 1.5.0 and on the trunk). Perhaps there are more as well, as I'm not up on all the things that Camel loads using the same mechanism.


I've got Languages working by patching my copy of 1.5.0 (basically by creating my own version of the LanguageResolver based on the OSGiComponentResolver), but as the refactor seems to be taking the code in a different direction, I'm not going to push a patch yet.","njiang:1231003650:2009-01-04T01:27:30.633+0000:1231003650:2009-01-04T01:27:30.633+0000:Hi Michael,

Thanks for pointing  the language resolver issue out. I will take care of it.

Willem

njiang:1231457070:2009-01-09T07:24:30.811+0000:1231457070:2009-01-09T07:24:30.811+0000:Hi Michael,

Could you check out the latest Camel2.0 snapshot or camel 1.5.1 snapshot  to verify my fixing ?

Willem
davsclaus:1248993235:2009-07-31T06:33:55.891+0000:1248993235:2009-07-31T06:33:55.891+0000:Closing 2.0m1 tickets"
0,CAMEL-1220,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.0-M1,Jonathan Anstey,Claus Ibsen,0,0,2009-01-03 17:58:54+00:00,2009-07-31 06:33:55+00:00,No Desc,"janstey:1231157187:2009-01-05T20:06:27.439+0000:1231157187:2009-01-05T20:06:27.439+0000:Sending        camel-spring/src/main/java/org/apache/camel/spring/CamelContextFactoryBean.java
Sending        camel-spring/src/main/java/org/apache/camel/spring/handler/CamelNamespaceHandler.java
Sending        camel-spring/src/test/resources/org/apache/camel/spring/processor/onexception/RedeliveryPolicyRefTest.xml
Sending        camel-spring/src/test/resources/org/apache/camel/spring/processor/onexception/deadLetterChannelHandledExampleTest.xml
Sending        camel-spring/src/test/resources/org/apache/camel/spring/processor/onexception/exceptionBuilderWithRetryLoggingLevelSet.xml
Transmitting file data .....
Committed revision 731675.

janstey:1231157222:2009-01-05T20:07:02.643+0000:1231157222:2009-01-05T20:07:02.643+0000:TODO need to update the wiki
janstey:1231233774:2009-01-06T17:22:54.176+0000:1231233774:2009-01-06T17:22:54.176+0000:Updated wiki here http://cwiki.apache.org/confluence/display/CAMEL/Exception+Clause

Also added a new test case demonstrating that its still possible to do in route exception clauses as well (see revision 731998).
davsclaus:1248993235:2009-07-31T06:33:55.834+0000:1248993235:2009-07-31T06:33:55.834+0000:Closing 2.0m1 tickets"
0,CAMEL-1219,Improvement,Major,None,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Willem Jiang,Willem Jiang,0,0,2009-01-03 14:05:01+00:00,2009-07-31 06:33:55+00:00,"Here is the mail thread which discusses about it .
http://www.nabble.com/CAMEL-2.0-SNAPSHOT-sources--jars-are-not-in-maven-repo-tt21215163s22882.html","njiang:1231135034:2009-01-05T13:57:14.035+0000:1231135034:2009-01-05T13:57:14.035+0000:Hi James,

Could you update the deploy script to call the maven deploy with  deploy profile ?

Thanks,

Willem

jstrachan:1231151252:2009-01-05T18:27:32.320+0000:1231151252:2009-01-05T18:27:32.320+0000:I've fixed the nightly deploy script to also pass -Pdeploy

Could you check it did what you thought it should please? :)
jstrachan:1231151305:2009-01-05T18:28:25.865+0000:1231151305:2009-01-05T18:28:25.865+0000:the last snapshot we built created the sources.jar and javadoc.jar so AFAIK this is fixed?
davsclaus:1248993235:2009-07-31T06:33:55.113+0000:1248993235:2009-07-31T06:33:55.113+0000:Closing 2.0m1 tickets"
0,CAMEL-1218,Sub-task,Minor,1.5.0,,"
None
",Closed,Won't Fix,None,Claus Ibsen,Claus Ibsen,0,0,2009-01-03 10:14:58+00:00,2010-02-07 09:54:19+00:00,"The ErrorHandlerBuilder is global per route context so the DSL should only allow you to set it at highest level to avoid confusing end users.


So this should not be allowed:



                from(""direct:start"")
                    .onException(MyTechnicalException.class).handled(true).end()
                    .to(""bean:doSomething"");




But you need to do it as:



                onException(MyTechnicalException.class).handled(true);

                from(""direct:start"")
                    .to(""bean:doSomething"");","davsclaus:1230950731:2009-01-03T10:45:31.498+0000:1230950731:2009-01-03T10:45:31.498+0000:The Spring DSL is a bit trickier to get fixed as onException is a processortype itself to allow routing. And the XSD is autogenerated based on JAXB annotations.

Jonathan is good at this, so I link it to the spring DSL ticket we have
janstey:1231153101:2009-01-05T18:58:21.529+0000:1231153101:2009-01-05T18:58:21.529+0000:Yeah, I can take a look into this. Not sure how to do this off the not of my head though... well, as a last resort we can probably just not process that part of a route and just log a warning to use the global version.
janstey:1231218608:2009-01-06T13:10:08.887+0000:1231218608:2009-01-06T13:10:08.887+0000:Ah... I think I got confused here... just read the long thread on camel-users. We actually *do* want to support onException in a route and at a global level... so ignore my previous comment :)
janstey:1231233699:2009-01-06T17:21:39.081+0000:1231233699:2009-01-06T17:21:39.081+0000:FYI I've added some notes on how to do the 2 scopes of exception clauses in Spring DSL here http://cwiki.apache.org/confluence/display/CAMEL/Exception+Clause"
0,CAMEL-1217,Bug,Major,"1.3.0, 1.4.0, 1.5.0","1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Willem Jiang,Willem Jiang,0,0,2009-01-03 08:18:59+00:00,2009-07-31 06:33:55+00:00,"Current Jetty component just set the 'httpClient.' parameter to a useless Jetty http client, and using the apache common http client indeed.
We need to pass the parameters into the apache common http client and remove the useless Jetty http client.","njiang:1231024683:2009-01-04T07:18:03.391+0000:1231024683:2009-01-04T07:18:03.391+0000:Also updated the 1.5.1 release note for it.
davsclaus:1248993235:2009-07-31T06:33:55.083+0000:1248993235:2009-07-31T06:33:55.083+0000:Closing 2.0m1 tickets"
0,CAMEL-1216,Improvement,Major,1.5.0,2.0-M2,"
None
",Closed,Duplicate,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2009-01-03 08:07:22+00:00,2009-11-21 11:57:55+00:00,"See nabble:
http://www.nabble.com/Please-keep-this-unintended-feature-in-camel-and-other-requests-td21025627s22882.html","davsclaus:1234236530:2009-02-10T11:28:50.554+0000:1234236530:2009-02-10T11:28:50.554+0000:See also
http://www.nabble.com/Can-DeadLetterChannel-be-used-in-Transaction--td19385266s22882.html#a19385266
davsclaus:1234236617:2009-02-10T11:30:17.507+0000:1234236617:2009-02-10T11:30:17.507+0000:We should review and revisit the transaction stuff in Camel.

The UnitOfWork should have a more central role in this matter.
davsclaus:1238983048:2009-04-06T09:57:28.594+0000:1238983048:2009-04-06T09:57:28.594+0000:CAMEL-1511 added the *onException* support for TransactionErrorHandler
davsclaus:1258775875:2009-11-21T11:57:55.132+0000:1258775875:2009-11-21T11:57:55.132+0000:Closing all 2.0M2 tickets"
0,CAMEL-1215,Improvement,Minor,None,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Willem Jiang,Willem Jiang,0,0,2009-01-03 06:22:14+00:00,2009-07-31 06:33:55+00:00,"DummyTrustManager and DummySSLSocketFactory is for the unit test, so we need to move it into src/test/java directory.
So we can avoid the class not found error in OSGI environment like this.



Could not find class 'org/apache/camel/component/mail/security/DummyTrustManager.class' in any classloaders: [BundleDelegatingClassLoader for [camel-mail-osgi (camel-mail-osgi)], 102.0, 
BundleDelegatingClassLoader for [camel-mail-osgi (camel-mail-osgi)], BundleDelegatingClassLoader for [camel-mail-osgi (camel-mail-osgi)]]
Could not find class 'org/apache/camel/component/mail/security/DummySSLSocketFactory.class' in any classloaders: [BundleDelegatingClassLoader for [camel-mail-osgi (camel-mail-osgi)], 102.0, 
BundleDelegatingClassLoader for [camel-mail-osgi (camel-mail-osgi)], BundleDelegatingClassLoader for [camel-mail-osgi (camel-mail-osgi)]]
 



If the other module wants to extends camel-mail, it should also include the camel-mail-test.jar for unit testing.","njiang:1230935874:2009-01-03T06:37:54.338+0000:1230935874:2009-01-03T06:37:54.338+0000:trunk
http://svn.apache.org/viewvc?rev=730923&view=rev
camel-1.x
http://svn.apache.org/viewvc?rev=730925&view=rev
davsclaus:1230961169:2009-01-03T13:39:29.548+0000:1230961169:2009-01-03T13:39:29.548+0000:Willem maybe the problem was that we forgot to add the security subpackage in the pom.xml. Unless .* adds all subpackages.

{code}
<camel.osgi.export.pkg>org.apache.camel.component.mail.*</camel.osgi.export.pkg>
{code}
davsclaus:1230961262:2009-01-03T13:41:02.136+0000:1230961262:2009-01-03T13:41:02.136+0000:And if so then the Dummy classes could stay in the camel-mail.jar.

If still a problem then we need to write a little bit on the camel mail wiki about this change.
njiang:1230962033:2009-01-03T13:53:53.453+0000:1230962033:2009-01-03T13:53:53.453+0000:Yes, it relates to the export package.
Since the Dummy classes are for unit testing,  I don't think they should be part of camel-mail.jar or be exported in a OSIG bundle.
In this way we could avoid the unsafe invocation of the Dummy classes.

I will update wiki page for it.
davsclaus:1248993235:2009-07-31T06:33:55.023+0000:1248993235:2009-07-31T06:33:55.023+0000:Closing 2.0m1 tickets"
0,CAMEL-1214,Improvement,Major,None,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Willem Jiang,Willem Jiang,0,0,2009-01-03 02:27:57+00:00,2009-07-31 06:33:54+00:00,"Since HttpClient provides the authentication[1] support , it should be easy to support it in camel-http component.
Here a mail thread[2] which is discussing it.


[1] http://hc.apache.org/httpclient-3.x/authentication.html
[2] http://www.nabble.com/Does-HTTP-Component-support-basic-authentication--tt21259555s22882.html","njiang:1230926958:2009-01-03T04:09:18.830+0000:1230926958:2009-01-03T04:09:18.830+0000:I just did a quick fix for the basic authentication of camel-http.
Now you can use ""username"" and ""password"" as the parameter name to set the basic authentication for camel-http producer.

camel-http also provides a  plugable strategy (HttpClientConfigurer) for configuring the HttpClient, you can create your own HttpClientConfigurer to set the authentication for the httpclient.

TODO update the wiki page of it.
davsclaus:1230939431:2009-01-03T07:37:11.884+0000:1230939431:2009-01-03T07:37:11.884+0000:Willem. If you add setters for username/password then you can configure it from spring XML as well. And end users can have username and password in .properties files and use the spring property $ syntax.


davsclaus:1230939680:2009-01-03T07:41:20.237+0000:1230939680:2009-01-03T07:41:20.237+0000:Ah you added username/password as options to the endpoint. Good.


davsclaus:1248993234:2009-07-31T06:33:54.979+0000:1248993234:2009-07-31T06:33:54.979+0000:Closing 2.0m1 tickets"
0,CAMEL-1213,Bug,Major,1.5.0,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Claus Ibsen,Claus Ibsen,0,0,2009-01-02 17:13:09+00:00,2009-07-31 06:33:54+00:00,"The code in org.apache.camel.component.jms.copyFrom looks odd


I think the ! should be removed


BEFORE



        if (!copyMessageId) {
            setMessageId(that.getMessageId());
        }




AFTER



        if (copyMessageId) {
            setMessageId(that.getMessageId());
        }




I will add a unit test (JmsToFileMessageIdTest) based on end user having some trouble with it","davsclaus:1230889078:2009-01-02T17:37:58.068+0000:1230889078:2009-01-02T17:37:58.068+0000:Fellow riders, please review the patch.
janstey:1230889406:2009-01-02T17:43:26.203+0000:1230889406:2009-01-02T17:43:26.203+0000:Claus,

The fix makes sense to me. I think the ! was just a typo when JmsMessage was originally created.
jstrachan:1231152056:2009-01-05T18:40:56.956+0000:1231152056:2009-01-05T18:40:56.956+0000:agreed! :)
jstrachan:1231152064:2009-01-05T18:41:04.988+0000:1231152064:2009-01-05T18:41:04.988+0000:bad James! :)
davsclaus:1231191966:2009-01-06T05:46:06.324+0000:1231191966:2009-01-06T05:46:06.324+0000:trunk: r731836
1.x: r731839
davsclaus:1248993234:2009-07-31T06:33:54.946+0000:1248993234:2009-07-31T06:33:54.946+0000:Closing 2.0m1 tickets"
0,CAMEL-1212,Improvement,Major,1.5.0,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Jason Royals,0,0,2009-01-02 00:06:11+00:00,2009-11-21 11:57:55+00:00,"We have a scenario where we need to perform the following style of integration:



HTTP -> JMS -> HTTP




The final HTTP endpoint needs to receive the headers as they were in the original HTTP request.  However, I am finding that the HTTP headers that contain a hyphen (such as Content-Type, Content-Length etc) are being omitted when the messages go onto the queue.  


JmsBinding has two static methods to perform some basic header manipulation to ""encode"" and ""decode"" headers that are not valid Java identifiers.  However, the strategy employed does not handle hyphens or other illegal characters, only periods.  Secondly, as static methods they cannot be overridden by my own extension of JmsBinding.  And finally, JmsHeaderFilterStrategy has a static link back to these methods in JmsBinding so that makes it hard to replace.


To me, it would be more appropriate that HeaderFilterStrategy implementations should actually contain the code to



Advise if a header needs to be encoded/decoded, which it already does, but in addition;
Actually perform that encoding/decoding in it's own implementation-specific way



This affects 1.5.0 but it's also in the trunk like this.


I have a workaround which is a little messy but it works 


Thanks,
Jason","davsclaus:1236851473:2009-03-12T17:51:13.643+0000:1236851473:2009-03-12T17:51:13.643+0000:Good idea putting it on the roadmap for 2.0 as we have a few other tickets related to jms
davsclaus:1237530100:2009-03-20T14:21:40.009+0000:1237530100:2009-03-20T14:21:40.009+0000:Committed revision 756479.

See the new option ""jmsKeyFormatStrategy*.

However Camel will now also by default be able to transfer the hyphen char (eg so Content-Type) should be preserved.


davsclaus:1258775875:2009-11-21T11:57:55.103+0000:1258775875:2009-11-21T11:57:55.103+0000:Closing all 2.0M2 tickets"
0,CAMEL-1211,Improvement,Minor,"1.6.0, 2.0.0","1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Unassigned,Przemyslaw Budzik,0,0,2009-01-01 21:38:47+00:00,2011-04-24 10:00:39+00:00,"Now we have basic http auth. Quick shot is adding digest as it is supported by Restlet, but I have something more in mind. As I'm using token based auth and for me http auth is not suitable (pushing credentials back and forth all the time etc). How about a pattern where from one endpoint you can consume a ticket/token/sessionId and you can use it as a header to authenticate? As now the realm is to keep login and pass and it could be something like a bean that can validate the token. Of course that data would not be static so it is more about a callback (eg. getTokens()) than a static map/list. And finally as we have the uri we can resolve an ""operation"" and do authorization (so uri+method is the target). I mean in my project I have processor that does stuff like that and it would be cool to have all those things in one place in consumer (and provide only data and have skeletal logic under the hood).
Now the question is if my idea makes sense and if so what are your suggestions on how to implement that w/o reinventing the wheel (and not using ACEGI )


Btw,  Claus, William - logs about attaching/detaching restlets are at info level and it's kind of spamming if there are say 20 endpoints... Maybe it should be at debug?","davsclaus:1230860519:2009-01-02T09:41:59.503+0000:1230860519:2009-01-02T09:41:59.503+0000:Is the INFO logging not only happening at startup? Or do they log quite often at runtime as well? 

Choosing the right logging level is not as easy. Some wants all at DEBUG others sensible defaults at INFO etc.
pbudzik:1230862001:2009-01-02T10:06:41.390+0000:1230862001:2009-01-02T10:06:41.390+0000:Claus,

It is connected with a consumer's life-cycle so it doesn't  take place per request, but anyway if you have many routes with many endpoints and in tests you tend to start/stop Camel on setUp/tearDown it is quite verbose.  You're right it is not obvious that's why I was asking not claiming :)
davsclaus:1230863430:2009-01-02T10:30:30.358+0000:1230863430:2009-01-02T10:30:30.358+0000:Przemyslaw,

If you have a patch handy with the DEBUG then I am sure we will commit it quickly :)
davsclaus:1230882836:2009-01-02T15:53:56.701+0000:1230882836:2009-01-02T15:53:56.701+0000:Thanks for the INFO -> DEBUG patch. I have applied it to trunk and 1.x branch.
davsclaus:1303610439:2011-04-24T10:00:39.847+0000:1303610439:2011-04-24T10:00:39.847+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-1210,Bug,Major,None,None,"
None
",Closed,Fixed,2.0-M1,Jonathan Anstey,Jonathan Anstey,0,0,2008-12-31 16:36:49+00:00,2009-07-31 06:33:54+00:00,No Desc,"janstey:1230712748:2008-12-31T16:39:08.928+0000:1230712748:2008-12-31T16:39:08.928+0000:Sending        apache-camel/bundle/pom.xml
Sending        apache-camel/pom.xml
Sending        pom.xml
Transmitting file data ...
Committed revision 730412.

davsclaus:1248993234:2009-07-31T06:33:54.906+0000:1248993234:2009-07-31T06:33:54.906+0000:Closing 2.0m1 tickets"
0,CAMEL-1209,Improvement,Major,1.5.0,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Jonathan Anstey,Claus Ibsen,0,0,2008-12-31 09:27:29+00:00,2009-07-31 06:33:54+00:00,"See blog entry
http://www.andrejkoelewijn.com/wp/2008/12/30/using-google-talk-from-java-example/


There is a solution that works with plain java. Could be used to identify what needs to be fixed in Camel to get it working with Google chat as well.


Notice I haven't verified if it doesn't already work with google chat. Just created this ticket to not forget it.","janstey:1230717930:2008-12-31T18:05:30.537+0000:1230717930:2008-12-31T18:05:30.537+0000:This was a problem after-all... put a fix in revision 730436.

janstey:1230719486:2008-12-31T18:31:26.929+0000:1230719486:2008-12-31T18:31:26.929+0000:Updated the docs here http://cwiki.apache.org/confluence/display/CAMEL/XMPP and also tried to respond to Andrej's blog post... the blog entry seems to be locked for comments though.... oh well :) Closing this one.
andrejk:1230957882:2009-01-03T12:44:42.645+0000:1230957882:2009-01-03T12:44:42.645+0000:Thanks for reading my blog, logging the bug, and fixing it!
The problem i had was that i could receive gtalk messages, but not send. Messages would not show up, and no errors were displayed.

Not sure what's wrong with my blog, you should be able to comment.
janstey:1230977885:2009-01-03T18:18:05.113+0000:1230977885:2009-01-03T18:18:05.113+0000:Yeah, I was getting the same behavior as you and it was a pretty easy fix. Thanks for finding the bug! By the way, any time you have issues with Camel, feel free to create a JIRA or post a message to the user list - we're usually very responsive.

Not sure whats wrong with my comments to your blog either... I tried twice... Maybe I need to use Internet Explorer or something stupid like that :)
davsclaus:1248993234:2009-07-31T06:33:54.863+0000:1248993234:2009-07-31T06:33:54.863+0000:Closing 2.0m1 tickets"
0,CAMEL-1208,Bug,Critical,1.5.0,None,"
None
",Closed,Fixed,"1.6.0, 2.0-M1",Hadrian Zbarcea,Hadrian Zbarcea,0,0,2008-12-29 16:33:34+00:00,2009-07-31 06:33:54+00:00,"http://www.nabble.com/Fwd%3A-FW%3A--nexus-user--Bad-metadata-in-central-repo---nexus-to-the-rescue---td21152738s22882.html


This is a staging problem that could be fixed either manually (but there are a lot of metadata files in camel), or will be fixed automatically during the next release - 1.6 (which should come out shortly, still a few issues to resolve).


I'll am looking for a script that could fix all the files automatically, if not, we'll decide if to wait for the next release or bite the bullet and apply a manual fix.","hadrian:1231198585:2009-01-06T07:36:25.567+0000:1231198585:2009-01-06T07:36:25.567+0000:This should be fixed now.  I manually fixed all the maven-metadata.xml files in the m2-ibiblio-rsync-repository.  I will wait for the sync to take place and verify in the central maven repo before closing this.
hadrian:1231338329:2009-01-07T22:25:29.490+0000:1231338329:2009-01-07T22:25:29.490+0000:This is fixed and already synced at http://mirrors.ibiblio.org/pub/mirrors/maven2/org/apache/camel/.
Central maven repo should sync soon.
davsclaus:1248993234:2009-07-31T06:33:54.829+0000:1248993234:2009-07-31T06:33:54.829+0000:Closing 2.0m1 tickets"
0,CAMEL-1177,Sub-task,Major,None,None,"
None
",Closed,Fixed,"1.6.0, 2.0-M1",Jonathan Anstey,Jonathan Anstey,0,0,2008-12-10 15:02:25+00:00,2009-07-31 06:33:51+00:00,No Desc,davsclaus:1248993231:2009-07-31T06:33:51.312+0000:1248993231:2009-07-31T06:33:51.312+0000:Closing 2.0m1 tickets
0,CAMEL-1176,New Feature,Minor,None,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Unassigned,Ramon Buckland,0,0,2008-12-10 10:25:12+00:00,2009-11-21 11:57:55+00:00,"Add the ability to provide a user realm into jetty to configure authentication, by whatever means jetty provides.


See Jetty for details http://docs.codehaus.org/display/JETTY/How+to+Configure+Security+with+Embedded+Jetty","rbuckland:1229039854:2008-12-12T07:57:34.344+0000:1229039854:2008-12-12T07:57:34.344+0000:I have investigate what needs to be done and have the following notes.

For Jetty to support authentication, we need to provide (inject) the a UserRealm into the Server that is created.

For example: 

 {code}
// server is Jetty Server

HashUserRealm myrealm = new HashUserRealm(""MyRealm"",System.getProperty(""jetty.home"")+""/etc/realm.properties"");
server.setUserRealms(new UserRealm[]{myrealm});
{code}

It seems to me that we just need to make that in  
{code}
components/camel-jetty/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java
{code}

we make a change to 
{code}
 protected Server createServer() throws Exception {
  ..
 }
{code}

to 
(a) see if a ""UserRealm(s)"" has been supplied by the configuration.
(b) locate the relevant been via 
          CamelContextHelper.mandatoryLookup(getCamelContext(), ref, UserRealm.class);
(c) set the realm located into the server object as above.

The following is the UserRealm interface.
{code}
http://jetty.mortbay.org/jetty/jetty-6/apidocs/org/mortbay/jetty/security/UserRealm.html
{code}

Am I on the  right track ? (my questions ...)
- is using userRealmRef=myUserRealm the correct way to do this ? (or do I wait / hang off the potentially new bean:userRealm=myUserRealm
- With the camel-jetty component, is there ONE jetty server per exposed jetty:http://endpoint ? ,, is so .. I need to understand a little more how one userRealm gets mapped to one particular endpoint ONLY (by user choice)


davsclaus:1229336736:2008-12-15T18:25:36.675+0000:1229336736:2008-12-15T18:25:36.675+0000:Ramon, very nice. 

In Camel 2.0 we have the # support for URI notation. So you can just refer to any bean in the registry using #key as the value.
{code}
useRealm=#myUserReal
{code}

Yeah I think that there is one jetty server. 
huntc@internode.on.net:1241050807:2009-04-30T08:20:07.781+0000:1241050807:2009-04-30T08:20:07.781+0000:Hi Ramon,

Can you please look at [CAMEL-1570|https://issues.apache.org/activemq/browse/CAMEL-1570] as I think it'll solve this problem and much more.

Kind regards,
Christopher
davsclaus:1242344887:2009-05-15T07:48:07.290+0000:1242344887:2009-05-15T07:48:07.290+0000:Resolved by Chrstophers Patch
davsclaus:1258775875:2009-11-21T11:57:55.036+0000:1258775875:2009-11-21T11:57:55.036+0000:Closing all 2.0M2 tickets"
0,CAMEL-1175,New Feature,Minor,None,2.6.0,"
None
",Closed,Won't Fix,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2008-12-10 08:27:15+00:00,2011-04-24 09:57:04+00:00,"See nabble:
http://www.nabble.com/Expression-Language-td20916213s22882.html


End users needing to doe custom code such as adding their own bindings to the context.",davsclaus:1303610224:2011-04-24T09:57:04.838+0000:1303610224:2011-04-24T09:57:04.838+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-1174,Improvement,Minor,None,Future,"
None
",Resolved,Later,Future,Jonathan Anstey,Jonathan Anstey,0,1,2008-12-09 20:28:55+00:00,2012-07-06 07:59:27+00:00,No Desc,"janstey:1228826416:2008-12-09T20:40:16.694+0000:1228826416:2008-12-09T20:40:16.694+0000:So, something like this...

{code}
from(""foo"").to(""rss:file:a/file/path/rss.xml"");
{code}

I guess in order for this to work, the body would be the content of a post and other options would be set using message headers. For example,

{code}
Map map = new HashMap();
map.put(""Title"", ""Wicked cool post about Camel"");
map.put(""Author"", ""me"");

String body = ""Camel related content here."";
template.sendBodyAndHeaders(""rss:file:a/file/path/rss.xml"", body, map);
{code}
davsclaus:1235373685:2009-02-23T15:21:25.711+0000:1235373685:2009-02-23T15:21:25.711+0000:Does the Rome library have some objects for setting a RSS entry content. 

RssEntry entry = ...
entry.setTitle
entry.setTeaser
enty.setBody
...
janstey:1235374012:2009-02-23T15:26:52.516+0000:1235374012:2009-02-23T15:26:52.516+0000:I think so... let me check.
janstey:1235374152:2009-02-23T15:29:12.328+0000:1235374152:2009-02-23T15:29:12.328+0000:Yeah, ROME supports this no prob.
davsclaus:1235374365:2009-02-23T15:32:45.258+0000:1235374365:2009-02-23T15:32:45.258+0000:Great then just let the end user use the ROME api and seed that ROME object
davsclaus:1235374408:2009-02-23T15:33:28.119+0000:1235374408:2009-02-23T15:33:28.119+0000:But if the object is eg simple, and have simple setters we could support the map also, and use IntrospectionSupport to set the values from the map on the object.
davsclaus:1341532767:2012-07-06T07:59:27.054+0000:1341532767:2012-07-06T07:59:27.054+0000:Lets close old ticket that are not in demand."
0,CAMEL-1173,Task,Major,None,None,"
None
",Closed,Fixed,"1.5.0, 2.0-M1",Jonathan Anstey,Jonathan Anstey,0,0,2008-12-09 19:01:43+00:00,2009-03-23 08:40:31+00:00,"See http://www.eaipatterns.com/BroadcastAggregate.html


We should be able to do this in Camel already... just need to cook up an example/doco for it.","janstey:1228820827:2008-12-09T19:07:07.961+0000:1228820827:2008-12-09T19:07:07.961+0000:Adding         camel-core/src/test/java/org/apache/camel/processor/ScatterGatherTest.java
Transmitting file data .
Committed revision 724833.

This is my first stab at the pattern. Not completely happy with it at the moment... maybe we need to put better support into Camel somewhere for this kinda thing.
janstey:1233574746:2009-02-02T19:39:06.738+0000:1233574746:2009-02-02T19:39:06.738+0000:Put in an improved scatter-gather example in revision 740056. The problem with the first example was that it was not dynamic enough. Also added wiki docs here http://cwiki.apache.org/confluence/display/CAMEL/Scatter-Gather
janstey:1233574775:2009-02-02T19:39:35.637+0000:1233574775:2009-02-02T19:39:35.637+0000:This can be done in Camel 1.5/2.0
davsclaus:1234734716:2009-02-16T05:51:56.119+0000:1234734716:2009-02-16T05:51:56.119+0000:Closing all 1.5.0 issues"
0,CAMEL-1172,Task,Major,None,None,"
None
",Closed,Fixed,2.0-M1,Jonathan Anstey,Jonathan Anstey,0,0,2008-12-09 18:26:38+00:00,2009-07-31 06:33:51+00:00,No Desc,"janstey:1228818715:2008-12-09T18:31:55.264+0000:1228818715:2008-12-09T18:31:55.264+0000:Adding         camel-rss/src/test/java/org/apache/camel/component/rss/RssFilterTest.java
Sending        camel-rss/src/test/java/org/apache/camel/dataformat/rss/RssFilterWithXPathTest.java
Transmitting file data ..
Committed revision 724806.

Also updated the RSS documentation.
davsclaus:1248993231:2009-07-31T06:33:51.272+0000:1248993231:2009-07-31T06:33:51.272+0000:Closing 2.0m1 tickets"
0,CAMEL-1171,New Feature,Major,None,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",James Strachan,James Strachan,0,0,2008-12-09 16:55:20+00:00,2009-07-31 06:33:51+00:00,"Right now the to will use the current default pattern that an endpoint prefers. It would be good to allow it to be explicitly specified in the route.


Not 100% sure the best names to use - is inOnly() and inOut() the best? Maybe oneway() and request()?","jstrachan:1228874822:2008-12-10T10:07:02.313+0000:1228874822:2008-12-10T10:07:02.313+0000:I was thinking maybe the to() methods could take as a 2nd optional argument an ExchangePattern - if folks wanted to use the uncommon stuff (RobustInOut etc).

then inOnly(uri|endpoint) would be shorthand for to(uri|endpoint, InOnly) and ditto for inOut(uri|endpoint)



davsclaus:1228875199:2008-12-10T10:13:19.031+0000:1228875199:2008-12-10T10:13:19.031+0000:+1 to James suggestions
jstrachan:1228908650:2008-12-10T19:30:50.793+0000:1228908650:2008-12-10T19:30:50.793+0000:added the <inOnly> and <inOut> XML elements - just need the Java DSL hacked, tests and documentation...
jstrachan:1228950484:2008-12-11T07:08:04.811+0000:1228950484:2008-12-11T07:08:04.811+0000:refactoring Willem's change so that to(endpoint, pattern) becomes to(pattern, endpoint) so that we can use the same ordering of parameters with the ... notation.

e.g.

{code}
to(InOut, uri1, uri2, uri3, ...)
{code}


njiang:1228951691:2008-12-11T07:28:11.560+0000:1228951691:2008-12-11T07:28:11.560+0000:Good point.
 I'd to admit James always thinks ahead of me.
jstrachan:1228952698:2008-12-11T07:44:58.142+0000:1228952698:2008-12-11T07:44:58.142+0000::) it was my duff suggestion to use it the other way around to start with :)

Just about done - gonna commit this minor change shortly.

BTW made another minor change - the ToType now can take an ExchangePattern constructor argument as well - so that when sending to an endpoint (the common use case for the inOut/inOnly methods), we don't need 2 steps in the route
jstrachan:1228965091:2008-12-11T11:11:31.778+0000:1228965091:2008-12-11T11:11:31.778+0000:see the example documentation here...

* [Request Reply|http://cwiki.apache.org/confluence/display/CAMEL/Request+Reply]
* [Event Message|http://cwiki.apache.org/CAMEL/event-message.html]


davsclaus:1248993231:2009-07-31T06:33:51.222+0000:1248993231:2009-07-31T06:33:51.222+0000:Closing 2.0m1 tickets"
0,CAMEL-1170,Bug,Major,None,None,"
None
",Closed,Fixed,"1.6.0, 2.0-M1",Jonathan Anstey,Jonathan Anstey,0,0,2008-12-09 16:18:10+00:00,2009-07-31 06:33:50+00:00,"No html manual here http://repo2.maven.org/maven2/org/apache/camel/camel-manual/1.5.0/
or here http://people.apache.org/maven-snapshot-repository/org/apache/camel/camel-manual/2.0-SNAPSHOT/","janstey:1228887463:2008-12-10T13:37:43.895+0000:1228887463:2008-12-10T13:37:43.895+0000:Sending        camel-manual/pom.xml
Transmitting file data .
Committed revision 725277.

davsclaus:1248993230:2009-07-31T06:33:50.507+0000:1248993230:2009-07-31T06:33:50.507+0000:Closing 2.0m1 tickets"
0,CAMEL-1169,Improvement,Major,None,Future,"
None
",Resolved,Later,Future,Claus Ibsen,James Strachan,0,1,2008-12-09 16:01:15+00:00,2012-07-06 07:58:56+00:00,being able to route requests coming in via a servlet invocation to different servlet endpoints would be very handy! So having a Camel ServletFilter would be very handy,"jstrachan:1228965391:2008-12-11T11:16:31.432+0000:1228965391:2008-12-11T11:16:31.432+0000:a good example program for this functionality could be, the router implemented in a Java Bean using @RecipientList

http://activemq.apache.org/camel/recipientlist-annotation.html

which then delegates to some HTTP URIs which are then implemented either via JSP or some JAX-RS beans or something?
davsclaus:1341532736:2012-07-06T07:58:56.724+0000:1341532736:2012-07-06T07:58:56.724+0000:Lets close old ticket that are not in demand."
0,CAMEL-1168,Improvement,Major,None,None,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,James Strachan,0,0,2008-12-09 11:32:12+00:00,2010-02-07 09:54:17+00:00,"we could do with a review of the patterns in the index to see if we've missed any...


comparing
http://cwiki.apache.org/CAMEL/enterprise-integration-patterns.html


to
http://www.enterpriseintegrationpatterns.com/toc.html


as I'm sure we could document some more","jstrachan:1228805265:2008-12-09T14:47:45.955+0000:1228805265:2008-12-09T14:47:45.955+0000:there's a few things we could add which we've already implemented. e.g.  

* ""Remote Procedure Inocation"" or ""Command Message"" (which could reference the Spring Remoting / POJO Consuming
* ""Document Message"" which could reference XPath / XQuery etc 
janstey:1228827215:2008-12-09T20:53:35.250+0000:1228827215:2008-12-09T20:53:35.250+0000:The Scatter-Gather pattern was missing. I'm adding docs/example here https://issues.apache.org/activemq/browse/CAMEL-1173
davsclaus:1228953754:2008-12-11T08:02:34.624+0000:1228953754:2008-12-11T08:02:34.624+0000:The detour pattern is missing.
janstey:1234248205:2009-02-10T14:43:25.195+0000:1234248205:2009-02-10T14:43:25.195+0000:Added detour example https://issues.apache.org/activemq/browse/CAMEL-1331
davsclaus:1240102049:2009-04-19T08:47:29.280+0000:1240102049:2009-04-19T08:47:29.280+0000:Jonathan I think we can add the Service Activator
http://www.enterpriseintegrationpatterns.com/MessagingAdapter.html

eg. when we invoke services using .bean / .beanRef . to(bean) etc. or the method DSL."
0,CAMEL-1167,Improvement,Major,None,None,"
None
",Closed,Fixed,2.0-M1,Jonathan Anstey,James Strachan,0,1,2008-12-09 09:55:42+00:00,2017-08-15 10:06:06+00:00,"manuals for releases should appear here...
http://activemq.apache.org/camel/manual/","janstey:1228805074:2008-12-09T14:44:34.398+0000:1228805074:2008-12-09T14:44:34.398+0000:Fixed in http://svn.apache.org/viewvc?rev=724711&view=rev

The latest released PDF will show up here in an hour or so http://activemq.apache.org/camel/manual/
njiang:1228848116:2008-12-10T02:41:56.600+0000:1228848116:2008-12-10T02:41:56.600+0000:Cool, but I think we still need the html version.
janstey:1228848383:2008-12-10T02:46:23.976+0000:1228848383:2008-12-10T02:46:23.976+0000:For some reason html manuals have not been deploying, so the script can't copy them... I've raised CAMEL-1170 to track this. It may be a simple problem, I haven't looked at it at all :)
davsclaus:1248993230:2009-07-31T06:33:50.479+0000:1248993230:2009-07-31T06:33:50.479+0000:Closing 2.0m1 tickets
githubbot:1502762766:2017-08-15T10:06:06.643+0000:1502762766:2017-08-15T10:06:06.643+0000:GitHub user zregvart opened a pull request:

    https://github.com/apache/camel/pull/1891

    CAMEL-1167: Support Metadata component extension

    ** Submited for review **
    
    @lburgazzoli can you take a look, thanks 👍
    
    Adds support for `MetaDataExtension` in the Salesforce component.
    Currently two kinds of metadata are supported:
     - listing Salesforce Object types
     - listing fields of Salesforce object type
    
    For Salesforce object types object name and label are returned and for
    Salesforce object fields name and field type are returned.
    
    New facade to use low level Salesforce RestClient was added
    `SalesforceClientTemplate` intended to be used from extensions such as
    this and the existing `ComponentVerifierExtension` was refactored to use
    it.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/zregvart/camel CAMEL-11667

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1891.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1891
    
----
commit 0e71530d80526e7cefd0e12a02a37e899bfa3b90
Author: Zoran Regvart <zregvart@apache.org>
Date:   2017-08-15T09:52:26Z

    CAMEL-1167: Support Metadata component extension
    
    Adds support for `MetaDataExtension` in the Salesforce component.
    Currently two kinds of metadata are supported:
     - listing Salesforce Object types
     - listing fields of Salesforce object type
    
    For Salesforce object types object name and label are returned and for
    Salesforce object fields name and field type are returned.
    
    New facade to use low level Salesforce RestClient was added
    `SalesforceClientTemplate` intended to be used from extensions such as
    this and the existing `ComponentVerifierExtension` was refactored to use
    it.

----
"
0,CAMEL-1166,Sub-task,Major,None,None,"
None
",Closed,Fixed,"1.6.0, 2.0-M1",Jonathan Anstey,James Strachan,0,0,2008-12-09 09:46:45+00:00,2009-07-31 06:33:50+00:00,No Desc,davsclaus:1248993230:2009-07-31T06:33:50.459+0000:1248993230:2009-07-31T06:33:50.459+0000:Closing 2.0m1 tickets
0,CAMEL-1165,Sub-task,Major,None,None,"
None
",Closed,Fixed,"1.6.0, 2.0-M1",Jonathan Anstey,James Strachan,0,0,2008-12-09 09:46:04+00:00,2009-07-31 06:33:50+00:00,No Desc,"janstey:1228846195:2008-12-10T02:09:55.731+0000:1228846195:2008-12-10T02:09:55.731+0000:I've put up a manual with simple cover page at http://people.apache.org/~janstey/temp/camel-manual-2.0-SNAPSHOT.pdf, let me know what you think.

I still need to put in something that will dynamically insert the version number. That is for tomorrow though :)
janstey:1228892044:2008-12-10T14:54:04.113+0000:1228892044:2008-12-10T14:54:04.113+0000:I've put in changes that will dynamically insert the version number in rev 725302. Resolving this task now.
jstrachan:1228892127:2008-12-10T14:55:27.972+0000:1228892127:2008-12-10T14:55:27.972+0000:awesome stuff! :)
davsclaus:1248993230:2009-07-31T06:33:50.417+0000:1248993230:2009-07-31T06:33:50.417+0000:Closing 2.0m1 tickets"
0,CAMEL-1164,Sub-task,Major,None,None,"
None
",Closed,Fixed,"1.6.0, 2.0-M1",Jonathan Anstey,James Strachan,0,0,2008-12-09 09:45:26+00:00,2009-07-31 06:33:49+00:00,sometimes its got a big black line around it - other times nothing. Maybe a faint line around code blocks (or maybe a faint grey background or something) might look best? Whatever it is lets be consistent,"janstey:1229081205:2008-12-12T19:26:45.561+0000:1229081205:2008-12-12T19:26:45.561+0000:I just committed a change to the code snippets in the manual. I've uploaded a PDF with the changes here
http://people.apache.org/~janstey/temp/camel-manual-2.0-SNAPSHOT.pdf

I think it looks better than before but I'd like some feedback just to be sure :) 
davsclaus:1248993229:2009-07-31T06:33:49.705+0000:1248993229:2009-07-31T06:33:49.705+0000:Closing 2.0m1 tickets"
0,CAMEL-1163,Improvement,Major,None,None,"
None
",Closed,Fixed,2.0-M1,Jonathan Anstey,James Strachan,0,0,2008-12-09 09:41:41+00:00,2009-07-31 06:33:49+00:00,"some formatting could be improved in places and we could do with including more of the wiki documentation in places.


I'll create sub tasks for specific examples. Please dive in if anyone can think of other ways to improve the user guide","davsclaus:1229291943:2008-12-15T05:59:03.372+0000:1229291943:2008-12-15T05:59:03.372+0000:2.0 snapshot guide.
- page 38 (page 36 printed). The table for the annotations. I get a A text in the parameter for the annotations.



davsclaus:1229292075:2008-12-15T06:01:15.717+0000:1229292075:2008-12-15T06:01:15.717+0000:page 51 (49 printed). The image for the dot generator is old. We don't get the EIP icons on the generated images anymore. 
I think the image is from camel-example-docs 
davsclaus:1229292177:2008-12-15T06:02:57.581+0000:1229292177:2008-12-15T06:02:57.581+0000:page 73 (73 printed) the heading for Async Processing is on top of the code example. 
davsclaus:1229292498:2008-12-15T06:08:18.833+0000:1229292498:2008-12-15T06:08:18.833+0000:page 388 - the options for the JMS component is clipped, so you can not read the description
davsclaus:1229292695:2008-12-15T06:11:35.605+0000:1229292695:2008-12-15T06:11:35.605+0000:I think we should add the two ""walks with Camel"" mini tutorials we have. Maybe as a new section for getting started in 5 min:

http://activemq.apache.org/camel/getting-started.html
http://activemq.apache.org/camel/walk-through-another-example.html
janstey:1229506573:2008-12-17T17:36:13.324+0000:1229506573:2008-12-17T17:36:13.324+0000:bq. page 38 (page 36 printed). The table for the annotations. I get a A text in the parameter for the annotations.
Fixed.
bq. page 51 (49 printed). The image for the dot generator is old. We don't get the EIP icons on the generated images anymore. 
Fixed.
bq. page 73 (73 printed) the heading for Async Processing is on top of the code example. 
Fixed.

janstey:1229517102:2008-12-17T20:31:42.172+0000:1229517102:2008-12-17T20:31:42.172+0000:bq. page 388 - the options for the JMS component is clipped, so you can not read the description 

Fixed in revision 727502.
janstey:1229518746:2008-12-17T20:59:06.708+0000:1229518746:2008-12-17T20:59:06.708+0000:Claus,

Perhaps we could add an examples section to include the mini tutorials? The first page of the examples chapter would be a table of contents like this http://cwiki.apache.org/confluence/display/CAMEL/Examples 
davsclaus:1229547750:2008-12-18T05:02:30.076+0000:1229547750:2008-12-18T05:02:30.076+0000:@Jon +1

But I think it should be in the start of the pdf, so new users read the simple walk examples and doesn't endeavor into some more complex examples.
janstey:1229579990:2008-12-18T13:59:50.446+0000:1229579990:2008-12-18T13:59:50.446+0000:Added a quickstart chapter to the user guide which contains two example walk throughs.
davsclaus:1248993229:2009-07-31T06:33:49.679+0000:1248993229:2009-07-31T06:33:49.679+0000:Closing 2.0m1 tickets"
0,CAMEL-1162,Task,Minor,None,None,"
None
",Closed,Fixed,"1.6.0, 2.0-M1",Willem Jiang,Willem Jiang,0,0,2008-12-09 07:13:19+00:00,2009-07-31 06:33:49+00:00,"Since we have multicast which supports aggregation and parallel processing, the topic loadbalance becomes a half workable duplication , and it should be removed.",davsclaus:1248993229:2009-07-31T06:33:49.639+0000:1248993229:2009-07-31T06:33:49.639+0000:Closing 2.0m1 tickets
0,CAMEL-1161,Improvement,Major,None,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Willem Jiang,Willem Jiang,0,0,2008-12-09 06:33:22+00:00,2009-07-31 06:33:49+00:00,We should let LoadBalancer extends AsyncProcessor to get the benefit of the async processing.,"njiang:1229058751:2008-12-12T13:12:31.616+0000:1229058751:2008-12-12T13:12:31.616+0000:Applied the patch into trunk
http://svn.apache.org/viewvc?rev=724681&view=rev
camel-1.x branch
http://svn.apache.org/viewvc?rev=724684&view=rev
davsclaus:1248993229:2009-07-31T06:33:49.612+0000:1248993229:2009-07-31T06:33:49.612+0000:Closing 2.0m1 tickets"
0,CAMEL-1160,Sub-task,Minor,1.5.0,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Claus Ibsen,Claus Ibsen,0,0,2008-12-09 06:03:12+00:00,2009-07-31 06:33:49+00:00,"I discovered a few other DSL have similar issue without having required = true of the key (headerName, propertyName) etc.","davsclaus:1228777551:2008-12-09T07:05:51.951+0000:1228777551:2008-12-09T07:05:51.951+0000:Fixed on 2.0.

Need to fix these on 1.x:
SetPropertyType
SetOutHeaderType
RemovePropertyType
RemoveHeaderType
davsclaus:1228794079:2008-12-09T11:41:19.981+0000:1228794079:2008-12-09T11:41:19.981+0000:Now also commited to 1.x

Committed revision 724665.
davsclaus:1248993229:2009-07-31T06:33:49.570+0000:1248993229:2009-07-31T06:33:49.570+0000:Closing 2.0m1 tickets"
0,CAMEL-1159,Task,Major,None,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",William Tam,William Tam,0,0,2008-12-09 05:40:06+00:00,2009-07-31 06:33:48+00:00,"Understand the logic of this method and also see if the protected method getCollection() is really needed (or getCollectionSize() is suffice).  The reason being supporting the getCollection() method may constraint the BatchProcessor class to implement less efficient algorithm.



    @Override
    protected boolean isBatchCompleted(int index) {
        if (aggregationCompletedPredicate != null) {
            // TODO: (davsclaus) What is the point with this code? I think its wrong
            if (getCollection().size() > 0) {
                return true;
            }
        }

        return super.isBatchCompleted(index);
    }","wtam:1229292379:2008-12-15T06:06:19.607+0000:1229292379:2008-12-15T06:06:19.607+0000:I found that BatchProcessor did not implement the support for ""outBatchSize"" properly.  I applied a fix and method in question (Aggregator.isBatchCompleted) is not needed as a result.  Basically, the isInBatchCompleted() checks for whether the in queue should be drained to the out collection based on the batchSize parameter.  I added a method ""isOutBatchCompleted()"" to check whether the out collection should be sent based on the outBatchSize parameter.
davsclaus:1229293113:2008-12-15T06:18:33.725+0000:1229293113:2008-12-15T06:18:33.725+0000:Hi William

The OUT batch size was something I added recently for the aggregator, needed by end-users.

Martin Krasser (contributer with great patches for aggregator, resequencer, splitter etc.) said he would create a patch with the IN / OUT batch options in his xxxConfig objects (etc StreamResequencerConfig).

So we might need to check the wiki
- splitter
- resequencer
- aggregator

That the batch size options is documented. See aggregator that has this documentation (batch options). So if the splitter and resequencer now also supports the OUT batch size then we should copy the documentation (batch options) to their wiki page as well.

And maybe the OUT batch size should be exposed on
- the fluent builders
- the xxxConfig objects (StreamResequencerConfig and the other one)
wtam:1229326120:2008-12-15T15:28:40.052+0000:1229326120:2008-12-15T15:28:40.052+0000:Thanks Claus.   The outBatchSize for Aggregator can be set via fluent builder and spring per wiki currently but that is not the problem thought.  (I'll check resequencer and splitter.  splitter does not extend BatchProcessor, tho).  Also, it is orthogonal to the xxxConfig works.  What I saw was:

* Aggregator.isBatchCompleted() does not take the outBatchSize into the account.  The method returns true if aggregationCompletedPredicate and collection.size() > 0.  So, the incoming exchanges are correctly batched and stored the queue but the ""out collection"" is not batched.

* The BatchProcessor.isBatchCompleted() method checks for outBatchSize first and then ignore ""in"" batchSize if it is true.   So, it could drain the in queue prematurely (i.e. drain the quene before batchSize is > num).  I think we should have two methods: isInBatchCompleted() and isOutBatchCompleted().  If isInBatchCompleted(), then it should drain the exchanges from in queue to out collection.  if isOutBatchCompleted(), then we should sent out the exchanges.

I attached the patch.   Let me know if I am missing something.  I still have fix up the spring test.



davsclaus:1229336268:2008-12-15T18:17:48.503+0000:1229336268:2008-12-15T18:17:48.503+0000:William nice patch.

I was wondering if the out batch sample using
- in batch size = 1
- out batch size = 10

<aggregate strategyRef=""myAggregatorStrategy"" batchSize=""1"" outBatchSize=""10"">

Why is the in batch at 1? Is it intended. Can it be removed, so you can choose which batch size you want to use
- IN (number of exchanges) received
- OUT (number of exchanges) to send

So I think a more common use case would be having higher IN batch size than OUT. If that is the fact I think we should change the sample to reflect this. There is also a Java DSL sample.

Minor spelling
// out batch is disable, so go ahead and send.
It should be *disabled*
wtam:1229367967:2008-12-16T03:06:07.785+0000:1229367967:2008-12-16T03:06:07.785+0000:I fixed the mis-spell.  The batch size of 1 is to allow testing the out batch size better.  I'll exclude it from the example when possible and add some more comment.  thanks for your comments.
wtam:1229371863:2008-12-16T04:11:03.197+0000:1229371863:2008-12-16T04:11:03.197+0000:1.5.1 - r726941
2.0.0 - r726932
davsclaus:1248993228:2009-07-31T06:33:48.862+0000:1248993228:2009-07-31T06:33:48.862+0000:Closing 2.0m1 tickets"
0,CAMEL-1158,Improvement,Major,None,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Jonathan Anstey,Jonathan Anstey,0,0,2008-12-08 19:40:40+00:00,2009-07-31 06:33:48+00:00,Should be able to do this with a custom aggregator.,"davsclaus:1228769699:2008-12-09T04:54:59.500+0000:1228769699:2008-12-09T04:54:59.500+0000:Jon could you take a look at CAMEL-971. An end user had similar need and I as well, to group X number of exchanged into a single combined exchange.

I started worked on this. But wanted feedback from the other Camel riders. There is a patch on CAMEL-971 that lays out the basic idea. Maybe we could take a discussion at the camel-dev to get the attention of the others? If we bring in a standard GroupedExchange into camel-core (or what a good name would be)
janstey:1228800663:2008-12-09T13:31:03.033+0000:1228800663:2008-12-09T13:31:03.033+0000:Cool. Yeah, I'll take a look.
janstey:1228811983:2008-12-09T16:39:43.898+0000:1228811983:2008-12-09T16:39:43.898+0000:CAMEL-971 is a cool feature but is not really what I had in mind for merging multiple RSS feeds. Each exchange coming from an RSS endpoint contains a ROME SyndFeed object as the body, which also contains a list of 1 or more RSS entries. I intended to have the entries of each SyndFeed object aggregated into a new SyndFeed object, in a single exchange.

I like the GroupedExchange idea Claus, it would be very useful in a bunch of scenarios. Here's a +1 from me! 
janstey:1228814474:2008-12-09T17:21:14.149+0000:1228814474:2008-12-09T17:21:14.149+0000:Committed a fix and added an entry into the wiki docs for this.
janstey:1228814508:2008-12-09T17:21:48.818+0000:1228814508:2008-12-09T17:21:48.818+0000:Fixed in rev 724775.
davsclaus:1248993228:2009-07-31T06:33:48.831+0000:1248993228:2009-07-31T06:33:48.831+0000:Closing 2.0m1 tickets"
0,CAMEL-1157,Improvement,Major,None,None,"
None
",Closed,Fixed,2.0-M1,James Strachan,James Strachan,0,0,2008-12-08 16:11:15+00:00,2009-07-31 06:33:48+00:00,No Desc,davsclaus:1248993228:2009-07-31T06:33:48.809+0000:1248993228:2009-07-31T06:33:48.809+0000:Closing 2.0m1 tickets
0,CAMEL-1156,Improvement,Major,None,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Jonathan Anstey,Jonathan Anstey,0,0,2008-12-08 14:51:12+00:00,2009-07-31 06:33:48+00:00,See http://svn.apache.org/viewvc?view=rev&revision=723844 for same feature in camel-rss,"janstey:1228731657:2008-12-08T18:20:57.477+0000:1228731657:2008-12-08T18:20:57.477+0000:Sending        camel-atom/src/main/java/org/apache/camel/component/atom/AtomEntryPollingConsumer.java
Sending        camel-atom/src/main/java/org/apache/camel/component/atom/UpdatedDateFilter.java
Adding         camel-atom/src/test/data/unsortedfeed.atom
Sending        camel-atom/src/test/java/org/apache/camel/component/atom/AtomEntryPollingConsumerTest.java
Adding         camel-atom/src/test/java/org/apache/camel/component/atom/AtomEntrySortTest.java
Transmitting file data .....
Committed revision 724434.

davsclaus:1248993228:2009-07-31T06:33:48.768+0000:1248993228:2009-07-31T06:33:48.768+0000:Closing 2.0m1 tickets"
0,CAMEL-1155,Task,Trivial,None,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Claus Ibsen,0,0,2008-12-08 07:19:04+00:00,2009-07-31 06:33:48+00:00,"#1
We should encurage to reuse and use ObjectHelper.notNull for parameter assertions


Currently we have a few places 



if (paramter == null) {
  throw new IllegalArgumentException(""parameter is null"");
}




Should be replaced with



ObjectHelper.notNull(parameter, ""parameter"");




#2
We could also consider to add a notEmpty method that will do a not null test and if the type is a String do a trim size > 0 test as well.


#3
Also we should align the methods to use either Empty or Blank for such a test method. Currently we have both combination.","davsclaus:1228777399:2008-12-09T07:03:19.867+0000:1228777399:2008-12-09T07:03:19.867+0000:#1 *DONE*
davsclaus:1228881136:2008-12-10T11:52:16.925+0000:1228881136:2008-12-10T11:52:16.925+0000:#1 and #2 *DONE*

Committed revision 725058.
davsclaus:1248993228:2009-07-31T06:33:48.092+0000:1248993228:2009-07-31T06:33:48.092+0000:Closing 2.0m1 tickets"
0,CAMEL-1154,Sub-task,Major,None,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Claus Ibsen,0,0,2008-12-07 12:33:03+00:00,2009-07-31 06:33:48+00:00,No Desc,"davsclaus:1230430068:2008-12-28T10:07:48.659+0000:1230430068:2008-12-28T10:07:48.659+0000:D:\project\camel\components\camel-ftp>svn commit --message ""CAMEL-1154: Added idempotent to camel-ftp""
Sending        camel-ftp\src\main\java\org\apache\camel\component\file\remote\RemoteFileConsumer.java
Sending        camel-ftp\src\main\java\org\apache\camel\component\file\remote\RemoteFileEndpoint.java
Sending        camel-ftp\src\main\java\org\apache\camel\component\file\remote\RemoteFileProducer.java
Sending        camel-ftp\src\main\java\org\apache\camel\component\file\remote\SftpConsumer.java
Sending        camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpNoopTest.java
Adding         camel-ftp\src\test\java\org\apache\camel\component\file\remote\FtpConsumerIdempotentRefTest.java
Adding         camel-ftp\src\test\java\org\apache\camel\component\file\remote\FtpConsumerIdempotentTest.java
Transmitting file data .......
Committed revision 729714.

davsclaus:1248993228:2009-07-31T06:33:48.071+0000:1248993228:2009-07-31T06:33:48.071+0000:Closing 2.0m1 tickets"
0,CAMEL-1153,Task,Major,None,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Claus Ibsen,0,0,2008-12-07 12:15:18+00:00,2009-07-31 06:33:48+00:00,"We should do the same kind of refactoring of camel-ftp as we did with the file component. Espeically get rid of the timestamp and clean up the code, to be more maintance firendly and be ready for adding the pluggable sorting, filtering and what else comes in the future.","davsclaus:1228624594:2008-12-07T12:36:34.689+0000:1228624594:2008-12-07T12:36:34.689+0000:Introduce the FileProcessStrategy as well, so we can have the code that deletes/moves the files separated from the consumer.

Also these two components would be much more alike and thus more ready for a shared VFS that we have a ticket for.
davsclaus:1228712616:2008-12-08T13:03:36.166+0000:1228712616:2008-12-08T13:03:36.166+0000:Just an update on this one. The refactor have grown on me, well I wanted the FTP and File component to be much more aligned.

And as we have a ticket for reusing file strategies and an idea of having a underlying VFS for file and FTP I have started to experiment a little.

To have this VFS we need to abstract the concrete file implementation and use the abstract in the consumer and producer that delegates to the concrete file implementation.

And as the FTP component have two file implementations
- regular FTP
- Secure FTP

I have experimented here. It goes kinda okay at the moment. I only have abstraction for file strategies (delete, rename, noop) but login, logout, upload, download etc. is also needed. 

But anyway I have the basic structure so the FTPConsumer is nearly identical with the FileConsumer. Using async and commit file strategies etc. 


davsclaus:1229043014:2008-12-12T08:50:14.826+0000:1230258947:2008-12-26T10:35:47.401+0000:Backup of my major camel-ftp refactor in progress

TODO
- more ftp operations *DONE*
- consider renaming of classes (ftptemplate to ftpoperations) *DONE*
- adding filtering *DONE*
- adding sort by *DONE*
- premove expression unit test *DONE*
- move and delete should not be possible *DONE*
- sftp operations *DONE*
- ftp/sftp producer can be combined *DONE*
- sftp consumer *DONE*
- use ExclusiveReadLockStrategy *DONE*
- javadoc *DONE*

davsclaus:1230263894:2008-12-26T11:58:14.019+0000:1230263894:2008-12-26T11:58:14.019+0000:D:\project\camel\components\camel-ftp>svn commit --message ""CAMEL-1153: major refactor to camel-ftp""
Adding         camel-ftp\src\main\java\org\apache\camel\component\file\remote\DefaultRemoteFileSorter.java
Sending        camel-ftp\src\main\java\org\apache\camel\component\file\remote\FtpConsumer.java
Deleting       camel-ftp\src\main\java\org\apache\camel\component\file\remote\FtpEndpoint.java
Deleting       camel-ftp\src\main\java\org\apache\camel\component\file\remote\FtpOperationFailedException.java
Deleting       camel-ftp\src\main\java\org\apache\camel\component\file\remote\FtpProducer.java
Adding         camel-ftp\src\main\java\org\apache\camel\component\file\remote\FtpRemoteFileOperations.java
Deleting       camel-ftp\src\main\java\org\apache\camel\component\file\remote\FtpUtils.java
Adding         camel-ftp\src\main\java\org\apache\camel\component\file\remote\RemoteFile.java
Deleting       camel-ftp\src\main\java\org\apache\camel\component\file\remote\RemoteFileBinding.java
Sending        camel-ftp\src\main\java\org\apache\camel\component\file\remote\RemoteFileComponent.java
Sending        camel-ftp\src\main\java\org\apache\camel\component\file\remote\RemoteFileConfiguration.java
Sending        camel-ftp\src\main\java\org\apache\camel\component\file\remote\RemoteFileConsumer.java
Sending        camel-ftp\src\main\java\org\apache\camel\component\file\remote\RemoteFileConverter.java
Sending        camel-ftp\src\main\java\org\apache\camel\component\file\remote\RemoteFileEndpoint.java
Sending        camel-ftp\src\main\java\org\apache\camel\component\file\remote\RemoteFileExchange.java
Adding         camel-ftp\src\main\java\org\apache\camel\component\file\remote\RemoteFileExclusiveReadLockStrategy.java
Adding         camel-ftp\src\main\java\org\apache\camel\component\file\remote\RemoteFileFilter.java
Sending        camel-ftp\src\main\java\org\apache\camel\component\file\remote\RemoteFileMessage.java
Adding         camel-ftp\src\main\java\org\apache\camel\component\file\remote\RemoteFileOperationFailedException.java
Adding         camel-ftp\src\main\java\org\apache\camel\component\file\remote\RemoteFileOperations.java
Adding         camel-ftp\src\main\java\org\apache\camel\component\file\remote\RemoteFileProcessStrategy.java
Sending        camel-ftp\src\main\java\org\apache\camel\component\file\remote\RemoteFileProducer.java
Sending        camel-ftp\src\main\java\org\apache\camel\component\file\remote\SftpConsumer.java
Deleting       camel-ftp\src\main\java\org\apache\camel\component\file\remote\SftpEndpoint.java
Deleting       camel-ftp\src\main\java\org\apache\camel\component\file\remote\SftpProducer.java
Adding         camel-ftp\src\main\java\org\apache\camel\component\file\remote\SftpRemoteFileOperations.java
Deleting       camel-ftp\src\main\java\org\apache\camel\component\file\remote\SftpUtils.java
Adding         camel-ftp\src\main\java\org\apache\camel\component\file\remote\strategy
Adding         camel-ftp\src\main\java\org\apache\camel\component\file\remote\strategy\DefaultRemoteFileRenamer.java
Adding         camel-ftp\src\main\java\org\apache\camel\component\file\remote\strategy\DeleteRemoteFileProcessStrategy.java
Adding         camel-ftp\src\main\java\org\apache\camel\component\file\remote\strategy\NoOpRemoteFileProcessStrategy.java
Adding         camel-ftp\src\main\java\org\apache\camel\component\file\remote\strategy\RemoteFileExpressionRenamer.java
Adding         camel-ftp\src\main\java\org\apache\camel\component\file\remote\strategy\RemoteFileProcessStrategyFactory.java
Adding         camel-ftp\src\main\java\org\apache\camel\component\file\remote\strategy\RemoteFileProcessStrategySupport.java
Adding         camel-ftp\src\main\java\org\apache\camel\component\file\remote\strategy\RemoteFileRenameExclusiveReadLockStrategy.java
Adding         camel-ftp\src\main\java\org\apache\camel\component\file\remote\strategy\RemoteFileRenamer.java
Adding         camel-ftp\src\main\java\org\apache\camel\component\file\remote\strategy\RenameRemoteFileProcessStrategy.java
Adding         camel-ftp\src\main\java\org\apache\camel\component\file\remote\strategy\package.html
Sending        camel-ftp\src\main\resources\META-INF\services\org\apache\camel\component\ftp
Sending        camel-ftp\src\main\resources\META-INF\services\org\apache\camel\component\sftp
Sending        camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFileToFtpTest.java
Sending        camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpDeleteFileTest.java
Sending        camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpDirectoryToBinaryFilesTest.java
Adding         camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpExclusiveReadNoneStrategyTest.java
Adding         camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpExclusiveReadRenameStrategyTest.java
Deleting       camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpExclusiveReadTest.java
Adding         camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpFilterTest.java
Sending        camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpMoveFilePostfixTest.java
Sending        camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpMoveFilePrefixTest.java
Sending        camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpMoveFileTest.java
Sending        camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpNoFilesTest.java
Deleting       camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpNonExclusiveReadTest.java
Adding         camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpNoopTest.java
Sending        camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpPollFileOnlyTest.java
Adding         camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpPreMoveFileExpressionTest.java
Adding         camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpPreMoveFilePostfixTest.java
Adding         camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpPreMoveFilePrefixTest.java
Sending        camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpRegexPatternTest.java
Adding         camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpRemoteFileFilterTest.java
Adding         camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpRemoteFileSortByExpressionTest.java
Adding         camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpRemoteFileSortByIgnoreCaseExpressionTest.java
Adding         camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpRemoteFileSortByNestedExpressionTest.java
Adding         camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpRemoteFileSorterTest.java
Sending        camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpSetNamesWithMultiDirectoriesTest.java
Sending        camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpToBinaryFileTest.java
Sending        camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpToBinaryFilesTest.java
Sending        camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpToMockTest.java
Sending        camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromQueueThenConsumeFtpToMockTest.java
Adding         camel-ftp\src\test\java\org\apache\camel\component\file\remote\FtpConsumerBodyAsStringTest.java
Sending        camel-ftp\src\test\java\org\apache\camel\component\file\remote\FtpConsumerDeleteNoWritePermissionTest.java
Sending        camel-ftp\src\test\java\org\apache\camel\component\file\remote\FtpConsumerDirectoriesNotMatchedTest.java
Sending        camel-ftp\src\test\java\org\apache\camel\component\file\remote\FtpConsumerExcludeNameTest.java
Sending        camel-ftp\src\test\java\org\apache\camel\component\file\remote\FtpConsumerExpressionTest.java
Adding         camel-ftp\src\test\java\org\apache\camel\component\file\remote\FtpConsumerMultipleDirectoriesTest.java
Sending        camel-ftp\src\test\java\org\apache\camel\component\file\remote\FtpConsumerUsingFTPClientConfigTest.java
Adding         camel-ftp\src\test\java\org\apache\camel\component\file\remote\FtpIllegalOptionsTest.java
Sending        camel-ftp\src\test\java\org\apache\camel\component\file\remote\FtpLoginTest.java
Sending        camel-ftp\src\test\java\org\apache\camel\component\file\remote\FtpProducerBuildDirectoryTest.java
Sending        camel-ftp\src\test\java\org\apache\camel\component\file\remote\FtpProducerTempPrefixTest.java
Sending        camel-ftp\src\test\java\org\apache\camel\component\file\remote\FtpServerTestSupport.java
Sending        camel-ftp\src\test\java\org\apache\camel\component\file\remote\UriConfigurationTest.java
Sending        camel-ftp\src\test\resources\log4j.properties
Transmitting file data .......................................................................
Committed revision 729480.
davsclaus:1230263925:2008-12-26T11:58:45.524+0000:1230278552:2008-12-26T16:02:32.361+0000:TODO
- Update wiki *DONE*
davsclaus:1248993228:2009-07-31T06:33:48.020+0000:1248993228:2009-07-31T06:33:48.020+0000:Closing 2.0m1 tickets"
0,CAMEL-1152,Improvement,Minor,None,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Claus Ibsen,Ramon Buckland,0,0,2008-12-06 13:41:19+00:00,2009-07-31 06:33:47+00:00,"I have found that it is possible to set the header ""name"" to null of a message.


You can set a null header name as follows.. 


 <setHeader name=""someName""><constant>SUCCESS</constant></setHeader>


This task succeeds, (ie no error occurs) but not as you would expect, because this is what it is meant to be (@headerName)


<setHeader headerName=""someName""><constant>SUCCESS</constant></setHeader>


eg: log dumping the header shows   -  Headers:

{null=SUCCESS}


A side effect of this happening is that if you then use the xslt: component after setting a null header with a value, the xslt (saxon) component  freaks out with a NPE because it is attempting to set parameters for each header it finds, but the header is there and has a null name.  


A Snippet of the Stack Trace - 


java.lang.NullPointerException
	at net.sf.saxon.om.StructuredQName.fromClarkName(StructuredQName.java:70)
	at net.sf.saxon.Controller.setParameter(Controller.java:1979)
	at org.apache.camel.builder.xml.XsltBuilder.addParameters(XsltBuilder.java:290)
	at org.apache.camel.builder.xml.XsltBuilder.configureTransformer(XsltBuilder.java:276)
	at org.apache.camel.builder.xml.XsltBuilder.process(XsltBuilder.java:74)
	at org.apache.camel.impl.ProcessorEndpoint.onExchange(ProcessorEndpoint.java:92)
	at org.apache.camel.impl.ProcessorEndpoint$1.process(ProcessorEndpoint.java:66)","davsclaus:1228619019:2008-12-07T11:03:39.707+0000:1228619019:2008-12-07T11:03:39.707+0000:Yeah looks like the attrbiute headerName wasn't set as required.
And I will add an assertion that headerName is not null. 
davsclaus:1228621451:2008-12-07T11:44:11.119+0000:1228621451:2008-12-07T11:44:11.119+0000:trunk: 724122
1.x branch:Committed revision 724123.

davsclaus:1248993227:2009-07-31T06:33:47.949+0000:1248993227:2009-07-31T06:33:47.949+0000:Closing 2.0m1 tickets"
0,CAMEL-1151,New Feature,Major,None,None,"
None
",Closed,Duplicate,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2008-12-06 11:08:22+00:00,2011-04-24 10:00:58+00:00,"See CAMEL-1098


quote start
The unfortunate issue here is that there is another API (Timer) that
provides the equivalent to ScheduledExecutorService. This API is
significantly different to the Java SE concurrent equivalents that
would make the previous approach of proxying the interfaces very
difficult. So for now, it looks like there is no clean way to use
ScheduledExecutorService implementations in a managed environment.


Moving forward, my suggestion would be for Camel to have it's own
abstraction, similar to Spring's TaskExecutor, that would allow for
the configuration of thread management whether running in a managed
container or not.


JSR 236 offers hope for the future.


Tim...
quote end","davsclaus:1267835203:2010-03-06T08:26:43.913+0000:1267835203:2010-03-06T08:26:43.913+0000:Duplicate of CAMEL-1437.

There is a SPI now which you can use to hook into J2EE by implementing the SPI and use the WorkManager API to create/lookup the thread pools of choice.
davsclaus:1303610458:2011-04-24T10:00:58.965+0000:1303610458:2011-04-24T10:00:58.965+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-1150,Bug,Critical,1.5.0,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Claus Ibsen,Claus Ibsen,0,0,2008-12-06 09:48:18+00:00,2009-07-31 06:33:47+00:00,"See nabble:
http://www.nabble.com/Redelivery-Strategy-td20861316s22882.html


We should convert the 
        if (!getOutputs().isEmpty()) 

{
            throw new IllegalArgumentException(""Aggregator must be the only output added to the route: "" + this);
        }


ïnto a WARN log until we get the aggreagator fixed so you can define it anywhere in the route path. We have a ticket for this bug also.","davsclaus:1228532198:2008-12-06T10:56:38.749+0000:1228532198:2008-12-06T10:56:38.749+0000:D:\project\camel\camel-core>svn commit --message ""CAMEL-1150: Fixed aggregator not working with onException in a route""
Sending        camel-core\src\main\java\org\apache\camel\model\ProcessorType.java
Sending        camel-core\src\main\java\org\apache\camel\util\CollectionHelper.java
Adding         camel-core\src\test\java\org\apache\camel\processor\aggregator\AggregatorAndOnExceptionTest.java
Transmitting file data ...
Committed revision 723966.


And for 1.x branch
Committed revision 723967.
davsclaus:1228532218:2008-12-06T10:56:58.823+0000:1228532218:2008-12-06T10:56:58.823+0000:Will now log at WARN instead
davsclaus:1248993227:2009-07-31T06:33:47.927+0000:1248993227:2009-07-31T06:33:47.927+0000:Closing 2.0m1 tickets"
0,CAMEL-1149,Improvement,Major,None,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Unassigned,James Strachan,0,0,2008-12-04 16:29:07+00:00,2009-07-31 06:33:47+00:00,No Desc,"jstrachan:1228793912:2008-12-09T11:38:32.803+0000:1228793912:2008-12-09T11:38:32.803+0000:See [this example test case|https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-jms/src/test/resources/org/apache/camel/component/jms/config/JmsEndpointWithCustomDestinationTest-context.xml] to see how to create a JmsEndpoint 
davsclaus:1248993227:2009-07-31T06:33:47.209+0000:1248993227:2009-07-31T06:33:47.209+0000:Closing 2.0m1 tickets"
0,CAMEL-1148,New Feature,Major,1.5.0,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Claus Ibsen,Christopher Hammack,0,0,2008-12-04 15:33:41+00:00,2009-07-31 06:33:47+00:00,"From http://www.nabble.com/Concerns-about-File-endpoint-td20802855s22882.html


I'd like to suggest that you add a ""preMove"" option as it seems to be pretty much a requirement for doing clustered seda-style processing from a file endpoint.


The use case for this is a very large number of small files is being dropped into a directory.  This directory is then being scanned by camel's file endpoint.  The files as they are discovered are then moved to the .camel directory, and the filename is put onto a jms endpoint.  A clustered set of camel processors then pull the filename off the endpoint and process the file, and then delete it.","davsclaus:1228459435:2008-12-05T14:43:55.028+0000:1228478380:2008-12-05T19:59:40.421+0000:Okay Christopher let me see if I can get this in Camel 1.5.1 also.

I am aiming for options
- preMoveNamePrefix
- preMoveNamePostfix

Well we got the full monty. I also added the expression based:
- preMoveExpression


davsclaus:1228478348:2008-12-05T19:59:08.546+0000:1228478348:2008-12-05T19:59:08.546+0000:D:\project\camel\camel-core>svn commit --message ""CAMEL-1148: Added options pre move options to move file before processing""
Sending        camel-core\src\main\java\org\apache\camel\component\file\FileConsumer.java
Sending        camel-core\src\main\java\org\apache\camel\component\file\FileEndpoint.java
Sending        camel-core\src\main\java\org\apache\camel\component\file\FileExchange.java
Sending        camel-core\src\main\java\org\apache\camel\component\file\strategy\FileProcessStrategyFactory.java
Sending        camel-core\src\main\java\org\apache\camel\component\file\strategy\RenameFileProcessStrategy.java
Adding         camel-core\src\test\java\org\apache\camel\component\file\FileConsumerBeginAndCommitExpressionRenameStrategyTest.java
Adding         camel-core\src\test\java\org\apache\camel\component\file\FileConsumerBeginAndCommitRenameStrategyTest.java
Adding         camel-core\src\test\java\org\apache\camel\component\file\FileConsumerBeginExpressionRenameStrategyTest.java
Adding         camel-core\src\test\java\org\apache\camel\component\file\FileConsumerBeginRenameStrategyTest.java
Adding         camel-core\src\test\java\org\apache\camel\component\file\FileConsumerCommitRenameStrategyTest.java
Deleting       camel-core\src\test\java\org\apache\camel\component\file\FileProducerRenameStrategyTest.java
Transmitting file data ..........
Committed revision 723835.
davsclaus:1228481199:2008-12-05T20:46:39.385+0000:1228481199:2008-12-05T20:46:39.385+0000:Committed revision 723860.  for the 1.x branch
davsclaus:1248993227:2009-07-31T06:33:47.179+0000:1248993227:2009-07-31T06:33:47.179+0000:Closing 2.0m1 tickets"
0,CAMEL-1147,Improvement,Major,None,2.0-M1,"
None
",Closed,Fixed,2.0-M1,James Strachan,James Strachan,0,0,2008-12-04 15:27:55+00:00,2009-07-31 06:33:47+00:00,No Desc,"jstrachan:1228723068:2008-12-08T15:57:48.042+0000:1228723068:2008-12-08T15:57:48.042+0000:resolved. See [this example test case|https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-jms/src/test/resources/org/apache/camel/component/jms/config/JmsEndpointWithCustomDestinationTest-context.xml] to see how to create a JmsEndpoint 
davsclaus:1248993227:2009-07-31T06:33:47.158+0000:1248993227:2009-07-31T06:33:47.158+0000:Closing 2.0m1 tickets"
0,CAMEL-1146,Bug,Major,1.5.0,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Jonathan Anstey,Jonathan Anstey,0,0,2008-12-04 15:24:28+00:00,2009-07-31 06:33:47+00:00,"One version comes from camel-mina (version 1.5.5) and one from mina-core (version 1.4.3). This causes problems as seen when trying to use camel-mina at runtime or in my case deploying to ServiceMix. This is the error I get



org.apache.xbean.kernel.ServiceRegistrationException: java.lang.NoSuchFieldError: name
	at org.apache.xbean.kernel.standard.ServiceManagerRegistry.registerService(ServiceManagerRegistry.java:424)
	at org.apache.xbean.kernel.standard.StandardKernel.registerService(StandardKernel.java:220)
	at org.apache.xbean.server.spring.loader.SpringLoader.load(SpringLoader.java:152)
	at org.apache.servicemix.common.xbean.AbstractXBeanDeployer.deploy(AbstractXBeanDeployer.java:83)
	at org.apache.servicemix.camel.CamelSpringDeployer.deploy(CamelSpringDeployer.java:83)
	at org.apache.servicemix.common.BaseServiceUnitManager.doDeploy(BaseServiceUnitManager.java:88)
	at org.apache.servicemix.common.BaseServiceUnitManager.deploy(BaseServiceUnitManager.java:69)
	at org.apache.servicemix.jbi.framework.DeploymentService.deployServiceAssembly(DeploymentService.java:508)
	at org.apache.servicemix.jbi.framework.AutoDeploymentService.checkPendingSAs(AutoDeploymentService.java:482)
	at org.apache.servicemix.jbi.framework.AutoDeploymentService.checkPendingComponents(AutoDeploymentService.java:535)
	at org.apache.servicemix.jbi.framework.AutoDeploymentService.updateSharedLibrary(AutoDeploymentService.java:317)
	at org.apache.servicemix.jbi.framework.AutoDeploymentService.updateArchive(AutoDeploymentService.java:254)
	at org.apache.servicemix.jbi.framework.AutoDeploymentService.monitorDirectory(AutoDeploymentService.java:667)
	at org.apache.servicemix.jbi.framework.AutoDeploymentService.access$800(AutoDeploymentService.java:62)
	at org.apache.servicemix.jbi.framework.AutoDeploymentService$1.run(AutoDeploymentService.java:631)
	at java.util.TimerThread.mainLoop(Timer.java:512)
	at java.util.TimerThread.run(Timer.java:462)
Caused by: java.lang.NoSuchFieldError: name
	at org.slf4j.impl.SimpleLogger.<init>(SimpleLogger.java:83)
	at org.slf4j.impl.SimpleLoggerFactory.getLogger(SimpleLoggerFactory.java:67)
	at org.slf4j.LoggerFactory.getLogger(LoggerFactory.java:103)
	at org.apache.mina.util.NamePreservingRunnable.<init>(NamePreservingRunnable.java:32)
	at org.apache.mina.transport.socket.nio.SocketAcceptor.startupWorker(SocketAcceptor.java:165)
	at org.apache.mina.transport.socket.nio.SocketAcceptor.bind(SocketAcceptor.java:141)
	at org.apache.camel.component.mina.MinaConsumer.doStart(MinaConsumer.java:60)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:47)
	at org.apache.camel.impl.DefaultCamelContext.addService(DefaultCamelContext.java:421)
	at org.apache.camel.impl.DefaultCamelContext.startRoutes(DefaultCamelContext.java:659)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:632)
	at org.apache.camel.spring.SpringCamelContext.maybeDoStart(SpringCamelContext.java:167)
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:162)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:47)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:97)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:116)
	at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:77)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:75)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:246)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:617)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:355)
	at org.apache.xbean.server.spring.configuration.SpringConfiguration.<init>(SpringConfiguration.java:63)
	at org.apache.xbean.server.spring.configuration.SpringConfigurationServiceFactory.createService(SpringConfigurationServiceFactory.java:106)
	at org.apache.xbean.kernel.standard.ServiceManager.start(ServiceManager.java:420)
	at org.apache.xbean.kernel.standard.ServiceManager.initialize(ServiceManager.java:200)
	at org.apache.xbean.kernel.standard.RegistryFutureTask$RegisterCallable.call(RegistryFutureTask.java:110)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:269)
	at java.util.concurrent.FutureTask.run(FutureTask.java:123)
	at org.apache.xbean.kernel.standard.ServiceManagerRegistry.registerService(ServiceManagerRegistry.java:409)","janstey:1228385320:2008-12-04T18:08:40.792+0000:1228385320:2008-12-04T18:08:40.792+0000:FYI I added a test case in ServiceMix for this here https://issues.apache.org/activemq/browse/SM-1720
huntc@internode.on.net:1228877517:2008-12-10T10:51:57.099+0000:1228877517:2008-12-10T10:51:57.099+0000:Hi there,

Is this able to be worked around in 1.5.0? I tried excluding either slf4j from the camel-mina dependency but to no avail.

As a further question, should this problem cause Mina to stop working?

Kind regards,
Christopher
huntc@internode.on.net:1228878983:2008-12-10T11:16:23.400+0000:1228878983:2008-12-10T11:16:23.400+0000:I think I have a 1.5.0 work-around - it appears to work for me. Can you please confirm:

		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-mina</artifactId>
			<version>1.5.0</version>
			<exclusions>
				<!--  This exclusion is a 1.5.0 work-around for CAMEL-1146 -->
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-simple</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<!--  This dependency is a 1.5.0 work-around for CAMEL-1146 -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-simple</artifactId>
			<version>1.5.5</version>
		</dependency>


janstey:1228884747:2008-12-10T12:52:27.952+0000:1228884747:2008-12-10T12:52:27.952+0000:Hi Christopher,

The work-around I have been using is this:

{code}
<dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-mina</artifactId>
      <version>1.5.0</version>
        <exclusions>
          <exclusion>
            <groupId>org.apache.mina</groupId>
            <artifactId>mina-core</artifactId>
          </exclusion>
        </exclusions>
    </dependency>
    <dependency>
      <groupId>org.apache.mina</groupId>
      <artifactId>mina-core</artifactId>
      <version>1.1.7</version>
      <exclusions>
        <exclusion>
          <groupId>org.slf4j</groupId>
          <artifactId>slf4j-simple</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.slf4j</groupId>
          <artifactId>slf4j-api</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
{code}

The different version of slf4j seems to have no affect on mina (all mina unit tests passed) so all should be well. 

davsclaus:1248993227:2009-07-31T06:33:47.088+0000:1248993227:2009-07-31T06:33:47.088+0000:Closing 2.0m1 tickets"
0,CAMEL-1145,Bug,Major,1.5.0,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Willem Jiang,Claus Ibsen,0,0,2008-12-04 11:42:32+00:00,2009-07-31 06:33:46+00:00,"William could you check this error reported by end user


See nabble:
http://www.nabble.com/UnitOfWork-td20829434s22882.html","boriss:1228364185:2008-12-04T12:16:25.688+0000:1228364185:2008-12-04T12:16:25.688+0000:additionally you will need some log4j configuration in your classpath
njiang:1228365259:2008-12-04T12:34:19.425+0000:1228365259:2008-12-04T12:34:19.425+0000:Hi Boris

Can you grant ASF license to the files which you submited ?
I want to put them into the repository as a part of  the the camel-cxf unit test. You can change it from this link[1]

[1] https://issues.apache.org/activemq/secure/ManageAttachments.jspa?id=28688

Willem
boriss:1228367246:2008-12-04T13:07:26.893+0000:1228367246:2008-12-04T13:07:26.893+0000:Now with the grant license.
davsclaus:1248993226:2009-07-31T06:33:46.397+0000:1248993226:2009-07-31T06:33:46.397+0000:Closing 2.0m1 tickets"
0,CAMEL-1144,Bug,Critical,1.5.0,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Claus Ibsen,Martin Gilday,0,0,2008-12-04 10:44:39+00:00,2009-07-31 06:33:46+00:00,"Related nabble: http://www.nabble.com/Handling-converter-failure-td20830148s22882.html


When an exception is thrown from a @Converter it is not correctly handled by onException.  The handler is receiving a RuntimeCamelException and not checking the cause when determining the best handler.



/////Converter
@Converter
public static LocalDateTime toLocalDateTime(final Object localDateTime)
{
  System.out.println(""Converting to local date time"");
  throw new IllegalArgumentException(""Bad data"");
}

/////Routes
Routes routes = new RouteBuilder() {

  @Override
  public void configure() throws Exception {
    onException(IllegalArgumentException.class).handled(true).to(""mock:exception"");
    from(""direct:test"").convertBodyTo(LocalDateTime.class).to(""mock:end"");
  }
};


/////Test
MockEndpoint endpoint = (MockEndpoint)
camelContext.getEndpoint(""mock:end"");
endpoint.expectedMessageCount(0);
MockEndpoint endpoint2 = (MockEndpoint)
camelContext.getEndpoint(""mock:exception"");
endpoint2.expectedMessageCount(1);

camelContext.createProducerTemplate().sendBody(""direct:test"", ""test"");

endpoint.assertIsSatisfied();
endpoint2.assertIsSatisfied();","davsclaus:1228358978:2008-12-04T10:49:38.657+0000:1228358978:2008-12-04T10:49:38.657+0000:Just to give a workaround.

Use onException(Exception.class).onWhen(bean(IsThisTheExceptionIWant.class)) and implement the logic in your own POJO


davsclaus:1228366368:2008-12-04T12:52:48.957+0000:1228366368:2008-12-04T12:52:48.957+0000:This new rule applies:
- If the thrown exception has a caused by then this exception is used for selection, if no match found the original exception is used for selection instead


I was wondering if we should do this cause by check for all the entire exception hierarchy starting from the bottom and then recurring up?

1) RuntimeCamelException
2) +IOException
3)    + FileNotFoundException

So Camel will start with (3) and then match up the tree until (1)

Currently we support tree level 1+2 but I guess we should support all levels and start from the bottom, the real cause!
davsclaus:1228367517:2008-12-04T13:11:57.793+0000:1228367517:2008-12-04T13:11:57.793+0000:Okay got the tree fixed by introducing an iterator that walks the order we would like.

Other implementations could extend and use their own ordering.


    /**
     * Iterator that walks the exception hieracy in the order we should match.
     * <p/>
     * Will default walk from bottom upwards to the root exception
     */
    protected class ExceptionIterator implements Iterator<Throwable> {

davsclaus:1228368452:2008-12-04T13:27:32.027+0000:1228368452:2008-12-04T13:27:32.027+0000:D:\project\camel\camel-core>svn commit --message ""CAMEL-1144: DefaultExceptionPolicyStrategy now tests caused by exceptions (using bottom to top exception hieracy iterator)""
Sending        camel-core\src\main\java\org\apache\camel\processor\exceptionpolicy\DefaultExceptionPolicyStrategy.java
Adding         camel-core\src\test\java\org\apache\camel\processor\onexception\OnExceptionWrappedExceptionTest.java
Transmitting file data ..
Committed revision 723314.

davsclaus:1228369108:2008-12-04T13:38:28.275+0000:1228369108:2008-12-04T13:38:28.275+0000:Committed revision 723319. in 1.5 branch
davsclaus:1228369185:2008-12-04T13:39:45.331+0000:1228369185:2008-12-04T13:39:45.331+0000:PS: I have updated the wiki at exception clause trying to explain how camel works when it select which onException to use.

section: Exception Policy
http://cwiki.apache.org/confluence/display/CAMEL/Exception+Clause
davsclaus:1248993226:2009-07-31T06:33:46.372+0000:1248993226:2009-07-31T06:33:46.372+0000:Closing 2.0m1 tickets"
0,CAMEL-1143,Task,Minor,1.5.0,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Willem Jiang,Claus Ibsen,0,0,2008-12-04 07:55:31+00:00,2009-07-31 06:33:46+00:00,It's GA now so Williem could you upgrade our integration to use the GA version,"njiang:1228442814:2008-12-05T10:06:54.164+0000:1228442814:2008-12-05T10:06:54.164+0000:applied the patch into trunk and camel-1.x branch.
davsclaus:1248993226:2009-07-31T06:33:46.324+0000:1248993226:2009-07-31T06:33:46.324+0000:Closing 2.0m1 tickets"
0,CAMEL-1142,New Feature,Major,None,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Willem Jiang,Claus Ibsen,0,0,2008-12-03 12:23:20+00:00,2009-07-31 06:33:46+00:00,"See nabble:
http://www.nabble.com/Alternative-routes-td20809601s22882.html


> I think you could impl. it with the loadbalancer, extending
> QueueLoadBalancer and override the process method where you will do
> - try .. catch exception
> - exchange.isFailed() (* might needed)
> to determine if there was an error with the exchange and then find the
> fallback processor and let it try it.
>
> I actually think this might be a good loadbalancer to have in
> camel-core. We just need to work on the configuration so you can set
> the designated target, and the failover. And maybe you have multiple
> failovers.
>
> Any thoughts from others?


Agreed - we should add some kind of FailoverLoadBalancer which could
filter errors/exceptions to determine if it should fail over to
another endpoint. (Not all errors/exceptions would be down to a WS
being down - it could be application errors and so forth).


The current LoadBalancer implementations just pick an endpoint to
load to; what we need is another implementation that essentially adds
a custom ErrorHandler to force a redelivery to another endpoint on
certain failures","jstrachan:1237512346:2009-03-20T09:25:46.447+0000:1237512346:2009-03-20T09:25:46.447+0000:be nice to use this in the DSL something like this

{code}
failover(""http://frodo"", ""http://samwise"", ""file://UnProcessedMessages"").retries(3).interval(1000).exponentialBackOff(false)
{code}


jstrachan:1237512633:2009-03-20T09:30:33.551+0000:1237512633:2009-03-20T09:30:33.551+0000:Being able to set a [Redelivery Policy|http://camel.apache.org/maven/camel-core/apidocs/org/apache/camel/processor/RedeliveryPolicy.html] used for when to try redelivering to a failed master would be cool too.

e.g. once a master fails, we kinda mark it as failed - then only redeliver to it at some point in the future - maybe with exponential back off etc
davsclaus:1248993226:2009-07-31T06:33:46.298+0000:1248993226:2009-07-31T06:33:46.298+0000:Closing 2.0m1 tickets"
0,CAMEL-1141,New Feature,Major,None,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Claus Ibsen,Claus Ibsen,0,0,2008-12-03 10:22:08+00:00,2009-07-31 06:33:46+00:00,"Looks like we get AUTO by default. And that there isn't a setter that we can use right out of the box to set the delimiter.
http://mina.apache.org/report/1.1/apidocs/org/apache/mina/filter/codec/textline/LineDelimiter.html


See nabble:
http://www.nabble.com/camel-mina-in-servicemix---how-to-process-TCP-response--td20794416s22882.html","davsclaus:1228277629:2008-12-03T12:13:49.614+0000:1228277629:2008-12-03T12:13:49.614+0000:Fixed in both 1.5.1 and 2.0

Committed revision 722845.for 2.0 
Committed revision 722854 for 1.5.1
davsclaus:1248993226:2009-07-31T06:33:46.276+0000:1248993226:2009-07-31T06:33:46.276+0000:Closing 2.0m1 tickets"
0,CAMEL-1140,Bug,Major,1.5.0,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Claus Ibsen,Claus Ibsen,0,0,2008-12-03 09:29:04+00:00,2009-07-31 06:33:46+00:00,"See nabble:
http://www.nabble.com/camel-mina-in-servicemix---how-to-process-TCP-response--td20794416s22882.html","davsclaus:1228281392:2008-12-03T13:16:32.102+0000:1228281392:2008-12-03T13:16:32.102+0000:D:\project\camel\components\camel-mina>svn commit --message ""CAMEL-1140: MinaProducer now throws CamelExchangeException if no message received from remote server when sync=true""
Sending        camel-mina\src\main\java\org\apache\camel\component\mina\MinaProducer.java
Sending        camel-mina\src\test\java\org\apache\camel\component\mina\MinaCustomCodecTest.java
Adding         camel-mina\src\test\java\org\apache\camel\component\mina\MinaNoResponseFromServerTest.java
Sending        camel-mina\src\test\java\org\apache\camel\component\mina\MinaProducerShutdownMockTest.java
Sending        camel-mina\src\test\java\org\apache\camel\component\mina\MinaProducerShutdownTest.java
Sending        camel-mina\src\test\java\org\apache\camel\component\mina\MinaTcpTest.java
Sending        camel-mina\src\test\java\org\apache\camel\component\mina\MinaTcpTextlineDelimiterTest.java
Sending        camel-mina\src\test\java\org\apache\camel\component\mina\MinaTcpTextlineProtocolTest.java
Transmitting file data ........
Committed revision 722878.
davsclaus:1228284695:2008-12-03T14:11:35.211+0000:1228284695:2008-12-03T14:11:35.211+0000:Committed revision 722893. for 1.5.1 branch
davsclaus:1248993226:2009-07-31T06:33:46.240+0000:1248993226:2009-07-31T06:33:46.240+0000:Closing 2.0m1 tickets"
0,CAMEL-1139,Improvement,Major,None,None,"
None
",Closed,Fixed,2.0.0,Willem Jiang,James Strachan,1,0,2008-12-03 08:40:46+00:00,2010-02-07 09:54:17+00:00,3.x is gonna be deprecated in Spring 3.0 - so maybe we should migrate our test cases from JUnit 3.x to JUnit 4.x?,"davsclaus:1228296010:2008-12-03T17:20:10.427+0000:1228296010:2008-12-03T17:20:10.427+0000:+1
davsclaus:1228296033:2008-12-03T17:20:33.645+0000:1228296033:2008-12-03T17:20:33.645+0000:Okay more comment. Would be great if Camel 2.0 is spring 3.0 compatible right out of the box.
njiang:1228319483:2008-12-03T23:51:23.438+0000:1228319483:2008-12-03T23:51:23.438+0000:I have a question for the spring 3.0 compatible.
Can camel 2.0 be spring 3.0 and spring 2.x compatible at the same time?
jstrachan:1228356302:2008-12-04T10:05:02.678+0000:1228356302:2008-12-04T10:05:02.678+0000:AFAIK 3.0 is backwards compatible - its just they are deprecating some stuff (like JUnit 3.x support). The only other change that might impact us is the JavaConfig becomes part of the standard framework (but since its modular its no biggie) - so we might change the JavaConfig groupId/artifactId. Also it looks like Jersey is gonna be integrated; so we can simplify the camel-rest module too. But the vast majority of Camel should work on 2.x too

We might want to create an integration test on 2.x to check things still work OK?
cmoulliard:1232065562:2009-01-16T08:26:02.623+0000:1232065562:2009-01-16T08:26:02.623+0000:@James

For your information, I have created junit4 tests for the Camel-bindy component based on Camel-2.0. Everything works fine.
jstrachan:1232065768:2009-01-16T08:29:28.350+0000:1232065768:2009-01-16T08:29:28.350+0000:Great stuff thanks! :)
cmoulliard:1232067116:2009-01-16T08:51:56.770+0000:1232067116:2009-01-16T08:51:56.770+0000:Have you already make a full build + tests of the existing Camel project using Junit4  ?
davsclaus:1232245363:2009-01-18T10:22:43.950+0000:1232245363:2009-01-18T10:22:43.950+0000:No most of camel testing is with 3.8"
0,CAMEL-1138,Bug,Critical,1.5.0,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Claus Ibsen,Hadrian Zbarcea,0,0,2008-12-02 16:36:14+00:00,2009-03-23 08:40:34+00:00,"Using a memory profiler, we've identified what appears to be a substantial memory leak in FileConsumer in Camel 1.5.0.  It appears that the noopMap is constantly having items added to it, but nothing performs a remove on it when the file is consumed.  This causes a very large amount of string data to be accumulated in the heap.  In our application, this was a leak of several hundred megabytes and is a showstopper.   Considering the apparent severity of this issue, it would really be nice if a fix could be incorporated into a 1.5.1 version. 


http://www.nabble.com/Memory-leak-in-FileConsumer-in-Camel-1.5.0-td20794405s22882.html#a20794405","davsclaus:1228212889:2008-12-02T18:14:49.986+0000:1228212889:2008-12-02T18:14:49.986+0000:This is *fixed in 2.0* as we have removed all this troublesome code.

For 1.5.1 I suggest to replace the noopMap with the LRUCahce Map so it keeps up till 1000 files and nothing more.
davsclaus:1228263419:2008-12-03T08:16:59.825+0000:1228263419:2008-12-03T08:16:59.825+0000:These maps is part of some code logic to determine if the file has been changed using timestamp and filesize checks. All this code has been @deprecated and removed in 2.0.
It leads to unexpected behavior and is hard to test. And shouldn't generally be used.

If you use file connectivity then you should either delete or move files after they are processed and not keep then around. 
As a fix for this in 1.5.1 I have added the LRUCache so the maps will contain at most 1000 elements. 
davsclaus:1228264247:2008-12-03T08:30:47.371+0000:1228264247:2008-12-03T08:30:47.371+0000:D:\project\camel-1x\camel-core>svn commit --message ""CAMEL-1138: Quick fix for file consumer not freeing memory""
Sending        camel-core\src\main\java\org\apache\camel\component\file\FileConsumer.java
Transmitting file data .
Committed revision 722808.
davsclaus:1228284788:2008-12-03T14:13:08.239+0000:1228284788:2008-12-03T14:13:08.239+0000:Hadrian is the current quick fix okay?
hadrian:1228288682:2008-12-03T15:18:02.795+0000:1228288682:2008-12-03T15:18:02.795+0000:I think so.  It actually solves the leak problem.

The side effect is that if a file is not moved/renamed after 1000 other entries/files it will disappear from the lru cache and look new again and get reprocessed, which may also lead to an infinite loop (that would make another one of those 1000+ files new/out of cache, and so on).  However I don't think this scenario is a valid one as it has other flaws, such as the fact that the state is lost after a camel restart, so files would get processed again in that case too (a comment in the code mentions that, actually).

I would add a warn in the wiki that not renaming/moving files is a dangerous scenario and should not be used.  
hadrian:1228290941:2008-12-03T15:55:41.285+0000:1228290941:2008-12-03T15:55:41.285+0000:I think we can close this issue."
0,CAMEL-1137,Improvement,Major,None,None,"
None
",Closed,Fixed,1.6.0,Unassigned,S. Ali Tokmen,0,0,2008-12-02 13:18:56+00:00,2008-12-02 13:25:33+00:00,"James Strachan has done changes in the RefComponent to make it easier to derive from: just derive and override the lookupEndpoint() method and then you don't have to mess with the URI.


That's part of commit 722415 in trunk: http://svn.apache.org/viewvc?view=rev&revision=722415


It would be great to have this included into CAMEL 1.5.1","alitokmen:1228195478:2008-12-02T13:24:38.684+0000:1228195478:2008-12-02T13:24:38.684+0000:Fixed revision 722451: http://svn.apache.org/viewvc?view=rev&revision=722451
alitokmen:1228195533:2008-12-02T13:25:33.494+0000:1228195533:2008-12-02T13:25:33.494+0000:Issue resolved, therefore closed."
0,CAMEL-1136,Improvement,Major,None,None,"
None
",Closed,Fixed,2.0-M1,Unassigned,James Strachan,0,0,2008-12-01 16:43:26+00:00,2009-07-31 06:33:46+00:00,No Desc,"jstrachan:1228133189:2008-12-01T20:06:29.867+0000:1228133189:2008-12-01T20:06:29.867+0000:here's an example test case...

http://svn.apache.org/viewvc/activemq/camel/trunk/components/camel-test/src/test/java/org/apache/camel/test/patterns/FilterTest.java?view=markup

it supports Camel annotations and acts as a simple alternative to using Spring Test + Spring JavaConfig or using Guice
jstrachan:1228965211:2008-12-11T11:13:31.380+0000:1228965211:2008-12-11T11:13:31.380+0000:fixed - see the [documentation|http://activemq.apache.org/camel/testing.html]
jstrachan:1228965231:2008-12-11T11:13:51.978+0000:1228965231:2008-12-11T11:13:51.978+0000:in particular...

http://activemq.apache.org/camel/camel-test.html

davsclaus:1248993226:2009-07-31T06:33:46.217+0000:1248993226:2009-07-31T06:33:46.217+0000:Closing 2.0m1 tickets"
0,CAMEL-1135,Bug,Major,2.0.0,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Willem Jiang,0,0,2008-12-01 14:36:58+00:00,2009-07-31 06:33:46+00:00,"Here are the stack trace of the TestEndpointTest.testMocksAreValid on different machines


org.apache.camel.component.test.TestEndpointTest.testMocksAreValid =================
java.lang.AssertionError: test:file://src/test/data?noop=true&consumer.recursive=true&consumer.delay=2000 Received message count. Expected: <567> but was: <78>
	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:712)
	at org.apache.camel.component.mock.MockEndpoint.assertEquals(MockEndpoint.java:694)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:238)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:214)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:141)
	at org.apache.camel.component.test.TestEndpointTest.testMocksAreValid(TestEndpointTest.java:49)


org.apache.camel.component.test.TestEndpointTest.testMocksAreValid =================
java.lang.AssertionError: test:file://src/test/data?noop=true&consumer.recursive=true&consumer.delay=2000 Received message count. Expected: <219> but was: <78>
	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:712)
	at org.apache.camel.component.mock.MockEndpoint.assertEquals(MockEndpoint.java:694)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:238)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:214)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:141)
	at org.apache.camel.component.test.TestEndpointTest.testMocksAreValid(TestEndpointTest.java:49)


I don't know why the test endpoint could get so many received message.","davsclaus:1228113772:2008-12-01T14:42:52.123+0000:1228113772:2008-12-01T14:42:52.123+0000:It's my bad. I will fix it soon. Running full unit test now, so 10 min.

It's in camel-spring that I dont test as often as camel-core
davsclaus:1248993226:2009-07-31T06:33:46.139+0000:1248993226:2009-07-31T06:33:46.139+0000:Closing 2.0m1 tickets"
0,CAMEL-1134,New Feature,Major,None,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Willem Jiang,Willem Jiang,0,0,2008-12-01 08:37:37+00:00,2009-07-31 06:33:45+00:00,"CAMEL-1133's ZipDataFormat Patch does't use stream API to do the marshal and unmarshal work.
It need to be refactored  to be stream friendly.","akarpe:1228110815:2008-12-01T13:53:35.567+0000:1228110815:2008-12-01T13:53:35.567+0000:Willem,

Will this not mean a change in the MarshalProcessor and UnMarshalProcessor ? Can you please clarify so that I can make the right fix.

Cheers,

Ashwin...
njiang:1228112160:2008-12-01T14:16:00.988+0000:1228112160:2008-12-01T14:16:00.988+0000:Hi Ashwin,

You don't need to change any code in the MashalProcessor and UnMarshalProcessor.
If you take a look at the JAXBDataFormat, or some other Dataformat, you will find they are using the stream API to consume or produce the message.

Since there are some useful converting methods in the IOConvertor, ZipDataFormat  can deal with lots of types message, and it will not need to create a big byte array to hold the compress or unconpress data any more.

Cheers,

Willem
njiang:1228241048:2008-12-03T02:04:08.481+0000:1228241048:2008-12-03T02:04:08.481+0000:Applied the patch into trunk and camel-1.x branch.
davsclaus:1248993225:2009-07-31T06:33:45.410+0000:1248993225:2009-07-31T06:33:45.410+0000:Closing 2.0m1 tickets"
0,CAMEL-1133,New Feature,Major,None,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Willem Jiang,Ashwin J. Karpe,0,0,2008-12-01 00:11:35+00:00,2009-07-31 06:33:45+00:00,"At the moment there is no ability to compress and uncompress messages in a Message Exchange as they are sent/received  on a Camel route.


The benefits of having this feature are the following:
     a> ability to reduce the size of messages are they are sent in a flow to different remote destinations,
     b> ability to decompress messages just prior to being consumed at the endpoint.


The way it would work is as follows:
      Message Deflater:  (example below)
      --------------------------------------------------
            context.addRoutes(new RouteBuilder() {
            public void configure() 

{
                from(""direct:start"").marshal().zip(Deflater.BEST_COMPRESSION).process(new ZippedMessageProcessor());
            }

        });


    Message Inflater: (example below)
   ------------------------------------------------
       context.addRoutes(new RouteBuilder() {
            public void configure() 

{
                from(""direct:start"").marshal().zip().unmarshal().zip().process(new UnZippedMessageProcessor());
            }

        });","akarpe:1228062458:2008-12-01T00:27:38.875+0000:1228062458:2008-12-01T00:27:38.875+0000:Hi,

I have implemented this feature and attached a patch of the affected files above. I have also attached a zip file containing the affected files for the commiters to check-in.

I have added 4 unit test cases as well and verified that the functionality works. Can someone please review this feature and commit accordingly.

Thanks and Regards,

Ashwin...
akarpe:1228062596:2008-12-01T00:29:56.900+0000:1228062596:2008-12-01T00:29:56.900+0000:This new capablity to compress/uncompress messages in a Message exchange on the fly using a new dataformat called zip is now implemented and ready for review.
wtam:1228066788:2008-12-01T01:39:48.002+0000:1228066788:2008-12-01T01:39:48.002+0000:It looks like the patch may add an dependency of the org.apache.camel.impl package (org.apache.camel.impl.ZipDataFormat) in the org.apache.camel.model package (org.apache.camel.model.dataformat.ZipDataFormatType.  Perhaps, we should clean it up first?
wtam:1228067786:2008-12-01T01:56:26.857+0000:1228067786:2008-12-01T01:56:26.857+0000:Nevermind.  I think such dependency exists already.
njiang:1228067932:2008-12-01T01:58:52.266+0000:1228067932:2008-12-01T01:58:52.266+0000:You can use set the the charset name with the key  ""Exchange.CHARSET_NAME"" in the Exchange properties, 
The converter will take care of the byte -> String encoding stuff.
akarpe:1228074295:2008-12-01T03:44:55.703+0000:1228074325:2008-12-01T03:45:25.841+0000:Would you like to me to change the code in some way... Please clarify.

Ashwin...
njiang:1228075189:2008-12-01T03:59:49.738+0000:1228075189:2008-12-01T03:59:49.738+0000:Hi Ashwin ,  Don't worry, I am working on it :)
njiang:1228085194:2008-12-01T06:46:34.940+0000:1228085194:2008-12-01T06:46:34.940+0000:Applied  patch with thanks to Ashwin.
* NOTE *
I removed the UnZippedMessageProcessor to use the MockEndpoint for result verification, and added the jaxb.index for schema generation.
njiang:1228093785:2008-12-01T09:09:45.520+0000:1228093785:2008-12-01T09:09:45.520+0000:Applied the patch into trunk and camel-1.x branch
davsclaus:1248993225:2009-07-31T06:33:45.381+0000:1248993225:2009-07-31T06:33:45.381+0000:Closing 2.0m1 tickets"
0,CAMEL-1132,Sub-task,Major,None,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Claus Ibsen,0,0,2008-11-30 11:50:05+00:00,2009-07-31 06:33:45+00:00,"The new options:



sorter
sorterRef
sortBy



should also be possible on the FTP component. 


Also consider a filter as well, however we can not use java.io.FilenameFilter so we must use our own interface etc.","davsclaus:1228533110:2008-12-06T11:11:50.963+0000:1228533110:2008-12-06T11:11:50.963+0000:I will also remove the timestamp stuff that is marked as @deprecated
davsclaus:1248993225:2009-07-31T06:33:45.362+0000:1248993225:2009-07-31T06:33:45.362+0000:Closing 2.0m1 tickets"
0,CAMEL-1131,Bug,Major,2.0.0,,"
None
",Closed,Duplicate,None,Unassigned,tim mcnamara,0,0,2008-11-29 12:56:04+00:00,2010-02-07 09:54:17+00:00,"parallelProcessing and executor being overridden in constructor.


MulticastProcessor.java
    public MulticastProcessor(Collection<Processor> processors, AggregationStrategy aggregationStrategy, boolean parallelProcessing, ThreadPoolExecutor executor) {
        this(processors, aggregationStrategy, false, null, false);
    }","davsclaus:1227935261:2008-11-29T13:07:41.472+0000:1227935261:2008-11-29T13:07:41.472+0000:Thanks for reporting. It is a duplicate of CAMEL-1108 and has been fixed in 1.5.1 and 2.0
tmcnamara:1227936725:2008-11-29T13:32:05.809+0000:1227936725:2008-11-29T13:32:05.809+0000:do not see the fix in either 1.5.1 or 2.0.0
tmcnamara:1227938348:2008-11-29T13:59:08.003+0000:1227938348:2008-11-29T13:59:08.003+0000:Sorry about that, I did not update this morning.

It should be noted that there appears to be no test for this.  I was  
going to create one using SplitterWithCustomThreadPoolExecutorTest as  
a reference, but noticed that this test was using the executor from  
the SplitterType to validate and not the SplitterProcessor.  It was  
not obvious how to get at the MulticastProcessor from the camel context




davsclaus:1227938665:2008-11-29T14:04:25.676+0000:1227938665:2008-11-29T14:04:25.676+0000:Feel free to submit a unit test for the multicast based on the splitter. We would love that.

Yeah maybe we should add some methods on CamelCountext that will look for a given *Type, either returning the first found, or a list of *Type intances so end users easily can get it instead of all the cumbersome recursive code.

Any thoughts on this? As it will add more methods on the public interface
tmcnamara:1227939905:2008-11-29T14:25:05.404+0000:1227939905:2008-11-29T14:25:05.404+0000:It would be trivial to create a multicast test similar to the custom  
splitter.  The problem is, this test would not expose the multicast  
constructor bug as the validation is done against the type and not the  
processor (where the problem lies).  These tests need to cover both  
cases - the problem I ran into, is that there was no obvious way to  
get at the executor from the multicast processor.





davsclaus:1227944412:2008-11-29T15:40:12.068+0000:1227944412:2008-11-29T15:40:12.068+0000:I have exposes the executor using a getter. Could you try update the trunk code and see if that helps?
tmcnamara:1227950105:2008-11-29T17:15:05.451+0000:1227950105:2008-11-29T17:15:05.451+0000:We need to be able to get at the underlying processor from the  
context, then the getter can be used.  How do you get access to the  
MulticastProcessor that MulticastType has created?



"
0,CAMEL-1130,New Feature,Minor,None,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Claus Ibsen,Claus Ibsen,0,0,2008-11-29 10:53:46+00:00,2009-07-31 06:33:45+00:00,"See nabble:
http://www.nabble.com/SFTP-Component-private-key---passphrase-for-connection-tt20711040s22882.html


I will try to add the patch suggested by Yogesh","davsclaus:1227932636:2008-11-29T12:23:56.282+0000:1227932636:2008-11-29T12:23:56.282+0000:Fixed in both 1.5.1 and 2.0

The options is named: *privateKeyFile* and *privateKeyFilePassphrase*
davsclaus:1248993225:2009-07-31T06:33:45.328+0000:1248993225:2009-07-31T06:33:45.328+0000:Closing 2.0m1 tickets"
0,CAMEL-1129,Improvement,Major,1.5.0,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Willem Jiang,Ron Gavlin,0,0,2008-11-29 08:00:46+00:00,2009-07-31 06:33:45+00:00,"The ErrorHandler RedeliveryPolicy appears to lock threads while sleeping until the next redelivery. With lots of concurrent requests requiring increasing redelivery times, this can be a scalability problem.


The RedeliveryPolicy should support the use of a timer thread that would be responsible for managing the ""timeouts"" and firing the redelivery.","njiang:1228253339:2008-12-03T05:28:59.765+0000:1228253339:2008-12-03T05:28:59.765+0000:DeadLetterChannel need to process the sync processor and the async processor.
Since we can't make the sync processor give up it's calling thread for the exchange message processing, 
my patch just put  the async processor's redelivery call into a timer thread.

Here is the async processor's example code
{code}
    protected RouteBuilder createRouteBuilder() {
        final Processor processor = new AsyncProcessor() {
            public void process(Exchange exchange) {
                Integer counter = exchange.getIn().getHeader(DeadLetterChannel.REDELIVERY_COUNTER,
                                                             Integer.class);
                int attempt = (counter == null) ? 1 : counter + 1;
                if (attempt < failUntilAttempt) {
                    throw new RuntimeException(""Failed to process due to attempt: "" + attempt
                                               + "" being less than: "" + failUntilAttempt);
                }
            }
            // START SNIPPET: AsyncProcessor
            public boolean process(Exchange exchange, AsyncCallback callback) {                
                Integer counter = exchange.getIn().getHeader(DeadLetterChannel.REDELIVERY_COUNTER,
                                                             Integer.class);
                int attempt = (counter == null) ? 1 : counter + 1;
                if (attempt > 1) {
                    assertEquals(""Now we should use TimerThread to call the process"", Thread.currentThread().getName(), ""Timer-0"");
                }
                
                if (attempt < failUntilAttempt) {
                    // we can't throw the exception here , or the callback will not be invoked.
                    exchange.setException(new RuntimeException(""Failed to process due to attempt: "" + attempt
                                               + "" being less than: "" + failUntilAttempt));
                }
                callback.done(false);
                return false;
            }
            // END SNIPPET: AsyncProcessor
        };

        return new RouteBuilder() {
            public void configure() {
                from(""direct:start"").errorHandler(
                    deadLetterChannel(""mock:failed"").maximumRedeliveries(2)
                        .delay(1000)
                        .loggingLevel(LoggingLevel.DEBUG)

                ).process(processor).to(""mock:success"");
            }
        };
    }

{code}
njiang:1228253573:2008-12-03T05:32:53.865+0000:1228253573:2008-12-03T05:32:53.865+0000:Applied the patch into trunk and camel-1.x branch.
davsclaus:1228258131:2008-12-03T06:48:51.221+0000:1228258131:2008-12-03T06:48:51.221+0000:Willem and we are sure this only applies for async behavior? 

What if end-user or 3rd part framework adds stuff to ThreadLocal and thus if we use a different thread for redelivery then that stuff is gone. Or am I not thinking clear? I just got into the office and on the first cup of coffee ;)
njiang:1228259974:2008-12-03T07:19:34.147+0000:1228259974:2008-12-03T07:19:34.147+0000:@Claus

That's because if we call the sync processor, the caller will block and wait for processor finish it's work then handle the exchange.
If we put the redelivery work into the timer and return from the processor, the exchange will not handle rightly.

Current Camel AsyncProcessor API can't handle the ThreadLocal stuff, in that case , I think we  need switch to use sync processor API.


davsclaus:1248993225:2009-07-31T06:33:45.300+0000:1248993225:2009-07-31T06:33:45.300+0000:Closing 2.0m1 tickets"
0,CAMEL-1128,Improvement,Major,None,None,"
None
",Closed,Fixed,2.0-M1,James Strachan,James Strachan,0,0,2008-11-28 15:37:48+00:00,2009-07-31 06:33:45+00:00,No Desc,"jstrachan:1228115608:2008-12-01T15:13:28.100+0000:1228115608:2008-12-01T15:13:28.100+0000:I've hacked up an example test case using Spring Test along with Spring Java Config here
https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-spring-javaconfig/

e.g.
https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-spring-javaconfig/src/test/java/org/apache/camel/spring/javaconfig/examples/

here's the test case
https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-spring-javaconfig/src/test/java/org/apache/camel/spring/javaconfig/examples/FilterTest.java

the configuration is here
https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-spring-javaconfig/src/test/java/org/apache/camel/spring/javaconfig/examples/FilterConfig.java


Unfortunately it doesn't currently work :( due to a bug where BeanPostProcessors don't seem to be invoked on test classes
http://jira.springframework.org/browse/SJC-248

once this is fixed then hopefully we can enable this component and document it on the wiki
jstrachan:1228723091:2008-12-08T15:58:11.066+0000:1228723091:2008-12-08T15:58:11.066+0000:for background and documentation see http://activemq.apache.org/camel/testing.html
davsclaus:1248993225:2009-07-31T06:33:45.280+0000:1248993225:2009-07-31T06:33:45.280+0000:Closing 2.0m1 tickets"
0,CAMEL-1097,New Feature,Minor,1.5.0,,"
None
",Closed,Won't Fix,None,Roman Kalukiewicz,Roman Kalukiewicz,0,0,2008-11-18 10:18:39+00:00,2008-12-26 13:03:40+00:00,allInterfaces parameter should allow to expose a http endpoint on all available network interfaces. It should be like passing null host to ServerSocket class.,"hadrian:1226982146:2008-11-18T12:22:26.639+0000:1226982146:2008-11-18T12:22:26.639+0000:I really don't see any difference between 0.0.0.0 as a hostname and anyLocalhost=true or allInterfaces=true attributes.  We'd have to either check for an attribute value or the hostname value.  When one reads a url, the semantics of 0.0.0.0 is pretty clear and we can put in the necessary code to deal with ipv6 (which i suspect it should be handled already anyway).

I'll give this a -1.  I'll gladly change my vote if I see a compelling argument.

> This is what I really like. This way what we do is clear, and we
> explicitely mark that we want to ignore host part of the uri.
Yeah, a hostname of 0.0.0.0 would mean precisely the same thing.


romkal:1226983681:2008-11-18T12:48:01.177+0000:1226983681:2008-11-18T12:48:01.177+0000:The point is that in case of 0.0.0.0 we don't have to check the value. We just pass it to connector and IP stack already knows what it means. With the flag we have to test and pass {{null}} instead. If there is no difference in behavior then I agree with your -1.
hadrian:1226984148:2008-11-18T12:55:48.209+0000:1226984148:2008-11-18T12:55:48.209+0000:If we were to test for something, I'd rather test for a hostname.startsWith( ""0.0.0.0"") than an attribute (which we may want to take out of the url before passing it to the stack anyway), and then replace the hostname value with null.  But as I said, I strongly doubt that's needed at all.

davsclaus:1229516520:2008-12-17T20:22:00.529+0000:1229516520:2008-12-17T20:22:00.529+0000:+1 on Hadrians suggestion: hostname.startsWith( ""0.0.0.0""

Roman what is the status of this one? Isn't this important to get into Camel 1.5.1?
romkal:1230044233:2008-12-23T22:57:13.696+0000:1230044233:2008-12-23T22:57:13.696+0000:After all this discussion and options presented I believe that if we want to test for {{startsWith(""0.0.0.0"")}} then it is better to simply close the issue and do nothing.
The reason is that someone can argue that if he/she writes {{0.0.0.0}} then he/she means it and it should be the thing passed to IP stack. In majority of situations passing 0.0.0.0 to IP stack will expose an endpoint on all interfaces via IPv4 and IPv6 (I believe). If not - the only thing we risk is that someone will have to create two endpoints for IPv4 and IPv6 separately.


"
0,CAMEL-1096,Improvement,Major,1.5.0,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Claus Ibsen,0,0,2008-11-16 11:50:54+00:00,2009-07-31 06:33:42+00:00,"SUN JavaMail has many properties for configuring Java Mail.
http://java.sun.com/products/javamail/javadocs/index.html


Currently you can set either all java mail properties yourself or set a few of them using the URI. We should support the 
javamail.XXX option so you can append whatever you want.


And maybe also a bean ref so you can configure this nicely in Spring DSL.","davsclaus:1226807604:2008-11-16T11:53:24.506+0000:1226807604:2008-11-16T11:53:24.506+0000:For instance to set a POP3 top option to disabled
http://java.sun.com/products/javamail/FAQ.html

Such as this FAQ:
Q: I'm having problems using POP3 with Microsoft Exchange.
A: Some versions of Microsoft Exchange do not implement the POP3 protocol properly. They return different headers from the TOP command than they do from the RETR command. This can cause all sorts of strange failures in JavaMail. One solution is to disable use of the TOP command, as described above. Another approach that works in some cases os to tell JavaMail to forget about the headers it retrieved using the TOP command after retrieving the entire message using the RETR command. To do this, set the property ""mail.pop3.forgettopheaders"" to ""true"". 

It should be possible to set it as:
mail.pop3.forgettopheaders=true

The option should be: *mail.*xxx
davsclaus:1226818402:2008-11-16T14:53:22.407+0000:1226818402:2008-11-16T14:53:22.407+0000:Revision #718043 Committed by davsclaus at 16-11-08 15:52:14
CAMEL-1096: camel-mail now supports setting additional java mail properties if URI options starts with mail.
davsclaus:1226818693:2008-11-16T14:58:13.459+0000:1226818693:2008-11-16T14:58:13.459+0000:As this is probably rare that you set these properties I dont wanna go throught the trouble of creating a ref option to lookup in the registry for a Properties that you can configure as a spring bean with these additional properties. Just set miltiple values on the URI directly.
davsclaus:1248993222:2009-07-31T06:33:42.283+0000:1248993222:2009-07-31T06:33:42.283+0000:Closing 2.0m1 tickets"
0,CAMEL-1095,Bug,Major,1.5.0,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Claus Ibsen,Claus Ibsen,0,1,2008-11-16 09:17:58+00:00,2012-12-03 09:24:55+00:00,"The Content-Type is not set in HttpBinding if an end-user has provided one as a OUT header.


So if an user exposes a Jetty service and lets requests fly in that is text/plain and want to return a response that is image/jpeg or the likes the content type can not be set as:
            exchange.getOut().setHeader(""Content-Type"", ""image/jpeg"");","davsclaus:1226798525:2008-11-16T09:22:05.547+0000:1226798525:2008-11-16T09:22:05.547+0000:Content-Length is also missing
davsclaus:1226799180:2008-11-16T09:33:00.066+0000:1226799180:2008-11-16T09:33:00.066+0000:Example as the http headers returned now
{code}
HTTP/1.x 200 OK
Transfer-Encoding: chunked
Server: Jetty(6.1.11)
{code}

And with a code fix we have for the same request:
{code}
HTTP/1.x 200 OK
Content-Type: image/jpeg
Content-Length: 10249
Server: Jetty(6.1.11)
{code}
davsclaus:1248993222:2009-07-31T06:33:42.245+0000:1248993222:2009-07-31T06:33:42.245+0000:Closing 2.0m1 tickets
tosheer:1354497895:2012-12-03T09:24:55.624+0000:1354497895:2012-12-03T09:24:55.624+0000:Claus,

We are still facing the mentioned issue.

Camel Version: 2.9.2
Camel Jetty Jar Version 2.9.0

Problem statement: Although I include the statement setHeader(""Content-Type"", ""application/json""); or setHeader(""Content-Type"", ""application/xml"");, upon debugging I can see the following behaviour.

1.) Class ""DefaultHeaderFilterStrategy"", method ""doFiltering"" contains ""Content-Type"" as one of the filters to skip. Thus it removes the ""Content-Type"" from header if mentioned explicitly also.

Please provide the resolution to set the ""Content-Type"" in response header or please let us know in-case we are missing something. "
0,CAMEL-1094,Bug,Major,None,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Willem Jiang,William Tam,0,0,2008-11-15 15:36:49+00:00,2009-07-31 06:33:42+00:00,"Here is a email thread on this issue.   Basically, the CxfProducer rrelies on Jaxws/ClientFactoryBean to create a client object.  However, JaxwsClientFactoryBean does not support setting and building jaxws handler chain.   Even if it did, we would still have to replicate the same logics (that build the handler chain) in Camel's CxfClientFactoryBean because it CxfClientFactoryBean is a hybrid of both Jaxws and simple client frontend.


http://www.nabble.com/camel-cxf-jaxws-handler-support-td20512478s22882.html","wtam@iona.com:1226734929:2008-11-15T15:42:09.083+0000:1226734929:2008-11-15T15:42:09.083+0000:The patch was done on the 1.x.  Please review it  We will need to update the document and mention that SEI must be an interface.
njiang:1226775840:2008-11-16T03:04:00.891+0000:1226775840:2008-11-16T03:04:00.891+0000:Applied the patch into trunk and camel-1.x branch with thanks to William.
Also updated the camel-cxf wiki page.
davsclaus:1226789669:2008-11-16T06:54:29.449+0000:1226789669:2008-11-16T06:54:29.449+0000:I think the SEI change needs to be documented on the release notes for 1.5.1 and 2.0 that it *must* be an interface now.

http://activemq.apache.org/camel/camel-151-release.html
http://activemq.apache.org/camel/camel-200-release.html
davsclaus:1248993222:2009-07-31T06:33:42.192+0000:1248993222:2009-07-31T06:33:42.192+0000:Closing 2.0m1 tickets"
0,CAMEL-1093,Bug,Major,1.5.0,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Claus Ibsen,Claus Ibsen,0,0,2008-11-15 11:01:11+00:00,2009-07-31 06:33:41+00:00,"The code below:



    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            public void configure() throws Exception {
                errorHandler(noErrorHandler());
                from(""jetty:http://localhost:8080/myapp/myservice"").process(new MyBookService());
            }
        };
    }

    public class MyBookService implements Processor {
        public void process(Exchange exchange) throws Exception {
            throw new IllegalArgumentException(""Damm"");
        }
    }




Will return http response code 200. We should let end users easily set what response code they want and in case of route failures we should probably return 500 and return the stracktrace in the body","davsclaus:1226718657:2008-11-15T11:10:57.786+0000:1226718657:2008-11-15T11:10:57.786+0000:HttpBinding should test for failures
davsclaus:1248993221:2009-07-31T06:33:41.487+0000:1248993221:2009-07-31T06:33:41.487+0000:Closing 2.0m1 tickets"
0,CAMEL-1092,Bug,Major,1.6.0,1.6.0,"
None
",Closed,Fixed,1.6.0,Hadrian Zbarcea,Seumas Soltysik,0,0,2008-11-14 18:57:47+00:00,2009-11-21 11:56:56+00:00,"When running a Camel router scenario, I am getting a ClassNotFoundError  for the OSGi Bundle class from the ResolverUtil class. It seems like this code should be in the camel-osgi bundle or perhaps should be more reflection based.","davsclaus:1226711979:2008-11-15T09:19:39.274+0000:1226711979:2008-11-15T09:19:39.274+0000:Seumas do you run it in an OSGi platform?

The imports for OSGi bundle classes should only kick in if Camel have determine that the classloader is a OSGi bundle loader.

You can enable TRACE logging (eg Log4j set level to TRACE) and it will spit out a lot of useful logs for Hadrian to check out.

BTW: I am wondering if we should add somekind of flag to control this behavior so you can force it to not scan OSGi bundles. And Gerv has some ideas to improve the OSGi stuff for 2.0.
There is another ticket somewehere about this.
wtam@iona.com:1227130043:2008-11-20T05:27:23.821+0000:1227130043:2008-11-20T05:27:23.821+0000:Also, you don't want to have camel-osgi jar in your classpath, if you are using Spring to inject CamelContext but not running camel in OSGi container.  Otherwise, the org.apache.camel.osgi.CamelNamespaceHandler takes over and it tries to load classes from OSGi packages.
hadrian:1227153550:2008-11-20T11:59:10.917+0000:1227153550:2008-11-20T11:59:10.917+0000:This is not entirely accurate.  It depends on the namespace.  For camel-osgi, camelContext is in the ""http://activemq.apache.org/camel/schema/osgi"" namespace.  If that namespace is used org.apache.camel.osgi.CamelNamespaceHandler takes over.
wtam@iona.com:1227184901:2008-11-20T20:41:41.229+0000:1227184901:2008-11-20T20:41:41.229+0000:I wasn't entirely accurate.   Here is what I saw.  If both camel-osgi and spring-osgi-core jars are present in the classpath, then the OSGI version of the SpringCamelContext will kick in even though the namespace does not specify the osgi one.  I am not sure how it happens.  Any enlightenment would be appreciated.  Spring must have pulled some magic. :-)  It is nice because the route configuration does not have to know anything about osgi (namespace) and it just works in either environment.  The attached test case can demonstrate that behavior.  Uncomment the spring-osgi-core-1.1.2.jar line in the build.xml and set it to the jar location, then run ""ant router"" target  It will fail with  ""java.lang.NoClassDefFoundError: org/osgi/framework/BundleContext"".   Before running the ant.

1) Get 1.5.0 binary distribution and untar it.
2) Set CAMEL_HOME to the camel installation directory
3) Untar the test.tar to CAMEL_HOME directory 

hadrian:1227189914:2008-11-20T22:05:14.237+0000:1227189914:2008-11-20T22:05:14.237+0000:@William, thanks for the test.  I banged my head against this one for 2 days now.  I think I know what the problem is.    OSGI awareness is sort built into the core assuming that osgi is always used with camel-osgi, which is obviously not the case.  I think it's our bug, not Spring's magic.

I think I'm almost done with this.  I only have a chicken'n'egg bootstrapping issue to fix, but I badly need a bit of luck.
wtam@iona.com:1227217863:2008-11-21T05:51:03.370+0000:1227217863:2008-11-21T05:51:03.370+0000:Thanks Hadrian.   Good luck with the fix.   I believe we are actually talking about different issues.    I guess mine isn't really an issue.  FYI,  my mystery has been solved.  It is the org.apache.camel.spring.handler.CamelNamspaceHandler.init() method doing the trick.
njiang:1232062401:2009-01-16T07:33:21.642+0000:1232062401:2009-01-16T07:33:21.642+0000:I think this issue is resolved with CAMEL-1240
davsclaus:1258775816:2009-11-21T11:56:56.647+0000:1258775816:2009-11-21T11:56:56.647+0000:Closing all 1.6.0 issues"
0,CAMEL-1091,Bug,Major,1.5.0,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Roman Kalukiewicz,Roman Kalukiewicz,0,0,2008-11-14 16:54:13+00:00,2009-07-31 06:33:41+00:00,http://www.nabble.com/Jetty-and-Mina%3A-how-to-bind-to-%22anylocal%22-AKA-%22wildcard%22-address--tp20475674s22882p20494645.html,"romkal:1226901813:2008-11-17T14:03:33.482+0000:1226901813:2008-11-17T14:03:33.482+0000:Warning is added when someone creates flow that refers to 'localhost' and it proposes 0.0.0.0 instead. Warning appears once per jetty connector (host+port pair) so if you have 10 flows with localhost:80 you have only one warning.
davsclaus:1226913484:2008-11-17T17:18:04.013+0000:1226913484:2008-11-17T17:18:04.013+0000:Rom it doesn't compile on jdk1.5. Camel should be build with 1.5 only.
davsclaus:1226913524:2008-11-17T17:18:44.770+0000:1226913524:2008-11-17T17:18:44.770+0000:And maybe the 0.0.0.0 stuff cant be tested on unix as you normally cant bind to ports under < 1024. Jonathan can help test on all sort of platforms.
janstey:1226914105:2008-11-17T17:28:25.886+0000:1226914105:2008-11-17T17:28:25.886+0000:janstey@mojo:/x1/apache/camel-trunk/components/camel-jetty$ svn ci -m ""CAMEL-1091 - Fix compilation issue on Java 1.5""
Sending        camel-jetty/src/test/java/org/apache/camel/component/jetty/InterfacesTest.java
Transmitting file data .
Committed revision 718279.

Roman, would you mind reviewing my fix for this test? It should work now on Java 1.5/1.6.
janstey:1226915251:2008-11-17T17:47:31.135+0000:1226915251:2008-11-17T17:47:31.135+0000:Another note by Willem:

(02:04:43 PM) willem: There'r a MalformedURLException http://rafb.net/p/8s9PsR33.html when I run the InterfacesTest, It looks like the URL doesn't support IPV6's address. I ran the test on my Windows Vista box with JDK 1.5.0_13.

From http://rafb.net/p/8s9PsR33.html
{code}
java.net.MalformedURLException: For input string: ""0:0:0:0:5efe:c0a8:76%21:4567""
	at java.net.URL.<init>(URL.java:601)
	at java.net.URL.<init>(URL.java:464)
	at java.net.URL.<init>(URL.java:413)
	at org.apache.camel.component.jetty.InterfacesTest.testLocalInterfaceHandled(InterfacesTest.java:48)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at junit.framework.TestCase.runTest(TestCase.java:164)
	at junit.framework.TestCase.runBare(TestCase.java:130)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:120)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)
{code}
romkal:1226919978:2008-11-17T19:06:18.730+0000:1226919978:2008-11-17T19:06:18.730+0000:I committed the test that I believe should work for IPv6. Unfortunately I don't have IPv6 interface at my machine so I cannot test it out. If someone that has IPv6 enabled (I can see Willem has) could run this test it would be great. If you find some obvious errors, please fix them, as IPv6 is something I can hardly test.
njiang:1226962655:2008-11-18T06:57:35.821+0000:1226962655:2008-11-18T06:57:35.821+0000:Hi Roman, 

The IPV6 test does not work in my Vista box with JDK1.5.0_13 or JDK1.6.0_6.  After struggling this for an hour, I found It's a known issue of SUN's JDK[1].

So I will disable the test of IPV6.

[1] http://bugs.sun.com/view_bug.do;jsessionid=70afcb213c8795d4c8b77a9d4175?bug_id=6230761

Willem
romkal:1226969082:2008-11-18T08:44:42.089+0000:1226969082:2008-11-18T08:44:42.089+0000:Hey Willem,

I had no chance to hit this problem without IPv6 interface on my Windows XP :). On the other hand test passes on my linux box at home that have IPv6. Anyway of course we don't want to hurt anyone with Windows with this test ;)

Thank you for finding it out.
davsclaus:1226969449:2008-11-18T08:50:49.401+0000:1226969449:2008-11-18T08:50:49.401+0000:From a skin read of the sun bug report it looks like they will only fix the Windows IPv6 on JDK7, that seems a bit harsh I think. But I could be mistaking.
davsclaus:1248993221:2009-07-31T06:33:41.459+0000:1248993221:2009-07-31T06:33:41.459+0000:Closing 2.0m1 tickets"
0,CAMEL-1090,Bug,Major,1.5.0,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Gary Tully,Gary Tully,0,1,2008-11-14 15:28:52+00:00,2009-07-31 06:33:41+00:00,"from the apache-camel-load test:


2008-11-14 15:27:01,114 [mponent@1296d1d] INFO  aset:myDataSet?produceDelay=10 - Sent: 600 messages so far. Last group took: 0 millis which is: 85.106 messages per second. average: 80.128


The ThroughputLogger used by DataSet resets the duration before reporting it.","gtully:1226647823:2008-11-14T15:30:23.258+0000:1226647823:2008-11-14T15:30:23.258+0000:resolved in r714032
njiang:1226648662:2008-11-14T15:44:22.696+0000:1226648662:2008-11-14T15:44:22.696+0000:Hi Gary

Current Camel trunk's version is 2.0-snapshot, if you wants this patch to be applied into the 1.5.1-snapshot , you need merge it from trunk to camel-1.x branch.
Don't worry, I will do  the merge for you in a minute :)

Willem
njiang:1226649038:2008-11-14T15:50:38.393+0000:1226649038:2008-11-14T15:50:38.393+0000:The patch is in camel trunk and camel1.x branch now.
davsclaus:1248993221:2009-07-31T06:33:41.394+0000:1248993221:2009-07-31T06:33:41.394+0000:Closing 2.0m1 tickets"
0,CAMEL-1089,Task,Major,None,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Claus Ibsen,0,0,2008-11-14 08:58:41+00:00,2009-07-31 06:33:41+00:00,"We need some Spring DSL samples for the error handling stuff
http://activemq.apache.org/camel/error-handler.html","davsclaus:1226624723:2008-11-14T09:05:23.355+0000:1226624723:2008-11-14T09:05:23.355+0000:We can use samples from:
https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-spring/src/test/resources/org/apache/camel/spring/config/

Also the onException should be documented as well (if not already)
davsclaus:1226638644:2008-11-14T12:57:24.227+0000:1226638644:2008-11-14T12:57:24.227+0000:Added spring sample:
http://cwiki.apache.org/confluence/display/CAMEL/Error+Handler
davsclaus:1248993221:2009-07-31T06:33:41.360+0000:1248993221:2009-07-31T06:33:41.360+0000:Closing 2.0m1 tickets"
0,CAMEL-1088,Bug,Major,"1.3.0, 1.4.0, 1.5.0","1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Willem Jiang,Willem Jiang,0,0,2008-11-14 07:15:27+00:00,2009-07-31 06:33:41+00:00,"When I added a unit test to show how to get the SOAP header from a PAYLOAD camel-cxf endpoint , I found the soap header stuff is not working.","njiang:1226618769:2008-11-14T07:26:09.642+0000:1226618769:2008-11-14T07:26:09.642+0000:Also updated the wiki page.
davsclaus:1248993221:2009-07-31T06:33:41.322+0000:1248993221:2009-07-31T06:33:41.322+0000:Closing 2.0m1 tickets"
0,CAMEL-1087,Task,Major,None,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Claus Ibsen,0,0,2008-11-14 07:12:41+00:00,2009-07-31 06:33:41+00:00,"The javadoc should be reivised in ProcessorType and the other models as well as it's used for the Java DSL.


We have a few errors with copypaste etc.","davsclaus:1226901741:2008-11-17T14:02:21.752+0000:1226901741:2008-11-17T14:02:21.752+0000:I added a few TODO in the ProcessorType  to look into. Only policy is not documented.

*interceptor*
gertv davsclaus: not sure why it returns a choicetype here 
14:43 gertv davsclaus: it only appears to be adding a conditional interceptor 
14:45 gertv davsclaus: sorry, the choicetype actually goes in the interceptor there, my mistake 
14:45 davsclaus must be the when that triggers the choicetype to return? 
14:45 davsclaus .when 
14:46 gertv yes, it is 
14:46 gertv but I don't know how you would use that 
14:46 davsclaus ah could make sence to intercept only when predicate is true, but the return type is choice which confused me 
14:47 davsclaus .intercept(header(""foo"").isEqualTo(""bar"")).to(""mock:foobar"") something like that? 
14:47 gertv yes, that would make sense, but I don't see how you would use that from the DSL though 
14:47 davsclaus yeah it laks a unit test ;) 
14:47 gertv yeah, but how would you continue the route after that? 
14:47 gertv because it only makes sense to intercept if you can go on with what you were doing afterwards 
14:48 davsclaus ah maybe you can continue on the choice type builder? 
14:48 davsclaus intercept has a proceed() and a stop() to determine what to do 
14:48 davsclaus .stop() will break the route  
14:48 davsclaus .proceed() will continue from original point of interception as if nothing happened 
14:49 davsclaus but better to ask the computer and add some unit tests for it ;) 

*dataformat*

davsclaus btw I think we have a few to many marshal / unmarshal DSL as well that accepts the xxxType class? I was wondering why? 
14:51 davsclaus see TODO in the code 
14:57 gertv davsclaus: yeah, you would have expected the DataFormatClause to be implementing using the SPI classes instead of the *Type classes 
14:57 gertv implenting -> implemented 

davsclaus:1227090971:2008-11-19T18:36:11.699+0000:1227090971:2008-11-19T18:36:11.699+0000:This is a task that I from time to time will work on
davsclaus:1227526270:2008-11-24T19:31:10.083+0000:1227526270:2008-11-24T19:31:10.083+0000:Okay the Java DSL builders should have javadoc now
davsclaus:1248993221:2009-07-31T06:33:41.294+0000:1248993221:2009-07-31T06:33:41.294+0000:Closing 2.0m1 tickets"
0,CAMEL-1086,Bug,Major,None,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Willem Jiang,William Tam,0,0,2008-11-14 06:00:57+00:00,2009-07-31 06:33:41+00:00,"The ""from"" endpoint instead of the ""to"" cxf endpoint object is left in the cxf exchange by CxfClient, which can cause problems for CXF interceptors that depend on cxf endpoint object in the exchange.","wtam@iona.com:1226613950:2008-11-14T06:05:50.743+0000:1226613950:2008-11-14T06:05:50.743+0000:Note: the patch was created from the 1.x branch.   
njiang:1226641212:2008-11-14T13:40:12.482+0000:1226641212:2008-11-14T13:40:12.482+0000:Applied patch with thanks to William.
davsclaus:1248993221:2009-07-31T06:33:41.260+0000:1248993221:2009-07-31T06:33:41.260+0000:Closing 2.0m1 tickets"
0,CAMEL-1085,Task,Minor,None,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Claus Ibsen,Claus Ibsen,0,0,2008-11-13 10:43:07+00:00,2009-07-31 06:33:41+00:00,"We should add to the simple example (5 mins tutorial) that .to is not the end of the world


So you do



from(a).process(b).to(c)




That you can do



from(a).process(b).to(c).process(d)","davsclaus:1226554021:2008-11-13T13:27:01.409+0000:1226554021:2008-11-13T13:27:01.409+0000:http://cwiki.apache.org/confluence/display/CAMEL/Walk+through+another+example
davsclaus:1248993221:2009-07-31T06:33:41.241+0000:1248993221:2009-07-31T06:33:41.241+0000:Closing 2.0m1 tickets"
0,CAMEL-1084,Improvement,Minor,1.4.0,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Claus Ibsen,Guillaume Lundy,0,0,2008-11-13 08:53:54+00:00,2009-07-31 06:33:41+00:00,"Hi, 
In class ProducerTemplate, to perform an InOnly Request, we can use 
   Object sendBodyAndHeader(String endpoint,
                                         ExchangePattern pattern,
                                         final Object body,
                                         final String header,
   If we have only a single header 
  and
    Object sendBodyAndHeaders(String endpointUri,
                                           final Object body,
                                           final Map<String, Object>
headers)
  If we have multiple headers.


To perform InOut Requests, it is recommended to use requestXXX method.


The only method requestXXX that exist is with a single hearder (no 's' at the
end of the method)
   Object requestBodyAndHeader(String endpointUri, Object body, String
header, Object headerValue);


So, we cannot perform a request with multiple headers.
The following method is missing:
   Object requestBodyAndHeaders   (with a 's' at the end) 


Regards, Guillaume","davsclaus:1226538140:2008-11-13T09:02:20.571+0000:1226538140:2008-11-13T09:02:20.571+0000:Just need to backport CAMEL-1065 to 1.5.1
davsclaus:1248993221:2009-07-31T06:33:41.162+0000:1248993221:2009-07-31T06:33:41.162+0000:Closing 2.0m1 tickets"
0,CAMEL-1083,Improvement,Major,1.5.0,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Claus Ibsen,Claus Ibsen,0,0,2008-11-13 07:05:24+00:00,2009-07-31 06:33:40+00:00,"Currently we do not store the content if there was a eg HTTP error 500 returned. But throw a HttpOperationFailedException.


We should store the content also so end-users have access to this one as well. Maybe add some strategy methods on the HttpProducer so end users can override this class and create their own implementation.


See nabble:
http://www.nabble.com/HttpProducer%3A-how-to-access-the-body-of-an-error-page-i-td20475651s22882.html","davsclaus:1226542944:2008-11-13T10:22:24.467+0000:1226542944:2008-11-13T10:22:24.467+0000:You can get the error content in Camel 1.4.0
davsclaus:1226720280:2008-11-15T11:38:00.238+0000:1226720280:2008-11-15T11:38:00.238+0000:A patch with a fix. Would like review by fellow committers
davsclaus:1226720377:2008-11-15T11:39:37.379+0000:1226720377:2008-11-15T11:39:37.379+0000:The patch also fixes CAMEL-1093.

To review:
- in case of exception should we return response code 500
- should we write the exception message and exception stracktrace as response body
- do we need a convient methods response body as string on the HttpOperationFailedException
njiang:1227214716:2008-11-21T04:58:36.349+0000:1227214716:2008-11-21T04:58:36.349+0000:Hi Claus 

I reviewed your patch, I think it is necessary for us to send the camel router's internal's error back.
But I didn't find any the strategy methods in the HTTPProducer to override the implmentation of error content store.

Do you plan to address it in this JIRA ?

Cheers,

Willem

davsclaus:1227222176:2008-11-21T07:02:56.307+0000:1227222176:2008-11-21T07:02:56.307+0000:@Willem

Well spotted, I will add the strategy method so end users can customize this behavior.

I was wondering if the current behavior to return the exception as:
MESSAGE
STACKTRACE

Maybe should just be a plain
STACKTRACE


njiang:1227223245:2008-11-21T07:20:45.204+0000:1227223245:2008-11-21T07:20:45.204+0000:@Claus,

I think the plain STACKTRACE should be OK. 
HTTP is a kind of request-reply communication , the client should already know what he send out. 
davsclaus:1227262211:2008-11-21T18:10:11.428+0000:1227262211:2008-11-21T18:10:11.428+0000:CAMEL-1107, CAMEL-1083, CAMEL-1095, CAMEL-1093: Major improvements to camel-jetty and camel-http.
camel-jetty: Now properly returns fault and exception
camel-http: repsonse body is avaiable on HttpOperationFailedException
camel-jetty: introduce HttpBinding as interface and to be referenced in Registry for end users to customize how response should be written
camel-jetty: now returns content-type and content-length if possible to calculate
both: minor URI parsing so internal Camel options is not exposed


Adding         components\camel-http\src\main\java\org\apache\camel\component\http\DefaultHttpBinding.java
Replacing      components\camel-http\src\main\java\org\apache\camel\component\http\HttpBinding.java
Sending        components\camel-http\src\main\java\org\apache\camel\component\http\HttpComponent.java
Sending        components\camel-http\src\main\java\org\apache\camel\component\http\HttpEndpoint.java
Sending        components\camel-http\src\main\java\org\apache\camel\component\http\HttpMessage.java
Sending        components\camel-http\src\main\java\org\apache\camel\component\http\HttpOperationFailedException.java
Sending        components\camel-http\src\main\java\org\apache\camel\component\http\HttpProducer.java
Sending        components\camel-jetty\src\main\java\org\apache\camel\component\jetty\JettyHttpComponent.java
Adding         components\camel-jetty\src\test\data
Adding  (bin)  components\camel-jetty\src\test\data\logo.jpeg
Adding         components\camel-jetty\src\test\java\org\apache\camel\component\jetty\JettyContentTypeTest.java
Adding         components\camel-jetty\src\test\java\org\apache\camel\component\jetty\JettyHttpBindingRefTest.java
Adding         components\camel-jetty\src\test\java\org\apache\camel\component\jetty\JettyHttpClientOptionsTest.java
Adding         components\camel-jetty\src\test\java\org\apache\camel\component\jetty\JettyImageFileTest.java
Adding         components\camel-jetty\src\test\java\org\apache\camel\component\jetty\JettyResponseBodyWhenErrorTest.java
Transmitting file data ..............
Committed revision 719662.
davsclaus:1227264249:2008-11-21T18:44:09.996+0000:1227264249:2008-11-21T18:44:09.996+0000:Wiki updated
davsclaus:1227265182:2008-11-21T18:59:42.698+0000:1227265182:2008-11-21T18:59:42.698+0000:merged to 1.5.1:

D:\project\camel-1x>svn ci -F svnmerge-commit-message.txt
Sending        .
Adding         components\camel-http\src\main\java\org\apache\camel\component\http\DefaultHttpBinding.java
Replacing      components\camel-http\src\main\java\org\apache\camel\component\http\HttpBinding.java
Sending        components\camel-http\src\main\java\org\apache\camel\component\http\HttpComponent.java
Sending        components\camel-http\src\main\java\org\apache\camel\component\http\HttpEndpoint.java
Sending        components\camel-http\src\main\java\org\apache\camel\component\http\HttpMessage.java
Sending        components\camel-http\src\main\java\org\apache\camel\component\http\HttpOperationFailedException.java
Sending        components\camel-http\src\main\java\org\apache\camel\component\http\HttpProducer.java
Sending        components\camel-jetty\src\main\java\org\apache\camel\component\jetty\JettyHttpComponent.java
Adding         components\camel-jetty\src\test\data
Adding  (bin)  components\camel-jetty\src\test\data\logo.jpeg
Adding         components\camel-jetty\src\test\java\org\apache\camel\component\jetty\JettyContentTypeTest.java
Adding         components\camel-jetty\src\test\java\org\apache\camel\component\jetty\JettyHttpBindingRefTest.java
Adding         components\camel-jetty\src\test\java\org\apache\camel\component\jetty\JettyHttpClientOptionsTest.java
Adding         components\camel-jetty\src\test\java\org\apache\camel\component\jetty\JettyImageFileTest.java
Adding         components\camel-jetty\src\test\java\org\apache\camel\component\jetty\JettyResponseBodyWhenErrorTest.java
Transmitting file data ......
Committed revision 719673.
davsclaus:1248993220:2009-07-31T06:33:40.461+0000:1248993220:2009-07-31T06:33:40.461+0000:Closing 2.0m1 tickets"
0,CAMEL-1082,Task,Minor,None,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Willem Jiang,Willem Jiang,0,0,2008-11-13 03:40:46+00:00,2009-07-31 06:33:40+00:00,"Some user asked the questions about how the use the PAYLOAD date format in camel-cxf component, we need to add  the example and documentation for it.","njiang:1226521770:2008-11-13T04:29:30.333+0000:1226521770:2008-11-13T04:29:30.333+0000:Updated the code and wiki page.
davsclaus:1248993220:2009-07-31T06:33:40.427+0000:1248993220:2009-07-31T06:33:40.427+0000:Closing 2.0m1 tickets"
0,CAMEL-1081,Improvement,Minor,1.5.0,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Claus Ibsen,Claus Ibsen,0,0,2008-11-12 18:40:37+00:00,2009-07-31 06:33:40+00:00,"We should try to align the two components



jdbc
sql



so they are more the same to configure with eg the datasource.","davsclaus:1226490608:2008-11-12T19:50:08.124+0000:1226490608:2008-11-12T19:50:08.124+0000:wiki can not be updated right now.

Changes to wiki:
readSize is now default 0, so camel will return *all* data.
davsclaus:1226490858:2008-11-12T19:54:18.148+0000:1226490858:2008-11-12T19:54:18.148+0000:We might consider aligning the update count header to be the same for both component.

camel-sql uses: org.apache.camel.sql.update-count
camel-jdbc uses: jdbc.updateCount
davsclaus:1248993220:2009-07-31T06:33:40.399+0000:1248993220:2009-07-31T06:33:40.399+0000:Closing 2.0m1 tickets"
0,CAMEL-1080,Bug,Minor,"1.4.0, 1.5.0","1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Willem Jiang,Willem Jiang,0,0,2008-11-12 08:23:00+00:00,2009-07-31 06:33:40+00:00,"org.apache.camel.component.dataset.DataSetSedaTest.test
 =================
java.lang.AssertionError: dataset:foo Failed due to caught exception: java.lang.AssertionError: Header: camelDataSetIndex does not match. Expected: 363 but was: 362 on Exchange[Message: <hello>world!</hello>] with headers: 

{camelDataSetIndex=362}

	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:712)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:255)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:214)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:141)
	at org.apache.camel.ContextTestSupport.assertMockEndpointsSatisfied(ContextTestSupport.java:274)
	at org.apache.camel.component.dataset.DataSetSedaTest.test(DataSetSedaTest.java:35)",davsclaus:1248993220:2009-07-31T06:33:40.367+0000:1248993220:2009-07-31T06:33:40.367+0000:Closing 2.0m1 tickets
0,CAMEL-1079,Bug,Major,None,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Willem Jiang,William Tam,0,0,2008-11-11 23:01:25+00:00,2009-07-31 06:33:40+00:00,"If mycamel-cxf (non-pojo mode) endpoint is configured by Spring  to inject CXF other features, CxfProducer drops  MessageDataFormatFeature or PayLoadDataFormatFeature that it has added when endpoint.configure(cfb) is invoked.","wtam@iona.com:1226418356:2008-11-11T23:45:56.095+0000:1226418356:2008-11-11T23:45:56.095+0000:working on a patch.
hadrian:1226419080:2008-11-11T23:58:00.169+0000:1226419080:2008-11-11T23:58:00.169+0000:@William, make sure you add a unit test too.  Thanks.
wtam@iona.com:1226430828:2008-11-12T03:13:48.083+0000:1226430828:2008-11-12T03:13:48.083+0000:@Hadrian, sure.
njiang:1226448478:2008-11-12T08:07:58.547+0000:1226448478:2008-11-12T08:07:58.547+0000:Applied apach into trunk and 2.1.x branch.
davsclaus:1248993220:2009-07-31T06:33:40.344+0000:1248993220:2009-07-31T06:33:40.344+0000:Closing 2.0m1 tickets"
0,CAMEL-1078,Improvement,Critical,1.5.0,2.0-M3,"
None
",Closed,Fixed,2.0-M3,Hadrian Zbarcea,Hadrian Zbarcea,0,0,2008-11-11 22:34:27+00:00,2009-11-21 11:59:09+00:00,"The code in DefaultEndpoint.createExchange(Exchange exchange), calls on getExchangeType() to figure out if a new copy of Exchange needs be created.  The code relies though on the generic argument of the Endpoint type to figure out the actual Exchange type.  With the generics removed part of CAMEL-872, getExchangeType() always returns null, forcing a copy every time.


There is no real need to extend Exchange, so the proposal for this to make the Exchange final and move the component specific bits, if any,  in the Message.","hadrian:1226414208:2008-11-11T22:36:48.219+0000:1226414208:2008-11-11T22:36:48.219+0000:Removal of generics caused this.
hadrian:1226418458:2008-11-11T23:47:38.490+0000:1246671313:2009-07-04T09:35:13.758+0000:Exchange specialized classes to be removed:
[DONE] - BeanExchange
[DONE] - CxfExchange
[DONE] - DummyExchange
[DONE] - FileExchange
[DONE] - HttpExchange
[DONE] - IrcExchange
[DONE] - JhcExchange
[DONE] - JmsExchange
[DONE] - JMXExchange
[DONE] - MailExchange
[DONE] - MinaExchange
[DONE] - MyExchange
[DONE] - QuartzExchange
[DONE] - RemoteFileExchange
[DONE] - SpringIntegrationExchange
[DONE] - TraceEventExchange
[DONE] - XmppExchange
[DONE]- GroupedExchange

And some hard ones:
[DONE] - GenericFileExchange
[DONE] - RemoteFileExchange

davsclaus:1226444404:2008-11-12T07:00:04.297+0000:1226444404:2008-11-12T07:00:04.297+0000:+1

camel-extra has no specialized Exchanges, so we are safe there.
jstrachan:1228794559:2008-12-09T11:49:19.901+0000:1228794559:2008-12-09T11:49:19.901+0000:Hadrian - removing the generics doesn't mean we should remove the specialised Exchange implementations!

They can be a massive optimisation!

e.g. if you are routing from JMS to JMS and you don't modify the payload at all - you could just forward the JMS message on. Or you can expose the full JMS message to JMS aware consumers.

So I don't see why we need to remove the custom exchange implementations if they add some possible value!
jstrachan:1228794604:2008-12-09T11:50:04.757+0000:1228794604:2008-12-09T11:50:04.757+0000:For performance btw we don't wanna construct a Camel Exchange / Message until we really really need one - and preferably avoid doing conversions if we can help them.

e.g. don't force the deserialisation of all the JMS Message properties until folks really look at them in a route.
jstrachan:1228794692:2008-12-09T11:51:32.384+0000:1228794692:2008-12-09T11:51:32.384+0000:BTW the main reason to zap generics was it forced a pointless copy of an exchange when sending to - say - a JMS endpoint. However when consuming from a JMS endpoint - using a JmsExchange makes sense - and is a good optimisation IMHO
jstrachan:1228794849:2008-12-09T11:54:09.859+0000:1228794849:2008-12-09T11:54:09.859+0000:after having more coffee (mmm!) - I guess custom exchange implementations don't add a huge value - other than typesafe getters for custom Message objects; so its not a huge biggie.

Custom Message implementations though is a biggie :)
romkal:1242266455:2009-05-14T10:00:55.797+0000:1242266455:2009-05-14T10:00:55.797+0000:So let me add my thoughts on it.

I believe Exchange don't have to be specialized and moreover messages should be not. To become consistent across all message types and components I believe we should use generic Message class that has an access to original message received from the endpoint.

This solution might have few benefits:
* Consistent look at the message independent of actual component used
** For example in JMS some headers are stored in the JMS message itself, while some in Camel's map of headers, because not every name can be used as JMS property name)
** In few cases I can retrieve a headers via getHeader(String), but they doesn't exists in the map returned by getHeaders() - I believe it was in JBI some time ago. This solution would eliminate those problems at all!
* If we keep original technology-specific message in camel exchange in read-only fashion, we can always access original request that came to the endpoint - it might be generally Object, so it can be used by any component.
** We can also keep some 'dirty' flag that can make solutions more optimal like JMS<->JMS bridge, that can detect unchanged JMS message and send it directly
** I believe because of Camel message model being not always 100% compatible with any technology we should avoid synchronizing camel message with underlying message as it is not always possible or meaningful.
** It involves marshaling/unmarshaling process when message arrives, but I would really like to keep all camel headers/body in one place - in DefaultMessage. Now when you debug, you never know ;) The only usage of subclasses of DefaultMessage I see is to delay marshaling/unmarshaling process like lazy-creating body or headers map when you retrieve them.
* And my beloved topic about one message per exchange - no in/out/fault distinction, but it is different story ;)

I know that all those things can be (in majority) fixed by tailing bugs, but simplification of the concept itself seems to be more bug-proof ;)

Maybe not all of those things should be targeted for 2.0, but those are my thoughts on Camel message model ;)
hadrian:1242285794:2009-05-14T15:23:14.734+0000:1242285794:2009-05-14T15:23:14.734+0000:@Roman,
I will work on finishing this issue this week, so we could have it in 2.0-M2.  I am not sure I agree with the no specialized Messages proposal, I hope others will pitch in.  I think it's actually a ""cleaner"" solution than you ""dirty"" flag (sorry, couldn't resist it :) ).

davsclaus:1242455155:2009-05-16T14:25:55.143+0000:1242455155:2009-05-16T14:25:55.143+0000:@Hadrian

I think it requires a bit more work than its possible to do over a weekend.
 
I would like to propose that this work should not hold up 2.0m2 release. I would really like that to get out as its a major leap over 2.0m1. We have done tons of work since and if it was a 1.x series it it would have constituted a new x.+1 release alone.

After the m2 I would love to give us the time needed to research and work with the API to find the right solution. 
hadrian:1242627233:2009-05-18T14:13:53.529+0000:1242627233:2009-05-18T14:13:53.529+0000:This requires a bit of work indeed, I discovered for instance that the xmpp component requires a bit of love.

I agree that this should not hold the 2.0-M2 release.
davsclaus:1245891507:2009-06-25T08:58:27.078+0000:1245891507:2009-06-25T08:58:27.078+0000:Hadrian there are only 2-3 left so lets get them done before 2.0 is final.

That would be great as then there are no API changes needed for the performance improvements we can do under the covers.

We could even consider making DefaultExchange *final* so people wont create their own classes. Then the copy can be avoided.
davsclaus:1246571510:2009-07-03T05:51:50.371+0000:1246571510:2009-07-03T05:51:50.371+0000:Hadrian only 1 left. Do you work on it or should I give a stab? Would be great to have it done by start of next week so we can get started on a RC build of Camel 2.0.

This is really the last API changes we must get done before a 2.0 can be cut.
davsclaus:1246665233:2009-07-04T07:53:53.938+0000:1246665233:2009-07-04T07:53:53.938+0000:Last one done, so we now only have the DefaultExchange.

Should it be final? 
davsclaus:1246666729:2009-07-04T08:18:49.232+0000:1246666729:2009-07-04T08:18:49.232+0000:I have created a wiki page for design ideas of optimizations for Camel 2.x.

Please continue the discussion at this page. 

http://cwiki.apache.org/confluence/display/CAMEL/Camel+2.x+Speed+optimizations
davsclaus:1246671421:2009-07-04T09:37:01.467+0000:1246671421:2009-07-04T09:37:01.467+0000:Made DefaultExchange final.

Changed ticket subject.

Lets discuss at the design page and then create tickets after Camel 2.0 release and when got the time to do some optimizations.
davsclaus:1258775949:2009-11-21T11:59:09.391+0000:1258775949:2009-11-21T11:59:09.391+0000:Closing all 2.0M3 tickets"
0,CAMEL-1077,Improvement,Major,"1.0.0, 1.1.0, 1.2.0, 1.3.0, 1.4.0, 1.5.0",2.15.0,"
None
",Resolved,Fixed,2.15.0,Willem Jiang,Jeff Vienneau,5,14,2008-11-11 19:24:33+00:00,2016-11-30 10:39:00+00:00,"Internally, 


MinaProducer is coded to create a Mina connector (client mode socket).
MinaConsumer is coded to create a Mina acceptor (server mode socket).


Additionally, it appears a producer (client mode socket) is created for a ""to"" route mapping and a consumer (server mode socket) is created for a ""from"" route mapping.


This means an endpoint cannot be created in which the session is initiated by a client and messages are routed ""to"" the client. 


The opposite is also true, an endpoint with a ""from"" route mapping cannot establish a connection to a tcp server.


This is a major limitation, as we do not often have control over the systems with which we are interfacing.


Perhaps, the mina::tcp URI could have a parameter the sets the socket mode: tcp.mode=server or tcp.mode=client.


Hope this make sense, thanks!","davsclaus:1226404494:2008-11-11T19:54:54.122+0000:1226404494:2008-11-11T19:54:54.122+0000:An org.apache.camel.Endpoint has methods to create either a:
- consumer
- producer
See the javadoc: http://activemq.apache.org/camel/maven/camel-core/apidocs/index.html

So you should be able to create the type you need.

However most people use the fluent route builder (Java DSL or Spring DSL) to construct routes where the type is explicit given as you type.

from(xx) = consumer
to(yy) = producer

So the URI is neutral and you can then create either a consumer or producer depending what you need.

jeff_v:1226417234:2008-11-11T23:27:14.400+0000:1226417234:2008-11-11T23:27:14.400+0000:It seems to me producer / consumer is a concept for message flow, whereas client mode / server mode is a TCP connection specific concept that only really comes into play for connection establishment.

A server mode socket can consume or produce messages, but will listen for a client.

A client mode socket will also consume or produce messages, but will connect to a server at startup or through some lazy establishment policy.
davsclaus:1226444510:2008-11-12T07:01:50.043+0000:1226444510:2008-11-12T07:01:50.043+0000:Jeff excatly. Maybe we could improve the wiki documentation for the camel-mina component
http://activemq.apache.org/camel/mina.html

Do you have any suggestions? 
jstrachan:1228965727:2008-12-11T11:22:07.252+0000:1228965727:2008-12-11T11:22:07.252+0000:Maybe the ""mina:"" endpoint is a mina client - connecting to a remote socket and sending/receiving messages. Then we have a separate ""mina-server"" endpoint which does the reverse - for TCP based transports it opens a server socket etc?
jeff_v:1228969379:2008-12-11T12:22:59.103+0000:1228969505:2008-12-11T12:25:05.816+0000:Thanks for following up on this James!

Does that mean the mina-server would act a a client if defined in a ""from"" mapping? Which is the opposite of the current mina component.

It seems to me that there is are two phases to the component usage: 

*1) connection establishment*
--- server mode (uses mina acceptor) / client mode (uses mina connector)

*2) message handling*
--- async mode / syncronous mode (processes outbound message as an exchange)

The behavior in the two phases should be independently configurable and not bound together as they are today.
jstrachan:1228971715:2008-12-11T13:01:55.728+0000:1228971715:2008-12-11T13:01:55.728+0000:Yeah - I think the client and server endpoints would act similar; you could route from them or to them. Whether there are 4 (including async + sync) or whether sync/async mode is an extension or configuration of the endpoint is maybe separate.

The main difference is the server endpoint would use the different connection establishment.

Having

{code}
from(""mina-server:localhost"").bean(Somethings.class);
{code}

could then create a custom mina server with routing logic inside it. If folks send to ""mina:server:localhost"" then it could use the connection details of the server endpoint to know how to basically create a normal mina client producer to talk to the server's socket etc
jeff_v:1228972309:2008-12-11T13:11:49.200+0000:1228972309:2008-12-11T13:11:49.200+0000:Sounds like we're on the same page. I like it.
davsclaus:1229337040:2008-12-15T18:30:40.564+0000:1229337040:2008-12-15T18:30:40.564+0000:James what is the difference between
{code}
from(""mina-server:localhost"").bean(Somethings.class);
{code}

And what we have now in camel-mina?
{code}
from(""mina:tcp:localhost"").bean(Somethings.class);
{code}

I.e. reading this user guide from Mina
http://mina.apache.org/quick-start-guide.html

Shows how to setup Mina as a TCP server and this is excatly what we do in camel-mina today in the MinaConsumer.


memelet:1255857957:2009-10-18T17:25:57.250+0000:1255857957:2009-10-18T17:25:57.250+0000:Are there any plans to pursue this? I'm in the process of of unwinding my use of came-mina since I need my mina-server(acceptor) to the message-producer and my mina-client(connector) to the be message-receiver.
davsclaus:1255928840:2009-10-19T13:07:20.306+0000:1255928840:2009-10-19T13:07:20.306+0000:Barry, no its not on the roadmap in the near future.

As always we love contributions so please feel free to give it a go and try implement this feature.
memelet:1255942156:2009-10-19T16:49:16.098+0000:1255942156:2009-10-19T16:49:16.098+0000:Actually, I implemented this yesterday just after I posted the comment. It was really quite simple. Here's what I did:

- created an interface MinaService 
- from MinaConsumer extracted MinaAcceptor extends MinaService, leaving an instance of MinaService
- from MinaProducer extracted MinaConnector extends MinaService, leaving an instance of MinaService
- Added the 'service={acceptor|connector}' property to MinaConfiguration along with a factory method to create a concrete MinaService (used by MinaConsumer/Producer).

All tests are green, but I have not yet added tests for the case where consumer is the connector and visa versa. But this is how my application works (as well as many FIX engines) and I am doing some smoke testing. The problem I am hitting is how to formulate a route in which the the producer/acceptor binds. (I'll probably figure it out, but any advice would be appreciated.)

Since I need a Ping in my application I will setup a route on the producer side like: from(""mina:...&service=acceptor"").to(""direct:ping). 

But really a more general solution is needed. If I can get to this work I'll add tests within camel-mina and submit a patch.
davsclaus:1278583414:2010-07-08T18:03:34.123+0000:1278583414:2010-07-08T18:03:34.123+0000:I think we should address this for the new camel-netty component.

Netty is clearly taking over mina as the better asynchronous communication framework.

troesler:1386552317:2013-12-09T09:25:17.770+0000:1386552317:2013-12-09T09:25:17.770+0000:is there any news on this one? or some code examples for Barry Kaplans solution?
githubbot:1413531584:2014-10-17T15:39:44.344+0000:1413531584:2014-10-17T15:39:44.344+0000:GitHub user yuruki opened a pull request:

    https://github.com/apache/camel/pull/303

    CAMEL-1077 Added remote address support to camel-netty consumer

    This pull request adds *clientMode* parameter to netty component. When *clientMode* is true netty consumer will listen to the given address as a client.
    
    Bear in mind that my experience with netty is about two days and the approach used here might be completely wrong. My local unit tests seem to work but there are no tests for clientMode in this pull request yet.
    
    If the implementation proves solid we might want to switch the clientMode on automatically for non-local addresses (http://stackoverflow.com/questions/2406341/how-to-check-if-an-ip-address-is-the-local-host-on-a-multi-homed-system).

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/yuruki/camel netty-client-consumer

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/303.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #303
    
----
commit 0e07c5d337b4c73d34022be244fa526c8b84974d
Author: Jyrki Ruuskanen <yuruki@kotikone.fi>
Date:   2014-10-17T14:45:18Z

    Added remote address support to camel-netty consumer

----

githubbot:1423912924:2015-02-14T19:22:04.622+0000:1423912924:2015-02-14T19:22:04.622+0000:Github user yuruki closed the pull request at:

    https://github.com/apache/camel/pull/303

njiang:1424934378:2015-02-26T15:06:18.570+0000:1424934378:2015-02-26T15:06:18.570+0000:Applied the patch into camel master branch.
njiang:1424934431:2015-02-26T15:07:11.061+0000:1424934431:2015-02-26T15:07:11.061+0000:We need to update the wiki page for it.
Rizon:1457606516:2016-03-10T18:41:56.972+0000:1457606516:2016-03-10T18:41:56.972+0000:Has this been implemented yet on camel-netty component?
davsclaus:1457651865:2016-03-11T07:17:45.758+0000:1457651865:2016-03-11T07:17:45.758+0000:There is a clientMode option
Mythos:1471412555:2016-08-17T13:42:35.187+0000:1471412555:2016-08-17T13:42:35.187+0000:We have to retrieve data from an external system that is not directly reachable from our network due to some firewall restrictions. But the other way round works pretty fine (other system opens a socket to our system). 

Thus we want to provide a server-socket on our system that allows the other system to frequently poll the requests. Unfortunately I haven't had success in establishing a server-socket by using the <to...> phrase at all.

Since this seems to be related to client / server and consumer / producer mode I would highly appreciate if someone may give us some hints. :-)

Here is an example which requires the XML requests to put into a folder just for testual purposes. But the given <to...> phrase always tries to establish a client connection, no matter how I set the clientMode option.

{code:xml}
<route id=""polling-data-request-example"">
    <from uri=""file:/tmp/requests/""/>
    <setExchangePattern pattern=""OutIn""/>
    <to uri=""netty4:tcp://0.0.0.0:11111?sync=true&amp;textline=true&amp;decoderMaxLineLength=8192&amp;clientMode=true""/>
    <to uri=""bean:requestProcessor""/>
</route>
{code}
njiang:1471461279:2016-08-18T03:14:39.367+0000:1471461279:2016-08-18T03:14:39.367+0000:If you just want to let the client to access the file from your camel route, you can just define the camel route like this, and use requestProcessor to access the file according to the request message.
{code}
<route id=""polling-data-request-example"">
   <from uri=""netty4:tcp://0.0.0.0:11111""/>
   <to  uri=""bean:requestProcessor""/>
{code}
Mythos:1471479108:2016-08-18T08:11:48.713+0000:1471479203:2016-08-18T08:13:23.329+0000:Yes, but in our case we have an OutIn pattern, since *we* have to provide the request message to the client that connects to *our* server-socket. Unfortunately we can not directly open a socket to the other system due to firewall restrictions. Thus the other party needs to poll *our* requests from *our* server-socket that is opened on our system and send the answer back through this socket.

I already tried this simplified example which handles the request file inside the processor. But unfortunately the incoming connection on our server-socket (without sending anything) does not trigger the OutIn route. 

{code}
<route id=""polling-data-request-example"">
    <from uri=""netty4:tcp://0.0.0.0:11111?sync=true&textline=true&decoderMaxLineLength=8192""/>
    <setExchangePattern pattern=""OutIn""/>
    <to uri=""bean:requestProcessor""/>
</route>
{code}

Mythos:1471480607:2016-08-18T08:36:47.145+0000:1471480607:2016-08-18T08:36:47.145+0000:After playing around with the additional netty options I figured out that an incoming connection (without sending anything) actually *can* trigger the processor but you need to disable the 'textline' and 'allowDefaultCodec' options.

This example is pretty closer to our use-case:

{code}
<route id=""polling-data-request-example"">
    <from uri=""netty4:tcp://0.0.0.0:11111?sync=true&textline=false&allowDefaultCodec=false""/>
    <setExchangePattern pattern=""OutIn""/>
    <convertBodyTo type=""java.lang.String""/>
    <to uri=""bean:requestProcessor""/>
    <convertBodyTo type=""io.netty.buffer.ByteBuf""/>
</route>
{code}

Mythos:1471497636:2016-08-18T13:20:36.222+0000:1471503539:2016-08-18T14:58:59.782+0000:I have to correct myself: The example given above at least requires that *any* character is send to trigger the route (not necessarily a newline). Unfortunately in our use-case the incoming client just silently connects to our server-socket but does not send anything (instead it is waiting for the request).

[~njiang] do you have any other suggestion how to switch the consumer / producer role even if a server-socket is used?

According to the camel netty documentation you can switch a <from...> consumer to clientMode but unfortunately it looks as you can not switch a <to...> producer to serverMode.
njiang:1471760905:2016-08-21T14:28:25.897+0000:1471760905:2016-08-21T14:28:25.897+0000:It's hard to camel netty to know if the request message is ready if there is no any request message is send out.
But if you are using netty directly, you can just setup the handler to handle the connection before receiving the request message. 
tsigelnik:1480286912:2016-11-28T06:48:32.674+0000:1480350703:2016-11-29T00:31:43.353+0000:I have the same issue, Is it possible to configure ""To"" adapter in server-socket mode. I need to set up one-way communication level.
""From"" connects to a remote service as client socket and starts receiving text stream, then I need to forward this stream into server socket. No request-response logic just streaming

 from(""netty4:tcp://remote:54321?textline=true&sync=false&clientMode=true&reconnectInterval=1000"")
.to(""netty4:tcp://0.0.0.0:12345?transferExchange=true&textline=true&clientMode=false&sync=false"")

For ""From"" instruction it works, but ""To"" instruction does not want to an open server socket, it tries to connect localhost:12345 while I want to open the server socket on port 12345
njiang:1480473519:2016-11-30T10:38:39.197+0000:1480473519:2016-11-30T10:38:39.197+0000:Hi Dima,
Current camel doesn't support to create  a server socket from the ""To"" endpoint.
If you want to open a socket to listen to port 12345, you need to setup a route just like this.
{code}
from(""netty4:tcp://0.0.0.0:12345?transferExchange=true&textline=true&clientMode=false&sync=false"")...
{code}"
0,CAMEL-1076,Improvement,Major,"1.0.0, 1.1.0, 1.2.0, 1.3.0, 1.4.0, 1.5.0",,"
None
",Closed,Fixed,None,Unassigned,Jeff Vienneau,0,0,2008-11-11 17:26:42+00:00,2008-11-11 17:52:14+00:00,"Mina component only supports server mode socket (listener). 


Many systems to be interfaced are themselves server mode sockets. To support such connections a client mode should be provided in which the component will connect to the target server on startup or in a lazily like lazySessionCreation.


one way would be to add a parameter like: tcp.mode=""client"" or tcp.mode=""server"" with server mode bing default.","jeff_v:1226397134:2008-11-11T17:52:14.277+0000:1226397134:2008-11-11T17:52:14.277+0000:MinaEndpoint supports both createConsumer and createProducer, need more information before this issue is created, may not be a problem."
0,CAMEL-1075,New Feature,Major,"1.0.0, 1.1.0, 1.2.0, 1.3.0, 1.4.0, 1.5.0",Future,"
None
",Closed,Duplicate,Future,Chad Beaulac,Jeff Vienneau,0,1,2008-11-11 16:13:49+00:00,2013-05-02 02:29:35+00:00,"Mina Component does not support async InOut connections. 


Many applications require two way or out only async tcp connections this is not supported.


See a more full discussion on this here:
http://www.nabble.com/Can-mina::tcp-do-asyncronous-bidirectional-messages--tc20431804s22882.html","davsclaus:1226402123:2008-11-11T19:15:23.990+0000:1226483149:2008-11-12T17:45:49.119+0000:Hi Jeff

I still don't get what you think is needed.

aysync InOut, how is that possible? Isn't it contradictorily (opposite of each other). 

*InOut* (option sync=true)
Camel support both client and server

#1
Server: Camel exposes a TCP listener. This listener will wait for requests and send a reply to the caller (in out)

#2
Client: Camel calls an external TCP server and sends a request and waits for a reply (in out)


*InOnly* (option sync=false)
Camel support both client and server

#3
Server: Camel exposes a TCP listener. This listener will wait for requests and *not* send a reply to the caller (in only). Note: The client is supposed to not wait for a reply.

#4
Client: Camel calls an external TCP server and sends a request and do *not* waits for a reply (in only)

This can be used for instance as a TCP logger server, where clients can send logs to the TCP server.

What am I missing in the picture?
jeff_v:1226477889:2008-11-12T16:18:09.269+0000:1226478154:2008-11-12T16:22:34.019+0000:h4. In the case of:  tcp,mode=server;sync=false:
h5. Not Connected
Listener is waiting for connections
Outbound - messages are discarded.
Inbound - messages do not occur. (camel is waiting for producer to produce message)

h5. Connected
Outbound - messages are send over socket
Inbound - data coming from client is converted to messages and sent through producer to camel

h4. In the case of:  tcp.mode=client;sync=false:
A connection is made to client at startup when consumer is created. (Also, it would need to be re-established if connection is lost.)
Outbound - messages are sent over socket
Inbound - data coming from remote server is converted to messages and sent through producer to camel

Further to the logging example above, what if you want to *be the client* posting logs to another system?


davsclaus:1226483101:2008-11-12T17:45:01.156+0000:1226483101:2008-11-12T17:45:01.156+0000:Jeff I posted 4 scenarios above I will re-edit to make them stand out.
davsclaus:1226483345:2008-11-12T17:49:05.587+0000:1226483345:2008-11-12T17:49:05.587+0000:> Further to the logging example above, what if you want to be the client posting logs to another system?
This is excatly what #4 does.

{code}
producerTemplate.sendBody(""mina:tcp://externalserver:1234?sync=false&textline=true"", ""Hello World"");
{code}

In the code above we send the text ""Hello World"" from Camel (where we is a client) to an external system (the externalserver) using TCP on port 1234. We use sync=false as we as the client do not want to wait for a response from the external server.
jeff_v:1226492776:2008-11-12T20:26:16.016+0000:1226492776:2008-11-12T20:26:16.016+0000:Thanks Claus,

Can I do that in XML to route messages?

None the less, my needs are to be able to open a tcp socket and have two way async message flow over that same socket. I suggest others would be interested in this as well.

Re: #3 it would be useful if Camel could expose a listener and the send messages to the client once the connection is established.

Re: #4 it would be useful if Camel could connect to a server and receive messages from the server.
davsclaus:1226550722:2008-11-13T12:32:02.175+0000:1226550722:2008-11-13T12:32:02.175+0000:Jeff,

Yes all the routing can be done with Spring DSL (XML) eg:
{code:xml}
<route>
   <from uri=""mina:tcp://localhost:1234?sync=false&textline=true""/>
   <to uri=""log:logRequest""/>
</route>
{code}

This route above could be the TCP lister as example #3.
davsclaus:1226550940:2008-11-13T12:35:40.293+0000:1226550940:2008-11-13T12:35:40.293+0000:> Re: #3 it would be useful if Camel could expose a listener and the send messages to the client once the connection is established.
See the route above with the Spring DSL (XML). What do you mean with *once the connection is established*? If you need more control of the listener you can use plain Apahca Mina that gives your plenty of options. 

Re: #4 it would be useful if Camel could connect to a server and receive messages from the server.
Such as this sample below where we send a request to the externalserver on TCP port 1234 with the text ""Hello World"" and waits for a response.
{code}
Object out = producerTemplate.requestBody(""mina:tcp://externalserver:1234?sync=true&textline=true"", ""Hello World"");
System.out.println(out);
{code}
And the out is the response from the server such as ""Bye World""

See the mina documentation at:
http://activemq.apache.org/camel/mina.html

And then try for yourself, it's about time you started ""asking the computer"" and get some hands on experience. Camel is very fast for rapid prototyping.
jeff_v:1226643581:2008-11-14T14:19:41.571+0000:1226643581:2008-11-14T14:19:41.571+0000:Re: #4, We're talking: ""connect to a server and receive massages"", not connect to a server and send ""Hello World"" and wait for a response, that's *syncronous*. 

I'm talking *asyncronous*. Connect to a server, leave the connection open and if it sends a message, route the message, otherwise keep the socket alive and keep waiting.

We know the system can do InOut syncronous. but what I am talking about is: *Two way* message routing of *asyncronous* messages irrespective of the means to establish the connection.

With all due respect, I have been prototyping and reading the code. You are misinterpreting me.

I am trying to point out a need that I have with the system that is lacking for the greater good of Camel Mina. I will be solving my problem with a hand cobbled component, but I just wanted to point out the issue. If I end up with something of quality I will post it in the forum.
davsclaus:1226712384:2008-11-15T09:26:24.499+0000:1226712384:2008-11-15T09:26:24.499+0000:Sorry Jeff. I got it now. 

This use-case that you state last isn't something I have stumbled into in my 10+ years in the field. Usually messaging is used for that kind of use-case.

Yeah we love contributions so if you crank up something usable please feel free to post it on the forum.
http://activemq.apache.org/camel/contributing.html

ylecaillez:1230020537:2008-12-23T16:22:17.790+0000:1230020537:2008-12-23T16:22:17.790+0000:I'm really new to camel so my point is perhaps totally wrong but ...
In fact, i had excatly the same problem. I have a custom server which bind to a socket and wait for some client to connect. Once connected, server and client can exchange messages but not in a request/reply way. Each end could send message to the other end from its own authority.

When i discovered the (great) camel, i firstly thought i would be able to re-implement my custom server (based on mina) completly using apache camel and i fall in the same ""trap"" than you. From what i understood of camel your problem isn't solvable in that way. I mean you cannot use the mina component in that way. And as you said, you have to implement a custom component.

So i wrote my own ""customserver"" component (so easily, thanks to camel great API). Rather than doing  from(""mina:tcp//..."") (which cause the problem of the communication from server -> client in a non request/reply scenario) i'm currently doing a from(""customserver://serverName"") and a to(""customserver://serverName""). My server is registered into the camel registry using spring and is known as ""serverName"".
Then from the consumer part of my component i fetch the server instance (using uri and registry) and add a listener to it (my consumer component is then listening for incoming message from my custom server. In fact, client messages). On the producer part i'm listening for incoming message from camel. When message arrives i simply forward them to the ""myServer"" instance.

The problem of mapping message to client is done by an internal clientID which is set on the header of each messages.

I don't had time yet to test my implementation, but it should work.

Hope that helps you.





davsclaus:1243227600:2009-05-25T13:00:00.194+0000:1243227600:2009-05-25T13:00:00.194+0000:Yannick, thanks for reporting your experience and the layout of your solution.
davsclaus:1258026421:2009-11-12T19:47:01.080+0000:1258026421:2009-11-12T19:47:01.080+0000:With CAMEL-2151 we have the pieces in camel-core for the foundation for async request/reply.

When we upgrade to Mina 2.0 (when its GA) then Mina itself should have some support for this as well AFAIR
davsclaus:1258673692:2009-11-20T07:34:52.764+0000:1258673692:2009-11-20T07:34:52.764+0000:Requires Mina 2.0
davsclaus:1263892583:2010-01-19T17:16:23.383+0000:1263892583:2010-01-19T17:16:23.383+0000:[18:14]  <jgenender> cibsen: Hehe... you need to get creative on that ;-)
[18:15]  <jgenender> cibsen: I used Hashmaps with message ID s
[18:15]  <jgenender> cibsen: Many ways to do it
[18:15]  <cibsen> and the message ids then have to part of the data send over the wire?
[18:15]  <jgenender> cibsen: You can do it via session id
[18:15]  <cibsen> what if I use some old custom text based protocol which does not offer a field for that
[18:16]  <jgenender> The socket session is unique
[18:16]  <cibsen> ah cool that is what I liked to hear
[18:16]  <cibsen> yeah then a map is sufficient
[18:16]  <jgenender> So create a Hashmap that correlates teh session id (the socket) to information on the client and you have what you need
[18:16]  <jgenender> You can even create state and store it in the hashmap
[18:16]  <cibsen> :) like it already
davsclaus:1278583480:2010-07-08T18:04:40.035+0000:1278583480:2010-07-08T18:04:40.035+0000:camel-netty producer is now fully non blocking async
davsclaus:1295163513:2011-01-16T15:38:33.892+0000:1295163513:2011-01-16T15:38:33.892+0000:We will work on this when we have upgraded to use Mina 2.0.x. There is a ticket about this.
cabeaulac:1325567841:2012-01-03T13:17:21.185+0000:1325567841:2012-01-03T13:17:21.185+0000:Dup of CAMEL-2624"
0,CAMEL-1074,Bug,Major,1.4.0,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Willem Jiang,tim mcnamara,0,0,2008-11-11 00:21:20+00:00,2009-07-31 06:33:40+00:00,"using .unmarshal(new JaxbDataFormat(""com.foo.bar"") is returning a JAXBElement instead of the desired object that was generated by xjc.","njiang:1226533852:2008-11-13T07:50:52.114+0000:1226533852:2008-11-13T07:50:52.114+0000:The JAXBElement is create by the ObjectFactory's ""public JAXBElement<PersonType> createPerson(PersonType value) "" method.
You can get the PersonType instance by calling the JAXBElement's getValue() method.

If you just want to get the PersonType after the unmashalling, you just need to comment out the JAXBElement createPerson method.
May be you can tell xjc don't create the JAXBElement by passing some arguments when you generate the code from xsd.


njiang:1226534048:2008-11-13T07:54:08.147+0000:1226534048:2008-11-13T07:54:08.147+0000:It is a JAXB ObjectFactory issue. 
BTW, you can remove the ObjectFactory , just leave the jaxb.index file along, we can still get a  PersonType instance after unmarshalling.

jaxb.index works for the code first programming model and ObjectFactory is generated for the schema first programming model.
tmcnamara:1226685322:2008-11-15T01:55:22.507+0000:1226685322:2008-11-15T01:55:22.507+0000:This is a workaround and not a fix.   
njiang:1227216814:2008-11-21T05:33:34.609+0000:1227216814:2008-11-21T05:33:34.609+0000:I could add an option int he JaxbDataFormat to let it return the value of JAXBElement, so you don't do additional hacking on the ObjectFactory. 
njiang:1227752622:2008-11-27T10:23:42.968+0000:1227752622:2008-11-27T10:23:42.968+0000:Also updated the wiki page.
njiang:1227752737:2008-11-27T10:25:37.438+0000:1227752737:2008-11-27T10:25:37.438+0000:Hi Tim

Could you try out the latest Camel 1.5.1-snapshot and 2.0-snapshot with you test case ?
Please let me know if there is any question :)

Willem


davsclaus:1248993220:2009-07-31T06:33:40.314+0000:1248993220:2009-07-31T06:33:40.314+0000:Closing 2.0m1 tickets"
0,CAMEL-1073,Bug,Major,None,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Willem Jiang,William Tam,0,0,2008-11-10 22:05:57+00:00,2009-07-31 06:33:40+00:00,CXF message and payload mode endpoints do not honor CXF features that are injected by Spring configuration.,"njiang:1226452910:2008-11-12T09:21:50.086+0000:1226452910:2008-11-12T09:21:50.086+0000:Applied path into trunk and camel-1.x branch with thanks to William.

davsclaus:1248993220:2009-07-31T06:33:40.281+0000:1248993220:2009-07-31T06:33:40.281+0000:Closing 2.0m1 tickets"
0,CAMEL-1072,Improvement,Major,1.5.0,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Claus Ibsen,0,0,2008-11-10 20:06:32+00:00,2009-10-29 15:59:03+00:00,"We should support an option to set a upload suffix for the FTP/SFTP producers, so Camel can upload fixes to a temporary name and after upload is complete it can rename it to the correct name,


ServiceMix has such a feature.","davsclaus:1227789406:2008-11-27T20:36:46.457+0000:1227789406:2008-11-27T20:36:46.457+0000:Copy what you are doing in the FileProducer to do the same for the FTP/SFTP component
davsclaus:1227929598:2008-11-29T11:33:18.226+0000:1227929598:2008-11-29T11:33:18.226+0000:Now has same option as the file component: *tempPrefix* for both the FTP and SFTP producer

D:\project\camel>svn commit --message ""CAMEL-1072: Added tempPrefix option to FTP/SFTP producers, so you can upload using a temp filename and after upload rename it to the real name.""
Sending        camel-core\src\main\java\org\apache\camel\component\file\FileProducer.java
Sending        components\camel-ftp\src\main\java\org\apache\camel\component\file\remote\FtpProducer.java
Sending        components\camel-ftp\src\main\java\org\apache\camel\component\file\remote\RemoteFileConfiguration.java
Sending        components\camel-ftp\src\main\java\org\apache\camel\component\file\remote\RemoteFileProducer.java
Sending        components\camel-ftp\src\main\java\org\apache\camel\component\file\remote\SftpProducer.java
Adding         components\camel-ftp\src\test\java\org\apache\camel\component\file\remote\FtpProducerTempPrefixTest.java
Transmitting file data ......
Committed revision 721662.
davsclaus:1248993220:2009-07-31T06:33:40.260+0000:1248993220:2009-07-31T06:33:40.260+0000:Closing 2.0m1 tickets
karlp:1256802711:2009-10-29T15:51:51.726+0000:1256802711:2009-10-29T15:51:51.726+0000:This is great, but what about people who really do need a suffix?  I've got an external system that needs me to write with a .tmp suffix, if I use a prefix, it still picks up my files. 

Will I just have to handle the renaming myself?
davsclaus:1256803066:2009-10-29T15:57:46.424+0000:1256803066:2009-10-29T15:57:46.424+0000:The file/ftp components in Camel 2.0 is much smarter and flexible than 1.x.

So we can improve the tempPrefix to be expression based so you can type a syntax as you like, for example
{{tempFileName=$\{file:name}.tmp}}

Which then will write using .tmp and then afterwards rename it back to the real name.
davsclaus:1256803143:2009-10-29T15:59:03.959+0000:1256803143:2009-10-29T15:59:03.959+0000:CAMEL-2121 is the ticket to improve this"
0,CAMEL-1071,Task,Major,1.5.0,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Jonathan Anstey,Jonathan Anstey,0,0,2008-11-10 17:42:22+00:00,2009-07-31 06:33:40+00:00,"The description is a bit skimpy here:
http://activemq.apache.org/camel/normalizer.html


I'm going to fill it out a bit with a concrete example.","janstey:1226312631:2008-11-10T18:23:51.040+0000:1226312631:2008-11-10T18:23:51.040+0000:Example committed here
http://svn.eu.apache.org/viewvc?view=rev&revision=712712

Wiki update as well
http://cwiki.apache.org/confluence/display/CAMEL/Normalizer
davsclaus:1226318339:2008-11-10T19:58:59.039+0000:1226318339:2008-11-10T19:58:59.039+0000:Why are you filtering the message afterwards? If for no reason I think it should be removed to give the end-user a more clear picture what the normalizer is.
davsclaus:1226318493:2008-11-10T20:01:33.596+0000:1226318493:2008-11-10T20:01:33.596+0000:Or state that the filtering has nothing to do with the normalizer EIP but its there to show what you can do next.
davsclaus:1226318543:2008-11-10T20:02:23.443+0000:1226318543:2008-11-10T20:02:23.443+0000:Actually the stuff is already there you can use it in e.g. Camel 1.4 ;)
janstey:1226318556:2008-11-10T20:02:36.711+0000:1226318556:2008-11-10T20:02:36.711+0000:Its for no reason at all really. I definitely don't want anything to be confusing so I'll remove it!
davsclaus:1226318585:2008-11-10T20:03:05.202+0000:1226318585:2008-11-10T20:03:05.202+0000:But we should add it to the release notes so we have yet another EIP pattern in Camel.
janstey:1226318690:2008-11-10T20:04:50.658+0000:1226318690:2008-11-10T20:04:50.658+0000:Well it was a supported EIP for a while. Its just that the wiki doc was really skimpy so new users may not have a clue how to implement it.
janstey:1226319632:2008-11-10T20:20:32.959+0000:1226319632:2008-11-10T20:20:32.959+0000:I simplified the example a bit in revision 712821. That filter was really useless :)
davsclaus:1248993220:2009-07-31T06:33:40.141+0000:1248993220:2009-07-31T06:33:40.141+0000:Closing 2.0m1 tickets"
0,CAMEL-1070,Bug,Major,"1.4.0, 1.5.0","1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Claus Ibsen,Claus Ibsen,0,0,2008-11-10 16:38:32+00:00,2009-07-31 06:33:39+00:00,"I must use
                        if (exchange.getIn().getAttachments().size() > 0) {
Instead of
                        if (exchange.getIn().hasAttachments()) {
As the latter always returns false. Or at least returns false even though the size is > 0",davsclaus:1248993219:2009-07-31T06:33:39.410+0000:1248993219:2009-07-31T06:33:39.410+0000:Closing 2.0m1 tickets
0,CAMEL-1069,New Feature,Minor,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,1,2008-11-10 15:51:20+00:00,2012-11-13 17:25:51+00:00,"The mail API has SearchTerm to allow filtering a mail folder when consuming.


We should allow options/configuration to set a reference to a class implementing javax.mail.search.SearchTerm so end users can code their own filter how to filer mails.


We could consider adding some kind of expression support for the most common SearchTerm:



subject
from
to
body
flags","davsclaus:1303610283:2011-04-24T09:58:03.734+0000:1303610283:2011-04-24T09:58:03.734+0000:Closing all resolved tickets from 2010 or older
davsclaus:1350430695:2012-10-17T07:38:15.094+0000:1350430695:2012-10-17T07:38:15.094+0000:See nabble as its been requested now
http://camel.465427.n5.nabble.com/Fetch-size-in-mail-component-tp5721048.html
davsclaus:1350430822:2012-10-17T07:40:22.203+0000:1350430822:2012-10-17T07:40:22.203+0000:The idea would roughly be to add a getter/setter on the mail configuration for a 
{code}
private SearchTerm filter;
{code}

Then end users can implement this class, and configure it on the mail component / endpoint. If directly in endpoint you do
{code}
from(""imap:xxxx?filter=#myFilter"")
 ...
{code}

Then in the mail consumer, you would need to grab the filter and apply it to the Java Mail API that does the mail scanning.
davsclaus:1352798751:2012-11-13T17:25:51.372+0000:1352798751:2012-11-13T17:25:51.372+0000:There is now a searchTerm option on mail endpoint you can use.

I updated the mail doc page with details and examples."
0,CAMEL-1068,New Feature,Minor,None,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Claus Ibsen,0,0,2008-11-10 15:48:34+00:00,2009-07-31 06:33:39+00:00,"We have some URI options to set some regexp for filtering files.


But good old java.io.FileFilter should be there as well for end-users to use.
And also add an option for using Camel predicate's for filtering file names.


This only applies for the file consumer of course.","davsclaus:1227964577:2008-11-29T21:16:17.247+0000:1227964577:2008-11-29T21:16:17.247+0000:Commited by CAMEL-1112

D:\project\camel\camel-core>svn commit --message ""CAMEL-1112: Added filter option to file consumer to allow end user to use a filter to skip files. Started on the sorter as well.""
Sending        camel-core\src\main\java\org\apache\camel\component\file\FileComponent.java
Sending        camel-core\src\main\java\org\apache\camel\component\file\FileConsumer.java
Sending        camel-core\src\main\java\org\apache\camel\component\file\FileEndpoint.java
Adding         camel-core\src\test\java\org\apache\camel\component\file\FileConsumerFileFilterTest.java
Sending        camel-core\src\test\java\org\apache\camel\component\file\FileConsumerSkipDotFilesTest.java
Transmitting file data .....
Committed revision 721719.

davsclaus:1248993219:2009-07-31T06:33:39.389+0000:1248993219:2009-07-31T06:33:39.389+0000:Closing 2.0m1 tickets"
0,CAMEL-1067,Task,Minor,None,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Claus Ibsen,0,1,2008-11-10 11:25:48+00:00,2018-05-07 20:52:38+00:00,"The list component is a bit misleading and confusing name. It is used for browsing endpoints such as the exchanges that they have processed.


Renaming it to: browse would better mark its purpose.","davsclaus:1228262408:2008-12-03T08:00:08.181+0000:1228262408:2008-12-03T08:00:08.181+0000:D:\project\camel\camel-core>svn commit --message ""CAMEL-1067: camel-list renamed to camel-browse""
Adding         camel-core\src\main\java\org\apache\camel\component\browse
Adding         camel-core\src\main\java\org\apache\camel\component\browse\BrowseComponent.java
Adding         camel-core\src\main\java\org\apache\camel\component\browse\BrowseEndpoint.java
Deleting       camel-core\src\main\java\org\apache\camel\component\browse\ListComponent.java
Deleting       camel-core\src\main\java\org\apache\camel\component\browse\ListEndpoint.java
Sending        camel-core\src\main\java\org\apache\camel\component\browse\package.html
Deleting       camel-core\src\main\java\org\apache\camel\component\list
Adding         camel-core\src\main\resources\META-INF\services\org\apache\camel\component\browse
Deleting       camel-core\src\main\resources\META-INF\services\org\apache\camel\component\list
Adding         camel-core\src\test\java\org\apache\camel\component\browse
Adding         camel-core\src\test\java\org\apache\camel\component\browse\BrowseRouteTest.java
Adding         camel-core\src\test\java\org\apache\camel\component\browse\BrowseTest.java
Deleting       camel-core\src\test\java\org\apache\camel\component\browse\ListRouteTest.java
Deleting       camel-core\src\test\java\org\apache\camel\component\browse\ListTest.java
Deleting       camel-core\src\test\java\org\apache\camel\component\list
Transmitting file data ......
Committed revision 722803.
davsclaus:1248993219:2009-07-31T06:33:39.345+0000:1248993219:2009-07-31T06:33:39.345+0000:Closing 2.0m1 tickets
githubbot:1525536624:2018-05-06T00:10:24.006+0000:1525536624:2018-05-06T00:10:24.006+0000:dimitrisli opened a new pull request #2319: CAMEL-1067 Fixing broken build
URL: https://github.com/apache/camel/pull/2319
 
 
   Following up from the discussion here: https://github.com/apache/camel/pull/2303
   
   Project currently succeeds mvn install as well as checkstyle but fails during surfire:test. As there are no tests and [following from this example](https://github.com/apache/camel/blob/3e07a6385b8ba57ba4eb666bd7d2b13ea53306fb/examples/camel-example-spring-boot-geocoder/pom.xml#L37) we can skip that phase all together with this parameter. 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1525536624:2018-05-06T00:10:24.642+0000:1525536624:2018-05-06T00:10:24.642+0000:GitHub user dimitrisli opened a pull request:

    https://github.com/apache/camel/pull/2319

    CAMEL-1067 Fixing broken build

    Following up from the discussion here: https://github.com/apache/camel/pull/2303
    
    Project currently succeeds mvn install as well as checkstyle but fails during surfire:test. As there are no tests and [following from this example](https://github.com/apache/camel/blob/3e07a6385b8ba57ba4eb666bd7d2b13ea53306fb/examples/camel-example-spring-boot-geocoder/pom.xml#L37) we can skip that phase all together with this parameter. 

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dimitrisli/camel CAMEL-10671

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2319.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2319
    
----
commit 27e492aa17637f9148f38e4bc57ae6782114975d
Author: Dimitrios Liapis <dimitrisli@...>
Date:   2018-05-06T00:07:01Z

    CAMEL-1067 Fixing broken build

----

githubbot:1525537056:2018-05-06T00:17:36.438+0000:1525537056:2018-05-06T00:17:36.438+0000:dimitrisli commented on issue #2319: CAMEL-1067 Fixing broken build
URL: https://github.com/apache/camel/pull/2319#issuecomment-386844160
 
 
   @PascalSchumacher can you please review

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1525601990:2018-05-06T18:19:50.554+0000:1525601990:2018-05-06T18:19:50.554+0000:asfgit closed pull request #2319: CAMEL-1067 Fixing broken build
URL: https://github.com/apache/camel/pull/2319
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/examples/camel-example-ceylon/pom.xml b/examples/camel-example-ceylon/pom.xml
index d794894b38c..3e9a1ec505c 100644
--- a/examples/camel-example-ceylon/pom.xml
+++ b/examples/camel-example-ceylon/pom.xml
@@ -36,6 +36,7 @@
   <properties>
     <category>Other Languages</category>
     <ceylon.version>1.3.3</ceylon.version>
+    <skipTests>true</skipTests>
   </properties>
 
   <dependencies>


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1525601991:2018-05-06T18:19:51.194+0000:1525601991:2018-05-06T18:19:51.194+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/2319

githubbot:1525602052:2018-05-06T18:20:52.171+0000:1525602052:2018-05-06T18:20:52.171+0000:PascalSchumacher commented on issue #2319: CAMEL-1067 Fixing broken build
URL: https://github.com/apache/camel/pull/2319#issuecomment-386900795
 
 
   Thanks! 
   
   Merged in https://github.com/apache/camel/commit/1ed76d66a023495b3dfe802cbd7d71a8890893f2
   
   Let's give it a try.
   
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1525697557:2018-05-07T20:52:37.780+0000:1525697557:2018-05-07T20:52:37.780+0000:dimitrisli opened a new pull request #2325: CAMEL-1067 Broken build fix
URL: https://github.com/apache/camel/pull/2325
 
 
   Skipping non-existent tests in Ceylon example project attempting to fix the broken build.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1525697558:2018-05-07T20:52:38.468+0000:1525697558:2018-05-07T20:52:38.468+0000:GitHub user dimitrisli opened a pull request:

    https://github.com/apache/camel/pull/2325

    CAMEL-1067 Broken build fix

    Skipping non-existent tests in Ceylon example project attempting to fix the broken build.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dimitrisli/camel CAMEL-1067

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2325.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2325
    
----
commit 3834709bcebdd0913752fbcc2cea17822518ecf2
Author: Dimitrios (Dimi) Liapis <dimitrisli@...>
Date:   2018-05-07T20:51:22Z

    CAMEL-1067 Broken build fix 
    
    Skipping non-existent tests in Ceylon example project attempting to fix the broken build.

----
"
0,CAMEL-1066,Improvement,Major,1.5.0,,"
None
",Closed,Won't Fix,None,Unassigned,Martin Gilday,3,0,2008-11-10 10:19:56+00:00,2011-04-24 10:00:43+00:00,"When using a Spring PropertyPlaceholderConfigurer, properties are not replaced into the Camel DSL.  A use case for using property substitution is to change the component type used in different deployments of the same app (such as between SEDA and JMS).  You can then also use the same config file for testing by replacing JMS endpoints with mock ones.


For example:



<camel:camelContext trace=""${traceMode}"" useJmx=""false"">
  <camel:route>
    <camel:from uri=""${queue.incoming}"" />
    <camel:to uri=""${queue.outgoing}"" />
  </camel:route>
</camel:camelContext>




In Camel 1.5 the resulting routes are still named ${queue.incoming} instead of being replaced  with jms:myQueue etc.","davsclaus:1226284356:2008-11-10T10:32:36.377+0000:1226284356:2008-11-10T10:32:36.377+0000:See FAQ:
http://activemq.apache.org/camel/how-do-i-use-spring-property-placeholder-with-camel-xml.html
davsclaus:1226284442:2008-11-10T10:34:02.328+0000:1226284442:2008-11-10T10:34:02.328+0000:Lowering priority - cant be critical.

Requires Spring 3.0 as spring has to do some internal changes to allow custom spring handlers to get access to the property place holder stuff. There should be a JIRA ticket in the spring roadmap filed by James Strachan about this.
davsclaus:1226284485:2008-11-10T10:34:45.975+0000:1226284485:2008-11-10T10:34:45.975+0000:I also think we have a ticket for this request in our tracker somewhere. 
pledge:1226285607:2008-11-10T10:53:27.900+0000:1226285607:2008-11-10T10:53:27.900+0000:I think it is this issue http://jira.springframework.org/browse/SPR-4466
davsclaus:1226790007:2008-11-16T07:00:07.921+0000:1226790007:2008-11-16T07:00:07.921+0000:Updated FAQ with the entry to the SPR issue.


davsclaus:1266387060:2010-02-17T14:11:00.017+0000:1266387060:2010-02-17T14:11:00.017+0000:We have the Camel properties component which supports property placeholders fully.

Using Spring property placeholders is not possible unless Spring Framework makes that possible.
davsclaus:1303610443:2011-04-24T10:00:43.957+0000:1303610443:2011-04-24T10:00:43.957+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-1065,Improvement,Minor,None,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Claus Ibsen,0,0,2008-11-09 12:57:55+00:00,2009-07-31 06:33:39+00:00,"An end-user is using the reqestXXX method where the requestBodyAndHeaders is missing. The one being able to send multiple headers.


Check out that the sendXXX and requestXXX is in sync. And maybe add more convienient methods if needed.","davsclaus:1226404124:2008-11-11T19:48:44.452+0000:1226404124:2008-11-11T19:48:44.452+0000:Added some missing requestBody methods that accepts a Map of headers. Polished javadoc.
davsclaus:1248993219:2009-07-31T06:33:39.264+0000:1248993219:2009-07-31T06:33:39.264+0000:Closing 2.0m1 tickets"
0,CAMEL-1064,Bug,Critical,"1.4.0, 1.5.0",,"
None
",Closed,Fixed,None,Hadrian Zbarcea,Christopher Hunt,1,0,2008-11-08 11:30:40+00:00,2010-02-07 09:54:17+00:00,"If the ActiveMQ broker is shut down and then started again while a Camel ActiveMQ endpoint based program is listening on its queue, the program does not pick the queue back up for consuming when ActiveMQ is back up. Anything subsequently posted to the new broker becomes available only when the Camel program is restarted.


This is a problem in production style scenarios where the broker has to be restarted for some reason e.g. so that modifications to its configuration can be made.


I have been able to observe the above behaviour with the camel-example-jms-file project and attach a modified version of the CamelJmsToFileExample.java file. My modifications bind to the broker at tcp://localhost:61616 and cause the example to pause for 20s before sending out any messages. In this time, if the broker (which has to be started externally prior to executing the example) is shutdown and then started again, no messages are received.


Here are the actual recommended steps to reproduce the problem:
1. Start the ActiveMQ broker in one terminal window
2. Run the example via mvn compile exec:java
3. When the message displays stating that you have 20s, Ctrl-C the broker in the broker terminal window
4. When the broker stops, start it again


At this point no messages are displayed - you would expect them to be - they have actually been sent out. This can be verified also:


5. Type mvn compile exec:java again
6. Let the example continue without interfering with the broker.


You will now see the messages posted previously prior while the program waits for 20 seconds (remember no messages have been posted at this point). Letting the example continue demonstrates that after the 20 seconds, the messages are sent out and then received quickly given that we have not touched the broker.


The original thread posting can be found at:


http://www.nabble.com/Camel-ActiveMQ-service-not-recovering-from-lost-broker-to20379163s22882.html","huntc@internode.on.net:1226115220:2008-11-08T11:33:40.150+0000:1226115220:2008-11-08T11:33:40.150+0000:Modified camel-example-jms-file project file from the Camel 1.4.0 distribution. The modifications allow time for a broker to be shutdown subsequently to the consumer environment being set up, but before any messages are sent out.
hadrian:1226117066:2008-11-08T12:04:26.526+0000:1226117066:2008-11-08T12:04:26.526+0000:@Christopher thanks for spotting it and for the detailed steps and example.  This is indeed a serious problem.  I will upgrade this to critical and we'll look into it as soon as possible.
davsclaus:1226789799:2008-11-16T06:56:39.867+0000:1226789799:2008-11-16T06:56:39.867+0000:Hadrian did you have a look at it?
hadrian:1226960777:2008-11-18T06:26:17.730+0000:1226960777:2008-11-18T06:26:17.730+0000:Not yet :(.  Let me look into this this week.
huntc@internode.on.net:1227743292:2008-11-27T07:48:12.705+0000:1227743292:2008-11-27T07:48:12.705+0000:I appreciate that life is full and busy, but has anybody been able to identify a potential work-around for this issue? I'm looking to move my Camel based service into production next week so it'd be great to have a resolution one way or another. Thank you for your help.
akuhtz:1227925562:2008-11-29T10:26:02.198+0000:1227925562:2008-11-29T10:26:02.198+0000:Hi Christopher,

Not sure if I got all of your problem but if you change the url for the connection factory from *tcp://localhost:61616* to *failover:tcp://localhost:61616* it uses failover transport that does reconnect and you will receive messages after the broker is back again (at least it did when I started your test).
huntc@internode.on.net:1228006131:2008-11-30T08:48:51.404+0000:1228006131:2008-11-30T08:48:51.404+0000:Thanks for this - this sounds like a viable work around and I shall test it shortly. I presume that this is indeed regarded as a work-around though and that the issue remains to be fixed?

Thanks again.
huntc@internode.on.net:1228336686:2008-12-04T04:38:06.474+0000:1228336707:2008-12-04T04:38:27.752+0000:Hi Hadrian,

Any further advice on the investigation of this issue?

Kind regards,
Christopher
jstrachan:1235377852:2009-02-23T16:30:52.728+0000:1235377852:2009-02-23T16:30:52.728+0000:using *failover:tcp://localhost:61616* as the connection URL is the correct approach for dealing with reconnection to the broker in case of broker failure or network issues causing temporary socket loss.

in 5.2.0 or later of ActiveMQ the connection factory and ActiveMQ camel component use failover in the default URL by default to avoid folks having to know about the failover configuration. i.e. if you don't configure anything you will get failover and so auto-reconnection
huntc@internode.on.net:1235394560:2009-02-23T21:09:20.780+0000:1235394560:2009-02-23T21:09:20.780+0000:Thanks for this. Was this a 1.6.0 fix for Camel? You implied that the ActiveMQ Camel component was changed also; or is it because of 5.2.0's connection factory change that Camel's component inherits the fix?"
0,CAMEL-1063,Bug,Major,1.5.0,None,"
None
",Closed,Fixed,"1.6.0, 2.0-M1",Claus Ibsen,Claus Ibsen,0,0,2008-11-08 08:57:41+00:00,2009-07-31 06:33:39+00:00,"See nabble:
http://www.nabble.com/Camel-SQL-Component---dataSource-property-td20386559s22882.html",davsclaus:1248993219:2009-07-31T06:33:39.229+0000:1248993219:2009-07-31T06:33:39.229+0000:Closing 2.0m1 tickets
0,CAMEL-1062,Bug,Minor,1.5.0,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Hadrian Zbarcea,Hadrian Zbarcea,0,0,2008-11-07 15:26:21+00:00,2009-07-31 06:33:39+00:00,"The test fails with an IllegalStateException: Queue full.  I believe the reason for this is that there are 10000 messages sent, but the default queue size is 1000.   On a fast machine, the queue fills up before the consumer gets a chance to pop the messages from the queue.",davsclaus:1248993219:2009-07-31T06:33:39.154+0000:1248993219:2009-07-31T06:33:39.154+0000:Closing 2.0m1 tickets
0,CAMEL-1061,Task,Major,None,None,"
None
",Closed,Fixed,2.0-M1,Jonathan Anstey,Jonathan Anstey,0,0,2008-11-07 15:03:03+00:00,2009-07-31 06:33:39+00:00,There are a ton of things that are deprecated and need to be removed for Camel 2.0,"janstey:1226043189:2008-11-07T15:33:09.996+0000:1226043189:2008-11-07T15:33:09.996+0000:Just removed several things. Checked the change in so I can scour the wiki for required changes.
davsclaus:1226209090:2008-11-09T13:38:10.436+0000:1226209090:2008-11-09T13:38:10.436+0000:The queue component in camel-core should be removed as well. Anyone objects?

And we actually also have some empty java src folders in some components here and there. 

And should we consider moving some abandoned components into a sandbox?
- camel-jface
- camel-supercsv
- camel-jmxconnect



davsclaus:1226289529:2008-11-10T11:58:49.372+0000:1226289529:2008-11-10T11:58:49.372+0000:Pojo component should be removed as well
- http://activemq.apache.org/camel/pojo.html

I dont think it harms to remove it from the components list anyway as you should use bean instead.

The same goes for queue it can be removed from the list also = use seda instead.
janstey:1226293236:2008-11-10T13:00:36.784+0000:1226293236:2008-11-10T13:00:36.784+0000:I removed the queue component last week. Seems there is still some clean up to w.r.t. to empty dirs though. Will do that once the deprecated things are gone.

I agree, pojo: can go as well.

Hmmm... didn't know we had abandoned components :) Do you mean no-one has committed to them in a while? Or they are half-finished/unusable?
janstey:1226490100:2008-11-12T19:41:40.338+0000:1226490100:2008-11-12T19:41:40.338+0000:Hmmm... confluence seems to be hanging when I try and edit the 2.0.0 release page so I'll update that later with the changes relating to my last commit.
janstey:1226491084:2008-11-12T19:58:04.619+0000:1226491084:2008-11-12T19:58:04.619+0000:wiki comment should be:

* On Endpoint, getContext() and setContext(CamelContext) have been renamed to getCamelContext() and setCamelContext(CamelContext)
* To set the ignored headers in the http component you must use the HeaderPropagationStrategy instead of setIgnoredHeaders(...)
* JettyHttpProducer has been removed. Use org.apache.camel.component.http.HttpProducer instead.
* In MailConfiguration, getDestination() and setDestination(...) have been renamed to getRecipients() and setTo(...).
janstey:1227035341:2008-11-19T03:09:01.990+0000:1227035341:2008-11-19T03:09:01.990+0000:Going to call this one complete. The only deprecated thing remaining is the timestamp stuff in the file/ftp component. As a part of the removal of the timestamp algorithm, I plan to add the ability to preserve state of what files have been consumed. Will be creating a new JIRA for this since its kind of an improvement.
davsclaus:1248993219:2009-07-31T06:33:39.107+0000:1248993219:2009-07-31T06:33:39.107+0000:Closing 2.0m1 tickets"
0,CAMEL-1060,Improvement,Major,1.5.0,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",William Tam,Claus Ibsen,0,0,2008-11-07 10:02:44+00:00,2009-03-23 08:40:52+00:00,"When using the maven plugins camel:run it logs nicely that Camel has been started (with version number).



[pache.camel.spring.Main.main()] MainSupport                    INFO  Apache Camel 2.0-SNAPSHOT starting




I think we should add such a feature into camel core itself.


I think we need two logs



starting
started



Such as ActiveMQ does:



BrokerService                  INFO  ActiveMQ 5.1.0 JMS Message Broker (localhost) is starting
BrokerService                  INFO  ActiveMQ JMS Message Broker (localhost, ID:claus-acer-1667-1226052031671-0:0) started","davsclaus:1226023444:2008-11-07T10:04:04.307+0000:1226023444:2008-11-07T10:04:04.307+0000:To highlight the problem. The logging is from camel-spring with the Main class.

However we should add it to the DefaultCamelContext or (maybe better) the LifecycelStrategy, or add some methods with this event if any missing.
wtam:1227991545:2008-11-30T04:45:45.279+0000:1227991545:2008-11-30T04:45:45.279+0000:It looks like we can add this kind of logging to CamelContext.  We can log the name of the CamelContext that it is starting.  I can get started on this if it makes sense.
wtam:1227991737:2008-11-30T04:48:57.061+0000:1227991737:2008-11-30T04:48:57.061+0000:It looks like we can add this kind of logging in CamelContext.  We can include the CamelContext name that it is being started.  If this makes sense, I can get started on it.
wtam:1227992033:2008-11-30T04:53:53.692+0000:1227992033:2008-11-30T04:53:53.692+0000:Oops.  I didn't see the Claus's comment.  (I was in ""Change History"" view).   I'll look into it.  
wtam:1227996756:2008-11-30T06:12:36.033+0000:1227996756:2008-11-30T06:12:36.033+0000:Added the logging to DefaultCamelContext since it is probably more reliable than in LifeCycleStrategy.  (A LifeCycleStrategy impl may forget to log the messages).   The version number comes from the manifest so it is available in unit test.

Modified:
   activemq/camel/trunk/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java
   activemq/camel/trunk/camel-core/src/main/java/org/apache/camel/impl/ServiceSupport.java
   activemq/camel/trunk/camel-core/src/main/java/org/apache/camel/util/MainSupport.java
davsclaus:1228174970:2008-12-02T07:42:50.150+0000:1228174970:2008-12-02T07:42:50.150+0000:Are we sure this is working. When I ran a unit test in camel-spring it didn't print the version number. And there was a double space in the logging as well.
janstey:1228185559:2008-12-02T10:39:19.209+0000:1228185559:2008-12-02T10:39:19.209+0000:Claus, I saw a blank version as well so I made this change last night http://svn.apache.org/viewvc?view=rev&revision=722317

Did you do an svn up or do we have another problem? :)
davsclaus:1228195641:2008-12-02T13:27:21.628+0000:1228195641:2008-12-02T13:27:21.628+0000:Works fine now, thanks

[                          main] DefaultCamelContext            INFO  Apache Camel 2.0-SNAPSHOT (CamelContext:camel-1) started"
0,CAMEL-1059,Improvement,Minor,1.5.0,2.1.0,"
None
",Closed,Won't Fix,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2008-11-07 08:30:41+00:00,2010-02-07 09:54:17+00:00,When Camel is mapping to/from javax.jmx.XXX to the Camel message body it does not properly support the javax.jms.StreamMessage,davsclaus:1242609212:2009-05-18T09:13:32.556+0000:1242609212:2009-05-18T09:13:32.556+0000:Not needed
0,CAMEL-1058,Bug,Major,None,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Willem Jiang,Willem Jiang,0,0,2008-11-07 05:34:11+00:00,2009-07-31 06:33:39+00:00,To make sure the check fault work to be done first.,davsclaus:1248993219:2009-07-31T06:33:39.083+0000:1248993219:2009-07-31T06:33:39.083+0000:Closing 2.0m1 tickets
0,CAMEL-1057,Bug,Critical,"1.4.0, 1.5.0","1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Claus Ibsen,Balazs Zsoldos,0,1,2008-11-07 00:56:37+00:00,2009-07-31 06:33:39+00:00,"When using XQuery the getOut() function is called on the message so if it is not used at a place where the out is filled an empty out message will be created. With this xquery cannot be used for example in setBody, setHeader... and anywhere where the out is not filled.
An example where this causes real trouble:


<choice>
  <when>
    <xquery>...</xquery>
    <to uri=""direct:follow"" />
  </when>
</choice>


...
<from uri=""direct:follow"">
<to ...>
<to ...>


In the patch the out property in the xquery context is filled only if it is not null. With it all of my pipelines seem to work well for me.","davsclaus:1226012873:2008-11-07T07:07:53.855+0000:1226012873:2008-11-07T07:07:53.855+0000:Balazs could you re attach the patch with the ASF license granted. We can not accept patches without this license.

The general rule with JIRA is *not* to attach files while creating the ticket. Only attach files *afterwards* since then there is a checkbox where you can grant the ASF license.
balazs.zsoldos:1226034187:2008-11-07T13:03:07.395+0000:1226034187:2008-11-07T13:03:07.395+0000:Hi, here is the file with the license.
davsclaus:1226035412:2008-11-07T13:23:32.843+0000:1226035412:2008-11-07T13:23:32.843+0000:Applied patch with thanks to Balazs
davsclaus:1248993219:2009-07-31T06:33:39.050+0000:1248993219:2009-07-31T06:33:39.050+0000:Closing 2.0m1 tickets"
0,CAMEL-1056,New Feature,Major,None,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Willem Jiang,William Tam,0,0,2008-11-05 21:30:01+00:00,2009-07-31 06:33:38+00:00,No Desc,"wtam@iona.com:1225892148:2008-11-05T21:35:48.425+0000:1225892148:2008-11-05T21:35:48.425+0000:attached a patch which enables users to inject jaxws handler to CXF producer and client. 

  <cxf:cxfEndpoint ...>
   
      <cxf:handlers>
          <ref bean=""myJaxwsHandler""/> 
      </cxf:handlers>     

  </cxf:cxfEndpoint> 

   <bean id=""myJaxwsHandler"" class=""org.apache.camel.wsdl_first.JaxwsTestHandler""/>
njiang:1225926165:2008-11-06T07:02:45.813+0000:1225926165:2008-11-06T07:02:45.813+0000:Applied patch with thanks to William.
davsclaus:1248993218:2009-07-31T06:33:38.264+0000:1248993218:2009-07-31T06:33:38.264+0000:Closing 2.0m1 tickets"
0,CAMEL-1055,Improvement,Minor,1.5.0,None,"
None
",Closed,Won't Fix,None,Unassigned,Noah Nordrum,0,0,2008-11-05 18:09:25+00:00,2010-02-07 09:54:17+00:00,"Yes, I know you should just do things correctly, but sometimes we don't. When the CamelContext is created/retrieved as follows, the error message is somewhat misleading as to the actual problem. The root exception does state ""No applicationContext has been injected!"", but the bulk of the other exceptions are referring to the ""beanPostProcessor"".


If we could somehow throw a more concise exception, that would be great.


#
import org.springframework.core.io.Resource;
#
import org.springframework.core.io.ClassPathResource;
#
import org.springframework.beans.factory.BeanFactory;
#
import org.springframework.beans.factory.xml.XmlBeanFactory;
#
import org.apache.camel.CamelContext;
#


#
public class JamesTest {
#


#
    public static void main(String[] args) 

{
#
        Resource res = new ClassPathResource(""/james.xml"");
#
        BeanFactory factory = new XmlBeanFactory(res);
#
 
#
        final CamelContext cc = (CamelContext) factory.getBean(""camelContext"");
#
 
#
    }

#
}
#


#


#


#
james.xml
#
<?xml version=""1.0"" encoding=""UTF-8""?>
#
<beans xmlns=""http://www.springframework.org/schema/beans""
#
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
#
       xmlns:context=""http://www.springframework.org/schema/context""
#
       xmlns:camel=""http://activemq.apache.org/camel/schema/spring""
#
       xsi:schemaLocation=""
#
http://www.springframework.org/schema/beans
#
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
#
http://www.springframework.org/schema/context
#
http://www.springframework.org/schema/context/spring-context-2.5.xsd
#
http://activemq.apache.org/camel/schema/spring
#
http://activemq.apache.org/camel/schema/spring/camel-spring.xsd"">
#


#
    <camel:camelContext id=""camelContext"">
#
    </camel:camelContext>
#


#
</beans>
#


#


#
stack
#
INFO  - XmlBeanDefinitionReader    - Loading XML bean definitions from class path resource [james.xml]
#
Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelContext': Cannot resolve reference to bean 'camelContext:beanPostProcessor' while setting bean property 'beanPostProcessor'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelContext:beanPostProcessor': Cannot resolve reference to bean 'camelContext' while setting bean property 'camelContext'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelContext': FactoryBean threw exception on object creation; nested exception is java.lang.IllegalArgumentException: No applicationContext has been injected!
#
        at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:275)
#
        at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:104)
#
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1245)
#
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1010)
#
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:472)
#
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409)
#
        at java.security.AccessController.doPrivileged(Native Method)
#
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380)
#
        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264)
#
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:221)
#
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261)
#
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185)
#
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164)
#
        at JamesTest.main(JamesTest.java:13)
#
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
#
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
#
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
#
        at java.lang.reflect.Method.invoke(Method.java:585)
#
        at com.intellij.rt.execution.application.AppMain.main(AppMain.java:90)
#
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelContext:beanPostProcessor': Cannot resolve reference to bean 'camelContext' while setting bean property 'camelContext'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelContext': FactoryBean threw exception on object creation; nested exception is java.lang.IllegalArgumentException: No applicationContext has been injected!
#
        at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:275)
#
        at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:104)
#
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1245)
#
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1010)
#
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:472)
#
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409)
#
        at java.security.AccessController.doPrivileged(Native Method)
#
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380)
#
        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264)
#
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:221)
#
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261)
#
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185)
#
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164)
#
        at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:269)
#
        ... 18 more
#
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelContext': FactoryBean threw exception on object creation; nested exception is java.lang.IllegalArgumentException: No applicationContext has been injected!
#
        at org.springframework.beans.factory.support.FactoryBeanRegistrySupport$1.run(FactoryBeanRegistrySupport.java:127)
#
        at java.security.AccessController.doPrivileged(Native Method)
#
        at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:116)
#
        at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.getObjectFromFactoryBean(FactoryBeanRegistrySupport.java:98)
#
        at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForBeanInstance(AbstractBeanFactory.java:1285)
#
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:217)
#
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185)
#
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164)
#
        at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:269)
#
        ... 31 more
#
Caused by: java.lang.IllegalArgumentException: No applicationContext has been injected!
#
        at org.apache.camel.spring.CamelContextFactoryBean.getApplicationContext(CamelContextFactoryBean.java:354)
#
        at org.apache.camel.spring.CamelContextFactoryBean.createContext(CamelContextFactoryBean.java:473)
#
        at org.apache.camel.spring.CamelContextFactoryBean.getContext(CamelContextFactoryBean.java:305)
#
        at org.apache.camel.spring.CamelContextFactoryBean.getObject(CamelContextFactoryBean.java:130)
#
        at org.springframework.beans.factory.support.FactoryBeanRegistrySupport$1.run(FactoryBeanRegistrySupport.java:121)
#
        ... 39 more
#","davsclaus:1225947065:2008-11-06T12:51:05.960+0000:1225947065:2008-11-06T12:51:05.960+0000:I think the error is caught and handled by Spring and report as Spring does it by standard.

Do you have any suggestions for a more concise exception?
davsclaus:1229516324:2008-12-17T20:18:44.133+0000:1229516324:2008-12-17T20:18:44.133+0000:Spring standard eror message."
0,CAMEL-1054,Task,Major,2.0.0,,"
None
",Closed,Duplicate,None,Unassigned,Hadrian Zbarcea,0,0,2008-11-05 00:48:36+00:00,2008-11-05 02:22:12+00:00,"The api has changed, plus there are tests failures anyway that need to be addressed, but i think better is to upgrade.","janstey:1225819376:2008-11-05T01:22:56.942+0000:1225819376:2008-11-05T01:22:56.942+0000:Yeah, I've started down the upgrade path in CAMEL-1053."
0,CAMEL-1053,Bug,Major,"1.4.0, 1.5.0","1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Willem Jiang,Jonathan Anstey,0,0,2008-11-05 00:21:13+00:00,2009-07-31 06:33:38+00:00,Thread is here http://www.nabble.com/-HEADS-UP--camel-spring-integration-issue-td20331450s22882.html,"janstey:1225815836:2008-11-05T00:23:56.571+0000:1225815836:2008-11-05T00:23:56.571+0000:Its a way bigger change than I thought :) Here's what I have so far if anyone wants to take a look over night.
janstey:1225860520:2008-11-05T12:48:40.485+0000:1225860520:2008-11-05T12:48:40.485+0000:Willem fixed this last night on trunk and 1.x.
davsclaus:1248993218:2009-07-31T06:33:38.243+0000:1248993218:2009-07-31T06:33:38.243+0000:Closing 2.0m1 tickets"
0,CAMEL-1052,Improvement,Major,"1.3.0, 1.4.0, 1.5.0","1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Willem Jiang,Willem Jiang,0,0,2008-11-04 09:52:31+00:00,2009-07-31 06:33:38+00:00,"[EventDrivenConsumerRoute[Endpoint[myAsync:start] -> 
Delegate(Delegate(DeadLetterChannel[Delegate(HandleFaultProcessor(Pipeline[org.apache.camel.processor.asyc.AsnycProcessorErrorHandlerTest$1$1@1edc073, sendTo(Endpoint[mock:result])])), 
RecipientList[log:org.apache.camel.DeadLetterChannel?level=error]]))]]


There are too many Delegate, I can't tell which DelegateProcessor child class that is in my router rule?",davsclaus:1248993218:2009-07-31T06:33:38.218+0000:1248993218:2009-07-31T06:33:38.218+0000:Closing 2.0m1 tickets
0,CAMEL-1051,Bug,Major,None,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Willem Jiang,Willem Jiang,0,0,2008-11-04 07:42:14+00:00,2009-07-31 06:33:38+00:00,"Here is a the smx-camel thread to hang issue[1] , it is caused by HandleFaultProcessor doesn't implement the AsyncProcessor interface.
Since it is a DelegateProcessor, if it wrappes an AsycProcessor , the AsycProcessor's callback.done() method will never be called.


[1] https://issues.apache.org/activemq/browse/SM-1673",davsclaus:1248993218:2009-07-31T06:33:38.187+0000:1248993218:2009-07-31T06:33:38.187+0000:Closing 2.0m1 tickets
0,CAMEL-1050,Task,Trivial,None,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Claus Ibsen,Claus Ibsen,0,0,2008-11-04 07:24:41+00:00,2009-07-31 06:33:38+00:00,No Desc,davsclaus:1248993218:2009-07-31T06:33:38.166+0000:1248993218:2009-07-31T06:33:38.166+0000:Closing 2.0m1 tickets
0,CAMEL-1049,Improvement,Major,1.5.0,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Willem Jiang,Andreas Kuhtz,0,0,2008-11-03 20:49:02+00:00,2009-03-23 08:41:16+00:00,The shouldStartContext flag should be configurable with the spring configuration (CamelContextFactoryBean). The attached patch has the enhancements. The second patch is for a typo in a log message if the start is skipped.,"njiang:1225755503:2008-11-04T07:38:23.540+0000:1225755503:2008-11-04T07:38:23.540+0000:Hi Andreas,

Thanks for you patches.  Since your patches are not granted with ASF license, we can't apply them into the apache repository.
Can you resubmit the patches from this url[1] ?

BTW,
We are prefer to use svn diff to generate the patch file.

[1] https://issues.apache.org/activemq/secure/ManageAttachments.jspa?id=28454

Willem
akuhtz:1225760875:2008-11-04T09:07:55.041+0000:1225760875:2008-11-04T09:07:55.041+0000:Hi Willem,

Re-submitted the patches with ASF license and svn diff format.
njiang:1225844723:2008-11-05T08:25:23.369+0000:1225844723:2008-11-05T08:25:23.369+0000:Applied patches with thanks to Andreas.
akuhtz:1226636297:2008-11-14T12:18:17.205+0000:1226636297:2008-11-14T12:18:17.205+0000:The patch was not fully applied. The setter and getter was missing. I'll attach a patch with testcase.
akuhtz:1226636390:2008-11-14T12:19:50.497+0000:1226636390:2008-11-14T12:19:50.497+0000:new patch for missing getter and setter and testcase.
akuhtz:1226636508:2008-11-14T12:21:48.689+0000:1226636508:2008-11-14T12:21:48.689+0000:new patch with missing setter and getter. added testcase for the new attribute.
davsclaus:1226636893:2008-11-14T12:28:13.155+0000:1226636893:2008-11-14T12:28:13.155+0000:I have these setter/getter in SpringCamelContext in the trunk code


    public void setShouldStartContext(boolean shouldStartContext) {
        this.shouldStartContext = shouldStartContext;
    }

    public boolean getShouldStartContext() {
        return shouldStartContext;
    }


Why do you need the setter/getter on the CamelContextFactoryBean?

akuhtz:1226638467:2008-11-14T12:54:27.474+0000:1226638467:2008-11-14T12:54:27.474+0000:Hi Claus,

Because the configuration want's to set this property if it is configured in the spring bean definition file. If you run the org.apache.camel.spring.config.CamelContextFactoryBeanTest with the configuration from the patch (with the new bean camel4) you can see the problem.

Andi
njiang:1227752550:2008-11-27T10:22:30.475+0000:1227752550:2008-11-27T10:22:30.475+0000:The patch should be in trunk and camel-1.x branch."
0,CAMEL-1048,New Feature,Major,None,None,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,James Strachan,0,0,2008-11-03 18:21:29+00:00,2010-02-07 09:54:17+00:00,"For example we may want to do this route...



<route>
  <requires>
    <el>${broker2.queueSize('AnotherQueue') == 0}</el>
  </requires>
  <from uri=""broker1:MyQueue""/>
  <to uri=""broker2:AnotherQueue""/>
</route>




i.e. only implement a specific route while some predicate is true (e.g. only route while a condition is met; disable when its not met).


Maybe we need to allow endpoints to define if they are ready yet? e.g. only send to a certain queue if its got capacity?","vchekan:1225743939:2008-11-04T04:25:39.797+0000:1225743939:2008-11-04T04:25:39.797+0000:Another use-case: listen to a control queue and start/stop route:
{code}
from control_queue
case when xpath ""/headers/message_type""='""stop""
   el: ${routes[""route_a""].stop}
case when xpath ""/headers/message_type""='""start""
   el: ${routes[""route_a""].start}
{code}
davsclaus:1256593629:2009-10-27T05:47:09.449+0000:1256593629:2009-10-27T05:47:09.449+0000:What is needed is also a background task that can run and enable/disable the routes depending on the predicate.

For example we dont want a event driven consumer to be active and consume an incoming message to only find out the predicate was false.
davsclaus:1256593767:2009-10-27T05:49:27.734+0000:1256593767:2009-10-27T05:49:27.734+0000:And how should the Java DSL syntax be?

We could have requires prelude the from.
{code}
require().el(""${broker2.queueSize('AnotherQueue') == 0"")
.from(""broker1:MyQueue"").to(""broker2:AnotherQueue"");
{code}
davsclaus:1256597667:2009-10-27T06:54:27.236+0000:1256597667:2009-10-27T06:54:27.236+0000:CAMEL-2110 allows us to get hold of number of current in flight exchanges for a given route which can help in the predicate evaluation to implement a dynamic throttler based on max number of in flight exchanges.
davsclaus:1256685548:2009-10-28T07:19:08.607+0000:1256685548:2009-10-28T07:19:08.607+0000:See discussion at
http://www.nabble.com/Discussion---Route-Policy-feature-in-Camel-2.1-td26090277.html
davsclaus:1256777426:2009-10-29T08:50:26.300+0000:1256777426:2009-10-29T08:50:26.300+0000:First cut committed: 830861.
davsclaus:1256787309:2009-10-29T11:35:09.445+0000:1256787309:2009-10-29T11:35:09.445+0000:Added an example
camel-example-route-throttling

trunk: 830901.
davsclaus:1256788850:2009-10-29T12:00:50.056+0000:1257130807:2009-11-02T11:00:07.511+0000:Add documentation to the wiki and release notes *DONE*
davsclaus:1257130792:2009-11-02T10:59:52.742+0000:1257130792:2009-11-02T10:59:52.742+0000:Now you can manage the policy from JMX

trunk: 831859.
davsclaus:1257137590:2009-11-02T12:53:10.899+0000:1257137590:2009-11-02T12:53:10.899+0000:Added example wiki documentation *DONE*
davsclaus:1257209345:2009-11-03T08:49:05.595+0000:1257209345:2009-11-03T08:49:05.595+0000:Renamed the throttler as we should add another throttler in the future for the messages per time unit style.

trunk: 832342."
0,CAMEL-1017,Sub-task,Major,None,None,"
None
",Closed,Not A Problem,1.5.0,Jonathan Anstey,Claus Ibsen,0,0,2008-10-22 04:01:34+00:00,2008-10-23 19:47:55+00:00,No Desc,"davsclaus:1224619367:2008-10-22T04:02:47.391+0000:1224619367:2008-10-22T04:02:47.391+0000:Sorry my bad, now I see the point"
0,CAMEL-1016,Bug,Major,None,1.5.0,"
None
",Closed,Fixed,1.5.0,Jonathan Anstey,Bela Vizy,0,0,2008-10-21 21:51:10+00:00,2009-02-16 05:51:55+00:00,"In the org.apache.camel.util.MainSupport class, the option ""-ad"" (aggregate-dot) conflicts with the option ""-a"" (applicationContext) defined in org.apache.camel.spring.Main. Both start with ""a"". See MainSupport.java:437: fullName.startsWith(arg) yields true with -a and aggregate-dot.


I'm not sure if this is camel-spring or camel-core issue, it depends what was created first. It was working before so I guess the camel-core brought it in recently.


One of the options should be renamed. I would rename the -a to -ac in the camel-spring Main class. So the apps that used -a would barf on the non-existing option so people will know what's going on. What happens now is it just silently ignores your spring config file. Let me know if you need a patch for the change.","magyardude:1224597206:2008-10-21T21:53:26.232+0000:1224597206:2008-10-21T21:53:26.232+0000:I forgot. Temporary woraround is using the full option name: -applicationContext instead of -a.
janstey:1224608808:2008-10-22T01:06:48.676+0000:1224608808:2008-10-22T01:06:48.676+0000:Nice catch Bela, thanks! I've committed a fix for this.
davsclaus:1234734715:2009-02-16T05:51:55.803+0000:1234734715:2009-02-16T05:51:55.803+0000:Closing all 1.5.0 issues"
0,CAMEL-1015,Sub-task,Major,None,None,"
None
",Closed,Fixed,1.5.0,Unassigned,James Strachan,0,0,2008-10-21 18:33:28+00:00,2009-02-16 05:51:55+00:00,"see 



http://activemq.apache.org/camel/bean-injection.html
http://activemq.apache.org/camel/pojo-consuming.html
http://activemq.apache.org/camel/pojo-producing.html","jstrachan:1224741810:2008-10-23T14:03:30.883+0000:1224741810:2008-10-23T14:03:30.883+0000:See the test cases EndpointInjectTest, ConsumeTest and ProduceTest in camel-guice
davsclaus:1234734715:2009-02-16T05:51:55.763+0000:1234734715:2009-02-16T05:51:55.763+0000:Closing all 1.5.0 issues"
0,CAMEL-1014,Sub-task,Major,None,None,"
None
",Closed,Fixed,1.5.0,Jonathan Anstey,Claus Ibsen,0,0,2008-10-21 16:03:38+00:00,2008-10-23 04:33:52+00:00,No Desc,"davsclaus:1224576248:2008-10-21T16:04:08.559+0000:1224576248:2008-10-21T16:04:08.559+0000:Damm in ExpressionType everything is more or less @XmlTransient


janstey:1224605060:2008-10-22T00:04:20.291+0000:1224605060:2008-10-22T00:04:20.291+0000:Is this really needed? Don't we use ExpressionType in the Spring DSL already? For instance, I just used it in the ExceptionType... Maybe I'm missing something obvious here :)
davsclaus:1224619274:2008-10-22T04:01:14.105+0000:1224619274:2008-10-22T04:01:14.105+0000:Yeah sort of, you had to add a new class HandledPredicate to get it in the XSD for the onException. If we need it in other areas as well we have to add new classes there as well. There might be something we can do generally.

If not then .. well then we gotta add the needed classes.
janstey:1224643744:2008-10-22T10:49:04.286+0000:1224643744:2008-10-22T10:49:04.286+0000:Ah, I think I get it. You'd like to have a reusable JAXB class for creating an expression in an element, like:

{code}
<someProcessor>
  <someConfigurableNameHere>
    <xpath>...</xpath>
  </someConfigurableNameHere>
</someProcessor>
{code}

instead of including say the expression type directly

{code}
<someProcessor>
  <xpath>...</xpath>
</someProcessor>
{code}

Make sense?

janstey:1224650968:2008-10-22T12:49:28.385+0000:1224650968:2008-10-22T12:49:28.385+0000:I just committed a fix for this. Now to get something like this

{code}
<someProcessor>
  <someConfigurableNameHere>
    <xpath>...</xpath>
  </someConfigurableNameHere>
</someProcessor>
{code}

You need to add this to your model class:

{code}
@XmlElement(name = ""someConfigurableNameHere"", required = false)
private ExpressionSubElementType foo;
{code}
davsclaus:1224707632:2008-10-23T04:33:52.420+0000:1224707632:2008-10-23T04:33:52.420+0000:Closing 1.5 issues"
0,CAMEL-1013,Bug,Minor,None,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,William Tam,0,0,2008-10-21 16:03:34+00:00,2009-02-16 05:51:55+00:00,"It looks like children processors of load balancer are not being
wrapped by interceptor strategy.  As a result, sendTo processors may
not be debuggable by Debugger or monitored by JMX.","davsclaus:1224581988:2008-10-21T17:39:48.210+0000:1224581988:2008-10-21T17:39:48.210+0000:William, do you mind double check if there are other model types in camel-core that has this issue as well?
wtam@iona.com:1224582434:2008-10-21T17:47:14.373+0000:1224582434:2008-10-21T17:47:14.373+0000:Sure Claus.  I'll do a quick search.
davsclaus:1224583523:2008-10-21T18:05:23.183+0000:1224583523:2008-10-21T18:05:23.183+0000:Applied patch with thanks
wtam@iona.com:1224593219:2008-10-21T20:46:59.250+0000:1224593219:2008-10-21T20:46:59.250+0000:I haven't found any other processor that's having the similar issue.  I'll raise a JIRA when I do see any.
wtam@iona.com:1224593503:2008-10-21T20:51:43.891+0000:1224593503:2008-10-21T20:51:43.891+0000:I think we should get rid of the casting to SendProcessor.  It does not make too much sense.
davsclaus:1234734715:2009-02-16T05:51:55.741+0000:1234734715:2009-02-16T05:51:55.741+0000:Closing all 1.5.0 issues"
0,CAMEL-1012,Sub-task,Major,None,None,"
None
",Closed,Fixed,1.5.0,Jonathan Anstey,Claus Ibsen,0,0,2008-10-21 15:43:48+00:00,2008-10-23 04:33:52+00:00,No Desc,"davsclaus:1224575090:2008-10-21T15:44:50.852+0000:1224575090:2008-10-21T15:44:50.852+0000:Currently RedeliveryPolicyType will be generated into 7 sub elements. Why not use attributes for the 7 simple types?
janstey:1224606392:2008-10-22T00:26:32.568+0000:1224606392:2008-10-22T00:26:32.568+0000:I agree. Attributes are more suitable here. I've committed the change for this.
davsclaus:1224707632:2008-10-23T04:33:52.392+0000:1224707632:2008-10-23T04:33:52.392+0000:Closing 1.5 issues"
0,CAMEL-1011,Improvement,Minor,None,None,"
None
",Closed,Fixed,1.5.0,James Strachan,James Strachan,0,0,2008-10-21 14:42:17+00:00,2009-02-16 05:51:55+00:00,"Just showing 'Bean Ref"" is not terribly useful",davsclaus:1234734715:2009-02-16T05:51:55.714+0000:1234734715:2009-02-16T05:51:55.714+0000:Closing all 1.5.0 issues
0,CAMEL-1010,Improvement,Major,None,None,"
None
",Closed,Fixed,1.5.0,Unassigned,James Strachan,0,0,2008-10-21 13:51:50+00:00,2009-02-16 05:51:55+00:00,particularly when running with 'mvn camel:run' or 'mvn guice:dot' then it tends to generate slightly messy looking diagrams,davsclaus:1234734715:2009-02-16T05:51:55.680+0000:1234734715:2009-02-16T05:51:55.680+0000:Closing all 1.5.0 issues
0,CAMEL-1009,Sub-task,Major,None,None,"
None
",Closed,Fixed,1.5.0,James Strachan,James Strachan,0,0,2008-10-21 13:39:53+00:00,2009-02-16 05:51:55+00:00,No Desc,"jstrachan:1224574948:2008-10-21T15:42:28.378+0000:1224574948:2008-10-21T15:42:28.378+0000:see the documentation: http://cwiki.apache.org/CAMEL/guice-maven-plugin.html
davsclaus:1234734715:2009-02-16T05:51:55.662+0000:1234734715:2009-02-16T05:51:55.662+0000:Closing all 1.5.0 issues"
0,CAMEL-1008,Task,Major,None,None,"
None
",Closed,Won't Fix,2.0-M1,Unassigned,James Strachan,0,0,2008-10-21 11:55:23+00:00,2009-10-24 11:16:12+00:00,"there are a number of DSL methods in the base class which can be kinda used anywhere - which can lead to confusion... e.g.


http://www.nabble.com/Non-registry-beans-td20088181s22882.html


as part of 2.0.0 we should try zap most of the public methods which don't make much sense - so we encourage folks to use the context based methods.


e.g. rather than



filter(someStaticMethod).to()




we should prefer



filter().xpath("".."".to()




i.e. using filter(). in an IDE will show a better completion list than allowing any static method import","davsclaus:1235091523:2009-02-20T08:58:43.753+0000:1235091523:2009-02-20T08:58:43.753+0000:But sometimes you need to former when you need to build predicates
{code}
filter(header(""type"").in(""gold,silver"")).to
{code}

You cannot do that in the fluent builder
{code}
filter().header(""type"").in(""gold,silver"")).XXXX compiler gets fuzzed and you only have eg java.lang.Object methods, you can not continue the route to 
{code}

"
0,CAMEL-1007,Task,Major,None,None,"
None
",Closed,Won't Fix,Future,Unassigned,James Strachan,0,0,2008-10-21 11:14:49+00:00,2010-02-07 09:54:17+00:00,"I wonder if there's some way to create a better 'camel news blog' so we can have a simple RSS/Atom feed of all camel related news so folks can track it easier? 


e.g. we tend to add stuff to the articles page...
http://activemq.apache.org/articles.html


and we have a news page for ActiveMQ and for Camel. I wonder is there some simple way to kinda aggregate them all together so folks can subscribe to ""ActiveMQ and Camel News' or something and get updates to any of these 3 feeds?","gertvanthienen:1224559092:2008-10-21T11:18:12.996+0000:1224559092:2008-10-21T11:18:12.996+0000:Something like what we did for http://servicemix.apache.org/servicemix-in-blogosphere.html?
jstrachan:1224560741:2008-10-21T11:45:41.582+0000:1224560741:2008-10-21T11:45:41.582+0000:yeah - that looks good :)
davsclaus:1253486719:2009-09-21T06:45:19.059+0000:1253486719:2009-09-21T06:45:19.059+0000:Folks can track using twitter, google search and whatnot today."
0,CAMEL-1006,Task,Major,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-10-21 10:57:53+00:00,2008-10-23 04:33:52+00:00,"Write some more about that using @Headers Map headers you can also add new headers to the exchange. Whereas the @Header('headerId') is a read-only binding


eg you can add a new key with:
headers.put(""newKey"", ""newValue"");","davsclaus:1224622275:2008-10-22T04:51:15.992+0000:1224622275:2008-10-22T04:51:15.992+0000:Updated wiki at:
http://activemq.apache.org/camel/parameter-binding-annotations.html
davsclaus:1224707632:2008-10-23T04:33:52.373+0000:1224707632:2008-10-23T04:33:52.373+0000:Closing 1.5 issues"
0,CAMEL-1005,Improvement,Trivial,None,None,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,James Strachan,0,0,2008-10-21 08:32:48+00:00,2009-11-21 11:57:54+00:00,"e.g.



public class Cheese {
  public void foo(String bar) {...}

  @Handler
  public void bar(String cheese) {...}




Then if we did



from(""seda:foo"").bean(Cheese.class);




it'd be obvious. 


I guess its pretty low priority as follks could always do



public class Cheese {
  public void foo(String bar) {...}

  public void bar(@Body String cheese) {...}","davsclaus:1232448567:2009-01-20T18:49:27.480+0000:1232448567:2009-01-20T18:49:27.480+0000:Should definitely have a better name than @Handler

The @Body workaround is maybe not to obvious but will of course work as Camel will prefer annotated methods.


davsclaus:1236926748:2009-03-13T14:45:48.332+0000:1236926748:2009-03-13T14:45:48.332+0000:James what if there are other annotations?

{code}
public class Cheese {
  public void foo(@Body String bar) {...}

  @Handler
   public void bar(String cheese) {...}

   public void baz(Object ham) 
{code}

What should happen? It should choose the *foo* method, but the @Handler does *stand* out much more since its a method annotation.

So I am not keen on this. What if it was the reverse. That it would always choose the @Handler if there are multiple choices?
jstrachan:1236931761:2009-03-13T16:09:21.417+0000:1236931761:2009-03-13T16:09:21.417+0000:If there are multiple possible methods then the same logic as we support now should kick in - throwing an exception due to ambiguous methods.

I guess we could repurpose the @Consumes method but just let folks omit any URI / ref?
davsclaus:1236932329:2009-03-13T16:18:49.772+0000:1236932329:2009-03-13T16:18:49.772+0000:What if @Consumes had a special parameter for this purpose, if we can get a good name?


jstrachan:1236932527:2009-03-13T16:22:07.170+0000:1236932527:2009-03-13T16:22:07.170+0000:I think I'd rather a new annotation than require a parameter value on an existing one.
davsclaus:1236932883:2009-03-13T16:28:03.504+0000:1236932883:2009-03-13T16:28:03.504+0000:Yes better with a new one, but then we gotta come up with a good name and parameter, or just name.

The purpose is to quickly being able to mark a method as the one Camel should invoke in a class that might have many methods and thus it could be hard to pick the best one.
And to use annotations for meta data instead of specifying method=xxx in the Camel route?

Is @Handler the best name? Isnt it associated with all the web frameworks?
davsclaus:1242609360:2009-05-18T09:16:00.466+0000:1242609360:2009-05-18T09:16:00.466+0000:Yes @Handler is the best name. When its defined Camel will use this when it looks for method candidates.
davsclaus:1242626503:2009-05-18T14:01:43.976+0000:1242626503:2009-05-18T14:01:43.976+0000:trunk: 775955.

Updated wiki page as well for Bean Integration.

@Handler is the name
davsclaus:1258775874:2009-11-21T11:57:54.940+0000:1258775874:2009-11-21T11:57:54.940+0000:Closing all 2.0M2 tickets"
0,CAMEL-1004,New Feature,Major,None,None,"
None
",Closed,Fixed,2.0-M1,James Strachan,James Strachan,0,1,2008-10-21 08:20:07+00:00,2009-07-31 06:33:36+00:00,There should be some way to stop a Route from either the XML (e.g. by routeID) or from a RouteBuilder,"jstrachan:1235557683:2009-02-25T18:28:03.915+0000:1235557683:2009-02-25T18:28:03.915+0000:see the test case 

http://svn.apache.org/repos/asf/camel/trunk/camel-core/src/test/java/org/apache/camel/impl/StartAndStopRoutesTest.java

for how we can start/stop routes based on their definition
davsclaus:1248993216:2009-07-31T06:33:36.952+0000:1248993216:2009-07-31T06:33:36.952+0000:Closing 2.0m1 tickets"
0,CAMEL-1003,Bug,Major,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-10-21 05:42:14+00:00,2008-10-23 04:33:52+00:00,"See attached patch for details


Unit test inspired by nabble:
http://www.nabble.com/Wait-for-condition-td20064420s22882.html","davsclaus:1224570748:2008-10-21T14:32:28.526+0000:1224570748:2008-10-21T14:32:28.526+0000:Got a +1 from James
davsclaus:1224707632:2008-10-23T04:33:52.340+0000:1224707632:2008-10-23T04:33:52.340+0000:Closing 1.5 issues"
0,CAMEL-1002,Improvement,Major,1.4.0,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Hadrian Zbarcea,Martin Gilday,0,0,2008-10-20 16:13:24+00:00,2009-07-31 06:33:36+00:00,"See http://www.nabble.com/Clustered-Quartz-td20068086s22882.html


Currently Quartz only has CamelJob which implements Quartz's Job interface.  There is no option to use an implemenation of StatefulJob.  This causes problems when you may want to use a JDBC JobStore and have Quartz running on multiple machines, as you may end up with multiple jobs running together.  StatefulJob in effect allows for a blocking singleton style job on one machine.


Attached is a patch which adds a new URI parameter named ""stateful"", which defaults to false.  When set to true it uses StatefulCamelJob.


One significant change to the QuartzComponent is that a reference to the CamelContext is now stored in the Quartz Scheduler.  This idea is taken from Spring's SchedulerFactoryBean which stores a reference to a Spring ApplicationContext.  This is needed as when using stateful jobs the URI of the Endpoint is stored instead of a reference to the endpoint.  This is to allow for the use of JDBC JobStore as the URI can be serialised and shared beteen participating schedulers.


Current Faults:
Still has no notion of volatility
Difference in operation between CamelJob and StatefulCamelJob is not strictly needed.   It may be less confusing if both versions simply store the URI instead of an endpoint reference.
You need to use stateful if you want to use clustering at all due to the reason above.  This is mixing together clustering support and blocking functionality.
In Camel 2 we may want to try rewriting this Component as it is becoming a little messy.  It would be nice to try and harness the power of Spring's SchedulerFactoryBean.","pledge:1227667200:2008-11-26T10:40:00.177+0000:1227667200:2008-11-26T10:40:00.177+0000:Working on new patch for 2.0
hadrian:1228111232:2008-12-01T14:00:32.470+0000:1228111232:2008-12-01T14:00:32.470+0000:@Martin, do you mind if I take care of this?  I think it would be good to have it in both 1.5.1 and 2.0.
pledge:1228117456:2008-12-01T15:44:16.314+0000:1228117456:2008-12-01T15:44:16.314+0000:Not at all Hadrian.  I would love to see this in 1.5.1 as it is something we need to use fairly soon, but I have not had time to start the patch.

I would take a look at  my comments above about ""Current Faults"".  Refactoring my existing patch so that both stateful and non-stateful jobs use my new way of locating the endpoint will prevent having to maintain two ways of doing the same thing in the future.  

The only other thing I have thought of is writing a test to show that quartz.properties is loaded correctly so that JDBC job stores and clustering can be configured.

If you get it into the trunk then I am more than happy to help write some tests and document it on the wiki when I start using it.

Thanks for your help.
hadrian:1233050439:2009-01-27T18:00:39.045+0000:1233050439:2009-01-27T18:00:39.045+0000:Patch applied with thanks to Martin on both trunk and camel-1.x branch.
davsclaus:1248993216:2009-07-31T06:33:36.926+0000:1248993216:2009-07-31T06:33:36.926+0000:Closing 2.0m1 tickets"
0,CAMEL-1001,Bug,Major,1.5.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Ron Gavlin,0,0,2008-10-20 15:33:27+00:00,2009-02-16 05:51:55+00:00,"ExceptionType handledPolicy is not exposed in the XSD. 


See nabble thread http://www.nabble.com/RE%3A-How-to-express-new-%22handled%22-predicate-in-Spring-DSL-p20069223.html.","davsclaus:1224574672:2008-10-21T15:37:52.490+0000:1224574672:2008-10-21T15:37:52.490+0000:The spring DSL is really not easily usable for the more complex stuff you can do in Java. 
rgavlin:1224576383:2008-10-21T16:06:23.008+0000:1224576383:2008-10-21T16:06:23.008+0000:Hi Claus,

Yes, Spring DSL is limiting. However, would it be possible to simply expose the ""HandledPolicy"" setter so that I can dependency inject a value using Spring?

- Ron
davsclaus:1224576601:2008-10-21T16:10:01.772+0000:1224576601:2008-10-21T16:10:01.772+0000:CAMEL-1014 is needed to allow using expressions/predicates. That will be in Camel 2.0

So I am thinking of setting a boolean you can use for handled as this is the most common use-case anyway?

What do you think Ron?
  <handled>true</handled>
rgavlin:1224578290:2008-10-21T16:38:10.585+0000:1224578290:2008-10-21T16:38:10.585+0000:Yes, that would be great.

Thanks,

- Ron
davsclaus:1224578864:2008-10-21T16:47:44.324+0000:1224578864:2008-10-21T16:47:44.324+0000:Great I have the java DSL example from here:
http://activemq.apache.org/camel/exception-clause.html

Now working with Spring DSL. So I need to tidy it up and add some snippets so we can have the spring sample in the wiki doc as well.
davsclaus:1224581761:2008-10-21T17:36:01.713+0000:1224581761:2008-10-21T17:36:01.713+0000:See wiki for sample

http://cwiki.apache.org/confluence/display/CAMEL/Exception+Clause
rgavlin:1224582556:2008-10-21T17:49:16.705+0000:1224582556:2008-10-21T17:49:16.705+0000:Hi Claus,

Thanks for the excellent support!

/Ron
janstey:1224604286:2008-10-21T23:51:26.490+0000:1224604286:2008-10-21T23:51:26.490+0000:Hey guys,

If you want to use other expression languages in the handled element, I've just added support for this. So the simple boolean case now looks like

{code}
<handled>
  <constant>true</constant>
</handled>
{code}

davsclaus:1234734715:2009-02-16T05:51:55.629+0000:1234734715:2009-02-16T05:51:55.629+0000:Closing all 1.5.0 issues"
0,CAMEL-1000,Bug,Major,1.4.0,None,"
None
",Closed,Cannot Reproduce,"1.6.0, 2.0-M1",Hadrian Zbarcea,Moulliard Charles,0,0,2008-10-20 07:58:11+00:00,2009-10-24 11:16:12+00:00,"Hi,


I have tried to activated the tracing inside my java class like this :


        Tracer tracer = new Tracer();
        tracer.setLogLevel(LoggingLevel.DEBUG);
        tracer.setTraceInterceptors(true);
        tracer.getFormatter().setShowBody(true);
        tracer.getFormatter().setShowBodyType(true);
        camelContext.addInterceptStrategy(tracer);


or inside the springcamel-context file :


<?xml version=""1.0"" encoding=""UTF-8""?>
<beans xmlns=""http://www.springframework.org/schema/beans""
        xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
        xsi:schemaLocation=""
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
http://activemq.apache.org/camel/schema/spring http://activemq.apache.org/camel/schema/spring/camel-spring.xsd
    "">


        <bean id=""camelTracer"" class=""org.apache.camel.processor.interceptor.Tracer"">
                <property name=""traceExceptions"" value=""false"" />
                <property name=""traceInterceptors"" value=""true"" />
                <property name=""logLevel"" value=""DEBUG"" />
        </bean>


        <bean id=""traceFormatter"" class=""org.apache.camel.processor.interceptor.TraceFormatter"">
                <property name=""showBody"" value=""true"" />
                <property name=""showBodyType"" value=""false"" />
                <property name=""showHeaders"" value=""true"" />
                <property name=""showBreadCrumb"" value=""false"" />
        </bean>


        <camelContext id=""camel"" trace=""true""
                xmlns=""http://activemq.apache.org/camel/schema/spring"">
                <route>
                        <from uri=""event://default"" />
                        <to uri=""stream:out"" />
                </route>
        </camelContext>
</beans>


but the log does not display the header/body ... information


Here is the trace using log4j - DEBUG :


[                          main] DefaultCamelContext            INFO  JMX enabled. Using InstrumentationLifecycleStrategy.
[                          main] CamelContextFactoryBean        DEBUG Found JAXB created routes: [Route[ [From[event://default]] -> [To[stream:out]]]]
[                          main] SpringCamelContext             DEBUG Publishing event: org.springframework.context.event.ContextRefreshedEvent[source=org.springframework.context.support.ClassPathXmlApplicationContext@dd87b2: display name [org.springframework.context.support.ClassPathXmlApplicationContext@dd87b2]; startup date [Fri Oct 17 12:23:04 CEST 2008]; root of context hierarchy]
[                          main] SpringCamelContext             DEBUG Starting the CamelContext now that the ApplicationContext has started
[                          main] DefaultInstrumentationAgent    DEBUG Starting JMX agent on server: com.sun.jmx.mbeanserver.JmxMBeanServer@70be88
[                          main] DefaultInstrumentationAgent    DEBUG Registered MBean with objectname: org.apache.camel:context=dell-charles/camel,name=context
[                          main] DefaultComponent               DEBUG Creating endpoint uri=[event://default], path=[default], parameters=[{}]
[                          main] DefaultCamelContext            DEBUG event://default converted to endpoint: Endpoint[event://default] by component: org.apache.camel.component.event.EventComponent@19fe451
[                          main] DefaultInstrumentationAgent    DEBUG Registered MBean with objectname: org.apache.camel:context=dell-charles/camel,type=endpoints,name=""event://default?id=0xdaebda6""
[                          main] DefaultInstrumentationAgent    DEBUG Registered MBean with objectname: org.apache.camel:context=dell-charles/camel,type=processors,nodeid=to1,name=""To[stream:out]""
[                          main] DefaultComponentResolver       DEBUG Found component: stream via type: org.apache.camel.component.stream.StreamComponent via META-INF/services/org/apache/camel/component/stream
[                          main] DefaultComponent               DEBUG Creating endpoint uri=[stream:out], path=[out], parameters=[{}]
[                          main] DefaultCamelContext            DEBUG stream:out converted to endpoint: Endpoint[stream:out] by component: org.apache.camel.component.stream.StreamComponent@111ded2
[                          main] DefaultInstrumentationAgent    DEBUG Registered MBean with objectname: org.apache.camel:context=dell-charles/camel,type=endpoints,name=""stream:out?id=0xb3679825""
[                          main] DefaultInstrumentationAgent    DEBUG Registered MBean with objectname: org.apache.camel:context=dell-charles/camel,type=routes,name=""node1""
[                          main] DefaultInstrumentationAgent    DEBUG Registered MBean with objectname: org.apache.camel:context=dell-charles/camel,type=consumers,name=EventConsumer(0x1353249)
[                          main] DefaultComponent               DEBUG Creating endpoint uri=[event:default], path=[default], parameters=[{}]
[                          main] DefaultCamelContext            DEBUG event:default converted to endpoint: Endpoint[event:default] by component: org.apache.camel.component.event.EventComponent@19fe451
[                          main] DefaultInstrumentationAgent    DEBUG Registered MBean with objectname: org.apache.camel:context=dell-charles/camel,type=endpoints,name=""event:default?id=0x1c3b4b06""
[                          main] ProducerCache                  DEBUG >>>> Endpoint[event://default] Exchange[Message: Hello there!]
[                          main] ResolverUtil                   DEBUG Searching for annotations of org.apache.camel.Converter in packages: [org.apache.camel.converter, org.apache.camel.component.cxf.converter, org.apache.camel.spring.converter]
[                          main] ResolverUtil                   DEBUG Using only regular classloaders
[                          main] ResolverUtil                   DEBUG Loading from jar: C:\.m2\repository\org\apache\camel\camel-core\1.5-SNAPSHOT\camel-core-1.5-SNAPSHOT.jar
[                          main] ResolverUtil                   DEBUG Using only regular classloaders
[                          main] ResolverUtil                   DEBUG Loading from jar: C:\.m2\repository\org\apache\camel\camel-cxf\1.5-SNAPSHOT\camel-cxf-1.5-SNAPSHOT.jar
[                          main] ResolverUtil                   DEBUG Using only regular classloaders
[                          main] ResolverUtil                   DEBUG Found: [class org.apache.camel.component.cxf.converter.CxfConverter, class org.apache.camel.converter.CollectionConverter, class org.apache.camel.converter.jaxp.StreamSourceConverter, class org.apache.camel.converter.NIOConverter, class org.apache.camel.converter.stream.StreamCacheConverter, class org.apache.camel.converter.jaxp.XmlConverter, class org.apache.camel.converter.CamelConverter, class org.apache.camel.converter.IOConverter, class org.apache.camel.converter.jaxp.DomConverter, class org.apache.camel.converter.ObjectConverter, class org.apache.camel.converter.jaxp.StaxConverter]
[                          main] AnnotationTypeConverterLoader  DEBUG Loading converter class: org.apache.camel.component.cxf.converter.CxfConverter
[                          main] AnnotationTypeConverterLoader  DEBUG Loading converter class: org.apache.camel.converter.CollectionConverter
[                          main] AnnotationTypeConverterLoader  DEBUG Loading converter class: org.apache.camel.converter.jaxp.StreamSourceConverter
[                          main] AnnotationTypeConverterLoader  DEBUG Loading converter class: org.apache.camel.converter.NIOConverter
[                          main] AnnotationTypeConverterLoader  DEBUG Loading converter class: org.apache.camel.converter.stream.StreamCacheConverter
[                          main] AnnotationTypeConverterLoader  DEBUG Loading converter class: org.apache.camel.converter.jaxp.XmlConverter
[                          main] AnnotationTypeConverterLoader  DEBUG Loading converter class: org.apache.camel.converter.CamelConverter
[                          main] AnnotationTypeConverterLoader  DEBUG Loading converter class: org.apache.camel.converter.IOConverter
[                          main] DefaultTypeConverter           WARN  Overriding type converter from: InstanceMethodTypeConverter: public java.lang.String org.apache.camel.converter.jaxp.XmlConverter.toString(javax.xml.transform.Source) throws javax.xml.transform.TransformerException to: StaticMethodTypeConverter: public static java.lang.String org.apache.camel.converter.IOConverter.toString(javax.xml.transform.Source) throws javax.xml.transform.TransformerException,java.io.IOException
[                          main] AnnotationTypeConverterLoader  DEBUG Loading converter class: org.apache.camel.converter.jaxp.DomConverter
[                          main] AnnotationTypeConverterLoader  DEBUG Loading converter class: org.apache.camel.converter.ObjectConverter
[                          main] AnnotationTypeConverterLoader  DEBUG Loading converter class: org.apache.camel.converter.jaxp.StaxConverter
[                          main] SpringCamelContext             DEBUG Publishing event: org.apache.camel.component.event.CamelEvent[source=Endpoint[event://default]]


KR,


Charles Moulliard","hadrian:1224483070:2008-10-20T14:11:10.354+0000:1224483070:2008-10-20T14:11:10.354+0000:I was curious who's gonna open issue #1000.  Charles, when will meet, the beer's on me :).
davsclaus:1224489344:2008-10-20T15:55:44.551+0000:1224489655:2008-10-20T16:00:55.452+0000:Beers from me 2 but he's from a lovely beer country so I guess it's best that I come to Luxembourg instead. ;)

Sorry wrong country ;)
cmoulliard:1224564172:2008-10-21T12:42:52.591+0000:1224564172:2008-10-21T12:42:52.591+0000:Hi,

I live in Belgium. So, the beers will be Belgian (Leffe, Maredsous, Duvel,
...).

KR,

Charles 


davsclaus:1234241976:2009-02-10T12:59:36.375+0000:1234241976:2009-02-10T12:59:36.375+0000:Works fine:

[                          main] TraceInterceptor               INFO  ID-claus-ibsens-macbook-pro-local-51578-1234270744241-2-0 >>> spring-event:default --> to(mock:result), Pattern:InOnly, BodyType:org.springframework.context.event.ContextRefreshedEvent, Body:org.springframework.context.event.ContextRefreshedEvent[source=org.springframework.context.support.ClassPathXmlApplicationContext@336006: display name [org.springframework.context.support.ClassPathXmlApplicationContext@336006]; startup date [Tue Feb 10 13:59:02 CET 2009]; root of context hierarchy]
"
0,CAMEL-999,Improvement,Major,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Gert Vanthienen,Gert Vanthienen,0,0,2008-10-19 19:35:28+00:00,2009-02-16 05:51:55+00:00,"Allow Scala DSL RouteBuilder classes to be discovered from the classpath, just like the Java DSL RouteBuilder.","gertvanthienen:1224416803:2008-10-19T19:46:43.047+0000:1224416803:2008-10-19T19:46:43.047+0000:Fixed by scanning for {{Routes}} implementations in http://svn.eu.apache.org/viewvc?view=rev&revision=706059
davsclaus:1234734715:2009-02-16T05:51:55.593+0000:1234734715:2009-02-16T05:51:55.593+0000:Closing all 1.5.0 issues"
0,CAMEL-998,Improvement,Major,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-10-19 11:58:37+00:00,2008-10-23 04:33:52+00:00,"When creating components manually etc. you tend to forget to call setCamelContext


A component is much less useful if it doesn't have access to the camel context. And it can cause a few side effects. So we should check that this is set","davsclaus:1224395366:2008-10-19T13:49:26.771+0000:1224395366:2008-10-19T13:49:26.771+0000:Also added check in doStart() so if end user have manually created an endpoint and uses eg. createEndpoint with the 3 parameters then the check for camel context provided is bypassed. Now this is in doStart as well so we ensure its there.
davsclaus:1224707632:2008-10-23T04:33:52.320+0000:1224707632:2008-10-23T04:33:52.320+0000:Closing 1.5 issues"
0,CAMEL-997,Improvement,Major,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-10-19 10:23:38+00:00,2008-10-23 04:33:52+00:00,"The code in HttpProducer should be smarter to select the correct method to use.


Algorithm:
1) if the method is provided in a header
2) GET if a querystring is provided in a header
3) GET if endpoint is configured with a query string
4) POST if there is data to send
5) GET fallback to get


Also the HttpOperationFailedException is missing a message, so you get the error code and description in the stack-trace","davsclaus:1224383038:2008-10-19T10:23:58.825+0000:1224383038:2008-10-19T10:23:58.825+0000:See nabble:
http://www.nabble.com/camel-http-instructions-for-Query-string-handling-don%27t-work-td20048788s22882.html
davsclaus:1224383773:2008-10-19T10:36:13.637+0000:1224383773:2008-10-19T10:36:13.637+0000:Also add some logging to the http producer
davsclaus:1224385948:2008-10-19T11:12:28.084+0000:1224385948:2008-10-19T11:12:28.084+0000:Add an option to set follow redirects on/off
davsclaus:1224393842:2008-10-19T13:24:02.174+0000:1224393842:2008-10-19T13:24:02.174+0000:Updated with with algorithm used
davsclaus:1224707632:2008-10-23T04:33:52.302+0000:1224707632:2008-10-23T04:33:52.302+0000:Closing 1.5 issues"
0,CAMEL-996,Task,Major,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-10-19 09:13:33+00:00,2008-10-23 04:33:52+00:00,"See blog
http://shotgunsandpenguins.blogspot.com/2008/10/unexpected-chapter.html


Note should be much better in Camel 2.0 when we get rid of the generics and should avoid all the copies.","davsclaus:1224447220:2008-10-20T04:13:40.129+0000:1224447220:2008-10-20T04:13:40.129+0000:The NPE is fixed by CAMEL-785.

And the file-file thingy should use mutlicast to send the *same* message to multiple destinations.
davsclaus:1224707632:2008-10-23T04:33:52.270+0000:1224707632:2008-10-23T04:33:52.270+0000:Closing 1.5 issues"
0,CAMEL-995,Task,Minor,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-10-17 08:55:48+00:00,2008-10-23 04:33:52+00:00,"The event component should be renamed to spring-event in the service file and the wiki doc as well.


It's to confusing with just event, as it's the Spring events it is used for (ApplicationContext)","davsclaus:1224204962:2008-10-17T08:56:02.900+0000:1224204962:2008-10-17T08:56:02.900+0000:davsclaus btw I was think the event component should we rename it to spring-event ? 
10:53 jstrachan yeah, good idea 

davsclaus:1224707632:2008-10-23T04:33:52.250+0000:1224707632:2008-10-23T04:33:52.250+0000:Closing 1.5 issues"
0,CAMEL-994,Bug,Major,1.4.0,1.5.0,"
None
",Closed,Not A Problem,1.5.0,Unassigned,Moulliard Charles,0,0,2008-10-17 08:17:11+00:00,2009-02-16 05:51:55+00:00,"Hi,


I have the following error generated :


[                          main] DefaultCamelContext            INFO  JMX enabled. Using InstrumentationLifecycleStrategy.
[                          main] DefaultCamelContext            DEBUG Adding routes from: Routes: [Route[ [From[event://default]] -> [To[mock:test]]]] routes: []
[                          main] DefaultInstrumentationAgent    DEBUG Starting JMX agent on server: com.sun.jmx.mbeanserver.JmxMBeanServer@1503a3
[                          main] DefaultInstrumentationAgent    DEBUG Registered MBean with objectname: org.apache.camel:context=dell-charles/camel-1,name=context
[                          main] DefaultComponentResolver       DEBUG Found component: event via type: org.apache.camel.component.event.EventComponent via META-INF/services/org/apache/camel/component/event
[                          main] DefaultComponent               DEBUG Creating endpoint uri=[event://default], path=[default], parameters=[{}]
[                          main] DefaultCamelContext            DEBUG event://default converted to endpoint: Endpoint[event://default] by component: org.apache.camel.component.event.EventComponent@872380
[                          main] DefaultInstrumentationAgent    DEBUG Registered MBean with objectname: org.apache.camel:context=dell-charles/camel-1,type=endpoints,name=""event://default?id=0xdaebda6""
[                          main] DefaultInstrumentationAgent    DEBUG Registered MBean with objectname: org.apache.camel:context=dell-charles/camel-1,type=processors,nodeid=to1,name=""To[mock:test]""
[                          main] DefaultComponentResolver       DEBUG Found component: mock via type: org.apache.camel.component.mock.MockComponent via META-INF/services/org/apache/camel/component/mock
[                          main] DefaultComponent               DEBUG Creating endpoint uri=[mock:test], path=[test], parameters=[{}]
[                          main] DefaultCamelContext            DEBUG mock:test converted to endpoint: Endpoint[mock:test] by component: org.apache.camel.component.mock.MockComponent@e0b6f5
[                          main] DefaultInstrumentationAgent    DEBUG Registered MBean with objectname: org.apache.camel:context=dell-charles/camel-1,type=endpoints,name=""mock:test?id=0x1f9866cb""
[                          main] DefaultInstrumentationAgent    DEBUG Registered MBean with objectname: org.apache.camel:context=dell-charles/camel-1,type=routes,name=""node1""
[                          main] DefaultInstrumentationAgent    DEBUG Registered MBean with objectname: org.apache.camel:context=dell-charles/camel-1,type=consumers,name=EventConsumer(0x97a560)
[                          main] ProducerCache                  DEBUG >>>> Endpoint[event://default] Exchange[Message: Hello there!]
[                          main] ResolverUtil                   DEBUG Searching for annotations of org.apache.camel.Converter in packages: [org.apache.camel.converter, org.apache.camel.component.cxf.converter, org.apache.camel.spring.converter]
[                          main] ResolverUtil                   DEBUG Using only regular classloaders
[                          main] ResolverUtil                   DEBUG Loading from jar: C:\.m2\repository\org\apache\camel\camel-core\1.5-SNAPSHOT\camel-core-1.5-SNAPSHOT.jar
[                          main] ResolverUtil                   DEBUG Using only regular classloaders
[                          main] ResolverUtil                   DEBUG Loading from jar: C:\.m2\repository\org\apache\camel\camel-cxf\1.5-SNAPSHOT\camel-cxf-1.5-SNAPSHOT.jar
[                          main] ResolverUtil                   DEBUG Using only regular classloaders
[                          main] ResolverUtil                   DEBUG Found: [class org.apache.camel.converter.stream.StreamCacheConverter, class org.apache.camel.converter.CamelConverter, class org.apache.camel.converter.IOConverter, class org.apache.camel.converter.jaxp.DomConverter, class org.apache.camel.converter.jaxp.StaxConverter, class org.apache.camel.converter.jaxp.StreamSourceConverter, class org.apache.camel.converter.ObjectConverter, class org.apache.camel.converter.NIOConverter, class org.apache.camel.component.cxf.converter.CxfConverter, class org.apache.camel.converter.jaxp.XmlConverter, class org.apache.camel.converter.CollectionConverter]
[                          main] AnnotationTypeConverterLoader  DEBUG Loading converter class: org.apache.camel.converter.stream.StreamCacheConverter
[                          main] AnnotationTypeConverterLoader  DEBUG Loading converter class: org.apache.camel.converter.CamelConverter
[                          main] AnnotationTypeConverterLoader  DEBUG Loading converter class: org.apache.camel.converter.IOConverter
[                          main] AnnotationTypeConverterLoader  DEBUG Loading converter class: org.apache.camel.converter.jaxp.DomConverter
[                          main] AnnotationTypeConverterLoader  DEBUG Loading converter class: org.apache.camel.converter.jaxp.StaxConverter
[                          main] AnnotationTypeConverterLoader  DEBUG Loading converter class: org.apache.camel.converter.jaxp.StreamSourceConverter
[                          main] AnnotationTypeConverterLoader  DEBUG Loading converter class: org.apache.camel.converter.ObjectConverter
[                          main] AnnotationTypeConverterLoader  DEBUG Loading converter class: org.apache.camel.converter.NIOConverter
[                          main] AnnotationTypeConverterLoader  DEBUG Loading converter class: org.apache.camel.component.cxf.converter.CxfConverter
[                          main] AnnotationTypeConverterLoader  DEBUG Loading converter class: org.apache.camel.converter.jaxp.XmlConverter
[                          main] DefaultTypeConverter           WARN  Overriding type converter from: StaticMethodTypeConverter: public static java.lang.String org.apache.camel.converter.IOConverter.toString(javax.xml.transform.Source) throws javax.xml.transform.TransformerException,java.io.IOException to: InstanceMethodTypeConverter: public java.lang.String org.apache.camel.converter.jaxp.XmlConverter.toString(javax.xml.transform.Source) throws javax.xml.transform.TransformerException
[                          main] AnnotationTypeConverterLoader  DEBUG Loading converter class: org.apache.camel.converter.CollectionConverter
org.apache.camel.RuntimeCamelException: java.lang.NullPointerException
        at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:685)
        at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:90)
        at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:85)
        at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:102)
        at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:108)
        at com.xpectis.test.ProcessEvent.startCamel(ProcessEvent.java:44)
        at com.xpectis.test.ProcessEvent.main(ProcessEvent.java:63)
Caused by: java.lang.NullPointerException
        at org.apache.camel.component.event.EventEndpoint$1.process(EventEndpoint.java:68)
        at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:151)
        at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:88)
        ... 5 more


when I run the code above :


/**



Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the ""License""); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at
 *
http://www.apache.org/licenses/LICENSE-2.0
 *
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an ""AS IS"" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */
package com.xpectis.test;



import org.apache.camel.CamelContext;
import org.apache.camel.Exchange;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.impl.DefaultCamelContext;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;


public class ProcessEvent {


        private static final transient Log LOG = LogFactory.getLog(ProcessEvent.class);


        protected CamelContext camelContext;


        protected Object body = ""Hello there!"";
        protected String uri = ""event://default"";
        protected ProducerTemplate<Exchange> template = null;


        public void startCamel() throws Exception 

{
                camelContext = new DefaultCamelContext();
               
                camelContext.addRoutes(createRouteBuilder());
                camelContext.start();

                template = camelContext.createProducerTemplate();
                template.sendBody(uri, body);
        }


    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
                        public void configure() throws Exception 

{
                from(""event://default"").to(""mock:test"");
            }

        };
    }


        /**



@param args
         */
        public static void main(String[] args) {



                ProcessEvent event = new ProcessEvent();
                try 

{
                        event.startCamel();
                }

 catch (Exception e) 

{
                        e.printStackTrace();
                }

        }


}","davsclaus:1224293751:2008-10-18T09:35:51.114+0000:1224293751:2008-10-18T09:35:51.114+0000:Charles you need to use spring as well as the event component is spring events.

What is needed is to set the spring application context on the endpoint before it can be used.


davsclaus:1234734715:2009-02-16T05:51:55.553+0000:1234734715:2009-02-16T05:51:55.553+0000:Closing all 1.5.0 issues"
0,CAMEL-993,Bug,Minor,1.5.0,"1.5.0, 1.6.2","
None
",Closed,Fixed,"1.5.0, 1.6.2",Claus Ibsen,Vadim Chekan,0,0,2008-10-17 07:50:24+00:00,2010-02-07 09:54:17+00:00,"This configuration causes NPE:



		from(""timer://kickoff_5?period=10000"").
		setHeader(""a"").constant(""aa"").setBody().constant(""a b c a_1 b_1"").
		splitter(body().tokenize("" "")).
		setHeader(""aggreagation_header"").body().
		aggregator(header(""aggreagation_header"")).
		to(""mock:out"");





2008-10-17 07:47:11,321 [ Polling Thread] DEBUG DefaultAggregationCollection   - put exchange:Exchange[Message: null] for key:null
2008-10-17 07:47:12,237 [ Polling Thread] ERROR Aggregator                     - 
java.lang.NullPointerException
	at org.apache.camel.processor.interceptor.TraceFormatter.getBreadCrumbID(TraceFormatter.java:150)
	at org.apache.camel.processor.interceptor.TraceFormatter.format(TraceFormatter.java:45)
	at org.apache.camel.processor.interceptor.TraceInterceptor.format(TraceInterceptor.java:94)
	at org.apache.camel.processor.Logger.logMessage(Logger.java:219)
	at org.apache.camel.processor.Logger.process(Logger.java:124)
	at org.apache.camel.processor.interceptor.TraceInterceptor.logException(TraceInterceptor.java:119)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:87)
	at org.apache.camel.processor.BatchProcessor.processExchange(BatchProcessor.java:190)
	at org.apache.camel.processor.BatchProcessor.processBatch(BatchProcessor.java:168)
	at org.apache.camel.processor.BatchProcessor.run(BatchProcessor.java:68)
	at java.lang.Thread.run(Thread.java:619)","davsclaus:1224300723:2008-10-18T11:32:03.539+0000:1224300723:2008-10-18T11:32:03.539+0000:This bug is because of CAMEL-393 where the aggregator attaches itself directly to the consumer (from) so all the stuff in between is bypassed.

So you need to divide the route into two parts, such as:
{code}
                from(""timer://kickoff?period=10000"").
                    setHeader(""id"").constant(""foo"").setBody().constant(""a b c"").
                    splitter(body().tokenize("" "")).to(""seda:splitted"");

                from(""seda:splitted"").
                    aggregator(header(""id"")).
                    to(""mock:result"");
{code}

davsclaus:1234734715:2009-02-16T05:51:55.525+0000:1234734715:2009-02-16T05:51:55.525+0000:Closing all 1.5.0 issues
rpollack:1244449419:2009-06-08T16:23:39.909+0000:1244449419:2009-06-08T16:23:39.909+0000:I am experiencing the same problem in 1.6.0, without an aggregator. My route logic (in XML) is

      <route errorHandlerRef=""myErrorHandler"">
         <from uri=""jbi:service:urn:distributor.dmf.company.com:DistributorService""/>
         <convertBodyTo type=""java.lang.String""/>
         <inOnly uri=""direct:packetQueue""/>
      </route>

My stack trace is

java.lang.NullPointerException
        at org.apache.camel.processor.interceptor.TraceFormatter.getBreadCrumbID(TraceFormatter.java:202)
        at org.apache.camel.processor.interceptor.TraceFormatter.getExchangeAndNode(TraceFormatter.java:271)
        at org.apache.camel.processor.interceptor.TraceFormatter.format(TraceFormatter.java:54)
        at org.apache.camel.processor.interceptor.TraceInterceptor.format(TraceInterceptor.java:97)
        at org.apache.camel.processor.Logger.logMessage(Logger.java:234)
        at org.apache.camel.processor.Logger.process(Logger.java:125)
        at org.apache.camel.processor.interceptor.TraceInterceptor.logException(TraceInterceptor.java:122)
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:90)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:80)
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:55)
        at org.apache.camel.processor.LoggingErrorHandler.process(LoggingErrorHandler.java:54)
        at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:115)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:89)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:55)
        at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:50)
        at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:79)
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:84)
        at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43)
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:64)
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41)
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:66)
        at org.apache.servicemix.camel.CamelProviderEndpoint.handleActiveProviderExchange(CamelProviderEndpoint.java:109)
        at org.apache.servicemix.camel.CamelProviderEndpoint.process(CamelProviderEndpoint.java:81)
        at org.apache.servicemix.common.AsyncBaseLifeCycle.doProcess(AsyncBaseLifeCycle.java:631)
        at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchange(AsyncBaseLifeCycle.java:585)
        at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchangeInTx(AsyncBaseLifeCycle.java:480)
        at org.apache.servicemix.common.AsyncBaseLifeCycle$2.run(AsyncBaseLifeCycle.java:349)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
        at java.lang.Thread.run(Thread.java:619)

The code in TraceFormatter.java looks like this:

    protected Object getBreadCrumbID(Exchange exchange) {
        UnitOfWork unitOfWork = exchange.getUnitOfWork();
        return unitOfWork.getId();
    }

But there is code in UnitOfWorkProcessor.process() which seems to indicate that exchange.getUnitOfWork() will sometimes return null. This method begins by saying

        if (exchange.getUnitOfWork() == null) {
            // If there is no existing UoW, then we should start one and
            // terminate it once processing is completed for the exchange.

Would it be possible to enhance TraceFormatter to simply check for this?  I'm going to try

    protected Object getBreadCrumbID(Exchange exchange) {
        UnitOfWork unitOfWork = exchange.getUnitOfWork();
        if (unitOfWork != null) {
            return unitOfWork.getId();
        } else {
           return ""[unknown UOW]"";
        }
    }

If this doesn't work, I'll follow up with a message here.
davsclaus:1244499484:2009-06-09T06:18:04.160+0000:1244499484:2009-06-09T06:18:04.160+0000:Fixed the NPE in 1.x: 782893
Was already fixed in 2.0
davsclaus:1244499509:2009-06-09T06:18:29.328+0000:1244499509:2009-06-09T06:18:29.328+0000:Thanks Robert for reporting. I have fixed the NPE in 1.x. Will be in the next Camel release 1.6.2"
0,CAMEL-992,Bug,Major,1.4.0,None,"
None
",Closed,Fixed,"1.4.0, 1.5.0",Claus Ibsen,Moulliard Charles,0,0,2008-10-16 14:48:06+00:00,2008-10-17 08:14:37+00:00,"Component spring ""event"" is not auto registered by Camel. Add a Event file in the folder META-INF/services/org/apache/camel/compoment of camel-spring.",cmoulliard:1224202477:2008-10-17T08:14:37.782+0000:1224202477:2008-10-17T08:14:37.782+0000:I have tested the correction with the last snapshot and this error does not appear anymore. Incident can be closed.
0,CAMEL-991,Improvement,Major,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Jonathan Anstey,Seb Auvray,0,0,2008-10-16 12:56:23+00:00,2009-02-16 05:51:55+00:00,"Maven goal camel:dot should use overridden <mainClass/> when used as in pom.xml:


  <build>
    <plugins>
      <!-- Allows the routes to be run via 'mvn camel:run' -->
      <plugin>
        <groupId>org.apache.camel</groupId>
        <artifactId>camel-maven-plugin</artifactId>
        <version>${pom.version}</version>
		<!-- optional, default value: org.apache.camel.spring.Main -->
		<configuration>
			<mainClass>mypackage.boot.camel.CamelStartup</mainClass>
		</configuration>
      </plugin>
    </plugins>
  </build>","davsclaus:1224133278:2008-10-16T13:01:18.138+0000:1224133278:2008-10-16T13:01:18.138+0000:Is useable for some of the other maven goals as well: camel:run etc.
janstey:1224133288:2008-10-16T13:01:28.825+0000:1224133288:2008-10-16T13:01:28.825+0000:Seb, could you re attach your patch and grant the ASF license? We cannot apply any patches that don't have this granted.
davsclaus:1224133348:2008-10-16T13:02:28.755+0000:1224133348:2008-10-16T13:02:28.755+0000:Seb, could you re attach the patch with the ASF license granted. You should not attach files while creating the tickets as the radiobutton for granting this license is only possible afterwards.

So please use ""Attach File"" and upload it again with the license.

We can only accept patches with this license
davsclaus:1224133460:2008-10-16T13:04:20.049+0000:1224133460:2008-10-16T13:04:20.049+0000:Jon, remember to document it on the wiki as well
janstey:1224133570:2008-10-16T13:06:10.841+0000:1224133570:2008-10-16T13:06:10.841+0000:Claus, looks like camel:run already had this functionality. Will update the wiki after the patch is applied.
sauvray:1224133745:2008-10-16T13:09:05.128+0000:1224133745:2008-10-16T13:09:05.128+0000:Patch With the license
sauvray:1224133864:2008-10-16T13:11:04.437+0000:1224133864:2008-10-16T13:11:04.437+0000:@Claus and Jonathan, Yes camel:run had this overriding possibility but camel:dot would'nt use it.
janstey:1224134185:2008-10-16T13:16:25.363+0000:1224134185:2008-10-16T13:16:25.363+0000:Your patch was applied in revision 705236. Thanks!
janstey:1224134388:2008-10-16T13:19:48.238+0000:1224134388:2008-10-16T13:19:48.238+0000:Updated wiki doc here http://cwiki.apache.org/confluence/display/CAMEL/Camel+Maven+Plugin
davsclaus:1234734715:2009-02-16T05:51:55.480+0000:1234734715:2009-02-16T05:51:55.480+0000:Closing all 1.5.0 issues"
0,CAMEL-990,Improvement,Major,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Hadrian Zbarcea,Seb Auvray,0,0,2008-10-16 11:35:25+00:00,2009-02-16 05:51:55+00:00,"Today TypeConverter detection is based on org.apache.camel.@Converter annotation.
Allow user to override this by using meta-annotation. This can be useful to hide camel dependencies, when extending the framework.


ie, this can be done:


package some.package.of.mine;
@Retention(RetentionPolicy.RUNTIME)
@Target(

{ElementType.TYPE, ElementType.METHOD }

)
@org.apache.camel.Converter
public @interface OwnConverterAnnotation {
}


import some.package.of.mine.OwnConverterAnnotation;


@OwnConverterAnnotation
public class FileToXXXConverter {


    @OwnConverterAnnotation 
    public static XXX toWorkflowEntry(File file) throws IOException 

{
        return new XXX();            
    }


}","sauvray:1224135208:2008-10-16T13:33:28.275+0000:1224135208:2008-10-16T13:33:28.275+0000:Patch With License
davsclaus:1224159293:2008-10-16T20:14:53.846+0000:1224159293:2008-10-16T20:14:53.846+0000:We must remember to update the wiki with this new feature (if patch is committed)
http://activemq.apache.org/camel/type-converter.html

Do you mind writing a snippet what such documentation should be? As accepting a patch is only really useable if we also updates and improves the related documentation as well.

However I feel your idea is great. Maybe there should be a camel-annotation.jar that just contains the few annotations needed and with your strategy end-users can use their own annotations and thus imports.
sauvray:1224216083:2008-10-17T12:01:23.710+0000:1224216083:2008-10-17T12:01:23.710+0000:Claus,
I'll try to write a snippet, and will think about the camel-annotation.jar mechanism you suggest.
Will come back when done.
jstrachan:1224573484:2008-10-21T15:18:04.275+0000:1224573484:2008-10-21T15:18:04.275+0000:BTW - its not really a big deal to use annotations from any particular framework in your code as annotations are a soft dependency.

e.g. adding Camel annotations to your code doesn't add any direct dependency on camel. You can then use your code totally fine without any camel jars on the classpath.

So there's not a huge need to 'hide' dependencies on Camel annotations - as you only need them to compile your source code.

But using indirect annotations can be useful; e.g. you can have a foo.jar which defines a @Foo annotation which builds itself with camel - then folks can just add foo.jar to their classpath to get camel goodness without adding camel jars to the build. So you could introduce a kinda macro annotation that includes various framework annotations on it (say spring and camel and guice annotations :)
sauvray:1224574820:2008-10-21T15:40:20.057+0000:1224574856:2008-10-21T15:40:56.654+0000:The original need is the following:
Let's say I build a Routing System based on Camel. Of course my System will depend on Camel. But I don't want the end user of my System (who will be responsible for adding routes, converters...) to depend on any camel jar.
Your solution is better (and also more time consuming than my simple metaannotation patch :)), will think about it.
sauvray:1224578591:2008-10-21T16:43:11.845+0000:1224578591:2008-10-21T16:43:11.845+0000:James, can you give more details on how your solution would work exactly ?
hadrian:1224713218:2008-10-23T06:06:58.893+0000:1224713218:2008-10-23T06:06:58.893+0000:Patch applied with many thanks.  I made a few manual modifications, because the code changed a bit from the version the patch was created against.
davsclaus:1234734715:2009-02-16T05:51:55.457+0000:1234734715:2009-02-16T05:51:55.457+0000:Closing all 1.5.0 issues"
0,CAMEL-989,Sub-task,Major,None,None,"
None
",Closed,Fixed,1.5.0,James Strachan,James Strachan,0,0,2008-10-15 16:24:56+00:00,2009-02-16 05:51:55+00:00,No Desc,"jstrachan:1224061550:2008-10-15T17:05:50.410+0000:1224061550:2008-10-15T17:05:50.410+0000:there's now a Main in the camel-guice module for booting up modules using a jndi.properties file to load a context
jstrachan:1224574973:2008-10-21T15:42:53.767+0000:1224574973:2008-10-21T15:42:53.767+0000:see the documentation

* http://cwiki.apache.org/CAMEL/guice-maven-plugin.html
* http://cwiki.apache.org/CAMEL/guice.html
davsclaus:1234734715:2009-02-16T05:51:55.430+0000:1234734715:2009-02-16T05:51:55.430+0000:Closing all 1.5.0 issues"
0,CAMEL-988,Bug,Major,None,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,James Strachan,0,0,2008-10-15 16:17:53+00:00,2009-02-16 05:51:55+00:00,No Desc,"davsclaus:1224068056:2008-10-15T18:54:16.898+0000:1224068056:2008-10-15T18:54:16.898+0000:Should be fixed now.
davsclaus:1234734715:2009-02-16T05:51:55.392+0000:1234734715:2009-02-16T05:51:55.392+0000:Closing all 1.5.0 issues"
0,CAMEL-987,Bug,Major,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Willem Jiang,Sky Wang,0,0,2008-10-15 02:12:05+00:00,2009-02-16 05:51:55+00:00,"I use apache-camel-1.4.0 and apache-cxf-2.1.1 in my application. 
My application is a web service application.Which receive a soap header + soap body, and then response a soap header + soap body. 


I use WSDLToJava tool to create the java code from wsdl, it creates an interface for me as follow: 


@WebService(targetNamespace = ""http://com.aspire/"", name = ""SreServicePortType"")
@XmlSeeAlso(

{aspire.com.xsd.ObjectFactory.class}

)
@SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)


public interface SreServicePortType {


/*



 */



    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    @WebMethod
    public void serviceContentFetchReq(
        @WebParam(partName = ""request"", name = ""serviceContentFetchReq"", targetNamespace = ""http://com.aspire/xsd"")
        aspire.com.xsd.ServiceContentFetchReq request,
        @WebParam(partName = ""requestHeader"", name = ""serviceHeader"", targetNamespace = ""http://com.aspire/xsd"", header = true)
        aspire.com.xsd.ServiceHeader requestHeader,
        @WebParam(partName = ""response"", mode = WebParam.Mode.OUT, name = ""serviceContentFetchReqResponse"", targetNamespace = ""http://com.aspire/xsd"")
        javax.xml.ws.Holder<aspire.com.xsd.ServiceContentFetchReqResponse> response,
        @WebParam(partName = ""responseHeader"", mode = WebParam.Mode.OUT, name = ""serviceHeader"", targetNamespace = ""http://com.aspire/xsd"", header = true)
        javax.xml.ws.Holder<aspire.com.xsd.ServiceHeader> responseHeader
    );
}


Then, I implement the routing rules in the xml file:


        <process ref=""ipValidateProcessor"" />
        <choice>
            <when>
                 <!-- First predicate -->
                 <el>${in.headers.IP_VALIDATE_RESULT == 'true'}</el>
                 <to uri=""cxf:bean:serviceEndpoint"" />
                 <process ref=""responseProcessor"" />
            </when>
           <otherwise>
                  <process ref=""invalidIPProcessor"" />
           </otherwise>
     </choice>


In the ipValidateProcessor,  I set  in.headers.IP_VALIDATE_RESULT = false, so the invalidIPProcessor will run.In the invalidIPProcessor,  I only need set response body and response header.
I have traced the exchange object in the processor, the exchange.out element is null, and the exchange.in element is a CxfMessage object. The exchange.in.body element is a MessageContentList object: Object[0] is a ServiceContentFetchReq , Object[1] is a ServiceHeader, Object[2] is a Holder<T>, Object[3] is a Holder<T>. 


So i put response body into Object[2], and put response header into Object[3]: 


               org.apache.camel.Message in = exchange.getIn(); 
          List inBody = (List) in.getBody(); 
          Holder holderBody = (Holder)inBody.get(2); 
          holderBody .value = body;// body is a ServiceContentFetchReqResponse object 
               Holder holderHeader = (Holder)inBody.get(3); 
          holderHeader .value = header;//header is a ServiceHeader object 


But, when I run the application, I got an Exception:java.lang.OutOfMemoryError: Java heap space. 
I debuged into program, there is an Infinite Loop occured at the 
org.apache.cxf.jaxws.interceptors.HolderOutInterceptor(72): 


                for (int x = 0; x < inObjects.size(); x++) { 
                    Object o = inObjects.get; 
                    if (o instanceof Holder) 

{ 
                        outObjects.set(x + 1, o); 
                    }

 
                } 


I have traced and found: inObjects == outObjects is true, which leads to an Infinite Loop. 


Stack trace: 


2008-10-14 9:40:19 sun.reflect.NativeMethodAccessorImpl invoke0 
严重: EXCEPTION 
java.lang.OutOfMemoryError: Java heap space 
2008-10-14 9:40:19 org.apache.cxf.phase.PhaseInterceptorChain doIntercept 
信息: Interceptor has thrown exception, unwinding now 
org.apache.cxf.binding.soap.SoapFault: Error reading XMLStreamReader. 
at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:183) 
at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:54) 
at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:221) 
at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:449) 
at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponse(HTTPConduit.java:1996) 
at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.close(HTTPConduit.java:1832) 
at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66) 
at org.apache.cxf.transport.http.HTTPConduit.close(HTTPConduit.java:591) 
at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62) 
at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:221) 
at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:296) 
at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:242) 
at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73) 
at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:178) 
at $Proxy48.serviceContentFetchReq(Unknown Source) 
at com.aspire.archtype.camel.Client.invoke(Client.java:77) 
at com.aspire.archtype.camel.spring.Main.main(Main.java:19) 
Caused by: com.ctc.wstx.exc.WstxEOFException: Unexpected EOF in prolog 
 at [row,col 

{unknown-source}]: 
[1,0]
 


at com.ctc.wstx.sr.StreamScanner.throwUnexpectedEOF(StreamScanner.java:661) 


at com.ctc.wstx.sr.BasicStreamReader.handleEOF(BasicStreamReader.java:2134) 


at com.ctc.wstx.sr.BasicStreamReader.nextFromProlog(BasicStreamReader.java:2040) 


at com.ctc.wstx.sr.BasicStreamReader.next(BasicStreamReader.java:1069) 


at com.ctc.wstx.sr.BasicStreamReader.nextTag(BasicStreamReader.java:1095) 


at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:83) 


... 16 more 


javax.xml.ws.soap.SOAPFaultException: Error reading XMLStreamReader. 


at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:199) 


at $Proxy48.serviceContentFetchReq(Unknown Source) 


at com.aspire.archtype.camel.Client.invoke(Client.java:77) 


at com.aspire.archtype.camel.spring.Main.main(Main.java:19) 


Caused by: org.apache.cxf.binding.soap.SoapFault: Error reading XMLStreamReader. 


at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:183) 


at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:54) 


at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:221) 


at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:449) 


at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponse(HTTPConduit.java:1996) 


at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.close(HTTPConduit.java:1832) 


at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66) 


at org.apache.cxf.transport.http.HTTPConduit.close(HTTPConduit.java:591) 


at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62) 


at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:221) 


at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:296) 


at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:242) 


at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73) 


at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:178) 


... 3 more 


Caused by: com.ctc.wstx.exc.WstxEOFException: Unexpected EOF in prolog 


 at [row,col {unknown-source}

]: [1,0] 
at com.ctc.wstx.sr.StreamScanner.throwUnexpectedEOF(StreamScanner.java:661) 
at com.ctc.wstx.sr.BasicStreamReader.handleEOF(BasicStreamReader.java:2134) 
at com.ctc.wstx.sr.BasicStreamReader.nextFromProlog(BasicStreamReader.java:2040) 
at com.ctc.wstx.sr.BasicStreamReader.next(BasicStreamReader.java:1069) 
at com.ctc.wstx.sr.BasicStreamReader.nextTag(BasicStreamReader.java:1095) 
at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:83) 
... 16 more","sky:1224097354:2008-10-16T03:02:34.338+0000:1224097354:2008-10-16T03:02:34.338+0000:I think this is a camel-cxf component bug.
njiang:1224108432:2008-10-16T06:07:12.651+0000:1224108432:2008-10-16T06:07:12.651+0000:Can you show me the code of ipValidateProcessor and the other processors?
I think you may set a wrong response message in the processor.
Here is an example[1] of how to deal with the holders, please pay attentions to the below codes

{code}
        // Set the response message, first element is the return value of the operation,
        // the others are the holders of method parameters
        exchange.getOut().setBody(new Object[] {null, personId, ssn, name});
{code}

[1] http://cwiki.apache.org/CAMEL/cxf.html#CXF-HowtoconsumethemessagefromthecamelcxfendpointinPOJOdataformat
sky:1224627099:2008-10-22T06:11:39.870+0000:1224627099:2008-10-22T06:11:39.870+0000:I'm very sorry for reply so late.I  have waited for an email notify when sombody commented on this bug, but i didn't receive anyone. And when i log in  JIRA today,  i found you have replied. Very sorry!

I hava uploaded my processors,  pls see the attachments.Thanks again!


sky:1224627894:2008-10-22T06:24:54.372+0000:1224627894:2008-10-22T06:24:54.372+0000:I found i filled a mis-spelling email address,  and correct it now:)
njiang:1224630051:2008-10-22T07:00:51.014+0000:1224630051:2008-10-22T07:00:51.014+0000:I saw this line in the ResponseProcess

this.setOutBody(this.getInBody());

You did not change any holder's value, can you try out the codes that I showed in my last comment.

NOTE: You need put the  return value of the method as the first array element into the out message body.



sky:1224631109:2008-10-22T07:18:29.595+0000:1224631109:2008-10-22T07:18:29.595+0000:The infinite loop occurs in invalidIProcessor, and it wouldn't run in ResponseProcessor.

I try you last comment, and modified InvalidProcessor like this:

private void buildResponse() {
		//get body
		ServiceContentFetchReq req = (ServiceContentFetchReq) this.getInBody();
		ProcessorRequest request = req.getRequest();

		ServiceContentFetchReqResponse serviceResponse = new ServiceContentFetchReqResponse();
		ProcessorResponse response = new ProcessorResponse();
		response.setHret(""21000000"");
		response.setVersion(request.getVersion());
		response.setTransactionID(request.getTransactionID());
		serviceResponse.setReturn(response);
		
		
		ServiceHeader serviceHeader = new ServiceHeader();
		Header header = new Header();
		header.setTargetIP(""10.1.3.63"");
		serviceHeader.setHeader(header);
		
		org.apache.camel.Message in = exchange.getIn();
		List inBody = (List) in.getBody();
		Holder holderHeader = (Holder)inBody.get(2);
		holderHeader.value = serviceResponse;
		Holder holderValue = (Holder)inBody.get(3);
		holderValue.value = serviceHeader;
		
		this.exchange.getOut().setBody(new Object[]{inBody.get(0), inBody.get(1), holderValue, holderHeader});
	

Then it runs ok, and i would modify other processors in the same way:)





njiang:1224631891:2008-10-22T07:31:31.027+0000:1224631891:2008-10-22T07:31:31.027+0000:I just close this issue, as we have example and document to show how to set the hold response.
sky:1224700877:2008-10-23T02:41:17.541+0000:1224700877:2008-10-23T02:41:17.541+0000:hello, Willem.After I walk around this trouble, I meet another trouble.
I do a pressure testing on this application with LoadRunner. 

My test case is as follows:
1. loadrunner does a request
2. server receive a request, and then forward it to  IPValidateProcessor
3. IPValidateProcessor set exchange.getIn().setHeader(""IP_VALIDATE_RESULT"", ""true""); 
4. do <to uri=""cxf:bean:serviceEndpoint"" />
5. do <process ref=""responseProcessor"" />
6. end

Route logic as follows, I just want to test the <when> clause:
<route>
	<from uri=""cxf:bean:routerEndpoint"" />
	<try>
		<process ref=""ipValidateProcessor"" />
		<choice>
			<when>
				<!-- First predicate -->
				<el>${in.headers.IP_VALIDATE_RESULT == 'true'}</el>
				<to uri=""cxf:bean:serviceEndpoint"" />
				<process ref=""responseProcessor"" />
			</when>
			<otherwise>
				<process ref=""invalidIPProcessor"" />
			</otherwise>
		</choice>
		<catch>
			<exception>com.aspire.archtype.camel.exception.AppException</exception>
			<process ref=""sreExceptionHandler""></process>
		</catch>
	</try>
</route>

When only an virtual user runs the test case once, it runs ok.
But when have 30 virtual users run for 1 minute, some of  the transactions run failure, and logic run into <otherwise> clause.I found that the in.headers.IP_VALIDATE_RESULT is null, so logic run into <otherwise>.

I don't now why, the same request, some run into <when>, some run into  <otherwith>?





njiang:1224716464:2008-10-23T07:01:04.956+0000:1224716464:2008-10-23T07:01:04.956+0000:Hi Sky,

Shall we start a new thread in the mail list to discuss this issue ?
Since it does not relate to this JIRA's topic.

Willem
sky:1224717041:2008-10-23T07:10:41.536+0000:1224717041:2008-10-23T07:10:41.536+0000:OK, I will fill a new JIRA to discuss.
sky:1224719013:2008-10-23T07:43:33.820+0000:1224719013:2008-10-23T07:43:33.820+0000:I have created a new issue:
https://issues.apache.org/activemq/browse/CAMEL-1019

davsclaus:1234734715:2009-02-16T05:51:55.347+0000:1234734715:2009-02-16T05:51:55.347+0000:Closing all 1.5.0 issues"
0,CAMEL-986,Task,Major,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-10-14 18:10:53+00:00,2008-10-23 04:37:14+00:00,We need gertv to upload new version of .jar to servicemix repo,davsclaus:1224707834:2008-10-23T04:37:14.971+0000:1224707834:2008-10-23T04:37:14.971+0000:Closing 1.5 issues
0,CAMEL-985,Improvement,Minor,1.4.0,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Jonathan Anstey,Claus Ibsen,0,0,2008-10-14 12:13:35+00:00,2009-07-31 06:33:36+00:00,"If you are doing error handling using POJO beans to do some error handling code and using bean binding annoations to get the stuff from the exchange, we are missing an annotation to get the caused exception


Such as a @Exception or @Fault if that is a better name


See nabble:
http://www.nabble.com/Error-Handler-and-OutHeaders-td19970966s22882.html


jstrachan using @Exception or @Fault or whatever on a bean method call to pull out the Exchange's fault/exception right? 
14:02 jstrachan if so definitely!","janstey:1227245572:2008-11-21T13:32:52.312+0000:1227245572:2008-11-21T13:32:52.312+0000:Adding         camel-core/src/main/java/org/apache/camel/ExchangeException.java
Sending        camel-core/src/main/java/org/apache/camel/builder/ExpressionBuilder.java
Sending        camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java
Adding         camel-core/src/test/java/org/apache/camel/component/bean/BeanWithExchangeExceptionAnnotationTest.java
Adding         camel-core/src/test/java/org/apache/camel/component/bean/MyCustomException.java
Transmitting file data .....
Committed revision 719574.

janstey:1227245591:2008-11-21T13:33:11.775+0000:1227245591:2008-11-21T13:33:11.775+0000:Will add wiki stuff next.
davsclaus:1248993216:2009-07-31T06:33:36.894+0000:1248993216:2009-07-31T06:33:36.894+0000:Closing 2.0m1 tickets"
0,CAMEL-984,Task,Minor,1.4.0,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Claus Ibsen,0,0,2008-10-14 11:22:44+00:00,2009-07-31 06:33:36+00:00,"Need to explain that when using non transacted error handler such as DLC then the Exchange that is sent to the error queue, or onException is the original one, not the one from inflight processing.


See nabble:
http://www.nabble.com/Error-Handler-and-OutHeaders-td19970966s22882.html","davsclaus:1230983040:2009-01-03T19:44:00.496+0000:1230983040:2009-01-03T19:44:00.496+0000:See
http://cwiki.apache.org/confluence/display/CAMEL/Error+handling+in+Camel

Could any Camel riders please review?
janstey:1231151310:2009-01-05T18:28:30.077+0000:1231151310:2009-01-05T18:28:30.077+0000:Nice work Claus! I made a few minor edits but overall it looks awesome.
davsclaus:1231243835:2009-01-06T20:10:35.666+0000:1231243835:2009-01-06T20:10:35.666+0000:thanks for the review. I was wondering if the wording - orchestrating is good. I kinda think about BPEL and workflow engines. 

Any better wording? 
janstey:1231244341:2009-01-06T20:19:01.138+0000:1231244341:2009-01-06T20:19:01.138+0000:Yeah, I like orchestrated. Sounds nice. But if you are worried about users getting confused with bpel/workflow terms, then maybe just ""handled"" is better? i.e. ""...is enabled out-of-the-box and handled by Camel itself. The transaction type is handled by a backing system...""
davsclaus:1231285103:2009-01-07T07:38:23.151+0000:1231285103:2009-01-07T07:38:23.151+0000:Okay we got a bit of starter documentation that can get end users on the right track.
davsclaus:1248993216:2009-07-31T06:33:36.188+0000:1248993216:2009-07-31T06:33:36.188+0000:Closing 2.0m1 tickets"
0,CAMEL-983,Bug,Major,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-10-13 19:05:35+00:00,2008-10-23 04:37:14+00:00,"See nabble:
http://www.nabble.com/BeanInfo.chooseMethodWithMatchingBody-throws-an-AmbiguousMethodCallException-when-there%27s-no-ambiguity-td19959124s22882.html","davsclaus:1223896090:2008-10-13T19:08:10.412+0000:1223896090:2008-10-13T19:08:10.412+0000:A patch with a solution.

I would like review of this patch. 
PS: The methods should be named override*s*ExistingMethod (a s is missing)
davsclaus:1223936697:2008-10-14T06:24:57.905+0000:1223936697:2008-10-14T06:24:57.905+0000:Bruce did a review and the code in the patch should use continue and not return false:

Hi

Ah of course it should be continue ;) I coded it with the laptop on my lap on the couch with the wife grumping why I looked at the computer and not hear. But I wanted quickly to throw in some code for review and suggestions.

I was a bit surprised to not find an API to be able to easier identify if a method is overridden. I have been working with the IDEA API for my generate toString() plugin for 6+ years and they have such a nice API where you can get tons of information about your code.

I would like the change to be tested more thoroughly before we can commit it. So feel free to add more unit tests that test with more methods in the inherited classes, without inheritance etc. We are closing in on 1.5 and I would be sad to break something this late in the game.

davsclaus:1223936702:2008-10-14T06:25:02.298+0000:1223936702:2008-10-14T06:25:02.298+0000:Should be:

   private boolean overrideExistingMethod(MethodInfo methodInfo) {
+        for (MethodInfo info : operationsWithBody) {
+
+            // name test
+            if (!info.getMethod().getName().equals(methodInfo.getMethod().getName())) {
+                continue;
+            }
+
+            // parameter types
+            if (info.getMethod().getParameterTypes().length != methodInfo.getMethod().getParameterTypes().length) {
+                continue;
+            }
+
+            for (int i = 0; i < info.getMethod().getParameterTypes().length; i++) {
+                Class type1 = info.getMethod().getParameterTypes()[i];
+                Class type2 = methodInfo.getMethod().getParameterTypes()[i];
+                if (!type1.equals(type2)) {
+                    continue;
+                }
+            }
+
+            // sanme name, same parameters, then its overrides an existing class
+            return true;
+        }
+
+        return false;
+    }

davsclaus:1223952651:2008-10-14T10:50:51.443+0000:1223952651:2008-10-14T10:50:51.443+0000:James suggested to use a comparator: create a Set(NameAndParamTypesComparator)
davsclaus:1223965231:2008-10-14T14:20:31.362+0000:1223965231:2008-10-14T14:20:31.362+0000:Working on a better patch.
davsclaus:1223983958:2008-10-14T19:32:38.453+0000:1223983958:2008-10-14T19:32:38.453+0000:Commited a fix. See SVN log (JIRA has such a tab)
davsclaus:1224036442:2008-10-15T10:07:22.478+0000:1224036442:2008-10-15T10:07:22.478+0000:The last commit failed camel-spring and some unit tests. Reverted the fix until I get this working as well.
davsclaus:1224068069:2008-10-15T18:54:29.512+0000:1224068069:2008-10-15T18:54:29.512+0000:Should be fixed now.
davsclaus:1224707834:2008-10-23T04:37:14.946+0000:1224707834:2008-10-23T04:37:14.946+0000:Closing 1.5 issues"
0,CAMEL-982,New Feature,Major,2.0.0,None,"
None
",Closed,Fixed,2.0-M1,Hadrian Zbarcea,Moulliard Charles,0,2,2008-10-13 12:54:21+00:00,2009-07-31 06:33:36+00:00,"Hi,


May I suggest to create a new component that will allow Camel to communicate with NIO framework(s)/Bayeux protocol like cometd/grizzly, ... (more information about what you can do with such framework can be found here : http://cometdproject.dojotoolkit.org/, http://www.tutorialized.com/view/tutorial/Create-event-driven-Web-apps-using-Continuous-and-Reverse-Ajax/27495, http://www.ibm.com/developerworks/web/library/j-jettydwr/)


When you design a reverse ajax application where you want to use the 'push' technology at the serverside, you need to use a servlet modified using java New I/O API (see wiki : http://en.wikipedia.org/wiki/Comet_(programming) for detailed info). Such modified servlet already exist in Tomcat/Jetty/Glassfish/Grizzly servers because they have implemented the comet framework.


Next, in order for a client to be notified (through push technology) that something happens at the server side, an event listener must be created and link to the comet API. Every time that an action occurs, the event will send back the information to the browser. Such technology already works today in DWR package (Direct Web Remoting), Google/Gears, Flex/BlazeDS and the famous DojoToolkit.


My proposition is to integrate Camel with Cometd/Bayeux protocol in such a way that we can work with event published. A event available through bayeux protocol could be exposed as an endpoint to allow to use it through the routing.


e.g.


At the camel side, the idea is to use the routing as usual :


from(jms:queue)
to(comet:event)


When a message arrives in the queue, we send it to the cometd:event or bayeux:event endpoint","dgreco:1228129437:2008-12-01T19:03:57.849+0000:1228129437:2008-12-01T19:03:57.849+0000:I added a camel-cometd component that provides both a consumer and provider for exchanging events using the cometd/bayeux protcol.
The patch has been attached. I'm going to document the component's usage the camel wiki very soon.
For the moment this component allows only sending and receiving strings. The bayeux protocol is based on JSON, so it should be possible to send more structured data.
In the next version, I'll put the capability to manage more structured events. The SSL support has not yet tested even if it has been implemented, this is something to do for the next release.
Regards,
David
hadrian:1228196237:2008-12-02T13:37:17.232+0000:1228196237:2008-12-02T13:37:17.232+0000:David sent me this link: http://cometdaily.com/2008/01/07/20000-reasons-that-comet-scales/

Good to know for those interested in using camel-cometd.

dgreco:1228203058:2008-12-02T15:30:58.270+0000:1228203058:2008-12-02T15:30:58.270+0000:New version with an SSL test
hadrian:1228257231:2008-12-03T06:33:51.153+0000:1228257231:2008-12-03T06:33:51.153+0000:Patch applied with many thanks to David.  Documentation updated.
dgreco:1228273905:2008-12-03T11:11:45.531+0000:1228273905:2008-12-03T11:11:45.531+0000:Sorry Hadrian,
in the provided patch I forgot to add a folder under src/test/resources needed for running the interactive test as explained in the readme file. I'll post the new patch.
dgreco:1228273958:2008-12-03T11:12:38.592+0000:1228273958:2008-12-03T11:12:38.592+0000:New patch with the missing directory
hadrian:1228286157:2008-12-03T14:35:57.755+0000:1228286157:2008-12-03T14:35:57.755+0000:The webapp directory was in the original patch.  Not adding it was my mistake.
localhost.ks was missing though and I added it, the ssl test was failing without it.

Thanks for pointing it out.  It's fixed now.
davsclaus:1248993216:2009-07-31T06:33:36.148+0000:1248993216:2009-07-31T06:33:36.148+0000:Closing 2.0m1 tickets"
0,CAMEL-981,Task,Minor,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-10-13 09:28:32+00:00,2008-10-23 04:37:14+00:00,"See nabble:
http://www.nabble.com/BeanProcessor---wrapping-throwable-why--td19931143s22882.html","davsclaus:1223870126:2008-10-13T11:55:26.281+0000:1223870126:2008-10-13T11:55:26.281+0000:MethodInvocation#proceed is changed to throws Exception instead of Throwable
davsclaus:1224707834:2008-10-23T04:37:14.919+0000:1224707834:2008-10-23T04:37:14.919+0000:Closing 1.5 issues"
0,CAMEL-980,Bug,Critical,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,1,1,2008-10-13 07:20:02+00:00,2008-10-23 04:33:52+00:00,"See nabble:
http://www.nabble.com/Problem-with-FileEndpoint-td19940096s22882.html


Workaround
Use .convertBodyTo(String.class) in the route so the file is read into memory, and the java.io.File handler shouldn't be open/locked when camel attempts to delete it after wards.","cschneider:1223898649:2008-10-13T19:50:49.799+0000:1223898649:2008-10-13T19:50:49.799+0000:I have attached a complete example for file endpoint with jaxb and bean processor. The readme.txt explains how to use the example and how to reproduce this issue. 

Please write back if the example works and also shows you the issue.
davsclaus:1224069994:2008-10-15T19:26:34.443+0000:1224069994:2008-10-15T19:26:34.443+0000:Christian. The jaxb stuff 'com.sun.tools.xjc.maven2' can not be found in the maven repo you have in the pom.xml
davsclaus:1224070426:2008-10-15T19:33:46.781+0000:1224070426:2008-10-15T19:33:46.781+0000:Have to add this to pom.xml

{code:xml}
    <pluginRepositories>
        <pluginRepository>
			<id>java.net</id> 
			<name>java.net Maven Repository</name> 
			<url>http://download.java.net/maven/1/</url> 
			<layout>legacy</layout> 
			<releases>
				<enabled>true</enabled> 
			</releases>
			<snapshots>
				<enabled>false</enabled> 
			</snapshots>
        </pluginRepository>
    </pluginRepositories>
{code}
davsclaus:1224071301:2008-10-15T19:48:21.928+0000:1224071301:2008-10-15T19:48:21.928+0000:Christian can you either supply a pom.xml that works out-of-the-box and can download all the needed .jars.
Or switch to another jaxb maven plugin that actually works and is installable.

Googling looks like you need to install manually and/or rename all versions to jswdp.

https://jaxb.dev.java.net/jaxb-maven2-plugin/
http://maven-plugins.sourceforge.net/maven-jaxb-plugin/


Downloading: http://download.java.net/maven/2/jwsdp/jaxb-api/jwsdp.1.5/jaxb-api-jwsdp.1.5.pom
Downloading: http://repository.jboss.org/maven2/jwsdp/jaxb-api/jwsdp.1.5/jaxb-api-jwsdp.1.5.pom
Downloading: http://mirrors.ibiblio.org/pub/mirrors/maven2/jwsdp/jaxb-api/jwsdp.1.5/jaxb-api-jwsdp.1.5.pom
Downloading: http://download.java.net/maven/2/jwsdp/jaxb-api/jwsdp.1.5/jaxb-api-jwsdp.1.5.pom
Downloading: https://maven-repository.dev.java.net/repository/jwsdp/jaxb-api/jwsdp.1.5/jaxb-api-jwsdp.1.5.pom
Downloading: http://repo1.maven.org/maven2/jwsdp/jaxb-api/jwsdp.1.5/jaxb-api-jwsdp.1.5.pom
Downloading: http://download.java.net/maven/2/jwsdp/jaxb-impl/jwsdp.1.5/jaxb-impl-jwsdp.1.5.pom
Downloading: http://repository.jboss.org/maven2/jwsdp/jaxb-impl/jwsdp.1.5/jaxb-impl-jwsdp.1.5.pom
Downloading: http://mirrors.ibiblio.org/pub/mirrors/maven2/jwsdp/jaxb-impl/jwsdp.1.5/jaxb-impl-jwsdp.1.5.pom
Downloading: http://download.java.net/maven/2/jwsdp/jaxb-impl/jwsdp.1.5/jaxb-impl-jwsdp.1.5.pom
Downloading: https://maven-repository.dev.java.net/repository/jwsdp/jaxb-impl/jwsdp.1.5/jaxb-impl-jwsdp.1.5.pom
Downloading: http://repo1.maven.org/maven2/jwsdp/jaxb-impl/jwsdp.1.5/jaxb-impl-jwsdp.1.5.pom
Downloading: http://download.java.net/maven/2/jwsdp/jaxb-xjc/jwsdp.1.5/jaxb-xjc-jwsdp.1.5.pom
Downloading: http://repository.jboss.org/maven2/jwsdp/jaxb-xjc/jwsdp.1.5/jaxb-xjc-jwsdp.1.5.pom
Downloading: http://mirrors.ibiblio.org/pub/mirrors/maven2/jwsdp/jaxb-xjc/jwsdp.1.5/jaxb-xjc-jwsdp.1.5.pom
Downloading: http://download.java.net/maven/2/jwsdp/jaxb-xjc/jwsdp.1.5/jaxb-xjc-jwsdp.1.5.pom
Downloading: https://maven-repository.dev.java.net/repository/jwsdp/jaxb-xjc/jwsdp.1.5/jaxb-xjc-jwsdp.1.5.pom
Downloading: http://repo1.maven.org/maven2/jwsdp/jaxb-xjc/jwsdp.1.5/jaxb-xjc-jwsdp.1.5.pom
Downloading: http://download.java.net/maven/2/jwsdp/jaxb-libs/jwsdp.1.5/jaxb-libs-jwsdp.1.5.pom
Downloading: http://repository.jboss.org/maven2/jwsdp/jaxb-libs/jwsdp.1.5/jaxb-libs-jwsdp.1.5.pom
Downloading: http://mirrors.ibiblio.org/pub/mirrors/maven2/jwsdp/jaxb-libs/jwsdp.1.5/jaxb-libs-jwsdp.1.5.pom
Downloading: http://download.java.net/maven/2/jwsdp/jaxb-libs/jwsdp.1.5/jaxb-libs-jwsdp.1.5.pom
Downloading: https://maven-repository.dev.java.net/repository/jwsdp/jaxb-libs/jwsdp.1.5/jaxb-libs-jwsdp.1.5.pom
Downloading: http://repo1.maven.org/maven2/jwsdp/jaxb-libs/jwsdp.1.5/jaxb-libs-jwsdp.1.5.pom
Downloading: http://download.java.net/maven/2/jwsdp/jax-qname/jwsdp.1.5/jax-qname-jwsdp.1.5.pom
Downloading: http://repository.jboss.org/maven2/jwsdp/jax-qname/jwsdp.1.5/jax-qname-jwsdp.1.5.pom
Downloading: http://mirrors.ibiblio.org/pub/mirrors/maven2/jwsdp/jax-qname/jwsdp.1.5/jax-qname-jwsdp.1.5.pom
Downloading: http://download.java.net/maven/2/jwsdp/jax-qname/jwsdp.1.5/jax-qname-jwsdp.1.5.pom
davsclaus:1224075066:2008-10-15T20:51:06.537+0000:1224075066:2008-10-15T20:51:06.537+0000:I guess the failure can be simulated by just throwing an exception in the processor instead of all the jaxb failing?
cschneider:1224082206:2008-10-15T22:50:06.721+0000:1224082206:2008-10-15T22:50:06.721+0000:I have attached a new example with a working pom. Sorry .. did not check if it works with an empty repo.
davsclaus:1224127527:2008-10-16T11:25:27.451+0000:1224127527:2008-10-16T11:25:27.451+0000:Thanks Christian.

Sorry I was a bit grumpy. It was late and I wasn't in the mood to fight with maven. 
cschneider:1224145354:2008-10-16T16:22:34.282+0000:1224145354:2008-10-16T16:22:34.282+0000:It was indeed quite a fight with maven. There are several different versions out there in several repositories and most do not work. The documentation from the plugin website also does not really help. ;-(

About your comment on using a processor to show the failure. I am not sure if it is possbile to do so. It depends where the file will be opened. I guess when I simply add a processor after the file endpoint the file will not be opened at all. So I would guess the error will not show. 
davsclaus:1224147547:2008-10-16T16:59:07.685+0000:1224147547:2008-10-16T16:59:07.685+0000:Christian when I run your sample using camel 1.4.0 and drop first the ok and then the error file I get:

C:\cameltest>dir /s /b
C:\cameltest\in
C:\cameltest\ok
C:\cameltest\error
C:\cameltest\ok\shiporder_ok.xml
C:\cameltest\ok\shiporder_error.xml
C:\cameltest\error\shiporder_error.xml

There is no files in the in folder that is locked etc. However you get the error files *twice* and as it's in the ok folder *and* the error folder. We might consider the *moveNamePrefix* option to only work if the processing was a success (no exceptions). 
davsclaus:1224147645:2008-10-16T17:00:45.358+0000:1224147645:2008-10-16T17:00:45.358+0000:Christian what OS are you using? I am on Windows XP.
davsclaus:1224147894:2008-10-16T17:04:54.647+0000:1224147894:2008-10-16T17:04:54.647+0000:Sorry forgot about the convertBodyTo(String.class)
davsclaus:1224148130:2008-10-16T17:08:50.962+0000:1224148130:2008-10-16T17:08:50.962+0000:I think this is OS dependent. I have tried 1.4.0 and 1.5-SNAPSHOT with and without the convertBodyTo and all moves the file from IN.
davsclaus:1224148269:2008-10-16T17:11:09.847+0000:1224148269:2008-10-16T17:11:09.847+0000:However I am wondering if we should support a more flexible rename strategy so you can
- move to a folder if OK
- delete if OK
- move to another folder if ERROR
- delete if ERROR

Where you can mix and match what you need.

Well something to consider for Camel 2.0
davsclaus:1224148345:2008-10-16T17:12:25.126+0000:1224148345:2008-10-16T17:12:25.126+0000:Christian can you also try 1.5-SNAPSHOT as the file component had some changes as well, also regarding this WARN can not rename.

See camel download page for maven snapshot repo
http://activemq.apache.org/camel/download.html
cschneider:1224152460:2008-10-16T18:21:00.921+0000:1224152460:2008-10-16T18:21:00.921+0000:Hi Claus,

I am running Windows Vista but I don´t think this is a OS dependent issue. Could you reproduce the error when you leave out the convertBodyTo ?

I have debugged the error. The problem seems to be in:
org.apache.camel.converter.jaxb.FallbackTypeConverter line 90

InputStream inputStream = parentTypeConverter.convertTo(InputStream.class, value);
            if (inputStream != null) {
>>>>                Object unmarshalled = unmarshaller.unmarshal(inputStream);
                return type.cast(unmarshalled);
            }

It opens an inputstream and calls unmarshall. I am not sure how unmarshall should work. Does it close the stream when all goes well?
In any case it leaves the stream open if some exception happens. So I think there should be a try {} finally {}  in FallbackTypeConverter that 
tries to close the stream. Of with a try catch on close. 

This block is probably also necessary for the other variants following.

What do you think?

davsclaus:1224158285:2008-10-16T19:58:05.863+0000:1224158285:2008-10-16T19:58:05.863+0000:Christian

Well spotted. I am working on a patch to properly close the stream after use. 

Could you then test it using 1.5-SNAPSHOT on your system to see if it works? 
davsclaus:1224158909:2008-10-16T20:08:29.740+0000:1224158909:2008-10-16T20:08:29.740+0000:I have committed a fix. It should take 2+ hours for the new 1.5-SNAPSHOT to be published to the maven repo.

Maybe you can try tomorrow morning.
cschneider:1224161033:2008-10-16T20:43:53.604+0000:1224161033:2008-10-16T20:43:53.604+0000:Hi Claus,

I just updated my checkout and compiled myself. The issue does not occur anymore. 
Thanks for this fast fix.

Greetings

Christian

davsclaus:1224161625:2008-10-16T20:53:45.759+0000:1224161625:2008-10-16T20:53:45.759+0000:That is so great. Thanks Christian for taking the time to provide a test app and pin point the issue.

I have looked elsewhere and have fixed a few other data formats as well where resources should be closed as well.
davsclaus:1224707632:2008-10-23T04:33:52.146+0000:1224707632:2008-10-23T04:33:52.146+0000:Closing 1.5 issues"
0,CAMEL-979,Improvement,Major,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-10-12 10:57:27+00:00,2008-10-23 04:37:14+00:00,"Currently the simple language does not support constant expressions, that actually is useable in the file component that uses simple language to set file names


So if an end-user want to produce a file with a fixed name, then its not possible



expression=MyBigFile.txt 




Is not possible.


But this is:



expression=MyBigFile-${header.foo}.txt 




is as there is a ${} placeholder and then the simple language can evaluate it.","davsclaus:1223780330:2008-10-12T10:58:50.192+0000:1223780330:2008-10-12T10:58:50.192+0000:The problem is to determine if its an error or not if an end user enters

{code}
in.heder.foo
{code}
That was supposed to be:
{code}
in.header.foo
{code}

Currently you get an Exception.
davsclaus:1223780787:2008-10-12T11:06:27.734+0000:1223780787:2008-10-12T11:06:27.734+0000:Moving the FileLanguage so we can preserve the current behavior of simple language
davsclaus:1223781044:2008-10-12T11:10:44.379+0000:1223781044:2008-10-12T11:10:44.379+0000:Updated wiki as well
davsclaus:1224707834:2008-10-23T04:37:14.901+0000:1224707834:2008-10-23T04:37:14.901+0000:Closing 1.5 issues"
0,CAMEL-978,Improvement,Minor,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-10-12 07:15:41+00:00,2008-10-23 04:37:14+00:00,"camel-mail need a type converter to InputStream 
Currently we have type converters to String


See nabble:
http://www.nabble.com/Process-Mail-Attachment-InvalidPayloadException-Camel-1.4.0-td19937573s22882.html",davsclaus:1224707834:2008-10-23T04:37:14.861+0000:1224707834:2008-10-23T04:37:14.861+0000:Closing 1.5 issues
0,CAMEL-977,Sub-task,Major,None,None,"
None
",Closed,Won't Fix,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-10-11 11:47:59+00:00,2008-10-23 19:51:00+00:00,No Desc,"davsclaus:1223696901:2008-10-11T11:48:21.693+0000:1223696901:2008-10-11T11:48:21.693+0000:See my comment on parent
hadrian:1223710352:2008-10-11T15:32:32.673+0000:1223710352:2008-10-11T15:32:32.673+0000:@Claus, why do you think this is needed?

My understanding is that for some exceptions that we know about and we'd know how to handle, we add the onException and mark them as handled, so the producer doesn't get an exception.  But doing it for all of them sounds a bit odd to me.  And any way this is as good as using:

onException(Exception.class).handled(true);

hadrian:1223710856:2008-10-11T15:40:56.062+0000:1223710856:2008-10-11T15:40:56.062+0000:To be more clear, I can't see in what circumstance would someone use this method.
davsclaus:1223711562:2008-10-11T15:52:42.737+0000:1223711562:2008-10-11T15:52:42.737+0000:Yeah that might be a bit overkill since you can add the onException as well, but end-users dont really know the onException that much. But I guess we should promote this feature and show some more wiki examples etc.
davsclaus:1223711636:2008-10-11T15:53:56.051+0000:1223711636:2008-10-11T15:53:56.051+0000:And yet again you can have fallback policies, so I guess it still have its place, but this is getting rather advanced.


davsclaus:1223711942:2008-10-11T15:59:02.686+0000:1223711942:2008-10-11T15:59:02.686+0000:Okay overkill"
0,CAMEL-976,Sub-task,Major,None,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-10-11 10:13:28+00:00,2008-10-23 04:37:14+00:00,No Desc,"davsclaus:1223715901:2008-10-11T17:05:01.163+0000:1223715901:2008-10-11T17:05:01.163+0000:See error handler and exception clause documentation
hadrian:1223716070:2008-10-11T17:07:50.532+0000:1223716070:2008-10-11T17:07:50.532+0000:Looks like you're beating me to it :).  Awsome, thanks!
davsclaus:1223767118:2008-10-12T07:18:38.330+0000:1223767118:2008-10-12T07:18:38.330+0000:Yeah its team-work ;)
Please review it.

I was curious how this worked so adding documentation and unit testing is a great technique to learn it. 
davsclaus:1224707834:2008-10-23T04:37:14.830+0000:1224707834:2008-10-23T04:37:14.830+0000:Closing 1.5 issues"
0,CAMEL-975,Improvement,Major,1.4.0,1.6.0,"
None
",Closed,Fixed,1.6.0,Unassigned,Ron Gavlin,0,0,2008-10-11 03:15:08+00:00,2009-11-21 11:56:56+00:00,No Desc,"davsclaus:1229516189:2008-12-17T20:16:29.997+0000:1229516189:2008-12-17T20:16:29.997+0000:With thanks to Charles we have a great tutorial on this now
http://activemq.apache.org/camel/tutorial-osgi-camel-part1.html
davsclaus:1258775816:2009-11-21T11:56:56.614+0000:1258775816:2009-11-21T11:56:56.614+0000:Closing all 1.6.0 issues"
0,CAMEL-974,Bug,Minor,1.4.0,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Hadrian Zbarcea,0,0,2008-10-11 00:23:39+00:00,2009-11-21 11:57:54+00:00,"I get this kind of failures in the DataSetSedaTest now and then:


Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 4.731 sec <<< FAILURE!
test(org.apache.camel.component.dataset.DataSetSedaTest)  Time elapsed: 4.49 sec  <<< ERROR!
java.lang.AssertionError: dataset:foo Failed due to caught exception: java.lang.AssertionError: Header: camelDataSetIndex does not match. Expected: 33 but was: 32 on Exchange[Message: <hello>world!</hello>] with headers: 

{camelDataSetIndex=32}

        at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:712)
        at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:255)
        at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:214)
        at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:141)
        at org.apache.camel.ContextTestSupport.assertMockEndpointsSatisfied(ContextTestSupport.java:283)
        at org.apache.camel.component.dataset.DataSetSedaTest.test(DataSetSedaTest.java:35)


I am not sure yet if it's just a test issue (quite probable) or there's a more serious underlying issue.  If anybody else experienced this please add a comment.","davsclaus:1223776950:2008-10-12T10:02:30.024+0000:1223776950:2008-10-12T10:02:30.024+0000:I do think there were some high concurrency issue with the seda component. Willem fixed a problem with copying exchanges, but I used once in a while to get such errors as well.

But not for 2+ months or so.

See also CAMEL-901 that somehow could be related

If you change it to use direct queues then I am sure it works all the time.
janstey:1223962120:2008-10-14T13:28:40.815+0000:1223962120:2008-10-14T13:28:40.815+0000:You can also slow down the dataset producer by adding produceDelay=numOfMilliseconds. The default is 3 (milliseconds) but maybe this is not large enough?
hadrian:1223963050:2008-10-14T13:44:10.000+0000:1223963050:2008-10-14T13:44:10.000+0000:@Claus, I saw that mail exchange, but didn't look into it, since you were on top of it :)

@Jon, well, the question is if there is some subtle problem in the seda component, of course we can work it around.

It doesn't happen often, it never happens in eclipse, i didn't see it if i enable logging, it's definitely some timing issue.  
janstey:1223964729:2008-10-14T14:12:09.210+0000:1223964729:2008-10-14T14:12:09.210+0000:Hadrian, yeah, we don't want to just mask the problem :) I just remember having this issue in routes that did not have any seda endpoint

See: http://svn.apache.org/repos/asf/activemq/trunk/activemq-camel-loadtest/src/test/resources/org/apache/activemq/soaktest/LoadTest-context.xml

In that route, removing the produceDelay (which will then default it to 3 ms) will cause the same problem you see in DataSetSedaTest.
davsclaus:1240020954:2009-04-18T10:15:54.530+0000:1240020954:2009-04-18T10:15:54.530+0000:DataSet expects the data to receive in order, but the seda is async so some exchanges can arrive out of order.
I have added the produceDelay to the unit test and fixed the seda consumer to not minimum sleep for 4 millis.

trunk: 766288
davsclaus:1258775874:2009-11-21T11:57:54.907+0000:1258775874:2009-11-21T11:57:54.907+0000:Closing all 2.0M2 tickets"
0,CAMEL-973,Bug,Major,1.5.0,1.6.0,"
None
",Closed,Fixed,1.6.0,Gert Vanthienen,Edell Nolan,0,0,2008-10-10 19:29:45+00:00,2009-11-21 11:56:56+00:00,"I have upgraded to the latest of Camel and when I attempt to use the content based router pattern - its now throwing an error.


The contents of the Message passed is a StringSource object and from debugging camel - the BodyType is a StringSource but it is attempting to convert from a StreamCache to a StringSource. 


I will try and put a testcase together but if anyone has any ideas of its cause in the meantime ?


The error it throws it below.


thanks, Edell.


No type converter available to convert from type: class org.apache.servicemix.camel.JbiMessage to the required type: org.w3c.dom.Document with value JbiMessage: org.apache.servicemix.jbi.runtime.impl.NormalizedMessageImpl@1d03b5b
org.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: class org.apache.servicemix.camel.JbiMessage to the required type: org.w3c.dom.Document with value JbiMessage: org.apache.servicemix.jbi.runtime.impl.NormalizedMessageImpl@1d03b5b
	at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:117)
	at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:65)
	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:69)
	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:51)
	at org.apache.camel.builder.xml.XPathBuilder.getDocument(XPathBuilder.java:528)
	at org.apache.camel.builder.xml.XPathBuilder.evaluateAs(XPathBuilder.java:420)
	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:98)
	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:63)
	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:47)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:75)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:174)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:96)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:63)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:47)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:66)
	at org.apache.servicemix.camel.CamelProviderEndpoint.handleActiveProviderExchange(CamelProviderEndpoint.java:115)
	at org.apache.servicemix.camel.CamelProviderEndpoint.process(CamelProviderEndpoint.java:73)
	at org.apache.servicemix.common.AsyncBaseLifeCycle.doProcess(AsyncBaseLifeCycle.java:600)
	at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchange(AsyncBaseLifeCycle.java:554)
	at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchangeInTx(AsyncBaseLifeCycle.java:456)
	at org.apache.servicemix.common.AsyncBaseLifeCycle$2.run(AsyncBaseLifeCycle.java:341)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)
	at java.lang.Thread.run(Thread.java:595)","njiang:1223661228:2008-10-11T01:53:48.936+0000:1223661264:2008-10-11T01:54:24.783+0000:I don't know if it relates to CAMEL-520 and CAMEL-858.

From the stack trace, it looks like camel can't find a JbiMessage to Document converting method.
davsclaus:1223691108:2008-10-11T10:11:48.824+0000:1223691108:2008-10-11T10:11:48.824+0000:Willem I think you need to align this with ServiceMix. Hadrian changed the type converter strategy to throw a NoTypeConversionAvailableException if no type converter found. Before Camel silently ignored this. ServiceMix should adjust by using try .. .catch (NoTypeConversionAvailableException e) and ignore it, or provide the missing type converter out-of-the-box in their camel-jbi.jar

I think this issue is a blocker for servicemix, that it needs to adjust to this change in camel 1.5
gertvanthienen:1223862051:2008-10-13T09:40:51.502+0000:1223862051:2008-10-13T09:40:51.502+0000:Part of the problem is that our current StreamCacheInterceptor is caching Source types that do not need any caching.
An example: a StringSource can be read multiple times without any problem, but because it extends StreamSource it is still being 'streamcached'

http://svn.eu.apache.org/viewvc?view=rev&revision=703990 should fix this end of the problem.
gertvanthienen:1223984563:2008-10-14T19:42:43.893+0000:1223984563:2008-10-14T19:42:43.893+0000:While looking into this issue, I created a new test case (cfr. http://svn.eu.apache.org/viewvc?view=rev&revision=704638).

This test fails if you remove the convertBodyTo(String.class) from the route, although one would expect that the StreamSource would have been cached with the solution for CAMEL-520.  Not sure why that is yet, so let me assign this issue to myself while I figure it out.
davsclaus:1234242082:2009-02-10T13:01:22.841+0000:1234242082:2009-02-10T13:01:22.841+0000:Gertv. Looks like you latest changes to the StreamCache have fixed this one as well.

I think this ticket is fixed in Camel 1.6.0
gertvanthienen:1234251605:2009-02-10T15:40:05.228+0000:1234251605:2009-02-10T15:40:05.228+0000:Fixed as part of CAMEL-1271
davsclaus:1258775816:2009-11-21T11:56:56.572+0000:1258775816:2009-11-21T11:56:56.572+0000:Closing all 1.6.0 issues"
0,CAMEL-972,Bug,Critical,None,None,"
None
",Closed,Fixed,1.5.0,Jonathan Anstey,Jonathan Anstey,0,0,2008-10-09 15:52:50+00:00,2009-02-16 05:51:55+00:00,"When camel is built with -Prelease, the schemagen stuff in camel-spring gets disabled (it is in an activeByDefault profile)","janstey:1223539341:2008-10-09T16:02:21.016+0000:1223539341:2008-10-09T16:02:21.016+0000:Activation conditions in Maven profiles are pretty limited so it doesn't look like this can be fixed. The workaround is to just pass in -Prelease,enable-schemagen instead of -Prelease, which isn't so bad :) I'll update the release documentation.
janstey:1223539497:2008-10-09T16:04:57.075+0000:1223539497:2008-10-09T16:04:57.075+0000:Fixed with the workaround mentioned.
davsclaus:1234734715:2009-02-16T05:51:55.319+0000:1234734715:2009-02-16T05:51:55.319+0000:Closing all 1.5.0 issues"
0,CAMEL-971,Improvement,Major,None,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Claus Ibsen,0,0,2008-10-08 19:00:54+00:00,2009-07-31 06:33:36+00:00,"The BatchProcessor that is used for the aggregator we should consider adding some sort of GroupedExchange or the like where you can group all the batches exchanges into a single exchange going out (per correlation of course)


This was a feature I was working for on 1.5 but I moved it to 2.0 as the GroupedExchange is a new class needed in camel-core and I want feedback from the other core comitters.


See CAMEL-951","davsclaus:1223463747:2008-10-08T19:02:27.742+0000:1223463747:2008-10-08T19:02:27.742+0000:Work in progress patch
davsclaus:1223504454:2008-10-09T06:20:54.683+0000:1223504454:2008-10-09T06:20:54.683+0000:See nabble:
http://www.nabble.com/How-to-use-Aggregator-and-AggregationCollection--td19739918s22882.html
janstey:1228812003:2008-12-09T16:40:03.658+0000:1228812003:2008-12-09T16:40:03.658+0000:I like the GroupedExchange idea Claus, it would be very useful in a bunch of scenarios. Here's a +1 from me! 
davsclaus:1232447726:2009-01-20T18:35:26.103+0000:1232447726:2009-01-20T18:35:26.103+0000:Yeah I gotta get this into the core and add a test/wiki
davsclaus:1234860290:2009-02-17T16:44:50.002+0000:1234860290:2009-02-17T16:44:50.002+0000:Committed revision 745139.
davsclaus:1248993216:2009-07-31T06:33:36.125+0000:1248993216:2009-07-31T06:33:36.125+0000:Closing 2.0m1 tickets"
0,CAMEL-970,Bug,Major,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Hadrian Zbarcea,Hadrian Zbarcea,0,0,2008-10-08 17:40:06+00:00,2009-02-16 05:51:55+00:00,No Desc,davsclaus:1234734715:2009-02-16T05:51:55.284+0000:1234734715:2009-02-16T05:51:55.284+0000:Closing all 1.5.0 issues
0,CAMEL-969,Bug,Major,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Geoff Gibbs,0,0,2008-10-08 14:16:39+00:00,2009-02-16 05:51:55+00:00,"The javaDoc for CamelContext.setRoutes() states:


""Sets the routes for this context, replacing any current routes""


Yet when used, and the context started, startRouteDefinitions() is used first, causing any existing routes created through the definitions (such as those from RouteBuilders) to be re-created and started before the new routes provided to setRoutes() are started.","davsclaus:1223464561:2008-10-08T19:16:01.816+0000:1223464561:2008-10-08T19:16:01.816+0000:Thanks for reporting this.

You should use addRoutes instead, as overriding existing routes is not supported yet, use addRoutes instead
davsclaus:1234734715:2009-02-16T05:51:55.261+0000:1234734715:2009-02-16T05:51:55.261+0000:Closing all 1.5.0 issues"
0,CAMEL-968,Improvement,Minor,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Geoff Gibbs,0,0,2008-10-08 12:04:29+00:00,2009-02-16 05:51:55+00:00,"Currently if you subclass the org.apache.camel.spring.Main class, then the command line options of Main are available, but using -h produces a list of options headed by:


""Apache Camel Runner takes the following options""


It would be nice to be able to change this in the sub-class. Overriding showOptions() is not satisfactory and the option list is stored a a private field with no getter, meaning the list of options cannot be generated.


I have provided a patch for one possible solution, that allows for just the header part of showOptions() to be overriden.
(it also moves the generation of the information line into the Option class instead of the showOptions method itself to allow for further customisation, if required.","davsclaus:1223464193:2008-10-08T19:09:53.410+0000:1223464193:2008-10-08T19:09:53.410+0000:Geoff, could you re attach the patch file granting license to ASF. We can not accept the patch without this license.
davsclaus:1223629195:2008-10-10T16:59:55.274+0000:1223629195:2008-10-10T16:59:55.274+0000:Geoff if you need this in 1.5 then you should re attach the patch ASAP. We are starting to cut a RC really soon.
davsclaus:1223869640:2008-10-13T11:47:20.149+0000:1223869640:2008-10-13T11:47:20.149+0000:Applied path with thanks.
davsclaus:1234734715:2009-02-16T05:51:55.233+0000:1234734715:2009-02-16T05:51:55.233+0000:Closing all 1.5.0 issues"
0,CAMEL-937,Sub-task,Major,1.4.0,1.5.0,"
None
",Closed,Not A Problem,1.5.0,Jonathan Anstey,Jonathan Anstey,0,0,2008-09-25 16:44:48+00:00,2009-02-16 05:51:54+00:00,No Desc,"janstey:1222335654:2008-09-25T17:40:54.490+0000:1222335654:2008-09-25T17:40:54.490+0000:This method is actually deprecated :) Please use convertBodyTo instead.
davsclaus:1234734714:2009-02-16T05:51:54.590+0000:1234734714:2009-02-16T05:51:54.590+0000:Closing all 1.5.0 issues"
0,CAMEL-936,Task,Major,1.5.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Hadrian Zbarcea,Hadrian Zbarcea,0,0,2008-09-24 18:38:14+00:00,2009-02-16 05:51:54+00:00,"Add the 1.4.0 version of the spring schema
http\://activemq.apache.org/camel/schema/spring/camel-spring-1.4.0.xsd=camel-spring.xsd
to the list of camel schemas.",davsclaus:1234734714:2009-02-16T05:51:54.566+0000:1234734714:2009-02-16T05:51:54.566+0000:Closing all 1.5.0 issues
0,CAMEL-935,Improvement,Major,1.4.0,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Claus Ibsen,0,0,2008-09-24 11:54:45+00:00,2009-07-31 06:33:35+00:00,"Antother ESB product has this feature to set a delay pattern as:


Redelivered messages can be delayed before delivery; specify a list of delays in this form: [Nth redelivery: delay in ms]. E.g. 3:10; 5:100 causes 0 ms delay on the 1st, 2nd redelivery, 10 ms delay on the 3rd and 4th redelivery; 100 ms delay on each redelivery thereafter.


An example::
3:1000;5:3000;10:5000;20:10000;30:30000


0-2 = 0 delay
3-4 = 1000 millis
5-9 = 3000 millis
10-19 = 5000 millis
20-29 = 10000 millis
30+ = 30000 millis","davsclaus:1235189905:2009-02-21T12:18:25.442+0000:1235189905:2009-02-21T12:18:25.442+0000:Committed revision 746489.
davsclaus:1248993215:2009-07-31T06:33:35.974+0000:1248993215:2009-07-31T06:33:35.974+0000:Closing 2.0m1 tickets"
0,CAMEL-934,Bug,Major,"1.2.0, 1.3.0, 1.4.0",1.5.0,"
None
",Closed,Fixed,1.5.0,Willem Jiang,Willem Jiang,0,0,2008-09-24 01:59:20+00:00,2009-02-16 05:51:54+00:00,http://www.nabble.com/Is-there-an-HTTPS-producer-endpoint--td19635772s22882.html,davsclaus:1234734714:2009-02-16T05:51:54.530+0000:1234734714:2009-02-16T05:51:54.530+0000:Closing all 1.5.0 issues
0,CAMEL-933,New Feature,Major,1.4.0,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Jonathan Anstey,Jayson Minard,0,0,2008-09-23 16:56:56+00:00,2009-07-31 06:33:35+00:00,"Add the Claim-Check EIP pattern to Camel allowing a process to store an out of band object and receive a claim ticket that can then be used by a later process to retrieve the object.  


An example of this pattern is implemented in ActiveMQ via BlobMessages which allows out-of-band storage of a stream of data by HTTP, FTP, SCP or other protocols.


A benefit to the system is that you can allow data that cannot reasonably go into a message to be carried along with the message (by the claim ticket) and only retrieved when needed or appropriate.  Examples of that include overly large files that should not be routed to nodes that do not use the body of the file; or secure information that needs to be made available to nodes but not contained within the messaging system.","davsclaus:1234241694:2009-02-10T12:54:54.704+0000:1234241694:2009-02-10T12:54:54.704+0000:Jonathan have created it:
http://camel.apache.org/claim-check.html

davsclaus:1248993215:2009-07-31T06:33:35.926+0000:1248993215:2009-07-31T06:33:35.926+0000:Closing 2.0m1 tickets"
0,CAMEL-932,Sub-task,Major,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Jonathan Anstey,Jonathan Anstey,0,0,2008-09-23 13:27:01+00:00,2009-02-16 05:51:54+00:00,No Desc,"hadrian:1222183233:2008-09-23T23:20:33.156+0000:1222183233:2008-09-23T23:20:33.156+0000:@Jon

For starters, removeOutHeader is not quite in the DSL, it's in the ProcessorBuilder.  I would not deprecate removeOutHeader, I would remove it completely!  You are right it doesn't make much sense, I doubt it is used, so deprecation (as a path to a better model) is not the better option imho.  So yeah, get rid of it, deprecated or not.

janstey:1222229041:2008-09-24T12:04:01.934+0000:1222229041:2008-09-24T12:04:01.934+0000:It is actually in the DSL (see ProcessorType) but I do like the idea of removing it completely. No one could be depending on something that does nothing, could they? :)
davsclaus:1222229352:2008-09-24T12:09:12.210+0000:1222229352:2008-09-24T12:09:12.210+0000:+1 to remove
janstey:1222231501:2008-09-24T12:45:01.150+0000:1222231501:2008-09-24T12:45:01.150+0000:Removed removeOutHeader in revision 698544.

janstey:1222231532:2008-09-24T12:45:32.858+0000:1222231532:2008-09-24T12:45:32.858+0000:Also added a note about the removal in the Camel 1.5 release notes.
davsclaus:1234734714:2009-02-16T05:51:54.509+0000:1234734714:2009-02-16T05:51:54.509+0000:Closing all 1.5.0 issues"
0,CAMEL-931,Improvement,Minor,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Atle Prange,0,0,2008-09-23 12:07:24+00:00,2009-02-16 05:51:54+00:00,"When using imap, the mail component defaults should be to not delete incoming mail, and only process unread messages.","davsclaus:1222143653:2008-09-23T12:20:53.046+0000:1222143653:2008-09-23T12:20:53.046+0000:Atle, what if your suggestion is the default for all mail protocols? To keep it consistent?
prange:1222145910:2008-09-23T12:58:30.523+0000:1222145910:2008-09-23T12:58:30.523+0000:Yes i agree. I mentioned imap in particular since users usually expect that the messages stay on the server (since that is the main motivation for using imap instead of pop3). 

If the defaults are changed for all protocols, it should be accompanied with a a paragraph in the documentation that clearly states the delete / read behaviour. (wich is not the expected behaviour for pop3...)

davsclaus:1222147565:2008-09-23T13:26:05.453+0000:1222147565:2008-09-23T13:26:05.453+0000:Atle, if you have a good default for the different protocols
- pop3
- imap

And maybe for sending as well
- smtp

Then feel free to write them here. However I would be a bit confused if Camel would default to different settings depending if I had pop3 or imap. This is hard to guess / read.

However I do think that deleting=true is a bit to harsh, maybe its best to force end-users to configure this to true if the need it.
However only processing unread mail is what I would like to be default, as I would not suspect consuming the same mail message again on next polling.
prange:1222150019:2008-09-23T14:06:59.250+0000:1222150019:2008-09-23T14:06:59.250+0000:Yes, the defaults should be the same for all protocols, because even if pop3 is meant to download messages, it makes sense to tell the users of camel that ""camel-mail does not delete your mail on the server, and only reads unread mail by default"". Then the users can override this behavior if necessary.

defaults should be:
deleteProcessedMessages = false
processOnlyUnseenMessages = true 
prange:1222150072:2008-09-23T14:07:52.670+0000:1222150072:2008-09-23T14:07:52.670+0000:Yes, the defaults should be the same for all protocols, because even if 
pop3 is meant to download messages, it makes sense to tell the users of 
camel that ""camel-mail does not delete your mail on the server, and only 
reads unread mail by default"". Then the users can override this behavior 
if necessary.

defaults should be:
deleteProcessedMessages = false
processOnlyUnseenMessages = true

davsclaus:1222213266:2008-09-24T07:41:06.743+0000:1222213266:2008-09-24T07:41:06.743+0000:Thanks for reporting this. I have changed the defaults and updated the wiki and the release notes as well.
davsclaus:1234734714:2009-02-16T05:51:54.480+0000:1234734714:2009-02-16T05:51:54.480+0000:Closing all 1.5.0 issues"
0,CAMEL-930,Improvement,Major,1.5.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Dario Sanna,1,0,2008-09-23 07:45:02+00:00,2009-02-16 05:51:54+00:00,"the file expression language , file-producer: date and bean expressions are very usefull, but works only with a FileExchange.


example:
   from(""sftp://user@host//path?password=password&consumer.setNames=true"").
  .setHeader(FileComponent.HEADER_FILE_NAME, file(""${date:now:yyyyMMMdd}.out""))
   to(""file://output_dir"");


The above code will result in a ClassCastException, because the file expresssion language relies on having a FileExchange.


Proposal: 



move the date:now and bean: expression from file to simple
let sftp send FileExchange, rather than DefaultExchange
let the file expression language work with DefaultExchange (use header-entries instead of FileExchange.getFile())



With best regards, Dario","davsclaus:1222129855:2008-09-23T08:30:55.129+0000:1222129855:2008-09-23T08:30:55.129+0000:Daria a good idea. 

bullet #1 is doable, and then the simple language in general will be improved with this feature
+1

bullet #2 java.io.File is required for FileExchange so I doubt its easy to abstract a remote FTP file
-1

bullet #3 as bullet #2 the file language needs access to java.io.File so you can use all the file methods such as: getName, getCanoicalName, getPath etc.
-1

davsclaus:1222213558:2008-09-24T07:45:58.415+0000:1222214293:2008-09-24T07:58:13.294+0000:Dario I have given it some more though.

I think you are right about bullet #2 and #3 in that sense I would like Camel FileLanguage to support other file transports than just java.io.File. So I am thinking about introducing either some kind of Camel FileInfo interface that exposes methods for the information you can use in the file language and then have implementations for this in camel-core with java.io.File and in camel-ftp with the two FTP types for regular ftp and sftp. 

I am not to keen on adding a bunch of headers with the file information to the message as just String values.


oirad:1222213954:2008-09-24T07:52:34.080+0000:1222213954:2008-09-24T07:52:34.080+0000:Hello Claus

thank you for your fast reply.

bullet #3 as bullet #2 the file language needs access to java.io.File so you can use all the file methods such as: getName, getCanoicalName, getPath etc.

The SFTP component allready can set the FileComponent.HEADER_FILE_NAME (consumer.setNames=true) , so it can be accessed in following steps.
Why not set all the file attributes (like name, canonicalName, path, creationDate etc.) as headers and let the file expression language work with this headers. This would make it possible to ""simulate"" a file exchange from every component and route, also it would be possible to let a ""virtual"" file travel (with all its attributes) over any channel.

With best regards, Dario

oirad:1222214262:2008-09-24T07:57:42.378+0000:1222214262:2008-09-24T07:57:42.378+0000:Hello Claus,

we edit this in paralel, so that i haven't seen your second answer before.
By the way, ther is a small ""bug"", my name is Dario :-)


davsclaus:1222216707:2008-09-24T08:38:27.043+0000:1222216707:2008-09-24T08:38:27.043+0000:Ups sorry Daria is maybe a girls name ;)

I will give the headers a 2nd thought. It is after all very flexible and friendly for future changes/new integrations.
davsclaus:1222299449:2008-09-25T07:37:29.226+0000:1222299449:2008-09-25T07:37:29.226+0000:Commited first part: move stuff from file language to simple language so we can do the *date* and *bean* on the simple language now.

Still to do the File parts to get rid of FileExchange
davsclaus:1222307986:2008-09-25T09:59:46.178+0000:1222307986:2008-09-25T09:59:46.178+0000:TODO: bean language as ${bean:MyBean} should be able to be used just as .bean(MyBeanClass.class} = just giving the classname and Camel will instantiate it automatically.
davsclaus:1222483210:2008-09-27T10:40:10.329+0000:1222483210:2008-09-27T10:40:10.329+0000:Added file:length as well. And file:absoute is renamed to file:absolute.path to be consistent.

I have added it as headers to the IN message using the Camel 2.0 style pattern.
This allows us to let the ftp/sftp components as well use these headers and thus the file language support as well.
davsclaus:1234734714:2009-02-16T05:51:54.443+0000:1234734714:2009-02-16T05:51:54.443+0000:Closing all 1.5.0 issues"
0,CAMEL-929,Task,Minor,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Gert Vanthienen,Claus Ibsen,0,0,2008-09-23 06:06:03+00:00,2009-02-16 05:51:54+00:00,"See nabble:
http://www.nabble.com/JBI-Operation-name-td19607533s22882.html","davsclaus:1224737142:2008-10-23T12:45:42.993+0000:1224737142:2008-10-23T12:45:42.993+0000:Should be documented at:
http://activemq.apache.org/camel/jbi.html
gertvanthienen:1224741096:2008-10-23T13:51:36.035+0000:1224741096:2008-10-23T13:51:36.035+0000:Added information about the URI parameter ({{operation}}) and matching header property ({{jbi.operation}}) to the documentation page.
davsclaus:1234734714:2009-02-16T05:51:54.423+0000:1234734714:2009-02-16T05:51:54.423+0000:Closing all 1.5.0 issues"
0,CAMEL-928,Improvement,Major,None,1.5.0,"
None
",Closed,Fixed,1.5.0,Willem Jiang,Willem Jiang,0,0,2008-09-22 09:42:41+00:00,2009-02-16 05:51:54+00:00,"You can use this property for the aggregator's completed predicate.



from(""direct:aggregator"").aggregator(header(""cheese""), new BodyInAggregatingStrategy()).
                completedPredicate(header(Exchange.AGGREGATED_COUNT).isEqualTo(3)).to(""mock:result"");",davsclaus:1234734714:2009-02-16T05:51:54.397+0000:1234734714:2009-02-16T05:51:54.397+0000:Closing all 1.5.0 issues
0,CAMEL-927,Bug,Minor,1.5.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Vadim Chekan,0,0,2008-09-22 06:09:04+00:00,2009-02-16 05:51:53+00:00,"Turn trace on.
Run this route:
		from(""timer://kickoff_1?period=10000&delay=1"");
As expected there is output from Trace Interceptor every 10 sec.


Now run this route:
		from(""timer://kickoff_1?period=10000&delay=1"").
		from(""timer://kickoff_2?period=10000&delay=2"");
You will get exception:
2008-09-22 06:03:01,871 [d=10000&delay=2] INFO  TraceInterceptor               - ID-ubuntu/50540-1222063381751/2-1 -> interceptor1 Interceptor[Delegate(null)] InOnly Properties:

{org.apache.camel.timer.name=kickoff_2, org.apache.camel.timer.firedTime=Mon Sep 22 06:03:01 GMT 2008, org.apache.camel.timer.period=10000}

 Headers:

{firedTime=Mon Sep 22 06:03:01 GMT 2008}

 BodyType:null Body:Message: null
2008-09-22 06:03:01,872 [d=10000&delay=2] ERROR DeadLetterChannel              - Failed delivery for exchangeId: ID-ubuntu/50540-1222063381751/0-0. On delivery attempt: 0 caught: java.lang.NullPointerException
java.lang.NullPointerException
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:50)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:50)
	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:79)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:67)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:174)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:96)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:50)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:50)
	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:79)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:67)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:39)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:66)
	at org.apache.camel.component.timer.TimerConsumer.sendTimerExchange(TimerConsumer.java:98)
	at org.apache.camel.component.timer.TimerConsumer$1.run(TimerConsumer.java:49)
	at java.util.TimerThread.mainLoop(Timer.java:512)
	at java.util.TimerThread.run(Timer.java:462)


Why single input works fine and two produce an exception?","davsclaus:1222045122:2008-09-22T08:58:42.980+0000:1222045122:2008-09-22T08:58:42.980+0000:Vadim I have tried to reproduce the bug with an unit test.
camel-core\src\test\java\org\apache\camel\issues\TwoTimerWithJMSIssue.java
I can not provoke the error. 

Can you get the error every time? What is your route, isn't there any destination from the timer? = i.e. there is no TO
vchekan:1222113507:2008-09-23T03:58:27.236+0000:1222113507:2008-09-23T03:58:27.236+0000:I upgraded to the current trunk and I still see exception every time I run it.
Claus, there is a bug in the unit test: in my 2nd example two routes are concatenated by dot, not by semicolon. In other words it is a single java statement. Could you check it please? If you still can not reproduce it then I'll keep digging.
Yes, when there is any output then double input works fine. I'm playing with my DSL and I'm testing weird combinations :)
davsclaus:1222121819:2008-09-23T06:16:59.525+0000:1222121819:2008-09-23T06:16:59.525+0000:Ah so you are actually making silly routes as:

{code}
from(x).from(y);
{code}

Okay then there could of course be some quirks.
davsclaus:1222213984:2008-09-24T07:53:04.440+0000:1222213984:2008-09-24T07:53:04.440+0000:Vadim and others

I think we should add a check in the builder when you do silly stacks so as:
from().from()

we should raise an exception stating its not valid to do like this.

Any thoughts?

We have a few of those checks for other bad combos.
davsclaus:1222233229:2008-09-24T13:13:49.770+0000:1222233229:2008-09-24T13:13:49.770+0000:Ah of course you can stack inputs as well ;)

so from().from() should basically be supported. But the don't have outputs and thus causes the bug
davsclaus:1222233436:2008-09-24T13:17:16.718+0000:1222233436:2008-09-24T13:17:16.718+0000:Ah the culprit is the JMX stuff that assumes that there is an output. 
davsclaus:1222295830:2008-09-25T06:37:10.174+0000:1222295830:2008-09-25T06:37:10.174+0000:TODO: Add unit tests with multi inputs
- from(x).from(y)
- from(x, y)
vchekan:1222334557:2008-09-25T17:22:37.274+0000:1222334557:2008-09-25T17:22:37.274+0000:Well, I filed this bug not because I worry about selseless combo from().from(); but because I see some inconsistency in error handling.

In case of ""from();"" there is the same exception happen internally. A processor tries to call the next processor withing the chain and fails with NPE. This exception is intercepted and message is marked as ""failed"". But you can not see anything wrong logged to the console. But in case of double inputs, exception becomes visible.
So I suspect that actually ""from.from"" produces correct behavior when ""from"" hides an error.

I don't think that ""from.from"" is totally bogus. Lets say we want to drain some data source and we are not interested in the result.

Am I right that processes shoud call this.proceed instead of calling next processor in the chain explicitly? Anyway, my concern is invisible exception in the single ""from"" case. There is still NPE happening, why I can't see it in the output?
davsclaus:1222559963:2008-09-28T07:59:23.679+0000:1222559963:2008-09-28T07:59:23.679+0000:Vadim, that is a valid use-case but I guess its seldom used.

However a NPE is a NPE and its in camel-core so we should fix it. It happends because of the JMX instruments the routing and assumes it can process it to the next in the chain.


davsclaus:1234734713:2009-02-16T05:51:53.492+0000:1234734713:2009-02-16T05:51:53.492+0000:Closing all 1.5.0 issues"
0,CAMEL-926,Improvement,Minor,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-09-21 17:37:09+00:00,2008-10-23 04:37:13+00:00,"The ScriptBuilder has nice DSL for all the supported languages except BeanShell. We might as well add the DSL for it. 


Isn't beanshell a included script language in Java6? Or I am mistaking?","davsclaus:1221994607:2008-09-21T18:56:47.992+0000:1221994607:2008-09-21T18:56:47.992+0000:need to add use b5 of beanshell

            <groupId>org.beanshell</groupId>
            <artifactId>bsh</artifactId>
            <version>2.0b5</version>

This is the one that is supported by SUN
https://scripting.dev.java.net/

However the bsh-engine
            <groupId>com.sun.script</groupId>
            <artifactId>bsh-engine</artifactId>
            <version>20080611</version>

doens't support beanshell scripts on java5 yet. 

java.lang.Error: unimplemented
	at bsh.engine.BshScriptEngine.compile(BshScriptEngine.java:175)
	at bsh.engine.BshScriptEngine.compile(BshScriptEngine.java:154)
	at org.apache.camel.builder.script.ScriptBuilder.compileScript(ScriptBuilder.java:515)
	at org.apache.camel.builder.script.ScriptBuilder.checkInitialised(ScriptBuilder.java:493)
	at org.apache.camel.builder.script.ScriptBuilder.getEngine(ScriptBuilder.java:421)
davsclaus:1221994771:2008-09-21T18:59:31.184+0000:1221994771:2008-09-21T18:59:31.184+0000:bsh v2.0b5
davsclaus:1221995230:2008-09-21T19:07:10.252+0000:1221995230:2008-09-21T19:07:10.252+0000:Added beanShell as Expression as well so we can use it just as all the other languages.
davsclaus:1222047865:2008-09-22T09:44:25.734+0000:1222047865:2008-09-22T09:44:25.734+0000:Upgraded to bsh 2.0b5. Gert was so kind to add it to the servicemix repo
davsclaus:1224707833:2008-10-23T04:37:13.965+0000:1224707833:2008-10-23T04:37:13.965+0000:Closing 1.5 issues"
0,CAMEL-925,Bug,Major,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-09-21 10:18:11+00:00,2008-10-23 04:37:13+00:00,"Currently it logs at WARN level that camel could not rename/delete the consumer file after processing.


However as end-users might not notice this ""could be bigger problem"" we should throw an IOException instead.
PS: The File API is terrible as it returns a boolean of this operation (will be fixed in NIO2 with a much better API).


The bigger problem is that if you don't want to consume the file twice you should get a ""exception"" to track down the problem. WARN logs can be harder to track down.",davsclaus:1224707833:2008-10-23T04:37:13.949+0000:1224707833:2008-10-23T04:37:13.949+0000:Closing 1.5 issues
0,CAMEL-924,Bug,Major,1.4.0,,"
None
",Closed,Not A Problem,None,Willem Jiang,Vadim Chekan,0,0,2008-09-19 20:46:12+00:00,2010-02-07 09:54:17+00:00,"Related nabble:
http://www.nabble.com/xstream-marshalling-td19542712s22882.html


We need to fixate the xml writer created in camel-xstream via javax.xml.stream.XMLOutputFactory
(we need xstream component in Jira).
Otherwise factory falls into unpredictable writer and in case of com.sun.xml.internal.stream.XMLOutputFactoryImpl it refuses to work if file.encoding is set to something different then UTF-8.


May be propert implementation would be to attempt to use com.ctc.wstx.stax.WstxOutputFactory and if it fails, then produce a warning and use whatever is available. 


Also for those who know what they are doing we can provide a setting in camel context which factory to use.","davsclaus:1223629517:2008-10-10T17:05:17.084+0000:1223629517:2008-10-10T17:05:17.084+0000:I think we need some kind of property you can set to use a fixed xml factory.

Vadim is there any API to set this? from a standard javax or from the XStream?
davsclaus:1231884275:2009-01-14T06:04:35.405+0000:1231884275:2009-01-14T06:04:35.405+0000:Willem could you take a look if this ticket is not related to yours?
njiang:1231888899:2009-01-14T07:21:39.849+0000:1231888899:2009-01-14T07:21:39.849+0000:I think this issue will not  appear on JDK 1.5, since the stax API begin to be a part of JDK since 1.6.
Here are the algorithm of XMLOutputFactory.newInstance() method determines the specific XMLInputFactory implementation class to load by using the following lookup procedure:
   1. Use the javax.xml.stream.XMLOutputFactory system property.
   2. Use the lib/xml.stream.properties file in the JRE directory.
   3. Use the Services API, if available, to determine the classname by looking in the META-INF/services/javax.xml.stream.XMLOutputFactory files in jars available to the JRE.
   4. Use the platform default XMLOutputFactory instance.

Since Camel just call the XStream lib to do the job, there is no explicate camel way(through URI) to do that, 
so I suggest you set the XMLOutputFactoryImpl as you want through upper ways (I prefer the system property way more).

TODO We need to add this into Camel FAQ.
davsclaus:1231889615:2009-01-14T07:33:35.945+0000:1231889615:2009-01-14T07:33:35.945+0000:Super work Willem. 

I will add something to the wiki about how the factory is discovered in Java 1.5 then we can resolve this ticket.
davsclaus:1231890252:2009-01-14T07:44:12.039+0000:1231890252:2009-01-14T07:44:12.039+0000:Updated wiki

http://cwiki.apache.org/confluence/display/CAMEL/XStream
"
0,CAMEL-923,Sub-task,Major,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Jonathan Anstey,Jonathan Anstey,0,0,2008-09-19 17:50:31+00:00,2009-02-16 05:51:53+00:00,No Desc,"janstey:1221819111:2008-09-19T18:11:51.613+0000:1221819111:2008-09-19T18:11:51.613+0000:Fixed in revision 697170.
davsclaus:1234734713:2009-02-16T05:51:53.472+0000:1234734713:2009-02-16T05:51:53.472+0000:Closing all 1.5.0 issues"
0,CAMEL-922,Bug,Major,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Hadrian Zbarcea,Hadrian Zbarcea,0,0,2008-09-19 16:06:50+00:00,2009-02-16 05:51:53+00:00,"I mentioned a while ago a warning I couldn't explain in eclipse related to the use of @UniqueConstraint in camel-jpa.


It turned out to be due to the fact that camel-jpa has a dependency on persistence api, but used for testing openjpa that has a dependency on geronimo-jpa_3.0_spec.  So camel-jpa pulls in two different implementation of the same spec.  So far so good.  It also turns out that the definition of the @UniqueConstraint annotation is different in the two jars, the persistence-api (and the camel-jpa code as implemented) being non spec compliant.  I found other inconsistencies in the persistence-api impl and it seems to be based on an older version of the spec.


(More precisely persistence api annotates the @interface UniqueConstraint with @Target(

{TYPE}

) whereas the spec and the geronimo impl use: @Target({}))


My recommendation is to replace the dependency on persistence-api with the geronimo version.  I will commit a change for this in the next hour or so, but leave this issue open.  If anybody has any objections please shout and I will revert the change.","davsclaus:1221824940:2008-09-19T19:49:00.482+0000:1221824940:2008-09-19T19:49:00.482+0000:+1

maybe set the version of the dependency as a property in the uber pom.xml. Its a good overview of all the deps we commonly use and easy to upgrade to a newer version.
hadrian:1221827845:2008-09-19T20:37:25.744+0000:1221827845:2008-09-19T20:37:25.744+0000:Thanks Claus.  Yeah, the version stuff is already done that way :).
davsclaus:1234734713:2009-02-16T05:51:53.448+0000:1234734713:2009-02-16T05:51:53.448+0000:Closing all 1.5.0 issues"
0,CAMEL-921,Bug,Major,1.4.0,None,"
None
",Closed,Fixed,1.5.0,Willem Jiang,Willem Jiang,0,0,2008-09-19 10:25:31+00:00,2009-02-16 05:51:53+00:00,"java.io.FileNotFoundException: /org/apache/camel/converter (No such file or directory)
        at java.io.FileInputStream.open(Native Method)
        at java.io.FileInputStream.<init>(FileInputStream.java:106)
        at org.apache.camel.util.ResolverUtil.loadImplementationsInJar(ResolverUtil.java:476)
        at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:362)
        at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:277)
        at org.apache.camel.util.ResolverUtil.findAnnotated(ResolverUtil.java:253)
        at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:66)
        at org.apache.camel.impl.converter.DefaultTypeConverter.checkLoaded(DefaultTypeConverter.java:218)
        at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:64)
        at org.apache.camel.util.IntrospectionSupport.convert(IntrospectionSupport.java:216)
        at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:194)
        at org.apache.camel.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:167)
        at org.apache.camel.impl.DefaultComponent.setProperties(DefaultComponent.java:181)
        at org.apache.camel.component.timer.TimerComponent.createEndpoint(TimerComponent.java:54)
        at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:81)
        at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:253)
        at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:52)
        at org.apache.camel.model.RouteType.resolveEndpoint(RouteType.java:100)
        at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:102)
        at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:108)
        at org.apache.camel.model.FromType.resolveEndpoint(FromType.java:73)
        at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:77)
        at org.apache.camel.model.RouteType.addRoutes(RouteType.java:214)
        at org.apache.camel.model.RouteType.addRoutes(RouteType.java:90)
        at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:520)
        at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:512)
        at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:149)
        at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:47)
        at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:103)
        at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:78)
        at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)
        at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:76)
        at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:275)
        at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:737)
        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:384)
        at org.apache.servicemix.common.xbean.AbstractXBeanDeployer.deploy(AbstractXBeanDeployer.java:86)
        at org.apache.servicemix.camel.CamelSpringDeployer.deploy(CamelSpringDeployer.java:71)
        at org.apache.servicemix.common.BaseServiceUnitManager.doDeploy(BaseServiceUnitManager.java:88)
        at org.apache.servicemix.common.BaseServiceUnitManager.deploy(BaseServiceUnitManager.java:69)
        at org.apache.servicemix.jbi.deployer.impl.ServiceUnitImpl.deploy(ServiceUnitImpl.java:89)
        at org.apache.servicemix.jbi.deployer.impl.Deployer.deployServiceAssembly(Deployer.java:306)
        at org.apache.servicemix.jbi.deployer.impl.Deployer.register(Deployer.java:170)
        at org.apache.servicemix.jbi.deployer.impl.AbstractBundleWatcher.onBundleStarted(AbstractBundleWatcher.java:80)
        at org.apache.servicemix.jbi.deployer.impl.AbstractBundleWatcher.access$000(AbstractBundleWatcher.java:34)
        at org.apache.servicemix.jbi.deployer.impl.AbstractBundleWatcher$1.bundleChanged(AbstractBundleWatcher.java:53)
        at org.apache.felix.framework.util.EventDispatcher.invokeBundleListenerCallback(EventDispatcher.java:690)
        at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:619)
        at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:532)
        at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:3601)
        at org.apache.felix.framework.Felix._startBundle(Felix.java:1616)
        at org.apache.felix.framework.Felix.startBundle(Felix.java:1544)
        at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:371)
        at org.apache.servicemix.kernel.filemonitor.FileMonitor.refreshPackagesAndStartOrUpdateBundles(FileMonitor.java:550)
        at org.apache.servicemix.kernel.filemonitor.FileMonitor.onFilesChanged(FileMonitor.java:297)
        at org.apache.servicemix.kernel.filemonitor.FileMonitor$1.filesChanged(FileMonitor.java:140)
        at org.apache.servicemix.kernel.filemonitor.Scanner.reportBulkChanges(Scanner.java:433)
        at org.apache.servicemix.kernel.filemonitor.Scanner.reportDifferences(Scanner.java:322)
        at org.apache.servicemix.kernel.filemonitor.Scanner.scan(Scanner.java:254)
        at org.apache.servicemix.kernel.filemonitor.Scanner$1.run(Scanner.java:214)
        at java.util.TimerThread.mainLoop(Timer.java:512)
        at java.util.TimerThread.run(Timer.java:462)
18:10:15,452 | ERROR | Timer-1          | ResolverUtil                     | g.apache.camel.util.ResolverUtil  489 | Could not search jar file '/org/apache/camel/converter' for classes matching criteria: annotated with @Converter due to an IOException: /org/apache/camel/converter (No such file or directory)
java.io.FileNotFoundException: /org/apache/camel/converter (No such file or directory)
        at java.io.FileInputStream.open(Native Method)
        at java.io.FileInputStream.<init>(FileInputStream.java:106)
        at org.apache.camel.util.ResolverUtil.loadImplementationsInJar(ResolverUtil.java:476)
        at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:362)
        at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:277)
        at org.apache.camel.util.ResolverUtil.findAnnotated(ResolverUtil.java:253)
        at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:66)
        at org.apache.camel.impl.converter.DefaultTypeConverter.checkLoaded(DefaultTypeConverter.java:218)
        at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:64)
        at org.apache.camel.util.IntrospectionSupport.convert(IntrospectionSupport.java:216)
        at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:194)
        at org.apache.camel.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:167)
        at org.apache.camel.impl.DefaultComponent.setProperties(DefaultComponent.java:181)
        at org.apache.camel.component.timer.TimerComponent.createEndpoint(TimerComponent.java:54)
        at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:81)
        at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:253)
        at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:52)
        at org.apache.camel.model.RouteType.resolveEndpoint(RouteType.java:100)
        at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:102)
        at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:108)
        at org.apache.camel.model.FromType.resolveEndpoint(FromType.java:73)
        at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:77)
        at org.apache.camel.model.RouteType.addRoutes(RouteType.java:214)
        at org.apache.camel.model.RouteType.addRoutes(RouteType.java:90)
        at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:520)
        at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:512)
        at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:149)
        at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:47)
        at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:103)
        at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:78)
        at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)
        at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:76)
        at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:275)
        at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:737)
        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:384)
        at org.apache.servicemix.common.xbean.AbstractXBeanDeployer.deploy(AbstractXBeanDeployer.java:86)
        at org.apache.servicemix.camel.CamelSpringDeployer.deploy(CamelSpringDeployer.java:71)
        at org.apache.servicemix.common.BaseServiceUnitManager.doDeploy(BaseServiceUnitManager.java:88)
        at org.apache.servicemix.common.BaseServiceUnitManager.deploy(BaseServiceUnitManager.java:69)
        at org.apache.servicemix.jbi.deployer.impl.ServiceUnitImpl.deploy(ServiceUnitImpl.java:89)
        at org.apache.servicemix.jbi.deployer.impl.Deployer.deployServiceAssembly(Deployer.java:306)
        at org.apache.servicemix.jbi.deployer.impl.Deployer.register(Deployer.java:170)
        at org.apache.servicemix.jbi.deployer.impl.AbstractBundleWatcher.onBundleStarted(AbstractBundleWatcher.java:80)
        at org.apache.servicemix.jbi.deployer.impl.AbstractBundleWatcher.access$000(AbstractBundleWatcher.java:34)
        at org.apache.servicemix.jbi.deployer.impl.AbstractBundleWatcher$1.bundleChanged(AbstractBundleWatcher.java:53)
        at org.apache.felix.framework.util.EventDispatcher.invokeBundleListenerCallback(EventDispatcher.java:690)
        at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:619)
        at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:532)
        at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:3601)
        at org.apache.felix.framework.Felix._startBundle(Felix.java:1616)
        at org.apache.felix.framework.Felix.startBundle(Felix.java:1544)
        at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:371)
        at org.apache.servicemix.kernel.filemonitor.FileMonitor.refreshPackagesAndStartOrUpdateBundles(FileMonitor.java:550)
        at org.apache.servicemix.kernel.filemonitor.FileMonitor.onFilesChanged(FileMonitor.java:297)
        at org.apache.servicemix.kernel.filemonitor.FileMonitor$1.filesChanged(FileMonitor.java:140)
        at org.apache.servicemix.kernel.filemonitor.Scanner.reportBulkChanges(Scanner.java:433)
        at org.apache.servicemix.kernel.filemonitor.Scanner.reportDifferences(Scanner.java:322)
        at org.apache.servicemix.kernel.filemonitor.Scanner.scan(Scanner.java:254)
        at org.apache.servicemix.kernel.filemonitor.Scanner$1.run(Scanner.java:214)
        at java.util.TimerThread.mainLoop(Timer.java:512)
        at java.util.TimerThread.run(Timer.java:462)",davsclaus:1234734713:2009-02-16T05:51:53.401+0000:1234734713:2009-02-16T05:51:53.401+0000:Closing all 1.5.0 issues
0,CAMEL-920,Bug,Critical,1.5.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Dario Sanna,0,0,2008-09-19 08:47:15+00:00,2008-09-23 08:20:55+00:00,"file component consumer.regexPattern does not work as expected


example : from(""file://d:/the_input_dir?consumer.regexPattern=.*\.xml$"".to(whatever)


(should match only files, that has extention .xml)


the result of the above regexPattern is, that no file will be proccessed, regardless if an existing filename matches the pattern.
FileConsumer.pollFileOrDirectory() applies the regexPattern on the starting directory (the_input_dir) which will not match.","davsclaus:1221788146:2008-09-19T09:35:46.627+0000:1221788146:2008-09-19T09:35:46.627+0000:Will look into it this weekend.
davsclaus:1221788486:2008-09-19T09:41:26.321+0000:1221788486:2008-09-19T09:41:26.321+0000:Well is there any use cases for being able to exclude/regex directories also? I doubt it

I will change the matching to be *files only* except that any directories starting with a ""."" (dot) will also be skipped.
davsclaus:1221814314:2008-09-19T16:51:54.532+0000:1221814314:2008-09-19T16:51:54.532+0000:Remember the FTP component could have similar problem
davsclaus:1221818923:2008-09-19T18:08:43.052+0000:1221818923:2008-09-19T18:08:43.052+0000:TODO: update wiki that directories is not matched against against regexp or exclude names etc.
TODO: Only directories starting with a dot (.) is skipped
davsclaus:1221821979:2008-09-19T18:59:39.608+0000:1221821979:2008-09-19T18:59:39.608+0000:Dario, if you please try the latest snapshot to test if the fix works for you.
oirad:1222129255:2008-09-23T08:20:55.800+0000:1222129255:2008-09-23T08:20:55.800+0000:It works, many thanks"
0,CAMEL-919,Bug,Major,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Atle Prange,0,0,2008-09-19 06:52:10+00:00,2009-02-16 05:51:53+00:00,"Suspected reason:
Looking at the code reveals that the initalization of the routebuilder actually sets the routes in the injected CamelContext, but does not populate the local list of routes. 


Consequence:
One is not able to replace routes in the CamelContext by fetching routes from routebuilders, and then set the list of routes in the camel context.





List<Routes> routeList = new ArrayList();

//Some method fetching all my builders
List<Routes> routesList = getRouteBuilders();

//Build a list of all routes, thereby updating my camel context with fresh routes...
for(Routes routes:routesList){

    //Fetches an empty list, but the builder now sets the route in the context
    List<Route> routeListFromBuilder = routes.getRouteList();

    //I am now adding an empty list to my list of routes
    routeList.addAll( routeListFromBuilder );

}

//Sets an empty list into the context, thereby clearing all routes
camleContext.setRoutes( routeList );




Possible solution:


in RouteBuilder replace:



protected void populateRoutes(List<Route> routes) throws Exception {
        CamelContext camelContext = getContext();
        if (camelContext == null) {
            throw new IllegalArgumentException(""No CamelContext has been injected!"");
        }
        routeCollection.setCamelContext(camelContext);
        camelContext.addRouteDefinitions(routeCollection.getRoutes());
}




with




protected void populateRoutes(List<Route> routes) throws Exception {
        CamelContext camelContext = getContext();
        if (camelContext == null) {
            throw new IllegalArgumentException(""No CamelContext has been injected!"");
        }
        routeCollection.setCamelContext(camelContext);
        routes.addAll(routeCollection.getRoutes());
}","davsclaus:1221953203:2008-09-21T07:26:43.083+0000:1221953203:2008-09-21T07:26:43.083+0000:Thanks for reporting this.

The Route is hardly used in Camel as we use the model RoutesType to build the route paths.
davsclaus:1221963274:2008-09-21T10:14:34.459+0000:1221963274:2008-09-21T10:14:34.459+0000:Hardly used by end-users I mean. End-users usually add the routing using a route builder that uses the models. But I think I got it fixed now.
davsclaus:1221968136:2008-09-21T11:35:36.505+0000:1221968136:2008-09-21T11:35:36.505+0000:Currently Camel doesn't properly support removing existing routes and adding new dynamically. This is scheduled for Camel 2.x.

You should use the camelContext.addRoutes(routeList) to add you new routes to an existing context.

At present time we can not add a fix for this as it will break to much at current time.
davsclaus:1221970081:2008-09-21T12:08:01.484+0000:1221970081:2008-09-21T12:08:01.484+0000:I will cleanup the unused routes in RouteBuilder and add a throws UnsupportedOperationException for setRoutes in CamelContext.
davsclaus:1221988127:2008-09-21T17:08:47.220+0000:1221988127:2008-09-21T17:08:47.220+0000:Changing to fixed.
davsclaus:1221988157:2008-09-21T17:09:17.891+0000:1221988157:2008-09-21T17:09:17.891+0000:Notice that you should use addRoutes. setRoutes is not possible until Camel 2.x
davsclaus:1234734713:2009-02-16T05:51:53.376+0000:1234734713:2009-02-16T05:51:53.376+0000:Closing all 1.5.0 issues"
0,CAMEL-918,Improvement,Major,None,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Unassigned,James Strachan,0,0,2008-09-18 18:49:03+00:00,2009-07-31 06:33:35+00:00,No Desc,"jstrachan:1221735217:2008-09-18T18:53:37.052+0000:1221735217:2008-09-18T18:53:37.052+0000:more details in this thread http://www.nabble.com/Headers-in-XSLT-tp19552778s22882p19556970.html
davsclaus:1248993215:2009-07-31T06:33:35.900+0000:1248993215:2009-07-31T06:33:35.900+0000:Closing 2.0m1 tickets"
0,CAMEL-917,Improvement,Major,"1.3.0, 1.4.0",1.5.0,"
None
",Closed,Fixed,1.5.0,Willem Jiang,Willem Jiang,0,1,2008-09-18 02:04:54+00:00,2009-02-16 05:51:53+00:00,"We should leverage the Camel's exception handler to processing the exceptions.
When camel-cxf component working as the proxy router, we need to configure the DeadLetterChannel for ignoring the soap fault.","njiang:1222278160:2008-09-25T01:42:40.763+0000:1222278160:2008-09-25T01:42:40.763+0000:TODO need to update the wiki page for this change of camel-cxf
njiang:1222299945:2008-09-25T07:45:45.638+0000:1222299945:2008-09-25T07:45:45.638+0000:Updated the camel 1.5 release note.
davsclaus:1234734713:2009-02-16T05:51:53.355+0000:1234734713:2009-02-16T05:51:53.355+0000:Closing all 1.5.0 issues"
0,CAMEL-916,New Feature,Major,1.4.0,None,"
None
",Closed,Fixed,2.1.0,Unassigned,Michael Murphree,1,1,2008-09-17 17:02:38+00:00,2010-02-07 09:54:16+00:00,"The current camel-jetty component starts up a new Jetty server instance to host listeners for producing endpoints.  It would be nice if, in an OSGi environment, there were a component that uses the OSGi HttpService to create a producing endpoint instead.


One of the restrictions over this component would be that the end user would not be able to configure the port number in the URI as the HttpService uses the system property org.osgi.services.http.port to determine the port setting.


Use case:
I should be able to configure a route in a manner similar to camel-jetty:


...
from(""osgi-http:localhost:8192/services/myservice"").
    .to(...)
...


The host name (or address) and port number would necessarily be ignored.


See http://www.nabble.com/Proxying-web-services-tt19498936s22882.html#a19536118","davsclaus:1252837451:2009-09-13T18:24:11.344+0000:1252837451:2009-09-13T18:24:11.344+0000:See the new camel-servlet component which may be useable for you
http://camel.apache.org/servlet.html
njiang:1255302093:2009-10-12T07:01:33.789+0000:1255302093:2009-10-12T07:01:33.789+0000:I'd like to close this issue, as the camel-servlet component support to use the HttpService
Here is a helper activator[1] to do registrer work.

[1]https://svn.apache.org/repos/asf/camel/trunk/tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/servlet/support/ServletActivator.java"
0,CAMEL-915,Improvement,Minor,1.5.0,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Unassigned,Michael Murphree,0,0,2008-09-17 16:48:50+00:00,2009-11-21 11:57:54+00:00,"It would be nice if users of the camel-http and camel-jetty components could easily configure endpoints to use a custom HeaderFilterStrategy.  This could be done through Spring injection or configuration information in the URI for the route.


See http://www.nabble.com/Proxying-web-services-tt19498936s22882.html#a19536118","davsclaus:1221645725:2008-09-17T18:02:05.943+0000:1221645725:2008-09-17T18:02:05.943+0000:CAMEL-911 is the original request.
davsclaus:1242345644:2009-05-15T08:00:44.259+0000:1242345644:2009-05-15T08:00:44.259+0000:You can do this in Camel 2.0 in the URI by using the # syntax for lookup in the registry.
{code}
from(x).to(""http://somesever/myapp?headerFilterStrategy=#myStrategy"");
{code}
davsclaus:1258775874:2009-11-21T11:57:54.752+0000:1258775874:2009-11-21T11:57:54.752+0000:Closing all 2.0M2 tickets"
0,CAMEL-914,Bug,Major,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Martin Gilday,0,0,2008-09-17 12:26:38+00:00,2009-02-16 05:51:53+00:00,"Currently the Maven Plugin attempts to load Camel Routes from both target/classes and target/test-classes.  This causes an issue when you have the same package defined for testing as you have in your Camel Context.  An example problem is using a super class for a test which is only available a test dependency which results in a ClassNotFoundException.


I would propose one of the following:



Prevent the plugin from using target/test-classes altogther
Add a mojo parameter to allow for routes under test-classes to be scanned
	
This should default to False
If this parameter is set to True then the plugin should add dependencies marked as ""test"" to the classpath","pledge:1221627797:2008-09-17T13:03:17.587+0000:1221627797:2008-09-17T13:03:17.587+0000:See http://www.nabble.com/Camel-Maven-Plugin-looking-in-test-classes-td19530527s22882.html
pledge:1221628684:2008-09-17T13:18:04.248+0000:1221628684:2008-09-17T13:18:04.248+0000:It also seems to be using classpath resources from src/test/resources such as log4j configs. 
davsclaus:1221644546:2008-09-17T17:42:26.932+0000:1221644546:2008-09-17T17:42:26.932+0000:I will go for option #1.

It looks like it adds the test classes.
But neither resources, so that should be added.

I actually doubt that we should add anything from the test? Is an option needed then afterall?
davsclaus:1221645544:2008-09-17T17:59:04.434+0000:1221645544:2008-09-17T17:59:04.434+0000:Martin I have commited a fix for this. Now the test-classes is not added to the classpath.

Can you test it? You need to use version 1.5-SNAPSHOT of the plugin. And to add the maven plugin snapshot repo to your maven repo.

{code:xml}
    <pluginRepositories>
        <pluginRepository>
            <id>apache-plugin-snapshots</id>
            <name>Apache Maven Plugins Snapshot Repository</name>
            <url>http://people.apache.org/maven-snapshot-repository</url>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
            <releases>
                <enabled>false</enabled>
            </releases>
        </pluginRepository>
    </pluginRepositories>
{code}
davsclaus:1221689535:2008-09-18T06:12:15.599+0000:1221689535:2008-09-18T06:12:15.599+0000:A reminder to myself. Check if test scoped .jar is added as well, they should not.
davsclaus:1221691360:2008-09-18T06:42:40.685+0000:1221691360:2008-09-18T06:42:40.685+0000:Okay I have refined it to not include test scoped jars as well. 

Also I have added a INFO logging with the classpath resolved just as {{mvn jetty:run}} also does. So now end-users can see the classpath when they using this tool.

Martin, let me know how it goes for you.
pledge:1221703328:2008-09-18T10:02:08.427+0000:1221703328:2008-09-18T10:02:08.427+0000:I have tested the same project and can confirm that it only attempts to load routes from target/classes now, which is fantastic.

However I do not see any INFO logging statements about the classpath.  In fact one issue is that without a log4j.properties/xml in src/main resources the only message that the plugin prints out is:
[INFO] [camel:run]
At first I wasn't even sure if Camel had completed startup.  I think a INFO statement saying ""Camel route creation complete"" or similar would be useful if possible.

When I add a log4j config with the root level set to DEBUG you can nicely see the details of the routes that are being created.  I will add this to the wiki page as it is very useful info to see when prototyping your app.
davsclaus:1221703611:2008-09-18T10:06:51.227+0000:1221703611:2008-09-18T10:06:51.227+0000:Thanks Martin

The INFO logging of classpath is recent added, so you have to wait until the Apache INFRA has build a new snapshot of the plugin. Wait X hours and try again. It should then have the classpath logged just as jetty does it.

eg a sample from running the spring example on my local laptop
{code}
[INFO] [camel:run]
[INFO] Classpath = [file:/D:/project/camel/examples/camel-example-spring/target/classes/, file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/org/apache/camel/camel-spring/1.5-SNAPSHOT/camel-spring-1.5-SNAPSHOT.jar, file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/org/apache/camel/c
amel-core/1.5-SNAPSHOT/camel-core-1.5-SNAPSHOT.jar, file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/commons-logging/commons-logging-api/1.1/commons-logging-api-1.1.jar, file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/javax/xml/bind/jaxb-api/2.1/jaxb-api-2.1.jar, file:/C:/Docume
nts and Settings/Claus Ibsen/.m2/repository/javax/xml/stream/stax-api/1.0-2/stax-api-1.0-2.jar, file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/javax/activation/activation/1.1/activation-1.1.jar, file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/com/sun/xml/bind/jaxb-impl/2.1.6/j
axb-impl-2.1.6.jar, file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/org/springframework/spring-core/2.5.5/spring-core-2.5.5.jar, file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar, file:/C:/Documents and Settings/Clau
s Ibsen/.m2/repository/org/springframework/spring-context/2.5.5/spring-context-2.5.5.jar, file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar, file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/org/springframework/spring-beans/2.5.5/spri
ng-beans-2.5.5.jar, file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/org/springframework/spring-tx/2.5.5/spring-tx-2.5.5.jar, file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/org/springframework/spring-aop/2.5.5/spring-aop-2.5.5.jar, file:/C:/Documents and Settings/Claus Ibsen/.m
2/repository/org/apache/camel/camel-jms/1.5-SNAPSHOT/camel-jms-1.5-SNAPSHOT.jar, file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/org/springframework/spring-jms/2.5.5/spring-jms-2.5.5.jar, file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/commons-pool/commons-pool/1.4/commons-pool
-1.4.jar, file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/org/springframework/spring-context-support/2.5.5/spring-context-support-2.5.5.jar, file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/org/apache/geronimo/specs/geronimo-jms_1.1_spec/1.1.1/geronimo-jms_1.1_spec-1.1.1.jar, fi
le:/C:/Documents and Settings/Claus Ibsen/.m2/repository/org/apache/geronimo/specs/geronimo-jta_1.1_spec/1.1.1/geronimo-jta_1.1_spec-1.1.1.jar, file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/org/apache/activemq/activemq-core/5.1.0/activemq-core-5.1.0.jar, file:/C:/Documents and Settings/
Claus Ibsen/.m2/repository/org/apache/activemq/activeio-core/3.1.0/activeio-core-3.1.0.jar, file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/backport-util-concurrent/backport-util-concurrent/2.1/backport-util-concurrent-2.1.jar, file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/or
g/apache/geronimo/specs/geronimo-j2ee-management_1.0_spec/1.1/geronimo-j2ee-management_1.0_spec-1.1.jar, file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/org/apache/activemq/activeio-core/3.1.0/activeio-core-3.1.0-tests.jar]
2008-09-18 12:06:21 org.apache.camel.spring.Main doStart
INFO: Apache Camel 1.5-SNAPSHOT starting
{code}
pledge:1221703858:2008-09-18T10:10:58.376+0000:1221703858:2008-09-18T10:10:58.376+0000:Thanks Claus,  I will be testing this app over the next few days so it should appear at some point.
I have updated the wiki about this change.
davsclaus:1234734713:2009-02-16T05:51:53.313+0000:1234734713:2009-02-16T05:51:53.313+0000:Closing all 1.5.0 issues"
0,CAMEL-913,Improvement,Major,None,None,"
None
",Resolved,Later,Future,Unassigned,James Strachan,0,1,2008-09-17 10:30:18+00:00,2013-05-26 08:57:46+00:00,"e.g. if you sent a message with headers



CamelReplyTo = activemq:cheese
CamelTimerDelay = 1000




it'd send a message to activemq:cheese in a second","tjsnell:1295247772:2011-01-17T15:02:52.059+0000:1295247772:2011-01-17T15:02:52.059+0000:
We could have quartz when it's a Producer send the exchange to an endpoint based on the actual config. Additionally allowing for overriding/setting values by sending them in the headers.

{code}
from(""jms:SomeQueue"")
   .to(""quartz://myGroup/myTimer?trigger.repeatInterval=2000&trigger.repeatCount=1&endpoint=jms:topic:SomeTopic"");
{code}
hadrian:1295470509:2011-01-20T04:55:09.496+0000:1295470509:2011-01-20T04:55:09.496+0000:I don't really understand the use case.

My questions are:
1. What is the relationship between the initial message sent to the timer endpoint and the subsequent messages sent by the timer? Is it the same message or the timer send empty messages as the timer consumers do now?
2. For one message sent to the timer endpoint, how many messages are sent later by the timer?
3. What is the difference between this and starting a new route in response to the message sent?
{code}
from(""quartz://myGroup/myTimer?trigger.repeatInterval=2000&trigger.repeatCount=1"")
    .to(""jms:topic:SomeTopic"");
{code}
4. How will exceptions be handled if sending to the endpoint fails? Is the message in-only or in-out?
5. Are transactions supported?

The particular example above could be handled with a combination of [loop|http://camel.apache.org/loop.html] and [delayer|http://camel.apache.org/delayer.html].


davsclaus:1295475052:2011-01-20T06:10:52.677+0000:1295475095:2011-01-20T06:11:35.010+0000:Tracy and I had a chat on IRC.

I think he misunderstood the ticket and made it overcomplicated.

Basically what it is: a delayed recipient list.

eg you have a message at hand, and what you want to do is: send this message to X endpoint in Y time from now.
Its a one-shot message, so it should not repeat or do anything like that.

A use case could be that you process a message, and in 5 min from now you want something to happen.
So you can send a message to a timer with +5 min with some payload and tell it to send it to a route, which then routes that message, 5 min from now.

Does it make sense?

davsclaus:1295475191:2011-01-20T06:13:11.932+0000:1295475191:2011-01-20T06:13:11.932+0000:If we use quarz then it has the ability to persist jobs, so that means you would be able to _survive_ crashes or restarts.
If we use the JDK timer its pure memory based.

But I think we should start simple and implement it on the JDK timer first. Then later on quartz when we got it _right_ :)
tjsnell:1295502377:2011-01-20T13:46:17.446+0000:1295502377:2011-01-20T13:46:17.446+0000:I just was cherry picking Jiras pretty randomly. I didn't know about delayer. That does everything I had in my timer code and I think fits James' intent.

Oh well, I did learn a ton playing with different ways to do it.
hadrian:1295505581:2011-01-20T14:39:41.738+0000:1295505581:2011-01-20T14:39:41.738+0000:@Tracy, you did the right thing, I personally appreciate that and your effort is noted.

I am yet to see a credible usecase. My questions 4 and 5 are not yet answered. My question 2 was a dumb question, the answer was in the {{repeatCount}}.

I would suggest we either close this issue with a ""won't fix"" or discuss and define what exactly we want to do. To me it's far from clear. My understanding is that the problem we are trying to solve is scheduled delivery. For instance, I buy Claus a nice watch and send it via DHL, but schedule it to only be delivered on his birthday. DHL (which as far as I know does not provide this kind of service) will act as a store and forward system, take custody of the package, but only deliver at the scheduled time. It's a bit tricky to implement, because it's harder to predict the resources needed. Amazon on the other hand does offer such a service (even with a repeat count). You can place a recurring order (K-cups for your Keurig brewer for instance) and they will be delivered, like clockwork at the scheduled time.

I believe that can be implemented already with camel and I we could have an example demonstrated that. Or it could give us a better idea of what's missing. If I misunderstood and this jira was created with a different scenario in mind, please comment.

davsclaus:1369529866:2013-05-26T08:57:46.375+0000:1369529866:2013-05-26T08:57:46.375+0000:Closing old tickets which has no activity"
0,CAMEL-912,Bug,Major,1.4.0,None,"
None
",Closed,Fixed,1.5.0,Willem Jiang,Mike Ramnarine,0,0,2008-09-16 22:16:34+00:00,2009-02-16 05:51:53+00:00,"CxfProducer.process() is not setting up the request context correctly during createCxfMessage, so later in that method propagateContext has no request data to propagate.  Also, we need the exchange properties to be added to the request context, so that non-camel components can pass properties into the cxf request context.


I have coded a fix for this, along with a unit test of course.  I'll attach the patch to this JIRA.","njiang:1221583139:2008-09-17T00:38:59.842+0000:1221583139:2008-09-17T00:38:59.842+0000:Applied the patch with thanks to Mike.
davsclaus:1234734713:2009-02-16T05:51:53.287+0000:1234734713:2009-02-16T05:51:53.287+0000:Closing all 1.5.0 issues"
0,CAMEL-911,Improvement,Major,1.4.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Willem Jiang,Michael Murphree,2,0,2008-09-16 18:15:47+00:00,2010-02-07 09:54:16+00:00,"It would be nice if we could create arbitrary proxies for web URLs (web services, especially) that direct requests through Camel.  We should be able to map one URL path to another.


For example:
...
from(""jetty:http://localhost:8080/myservices/myservice"")
        .to(""http://svchost:80/Service1.asmx"");
...


If I pointed a web browser and sent a GET request to the listening URL (http://localhost:8080/myservices/myservice?wsdl), I should receive the WSDL for the service.  If I send a POST request with SOAP invoking the service, I should likewise get the SOAP response with the appropriate content type settings, etc.


This allows me to set up an uncomplicated HTTP proxy, while still retaining the ability to intercept and process the message.","davsclaus:1221602919:2008-09-17T06:08:39.033+0000:1221602919:2008-09-17T06:08:39.033+0000:See nabble:
http://www.nabble.com/Proxying-web-services-td19498936s22882.html
davsclaus:1252839650:2009-09-13T19:00:50.737+0000:1252839650:2009-09-13T19:00:50.737+0000:This is now possible with the new {{bridgeEndpoint}} option on camel-jetty. See its wiki page."
0,CAMEL-910,Task,Minor,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Willem Jiang,Claus Ibsen,0,0,2008-09-16 17:47:21+00:00,2008-10-23 04:39:20+00:00,"First of all I think we need to promote this great example some more. Maybe it should be easier to find on our wiki site.


I will post findings in this ticket:


#1
Link to EIP book loan broker sample doesnt work


#2
I think the 2 parts in the introduction should be listed as bullets (one for JMS, one for webservice)


#3
spelling (comman in the sentence below)
credit agency , and banks)


#4
Maybe the exchange pattern InOnly, InOut is not easily understood by new users and non JBI/ServiceMix end-users. Maybe use terms such as sync/async instead (and list the MEP in parathes)


#5
Could ""test-jms"" component name be renamed to jms or activemq or something with non test?


#6
multicast().to() ah clever if its really using a multicast  I didn't know that we have the .to on multicase. Are you sure its working as expected? and it should not be multicase(""bank1"", ""bank2"", ...) without the to?


#7
Use the getHeader with the expected type as 2nd param, to avoid plain java type cast
  String ssn = (String)exchange.getIn().getHeader(Constants.PROPERTY_SSN);


#8
The aggregator. I am wondering if we have or should have a counter build in Camel so you can use a build in header instead of ""remebering"" to code this yourself
result.setProperty(""aggregated"", old + 1);


will continue...","davsclaus:1221560664:2008-09-16T18:24:24.276+0000:1221560664:2008-09-16T18:24:24.276+0000:#9
its not easily understood how the client can send using the template. Maybe divide the server and client into each section. The client just need much less code than the server.

#10
webservice example. It is not clear that its the *true* parameter that turns the multicast into parallel mode. This is not documented to well in the code.
njiang:1221586301:2008-09-17T01:31:41.912+0000:1221586301:2008-09-17T01:31:41.912+0000:Finished #1, #2, #3, #4, #5, #7, #9, 10
For #6,  yes it works. 
For #8,  yes we could add counter in the MulticastProcessor for completedPredicate.
davsclaus:1221604311:2008-09-17T06:31:51.609+0000:1221604311:2008-09-17T06:31:51.609+0000:#8: Yes I think we should provide this out of the box in Camel. In many cases the completed predicate is when you have received the X expected number of messages.

BTW: Do we have a timeout setting as well for the multicast?`So you don't wait forever.
njiang:1222055724:2008-09-22T11:55:24.220+0000:1222055724:2008-09-22T11:55:24.220+0000:#8 should be resolved in CAMEL-928."
0,CAMEL-909,Improvement,Major,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-09-16 15:35:35+00:00,2008-10-23 04:37:13+00:00,"camel-ftp now has the option consumer.timestamp to disable/enable using timestamp check for new files.


The regular file component should also has this option. Then there is no surprises for end-users. This will allow then to copy files into the folder preserving original timestamp etc.
We should consider disabling this by default as its better to use another strategy for detecting new files, such as



deleting consumed files
moving consumed files (does this by default)","davsclaus:1221553599:2008-09-16T16:26:39.728+0000:1221553599:2008-09-16T16:26:39.728+0000:We actually already have the option *consumer.alwaysConsume* for this.
So I am adding *consumer.timestamp* to let the file and ftp component have same options in this regards. And also adding the wiki warning.

I have marked the code in the file component that computes if a file is changed or not. The code is to messy and we don't want to compute if a file is changed if the file size is different etc. It keeps an internal state of processed files and its lost when you restart Camel. So its should be removed.

End-users should do the same as the ftp. Files to be consumed from a folder should be moved/delete after processing. So new files is not hard to compute = there is a file in the folder.
davsclaus:1224707833:2008-10-23T04:37:13.928+0000:1224707833:2008-10-23T04:37:13.928+0000:Closing 1.5 issues"
0,CAMEL-908,Improvement,Minor,1.4.0,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2008-09-16 10:37:49+00:00,2009-11-21 11:57:54+00:00,"New description
This ticket evolved into a new feature.
Allowing the wireTap to send a new Exchange instead of a copy of the original tapped exchange.
This allows you to spin of a new Exchange and eg produce a new message and send it as InOnly as a fire and forget style.


Old description
The log component should have a new URI option for end users a custom log message to be avail for logging. 


This is usable for end users that want to log certain steps in the LOG such as ""Validating against XMLSchema"", ""Validation OK"" etc.","davsclaus:1221532946:2008-09-16T10:42:26.411+0000:1221532946:2008-09-16T10:42:26.411+0000:See nabble:
http://www.nabble.com/Custom-log-messages-td19508418s22882.html
jstrachan:1221536140:2008-09-16T11:35:40.015+0000:1221536140:2008-09-16T11:35:40.015+0000:as I mentioned on that thread, we can use the DSL to set the logging message either using expressions or using templating - e.g. 

{code}
from(""...""). 
        setBody().el(""Validating ${in.header.foo} blah""). 
        to(""log:Validating""); 
{code}

So am wondering if there's a real need to hack the logging component to deal with this? Am thinking given the power of the transformation capabilities, should we just use them before we invoke the logger?

   
davsclaus:1221537219:2008-09-16T11:53:39.907+0000:1221537219:2008-09-16T11:53:39.907+0000:Yeah looks really nice, but then you need camel-juel and knowledge how to use the languages, but that isn't a bad thing either as they are powerful ;)

But what for a very simple option for quick sending your own expression. We could add expression as an optional 2nd parameter:

{code}
log(""log:com.mycompany"", constant(""Validating before XMLSchema""))
{code}

Nice and simple. 
gertvanthienen:1221537550:2008-09-16T11:59:10.655+0000:1221537550:2008-09-16T11:59:10.655+0000:Or perhaps even a more general solution, like 

{code:java}
  from(""somewhere"").send(""log:com.mycompany"", constant(""Validating before schema""));
{code}

We are now thinking only of logging, but it might be good to be able to just send a small message somewhere en-cours-de-route (like sending heartbeat messages to a queue of whatever other use case we can come up with).
davsclaus:1235373171:2009-02-23T15:12:51.643+0000:1235373171:2009-02-23T15:12:51.643+0000:And issue with the log and having a constant as 2nd argument does not work in Spring DSL.

So it should be:
{code}
to(""log:foo?level=INFO&msg=Validation before scheme"")
{code}

{code}
to(""log:foo?level=INFO&msg=Processing after validating scheme"")
{code}


And the one above will create a new endpoint for each different msg as they are not the same, and you end up with 2 endpoints. And that is actually needed so it can remember that msg.
davsclaus:1237804229:2009-03-23T18:30:29.314+0000:1237804229:2009-03-23T18:30:29.314+0000:Like getv suggestion.

Now we can leverage the wireTap and add some sugar so you can pass in an expression for the body.
Then we can have a fireAndForget DSL, like send, that wont affect the original exchange.
davsclaus:1237872738:2009-03-24T13:32:18.965+0000:1237872738:2009-03-24T13:32:18.965+0000:I got this working now
{code}
                from(""direct:start"")
                    .send(""direct:foo"", constant(""Bye World""))
                    .to(""mock:result"");

                from(""direct:foo"").to(""mock:foo"");
{code}

eg it will send a totally new Exchange to direct:foo with the body: Bye World. It runs in parallel with the original exchange.
davsclaus:1237873326:2009-03-24T13:42:06.635+0000:1237873326:2009-03-24T13:42:06.635+0000:We have agreed it should be merged into the existing wireTap, so the *send* DSL should be *wireTap*
davsclaus:1237932179:2009-03-25T06:02:59.982+0000:1237932179:2009-03-25T06:02:59.982+0000:Committed revision 758152.
davsclaus:1258775874:2009-11-21T11:57:54.724+0000:1258775874:2009-11-21T11:57:54.724+0000:Closing all 2.0M2 tickets"
0,CAMEL-907,Improvement,Major,None,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,James Strachan,0,0,2008-09-16 10:05:22+00:00,2009-02-16 05:51:53+00:00,"The various languages 


http://activemq.apache.org/camel/languages.html


should have a description of the various values available to them.


They are mostly the same variables (in, out, exchange, body and so forth) so we could maybe include the same page on most actual language pages such as


http://activemq.apache.org/camel/el.html","davsclaus:1221868868:2008-09-20T08:01:08.753+0000:1223255727:2008-10-06T09:15:27.583+0000:To document in the wiki:
- variables in context *DONE*
- java examples *DONE*
- spring examples *DONE*
- maven dependencies *DONE*
- annotations  *DONE*
- static import not needed *DONE*
davsclaus:1221884672:2008-09-20T12:24:32.552+0000:1222126843:2008-09-23T07:40:43.885+0000:To document:
- No need for static imports of XXXBuilder. Its not needed since Camel 1.3. Remove the stuff that says you need it. *DONE*
davsclaus:1221886433:2008-09-20T12:53:53.061+0000:1222682097:2008-09-29T17:54:57.040+0000:The XPath language needs to be reviewed. I am a bit puzzled why I can't get the XPath functions executed, and namespace matching as well. *DONE*
davsclaus:1221886598:2008-09-20T12:56:38.700+0000:1221886598:2008-09-20T12:56:38.700+0000:I propose to move:
	org.apache.camel.builder.xml.XPathLanguage.class
to:
	org.apache.camel.language.xpath

It's the only language that isn't in the language package in camel-core.

*DONE*
davsclaus:1222123647:2008-09-23T06:47:27.135+0000:1222126821:2008-09-23T07:40:21.213+0000:- Document how to use any JSR script language (we dont have DSL for out-of-the-box) *DONE*

davsclaus:1222662581:2008-09-29T12:29:41.951+0000:1222662581:2008-09-29T12:29:41.951+0000:XPath and XQuery language pages need review by Jonathan/James etc.
janstey:1222676040:2008-09-29T16:14:00.199+0000:1222676040:2008-09-29T16:14:00.199+0000:Added xpath function test (http://svn.apache.org/repos/asf/activemq/camel/trunk/camel-core/src/test/java/org/apache/camel/language/XPathFunctionTest.java) and updated wiki doc here http://cwiki.apache.org/confluence/display/CAMEL/XPath.
janstey:1222677009:2008-09-29T16:30:09.575+0000:1222677009:2008-09-29T16:30:09.575+0000:The rest of the xpath docs look good. I've removed the ""in review"" warning. If you are wondering, I removed the out-body/out-header functions because they could never be triggered.
davsclaus:1222683320:2008-09-29T18:15:20.359+0000:1222687133:2008-09-29T19:18:53.412+0000:- Spring example of any scripting language *DONE*
http://cwiki.apache.org/confluence/display/CAMEL/Scripting+Languages
davsclaus:1222825979:2008-10-01T09:52:59.825+0000:1222825979:2008-10-01T09:52:59.825+0000:Document this a bit more:
- @MessageDriven is a way to create a really simple route without using the DSL. so the annotations are kinda a way of working outside the DSL - but they only work for real simple routes 

davsclaus:1234734713:2009-02-16T05:51:53.256+0000:1234734713:2009-02-16T05:51:53.256+0000:Closing all 1.5.0 issues"
0,CAMEL-906,Bug,Major,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-09-16 07:36:50+00:00,2008-10-23 04:37:13+00:00,"When sending a JMS message to a destination using camel-jms (JMSProducer) I can't get it to use my requestTimeout option in the endpoint configuration. It always default to 20000.



template.requestBody(""activemq:queue:slow?requestTimeout=1000"", ""Hello World"");




This doesn't work as expected with a timeout of only 1 sec.","davsclaus:1221525951:2008-09-16T08:45:51.846+0000:1221525951:2008-09-16T08:45:51.846+0000:Fixed and added the option to the wiki and a small sample as well.
davsclaus:1224707833:2008-10-23T04:37:13.900+0000:1224707833:2008-10-23T04:37:13.900+0000:Closing 1.5 issues"
0,CAMEL-905,Task,Minor,1.4.0,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Claus Ibsen,0,0,2008-09-15 11:24:04+00:00,2009-07-31 06:33:35+00:00,"Many places in camel-core we catch exception and log it at WARN or DEBUG, and then ignore it.


We should consider using the ExceptionHandler for this. Its interface can be improved with more parameters:



additional message
severity level (such as the log levels)



By default Camel will log it using LoggingExceptionHandler",davsclaus:1248993215:2009-07-31T06:33:35.201+0000:1248993215:2009-07-31T06:33:35.201+0000:Closing 2.0m1 tickets
0,CAMEL-904,Task,Minor,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Willem Jiang,Claus Ibsen,0,0,2008-09-15 09:52:47+00:00,2008-10-23 04:40:22+00:00,"The camel-script pom.xml looks a bit odd with deps on retroslaver and using jdk4 classifier. 


Background: See chatlog on servicemix for today.","davsclaus:1221516228:2008-09-16T06:03:48.901+0000:1221516228:2008-09-16T06:03:48.901+0000:Chatlog:
http://servlet.uwyn.com/drone/log/hausbot/servicemix/20080915

davsclaus:1221516292:2008-09-16T06:04:52.519+0000:1221516292:2008-09-16T06:04:52.519+0000:Willem, isn't this something you with your maven expertise can look at?

Summary: Should the jdk4 and retroweaver still be there in the pom.xml - we are only jdk5+ only.
njiang:1221524732:2008-09-16T08:25:32.036+0000:1221524732:2008-09-16T08:25:32.036+0000:Done, now we don't use any jdk4 jars."
0,CAMEL-903,Improvement,Critical,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-09-15 09:26:57+00:00,2008-10-23 04:37:13+00:00,"The camel-ftp component uses System.currentTimeMillis stored as last poll time. The remote file timestamp is used for comparing against last poll time if its new and thus a candidate for download.


As timestamps over FTP is not reliable we should not use this feature by default, but turn it off. It should only be there for test or experimental usage.
Most FTP servers only sent file timestamp as HH:mm (no seconds). And as a bonus we avoid timezone issues as well.


Instead end-users should use a different strategy for ""marking files done"" such as:



delete consumed files
rename consumed files



See nabble:
http://www.nabble.com/Ftp-consumer-td19489526s22882.html","davsclaus:1221447743:2008-09-15T11:02:23.195+0000:1221447743:2008-09-15T11:02:23.195+0000:Its actually a critical bug
davsclaus:1221466304:2008-09-15T16:11:44.681+0000:1221466304:2008-09-15T16:11:44.681+0000:The last poll timestamp feature is @deprecated. Will be removed in Camel 2.0.

In Camel 1.5 the last poll timestamp will be *disabled* by default. You enabled it with a new option flag.
davsclaus:1221467465:2008-09-15T16:31:05.707+0000:1221467465:2008-09-15T16:31:05.707+0000:Commited fix.

The flag is named: *consumer.timestamp* its a boolean that is *false* by default. Set it to *true* to enable it as it works in Camel 1.4 or older.
davsclaus:1221467474:2008-09-15T16:31:14.967+0000:1221467474:2008-09-15T16:31:14.967+0000:TODO: Need to document it in wiki
davsclaus:1221517123:2008-09-16T06:18:43.758+0000:1221517123:2008-09-16T06:18:43.758+0000:Updated wiki with a warning and added the option.
davsclaus:1224707833:2008-10-23T04:37:13.880+0000:1224707833:2008-10-23T04:37:13.880+0000:Closing 1.5 issues"
0,CAMEL-902,Bug,Major,"1.3.0, 1.4.0",1.5.0,"
None
",Closed,Fixed,1.5.0,Willem Jiang,Willem Jiang,0,0,2008-09-15 07:05:14+00:00,2009-02-16 05:51:53+00:00,"If you specify an invalided class name in the  convertBodyTo@type, you will get a NPE error, but no detail log information for the type attribute.
We need to throw the exception for user to locate the error.",davsclaus:1234734713:2009-02-16T05:51:53.225+0000:1234734713:2009-02-16T05:51:53.225+0000:Closing all 1.5.0 issues
0,CAMEL-901,Bug,Major,"1.0.0, 1.1.0, 1.2.0, 1.3.0, 1.4.0, 1.5.0",1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Bela Vizy,0,0,2008-09-14 21:17:42+00:00,2008-10-23 04:31:39+00:00,"Setup:


Error handler is specified before the thread processor and there are 3 processor after the thread() call. Third processor fails. 


Bug #1:


The exchange received by the failed processor (#3) gets redelivered to the first processor in the pipe.
It should be redeliver to #3 (this works without the thread processor).


Bug #2:


The specified errorHandler (log:testError) receives the exchange that entered processor #1 (first in the pipe).


See details in the attached unit test. Also take a look at the log4j log (copy attached). The 3rd line from the bottom is the log by testError.","magyardude:1221398328:2008-09-14T21:18:48.195+0000:1221398328:2008-09-14T21:18:48.195+0000:Unit Test
magyardude:1221398395:2008-09-14T21:19:55.040+0000:1221398395:2008-09-14T21:19:55.040+0000:Log messages for the unit test
davsclaus:1223628935:2008-10-10T16:55:35.216+0000:1223628935:2008-10-10T16:55:35.216+0000:Ad #1)
Not a bug. Your route is a pipeline (pipes and filters) http://activemq.apache.org/camel/pipes-and-filters.html

So the routing is: from -> process1 -> process2 -> process3. So when the message is redelivered it starts all over again at the *from* and this should be routed through the pipeline again
davsclaus:1223629097:2008-10-10T16:58:17.460+0000:1223629097:2008-10-10T16:58:17.460+0000:Ad #2)
Not a bug. Its the original exchange that is received, that is passed to the error handler.
E.g. so you can move the message to a JMS queue and later move the message back again to consume the *original* exchange.
magyardude:1223630517:2008-10-10T17:21:57.179+0000:1223630517:2008-10-10T17:21:57.179+0000:#1
Well, not so fast. Take out the thread() and it will behave differently, they way I suggested it, that is it will re-deliver to the #3 processor where the failure occurred.

I guess I mistook a feature for a bug :) The doc is not clear about the redelivery behavior (or I should RTFM). My $0.02 is that if we use the pipeline() then it should re-deliver to the pipe otherwise the failing processor. 

#2 That makes sense if it re-delivers to the pipe...
davsclaus:1223632470:2008-10-10T17:54:30.172+0000:1223632470:2008-10-10T17:54:30.172+0000:#1

Camel is smart but *not* that smart. When it do redelivery it does not know which route steps last time was successful, it always start *all over again*.

Okay so there might be a bug/issue if it works different depending if you have thread or no thread. I will look into it.
davsclaus:1223635305:2008-10-10T18:41:45.947+0000:1223635305:2008-10-10T18:41:45.947+0000:#2

Ah each step with the processors are again wrapped in a DeadLetterChannel and thus Camel should retry at the processor that failed. And in this case at the last processor.


davsclaus:1223984439:2008-10-14T19:40:39.768+0000:1223984439:2008-10-14T19:40:39.768+0000:Could be related to useing seda as the queue. We have seen some timing issues with high concurrency with seda queues.
davsclaus:1223986353:2008-10-14T20:12:33.962+0000:1223986353:2008-10-14T20:12:33.962+0000:Using the new handled(true) DSL and onException works.
davsclaus:1224075001:2008-10-15T20:50:01.432+0000:1224075001:2008-10-15T20:50:01.432+0000:Also test with direct queue instead of seda
davsclaus:1224449010:2008-10-20T04:43:30.849+0000:1224449010:2008-10-20T04:43:30.849+0000:#3
Thread adds a nested pipeline that yet again adds a DLC. Then when the exchange has been failure handled by the inner DLC then its 'thrown' back to the outer DLC that yet again will try to handle it.

ThreadType#createProcessor adds the nested Pipeline. Maybe we can avoid this.

#4
Because of the nested Pipeline and it's copy result nature it creates a new exchange id that get's routed by the outer Pipeline, and thus by magic there is 2 messages being routed, and not only one.
davsclaus:1224451182:2008-10-20T05:19:42.026+0000:1224451182:2008-10-20T05:19:42.026+0000:#5
The inner processing in the Pipeline is missing the exception handled check that the outer processor has
davsclaus:1224451218:2008-10-20T05:20:18.943+0000:1224451218:2008-10-20T05:20:18.943+0000:#6
And the DLC should also have this exception handled check in it's processing code
davsclaus:1224451582:2008-10-20T05:26:22.120+0000:1224466182:2008-10-20T09:29:42.789+0000:TODO: Reminder to me. DefaultExchange when copy from parent - I think we should copy the exchange id as well

I copy the exchange id in Pipeline so the same id is used.
davsclaus:1224452351:2008-10-20T05:39:11.672+0000:1224452351:2008-10-20T05:39:11.672+0000:TODO: exchangeId should not be lazy initialized I think, it should not depend on a DEBUG log or toString to init it
davsclaus:1224466346:2008-10-20T09:32:26.394+0000:1224466346:2008-10-20T09:32:26.394+0000:Issue #1 *fixed*
Issue #2 *fixed*
Issue #3 *working as designed*
Issue #4 *fixed*
Issue #5 *fixed*
Issue #6 *fixed*

I got it working now, but it is a bit complicate with the thread as it adds a pipeline as well, so we get double pipelines.
I also added some TRACE logging to Pipleline.
davsclaus:1224466423:2008-10-20T09:33:43.248+0000:1224466423:2008-10-20T09:33:43.248+0000:My current patch if anyone wants to review as its a bit *long haired* in the Pipeline
hadrian:1224483302:2008-10-20T14:15:02.568+0000:1224483302:2008-10-20T14:15:02.568+0000:Thanks Claus!

I'll review this.  At first sight, log4j.properties should be restored to remove 
+log4j.logger.org.apache.camel.processor.Pipeline=TRACE


davsclaus:1224571112:2008-10-21T14:38:32.447+0000:1224571112:2008-10-21T14:38:32.447+0000:A better patch with the findings from hadrian and gertv
davsclaus:1224581842:2008-10-21T17:37:22.604+0000:1224581842:2008-10-21T17:37:22.604+0000:Gertv had a review as well. He spotted that the reuse of exchange id should be better documented. I have improved the code comments (alot)
davsclaus:1224622317:2008-10-22T04:51:57.265+0000:1224622317:2008-10-22T04:51:57.265+0000:Hadrian have reviewed and committed the patch
magyardude:1224697814:2008-10-23T01:50:14.688+0000:1224697814:2008-10-23T01:50:14.688+0000:I just wanted to say that I plugged in the latest build into my app and everything works as expected. Thanks guys!
davsclaus:1224707498:2008-10-23T04:31:38.971+0000:1224707498:2008-10-23T04:31:38.971+0000:Thanks for reporting, and being persistent. It was a hard one to crack as it took some debugging efforts to find the culprit.

Glad it works now. So keep on providing hardball unit tests ;)"
0,CAMEL-900,Improvement,Major,None,1.5.0,"
None
",Closed,Fixed,1.5.0,Willem Jiang,Willem Jiang,0,0,2008-09-14 15:15:43+00:00,2009-02-16 05:51:53+00:00,"To provide a generic way to transform the SOAP message into a plain XML string representation in camel-cxf component, so we could use the below spring configuration to do it.
<convertBodyTo type=""java.lang.String""/>",davsclaus:1234734713:2009-02-16T05:51:53.203+0000:1234734713:2009-02-16T05:51:53.203+0000:Closing all 1.5.0 issues
0,CAMEL-899,Task,Minor,1.4.0,None,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-09-14 11:38:25+00:00,2008-10-23 04:37:13+00:00,"Code such as:



catch (Exception e) {
   throw new RuntimeCamelException(e);
}




should use a wrapper check if the exception is already a RuntimeCamelException. If not then we get nested pointless wrappings. In fact the TraceInterceptor in camel-spring had this and depending on how long your route was you would get N deep wrappings.


The following code should be in camel-core somewhere:



    /**
     * Wraps the caused exception in a RuntimeCamelException if its not already such an exception
     */
    private static RuntimeCamelException wrapRuntimeCamelException(Throwable e) {
        // TODO: Move to camel-core
        if (e instanceof RuntimeCamelException) {
            // dont double wrap if already a RuntimeCamelException
            return (RuntimeCamelException) e;
        } else {
            return new RuntimeCamelException(e);
        }
    }","davsclaus:1221449165:2008-09-15T11:26:05.253+0000:1221449165:2008-09-15T11:26:05.253+0000:camel-core 'DONE*
davsclaus:1224707833:2008-10-23T04:37:13.860+0000:1224707833:2008-10-23T04:37:13.860+0000:Closing 1.5 issues"
0,CAMEL-898,New Feature,Major,1.4.0,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2008-09-14 10:10:18+00:00,2009-11-21 11:57:54+00:00,"Currently camel auto detect based on the body type what kind of JMSMessage to use (byte, map, object, text etc.) but we should have an option for end-users to force a specific type to use.","davsclaus:1237182377:2009-03-16T13:46:17.969+0000:1237182377:2009-03-16T13:46:17.969+0000:Committed revision 754889.

Added new option {{jmsMessageType}}

jmsMessageType	 null	Camel 2.0: Allows you to force to use a specific javax.jms.Message implementation for sending a jms message. Possible values: Bytes, Map, Object, Stream, Text. By default Camel will determine from the IN body type which Jms message type to use. This option allows you to choose it.

See updated wiki for more.
davsclaus:1258775874:2009-11-21T11:57:54.677+0000:1258775874:2009-11-21T11:57:54.677+0000:Closing all 2.0M2 tickets"
0,CAMEL-897,New Feature,Major,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-09-14 08:48:58+00:00,2008-10-23 04:37:13+00:00,"FTPClientConfig allows end-users to configure the FTP (regular ftp) consumer/producer to be configured according to org.apache.commons.net.ftp.FTPClientConfig. This is useable when you need to poll files from servers that doesn't use standard format supported out-of-the-box by commons net.


This can for instance be FTP servers using locale date formats, or setting the timezone etc.",davsclaus:1224707833:2008-10-23T04:37:13.834+0000:1224707833:2008-10-23T04:37:13.834+0000:Closing 1.5 issues
0,CAMEL-896,Improvement,Minor,1.5.0,2.0-M1,"
None
",Closed,Won't Fix,2.0-M1,Claus Ibsen,Claus Ibsen,0,0,2008-09-14 08:29:06+00:00,2009-10-24 11:16:12+00:00,"The Registry only has lookup methods that return null if the bean was not found. Then we need to manually throw exception if the bean was expected.


We need to expose mandatoryLookup methods that will do null check


For instance:



            FTPClientConfig ftpClientConfig = this.getCamelContext().getRegistry().lookup(ref, FTPClientConfig.class);
            if (ftpClientConfig == null) {
                throw new IllegalArgumentException(""Damm can not find it"");
            }





Should just be:



            FTPClientConfig ftpClientConfig = this.getCamelContext().getRegistry().mandatoryLookup(ref, FTPClientConfig.class);",davsclaus:1226574374:2008-11-13T19:06:14.262+0000:1226574374:2008-11-13T19:06:14.262+0000:CamelContextHelper has the mandatory methods and they are provided in the DefaultComponent so no need to expose it on the SPI also
0,CAMEL-895,Improvement,Major,1.5.0,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Claus Ibsen,0,0,2008-09-14 08:25:27+00:00,2009-07-31 06:33:35+00:00,"URI configuration of endpoints sometimes supports being able to reference a bean in the registry.


For instance camel-mina has the codec option. Currently this is speically manually coded in the component factory.


Would be lovely if setProperties(configBean, parameters) would be able to determine this itself and lookup beans in registry.","davsclaus:1226575274:2008-11-13T19:21:14.118+0000:1226575274:2008-11-13T19:21:14.118+0000:Maybe this is a bit to magical.
davsclaus:1227944787:2008-11-29T15:46:27.259+0000:1227944787:2008-11-29T15:46:27.259+0000:Maybe not as magic

We could allow any {{xxxxRef}} URI option to automatic lookup in the registry and then configure the endpoint if it has a xxx setter.
davsclaus:1228535350:2008-12-06T11:49:10.631+0000:1228535350:2008-12-06T11:49:10.631+0000:I had to try a little experiment and got it working very nicely

{code:java}
    /**
     * Sets the reference properties on the given bean
     * <p/>
     * This is convention over configuration, setting all <tt>xxxRef</tt> parameters by looking it up in registry
     * and setting it on the bean if possible.
     */
    protected void setRefProperties(Object bean, Map parameters) throws Exception {
        Iterator it = parameters.keySet().iterator();
        while (it.hasNext()) {
            String key = it.next().toString();
            if (key.endsWith(""Ref"")) {
                String value = (String) parameters.get(key);
                Object ref = lookup(value);
                if (ref != null) {
                    String name = key.substring(0, key.lastIndexOf(""Ref""));
                    boolean hit = IntrospectionSupport.setProperty(getCamelContext().getTypeConverter(), bean, name, ref);
                    if (hit) {
                        LOG.debug(""Configued property: "" + name + "" on bean: "" + bean + "" with value: "" + ref);
                        // must remove as its a valid option and we could configure it
                        it.remove();
                    }
                }
            }
        }
    }
{code}

Now it's possible to get rid of duplicated code in components and offer this convention right out-of-the-box for all URI options, making it much easier to set URI options leveraging the Registry.
Using Spring XML this is very powerful.

For instance all this code can be removed:
{code}
        // lookup idempotent repository in registry if provided
        String ref = getAndRemoveParameter(parameters, ""idempotentRepositoryRef"", String.class);
        if (ref != null) {
            IdempotentRepository repository = mandatoryLookup(ref, IdempotentRepository.class);
            result.setIdempotentRepository(repository);
        }

        // lookup file filter in registry if provided
        ref = getAndRemoveParameter(parameters, ""fileFilterRef"", String.class);
        if (ref != null) {
            FileFilter filter = mandatoryLookup(ref, FileFilter.class);
            result.setFilter(filter);
        }

        // lookup sorter in registry if provided
        ref = getAndRemoveParameter(parameters, ""sorterRef"", String.class);
        if (ref != null) {
            Comparator<File> sorter = mandatoryLookup(ref, Comparator.class);
            result.setFileSorter(sorter);
        }
{code}
davsclaus:1228537951:2008-12-06T12:32:31.352+0000:1228537951:2008-12-06T12:32:31.352+0000:Dooh I had a 2nd though and would like to propose to use the # syntax that Apache CXF uses (AFAIR)

So you can do this:
{code}
file://target/idempotent/?idempotent=true&idempotentRepository=#myRepo&moveNamePrefix=done/
{code}

As the value starts with a # then it's looked up in the registry. I am wondering it it should be a mandatory option so Camel will raise an exception if not found and not possible to set?
davsclaus:1228540298:2008-12-06T13:11:38.268+0000:1228540298:2008-12-06T13:11:38.268+0000:See proposal on nabble:
http://www.nabble.com/-PROPOSAL----Camel-2.0---support---syntax-in-URI-options-td20869957s22882.html
davsclaus:1228554841:2008-12-06T17:14:01.285+0000:1228554841:2008-12-06T17:14:01.285+0000:A patch for the implementation of this feature.
davsclaus:1248993215:2009-07-31T06:33:35.133+0000:1248993215:2009-07-31T06:33:35.133+0000:Closing 2.0m1 tickets"
0,CAMEL-894,Bug,Major,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-09-13 16:16:07+00:00,2008-10-23 04:37:13+00:00,"If the login to the FTP server fails then Camel will at the 2nd pool still try to consume files from the ftp server as it has network connection, but end-user is still not connected. Camel will of course not be able to get anything from the server but you get some stacktrace errors","davsclaus:1221295636:2008-09-13T16:47:16.761+0000:1221295636:2008-09-13T16:47:16.761+0000:Remember to do the same for the SFTP part as well.
davsclaus:1221311464:2008-09-13T21:11:04.019+0000:1221311464:2008-09-13T21:11:04.019+0000:See release notes for impact on upgrading Camel.
davsclaus:1224707833:2008-10-23T04:37:13.816+0000:1224707833:2008-10-23T04:37:13.816+0000:Closing 1.5 issues"
0,CAMEL-893,Bug,Major,1.4.0,1.5.0,"
None
",Closed,Duplicate,1.5.0,Jonathan Anstey,Aaron Mulder,0,0,2008-09-13 13:19:38+00:00,2009-02-16 05:51:53+00:00,"In the XML, you can use <setHeader headerName=""foo"" value=""bar"" /> but that is not valid – it requires a child element like <el>, <groovy>, etc.  It doesn't seem like a child should be required if the ""value"" attribute is used (e.g. if you want to set a header to a constant value).","davsclaus:1221284450:2008-09-13T13:40:50.066+0000:1221284450:2008-09-13T13:40:50.066+0000:Jonathan did some improvements already on this. See CAMEL-746.

<setHeader name=""foo"", value=""bar""/> is @deprecated. You should use a <constant> child. See CAMEL-746 for sample.
janstey:1221284705:2008-09-13T13:45:05.543+0000:1221284705:2008-09-13T13:45:05.543+0000:The value attribute was removed after Camel 1.4 in favor of a constant expression as the child element. In Camel 1.5 you can do this:

{code}
      <setHeader headerName=""foo"">
        <constant>bar</constant>        
      </setHeader>
{code}

It should be alright to close this issue I think.
janstey:1221284745:2008-09-13T13:45:45.350+0000:1221284745:2008-09-13T13:45:45.350+0000:Dang, you're fast Claus! ;)
davsclaus:1234734713:2009-02-16T05:51:53.180+0000:1234734713:2009-02-16T05:51:53.180+0000:Closing all 1.5.0 issues"
0,CAMEL-892,Test,Major,None,1.5.0,"
None
",Closed,Fixed,1.5.0,Willem Jiang,Willem Jiang,0,0,2008-09-12 10:04:50+00:00,2009-02-16 05:51:53+00:00,"Here is the nabble which discusses it.
http://www.nabble.com/Camel%2C-JBI-%2B-JMS-priority-td19390754s22882.html#a19390754",davsclaus:1234734713:2009-02-16T05:51:53.018+0000:1234734713:2009-02-16T05:51:53.018+0000:Closing all 1.5.0 issues
0,CAMEL-891,Task,Minor,None,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-09-12 06:52:59+00:00,2008-10-23 04:37:13+00:00,"I think the API has changed so the unit tests fails when you upgrade to the newer version.


Just created this ticket to remember to upgrade and fix the unit tests.","davsclaus:1221295351:2008-09-13T16:42:31.346+0000:1221295351:2008-09-13T16:42:31.346+0000:They have changed some parts. Now we need to setup users for more strict control.
davsclaus:1224707833:2008-10-23T04:37:13.796+0000:1224707833:2008-10-23T04:37:13.796+0000:Closing 1.5 issues"
0,CAMEL-890,Bug,Major,1.4.0,None,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Conrad Pilloud,0,0,2008-09-10 16:57:34+00:00,2010-07-01 06:11:18+00:00,"It appears the RMI component is not pulling the right name from the URI I defined in my routebuilder.  


In a separate application (the one I'm trying to connect and send data to), I've bound a remote object in the RMI Registry as: ""GDRService"".  (I even wrote a little app to list the RMI registry entries and it does indeed show up as ""GDRService"").


However, my camel route:    .to(""rmi://localhost:1099/GDRService"");


produces this result...
java.rmi.NotBoundException: /GDRService
        at sun.rmi.registry.RegistryImpl.lookup(RegistryImpl.java:106)
        at sun.rmi.registry.RegistryImpl_Skel.dispatch(Unknown Source)
....


I think this is the problem...
According to the code for  RMIEndPoint:
public String getName() {
        String path = uri.getPath();
        if (path == null) 

{
            path = uri.getSchemeSpecificPart();
        }

        return path;
    }


I believe uri.getPath() is returning ""/GDRService"" and not ""GDRService"" and thus, Camel can't find the actual service. 


Here's a longer stacktrace (just the last of the 5 attempts to route via RMI prior to dead-letter drop).


[          AnonymousIoService-2] DeadLetterChannel              ERROR Failed delivery for exchangeId: ID-dmco500084358/
683-1221065595195/0-0. On delivery attempt: 5 caught: java.rmi.NotBoundException: /GDRService
java.rmi.NotBoundException: /GDRService
        at sun.rmi.registry.RegistryImpl.lookup(RegistryImpl.java:106)
        at sun.rmi.registry.RegistryImpl_Skel.dispatch(Unknown Source)
        at sun.rmi.server.UnicastServerRef.oldDispatch(UnicastServerRef.java:386)
        at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:250)
        at sun.rmi.transport.Transport$1.run(Transport.java:159)
        at java.security.AccessController.doPrivileged(Native Method)
        at sun.rmi.transport.Transport.serviceCall(Transport.java:155)
        at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:535)
        at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:790)
        at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:649)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
        at java.lang.Thread.run(Thread.java:619)
        at sun.rmi.transport.StreamRemoteCall.exceptionReceivedFromServer(StreamRemoteCall.java:255)
        at sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:233)
        at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:359)
        at sun.rmi.registry.RegistryImpl_Stub.lookup(Unknown Source)
        at org.apache.camel.component.rmi.RmiRegistryBean.lookupBean(RmiRegistryBean.java:44)
        at org.apache.camel.component.bean.RegistryBean.getBean(RegistryBean.java:61)
        at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:73)
        at org.apache.camel.component.rmi.RmiProducer.process(RmiProducer.java:46)
        at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncPro
essorTypeConverter.java:43)
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:75)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57)
        at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:155)
        at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:91)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:101)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:85)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57)
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:39)
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41)
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:66)
        at org.apache.camel.component.mina.MinaConsumer$ReceiveHandler.messageReceived(MinaConsumer.java:95)
        at org.apache.mina.common.support.AbstractIoFilterChain$TailFilter.messageReceived(AbstractIoFilterChain.java:5
0)
        at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)
        at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)
        at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:
48)
        at org.apache.mina.filter.codec.support.SimpleProtocolDecoderOutput.flush(SimpleProtocolDecoderOutput.java:58)
        at org.apache.mina.filter.codec.ProtocolCodecFilter.messageReceived(ProtocolCodecFilter.java:180)
        at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)
        at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)
        at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:
48)
        at org.apache.mina.filter.executor.ExecutorFilter.processEvent(ExecutorFilter.java:220)
        at org.apache.mina.filter.executor.ExecutorFilter$ProcessEventsRunnable.run(ExecutorFilter.java:264)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
        at org.apache.mina.util.NamePreservingRunnable.run(NamePreservingRunnable.java:51)
        at java.lang.Thread.run(Thread.java:619)
[          AnonymousIoService-2] DefaultListableBeanFactory     DEBUG Creating instance of bean 'org.apache.camel.compo
ent.log.LogComponent'
[          AnonymousIoService-2] DefaultListableBeanFactory     DEBUG Finished creating instance of bean 'org.apache.ca
el.component.log.LogComponent'
[          AnonymousIoService-2] DeadLetterChannel              ERROR Exchange[BodyType:String, Body:<?xml version=""1.0............","davsclaus:1221122229:2008-09-11T16:37:09.389+0000:1221122229:2008-09-11T16:37:09.389+0000:Conrad, thanks for the report. I have commit a fix based on your suggestion.

Can you test it? You can try the latest 1.5-SNAPSHOT version.

See this page how to get the SNAPSHOT:
http://activemq.apache.org/camel/download.html
conradpilloud:1221127820:2008-09-11T18:10:20.638+0000:1221127820:2008-09-11T18:10:20.638+0000:Claus,
I tried it and got the same result.  I'll attach log output showing I'm using the 1.5-SNAPSHOT and the resulting error.
conradpilloud:1221127960:2008-09-11T18:12:40.049+0000:1221127960:2008-09-11T18:12:40.049+0000:Log file showing error in 1.5-SNAPSHOT
davsclaus:1221128298:2008-09-11T18:18:18.317+0000:1221128298:2008-09-11T18:18:18.317+0000:Conrad. You are very fast. The Apache infrastructure is building the SNAPSHOTS on a regular interval.

I think you should wait some more to be sure the snapshot is with my latest fix. Could you try in 3-4 hours or maybe tomorrow, to really be sure.

If we still have an error then maybe a little test app from you can help me dig into it and fix it. You are also of course welcome to checkout the camel source and build the camel-rmi component and install it in your local repo. Then you have the changes immediately. Then you can also try to fix it yourself. And if you find a good solution, you can create a patch and submit to this ticket.

http://activemq.apache.org/camel/building.html
http://activemq.apache.org/camel/contributing.html

davsclaus:1221128463:2008-09-11T18:21:03.911+0000:1221128463:2008-09-11T18:21:03.911+0000:I have attached the camel-rmi.jar that is genered on my computer with the fix. You can install/copy this .jar in your local m2 repo.
conradpilloud:1221131145:2008-09-11T19:05:45.446+0000:1221131145:2008-09-11T19:05:45.446+0000:Super--that works!! (well, at least I've moved on to my next problem...  it looks like I've got to include a .policy file somewhere.
Cheers
Conrad
[          AnonymousIoService-2] DeadLetterChannel              ERROR Failed delivery for exchangeId: ID-dmco500084358/2062-1221159175926/0-0. On delivery attempt: 0 caught: java.rmi.UnmarshalException: error unmarshalling return; nested exception is: 
	java.lang.ClassNotFoundException: com.foo.gdr.GDRService (no security manager: RMI class loader disabled)
java.rmi.UnmarshalException: error unmarshalling return; nested exception is: 
	java.lang.ClassNotFoundException: com.foo.gdr.GDRService (no security manager: RMI class loader disabled)
davsclaus:1221172584:2008-09-12T06:36:24.500+0000:1221172584:2008-09-12T06:36:24.500+0000:Glad this solved the first step.

The little snippet of stacktrace shown reveals that its something with a class not found. ClassNotFoundException.

Are you sure that com.foo.gdr.GDRService.class is included in the classpath on both the server and client side?
conradpilloud:1221203763:2008-09-12T15:16:03.255+0000:1221203763:2008-09-12T15:16:03.255+0000:Actually, I wanted my router to be as free as possible from 'knowing' the contents of the messages.  RMI will support downloading the class from the RMI server to the client when a SecurityManager exists with proper policy--I tried that, but couldn't get a SecurityManager to work that didn't break a lot of other things in Camel & Spring.  So I decided to include the com.foo.gdr.GDRService.class in the client (Camel) after all.

FYI, other errors I was having was due to Camel MINA 'sync' option default changing from false to true in Camel 1.5--since my TCP inbound endpoint is receive only, I had to explicitly say sync=false in my MINA URI for Camel 1.5.  That was a surprise, but easy to overcome.

Life is good.  Thanks for the super-fast fix.  Cheers--Conrad
davsclaus:1221204578:2008-09-12T15:29:38.682+0000:1221204578:2008-09-12T15:29:38.682+0000:Conrad. Glad its working now.

And thanks for letting us know about the mina change. It was however documented in the release note
http://activemq.apache.org/camel/camel-150-release.html

However 1.5 is still work in progress.
davsclaus:1221208073:2008-09-12T16:27:53.102+0000:1221208073:2008-09-12T16:27:53.102+0000:BTW: Maybe Java WebStart is better at distributing software to clients, instead of RMI server with downloaded .jars.
davsclaus:1234734712:2009-02-16T05:51:52.987+0000:1234734712:2009-02-16T05:51:52.987+0000:Closing all 1.5.0 issues"
0,CAMEL-889,Improvement,Major,None,None,"
None
",Closed,Fixed,1.5.0,Jonathan Anstey,James Strachan,0,0,2008-09-10 14:20:14+00:00,2009-02-16 05:51:52+00:00,"you can now use a common descriptor rather than cutting and pasting stuff among 2 different descriptors which is a PITA.


e.g. see the ActiveMQ descriptors...
https://svn.apache.org/repos/asf/activemq/trunk/assembly/src/main/descriptors/


in particular the common-bin.xml
https://svn.apache.org/repos/asf/activemq/trunk/assembly/src/main/descriptors/common-bin.xml


we should do the same to Camel's descriptors...
https://svn.apache.org/repos/asf/activemq/camel/trunk/apache-camel/src/main/descriptors/


Jon - fancy taking a stab?","janstey:1221029143:2008-09-10T14:45:43.071+0000:1221029143:2008-09-10T14:45:43.071+0000:Oh nice! I didn't know you could ref descriptors like that. I'll take a look at this.
janstey:1221039902:2008-09-10T17:45:02.366+0000:1221039902:2008-09-10T17:45:02.366+0000:Fixed in revision 693908.
davsclaus:1234734712:2009-02-16T05:51:52.962+0000:1234734712:2009-02-16T05:51:52.962+0000:Closing all 1.5.0 issues"
0,CAMEL-888,New Feature,Major,None,None,"
None
",Closed,Fixed,2.0-M1,James Strachan,James Strachan,0,0,2008-09-10 14:16:40+00:00,2009-07-31 06:33:35+00:00,No Desc,"jstrachan:1232018205:2009-01-15T19:16:45.487+0000:1232018205:2009-01-15T19:16:45.487+0000:some progress made finally after being stuck in the weeds on 

* implicit views in Jersey not really working with explicit @GET methods returning JAXB objects for XML/JSON representations so switching tack to explicit views
* hit the [horrid surefire bug|http://jira.codehaus.org/browse/SUREFIRE-459] which took ages to figure out why things worked fine in _'mvn jetty:run'_ but not in _'mvn test'_ 



jstrachan:1235009261:2009-02-19T10:07:41.879+0000:1235009261:2009-02-19T10:07:41.879+0000:This is documented here: http://cwiki.apache.org/CAMEL/web-console.html


davsclaus:1248993215:2009-07-31T06:33:35.098+0000:1248993215:2009-07-31T06:33:35.098+0000:Closing 2.0m1 tickets"
0,CAMEL-857,Bug,Minor,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-08-27 05:20:25+00:00,2008-10-23 04:37:13+00:00,"The unit test from CAMEL-794 demonstrates a few issues with the DLC in Camel



the maximum redelivery is not reached - eg. setting it to 2 will only perform 1 normal attempt + 1 redelivery, and not as expected 2 redeliveries
when the exchanged could not be redelivered at all then the redeliverycounter has already been incremented and thus is off by +1","davsclaus:1219788720:2008-08-27T06:12:00.604+0000:1219788720:2008-08-27T06:12:00.604+0000:Okay is fixing this now.

Camel will now as before do by default: 1 regular attempt + 5 re-deliveries = a total of 6 times to process an exchange before moving to the dead letter channel.
Camel does this in 1.4 or older, just the counter was wrong when you was reading it from the dead letter channel after it was moved there. 
davsclaus:1219788752:2008-08-27T06:12:32.481+0000:1219788752:2008-08-27T06:12:32.481+0000:Also the redelivery boolean flag was always TRUE even though there was no attempt of redelivery. This is also fixed now.
davsclaus:1224707833:2008-10-23T04:37:13.703+0000:1224707833:2008-10-23T04:37:13.703+0000:Closing 1.5 issues"
0,CAMEL-856,Bug,Trivial,1.4.0,None,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Carl Allain,0,1,2008-08-27 03:55:11+00:00,2009-02-16 05:51:51+00:00,"In DefaultCamelContext, the system property should read camel.trace and not canel.trace (I guess from the project name which is Camel and not Canel).


    public boolean getTrace() {
        final Boolean value = getTracing();
        if (value != null) 

{
            return value;
        }

 else 

{
            return SystemHelper.isSystemProperty(""canel.trace"");
        }

    }","davsclaus:1219780874:2008-08-27T04:01:14.884+0000:1219780874:2008-08-27T04:01:14.884+0000:Thanks Carl for reporting this. It was already fixed in 1.5 ;)
davsclaus:1234734711:2009-02-16T05:51:51.638+0000:1234734711:2009-02-16T05:51:51.638+0000:Closing all 1.5.0 issues"
0,CAMEL-855,New Feature,Major,None,1.5.0,"
None
",Closed,Fixed,1.5.0,Willem Jiang,Jonathan Anstey,0,0,2008-08-27 00:48:30+00:00,2009-02-16 05:51:51+00:00,I did up some Eclipse templates for some of the Camel EIPs (both Java and XML). Let me know what you think.,"janstey:1219769436:2008-08-27T00:50:36.777+0000:1219769436:2008-08-27T00:50:36.777+0000:Here are the templates added into the build.

To add them to your workspace, run this:

{code}
mvn -Psetup.eclipse -Declipse.workspace.dir=/path/to/your/workspace
{code}

janstey:1219769493:2008-08-27T00:51:33.031+0000:1219769493:2008-08-27T00:51:33.031+0000:Java templates if you want to try them out without building Camel.
janstey:1219769520:2008-08-27T00:52:00.400+0000:1219769520:2008-08-27T00:52:00.400+0000:XML templates if you want to try them out without building Camel.
janstey:1219771119:2008-08-27T01:18:39.576+0000:1219771119:2008-08-27T01:18:39.576+0000:Also added a blog post about this here http://janstey.blogspot.com/2008/08/eclipse-templates-for-apache-camel.html
njiang:1219879676:2008-08-28T07:27:56.628+0000:1219879676:2008-08-28T07:27:56.628+0000:Applied patch with thanks to Jonathan. 

Jonathan, Could you also update the wiki page of apache camel ?


jstrachan:1219880541:2008-08-28T07:42:21.016+0000:1219880541:2008-08-28T07:42:21.016+0000:BTW I wonder if we should encourage the use of 

{code}
when().xpath(""/foo"")
{code}

rather than
{code}
when(header....)
{code}

as the when(). is typically more feature rich and has better IDE smart completion
janstey:1219895452:2008-08-28T11:50:52.014+0000:1219895452:2008-08-28T11:50:52.014+0000:James, agree with your comment. Having when(header(...)) or when(xpath(...)) is more intuitive and IMO would match the XML template more closely.

Willem, I'll update the build instructions with this info.
janstey:1219896939:2008-08-28T12:15:39.646+0000:1219896939:2008-08-28T12:15:39.646+0000:Updated notes here http://cwiki.apache.org/confluence/display/CAMEL/Building
janstey:1220600290:2008-09-05T15:38:10.985+0000:1220600290:2008-09-05T15:38:10.985+0000:I just looked back at my comment here and realized I totally misread James' comment! :) James mentioned that this

{code:language=java}
.when().xpath(""$foo = 'bar'"").to(""mock:x"")
{code}

would be better than this

{code:language=java}
.when(header(""foo"").isEqualTo(""bar"")).to(""mock:x"")
{code}

The xpath one IS actually closer to the XML template (unlike I mentioned before...). I'll attach a patch for this shortly.
janstey:1220601054:2008-09-05T15:50:54.767+0000:1220601054:2008-09-05T15:50:54.767+0000:Attaching a patch to change the when syntax a bit.
njiang:1220638253:2008-09-06T02:10:53.131+0000:1220638253:2008-09-06T02:10:53.131+0000:These two patches were applied into the svn repository.
davsclaus:1234734711:2009-02-16T05:51:51.610+0000:1234734711:2009-02-16T05:51:51.610+0000:Closing all 1.5.0 issues"
0,CAMEL-854,Task,Minor,1.5.0,1.5.0,"
None
",Closed,Won't Fix,1.5.0,Hadrian Zbarcea,Hadrian Zbarcea,0,0,2008-08-27 00:09:00+00:00,2009-02-16 05:51:51+00:00,No Desc,"hadrian:1222265897:2008-09-24T22:18:17.970+0000:1222265897:2008-09-24T22:18:17.970+0000:Not really sure how useful this would be as the component itself uses only basic j2se (javax.naming).

Apache DS is only used for tests and spring-ldap would only show how to do different tests, using spring, which I am not sure if it should be in Camel's scope.  I will move it to 2.0 for now, but if other people think this is not in the scope, we can close it later with ""won't fix"".
davsclaus:1222293191:2008-09-25T05:53:11.884+0000:1222293191:2008-09-25T05:53:11.884+0000:+1 to close it as wont fix
hadrian:1222294126:2008-09-25T06:08:46.097+0000:1222294126:2008-09-25T06:08:46.097+0000:Out of scope.  Showing an alternate way of testing the ldap component using spring-ldap would not bring any value to camel.
davsclaus:1234734711:2009-02-16T05:51:51.589+0000:1234734711:2009-02-16T05:51:51.589+0000:Closing all 1.5.0 issues"
0,CAMEL-853,New Feature,Major,None,None,"
None
",Closed,Fixed,1.5.0,Hadrian Zbarcea,Hadrian Zbarcea,0,0,2008-08-27 00:06:04+00:00,2009-02-16 05:51:51+00:00,Perform searches in ldap servers.,"hadrian:1219766858:2008-08-27T00:07:38.389+0000:1219766858:2008-08-27T00:07:38.389+0000:Committed, awaiting wiki changes.
davsclaus:1219781462:2008-08-27T04:11:02.977+0000:1219781462:2008-08-27T04:11:02.977+0000:Hadrian, great work.

However the wiki sample documentation is stating SQL - could be because of copy from the SQL component. Could you double check the wiki documentation is correct. Especially the samples part.

I added the new component to the book page as well.
http://cwiki.apache.org/confluence/display/CAMEL/Book+Component+Appendix
hadrian:1219810887:2008-08-27T12:21:27.870+0000:1219810887:2008-08-27T12:21:27.870+0000:Doh, thanks for spotting this :).  Yeah, I didn't look close enough at comments, it was a cut'n'paste issue.

I also made one more change.  the base attribute is no longer mandatory, but optional and the default is ""ou=system"".  I doubt anybody will use the default, but it makes things simpler for tests.
davsclaus:1234734711:2009-02-16T05:51:51.552+0000:1234734711:2009-02-16T05:51:51.552+0000:Closing all 1.5.0 issues"
0,CAMEL-852,Test,Minor,None,1.5.0,"
None
",Closed,Fixed,1.5.0,Jonathan Anstey,Jonathan Anstey,0,0,2008-08-26 12:14:41+00:00,2009-02-16 05:51:51+00:00,"Failing with this message
org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: file://target/exclusiveread/slowfile?consumer.delay=500&consumer.exclusiveRead=true due to: There are 1 parameters that couldn't be set on the endpoint consumer. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown consumer parameters=[

{exclusiveRead=true}

]
at org.apache.camel.impl.ScheduledPollEndpoint.configureConsumer(ScheduledPollEndpoint.java:65)
at org.apache.camel.component.file.FileEndpoint.createConsumer(FileEndpoint.java:93)


Simple fix: exclusiveRead should be changed to exclusiveReadLock.","janstey:1219724111:2008-08-26T12:15:11.827+0000:1219724111:2008-08-26T12:15:11.827+0000:With ASF license....
davsclaus:1219748615:2008-08-26T19:03:35.225+0000:1219748615:2008-08-26T19:03:35.225+0000:Thanks jon for spotting this. Applied the patch.
davsclaus:1234734711:2009-02-16T05:51:51.530+0000:1234734711:2009-02-16T05:51:51.530+0000:Closing all 1.5.0 issues"
0,CAMEL-851,Bug,Major,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-08-26 11:43:31+00:00,2008-10-23 04:37:13+00:00,"camel:dot doesn't support loading spring .xml files using the configuration option to the plugin. Currently it loads from META-INF/spring/*.xml


The other two: run and embedded has this feature.","davsclaus:1220233905:2008-09-01T09:51:45.082+0000:1220233905:2008-09-01T09:51:45.082+0000:Now it supports the applicationContextUri or fileApplicationContextUri configuration as well.
davsclaus:1224707833:2008-10-23T04:37:13.685+0000:1224707833:2008-10-23T04:37:13.685+0000:Closing 1.5 issues"
0,CAMEL-850,Improvement,Major,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Drazen Kozic,0,0,2008-08-26 08:58:29+00:00,2009-02-16 05:51:51+00:00,camel-mina should preserve headers.,"davsclaus:1219727091:2008-08-26T13:04:51.588+0000:1219727091:2008-08-26T13:04:51.588+0000:See nabble:
http://www.nabble.com/mina-tcp-client-problem-td19105767s22882.html
davsclaus:1234734711:2009-02-16T05:51:51.510+0000:1234734711:2009-02-16T05:51:51.510+0000:Closing all 1.5.0 issues"
0,CAMEL-849,Improvement,Major,1.4.0,2.0-M1,"
None
",Closed,Duplicate,2.0-M1,Claus Ibsen,Claus Ibsen,0,0,2008-08-26 05:23:53+00:00,2009-10-24 11:16:12+00:00,"The camel-mina component and the endpoint should be spring xml firendly for configuration.


So you can configure the endpoint in the spring xml as a bean and use it in the routing. The configuration in spring should support IDE property completion so can easily see which properties this endpoint supports and set them using simple text values.",
0,CAMEL-848,Improvement,Major,None,1.5.0,"
None
",Closed,Fixed,1.5.0,Willem Jiang,Willem Jiang,0,0,2008-08-26 03:28:14+00:00,2009-02-16 05:51:51+00:00,To avoid the the consumer's parameters configuration spelling error.,davsclaus:1234734711:2009-02-16T05:51:51.476+0000:1234734711:2009-02-16T05:51:51.476+0000:Closing all 1.5.0 issues
0,CAMEL-847,Improvement,Major,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-08-25 11:03:11+00:00,2008-10-23 04:37:13+00:00,"Currently the camel-mina component silently ignores exchanges that is not out capable even though its configured for sync=true (InOut)


What it does now is setting the sync option itself depending on the exchange type.","davsclaus:1219633439:2008-08-25T11:03:59.800+0000:1219633439:2008-08-25T11:03:59.800+0000:Hmm the current behaviour will probably break old versions where end-users have forgotten to add sync=true. If we go forward with this we should write in the release notes that people should set the sync mode explicit.
davsclaus:1219634544:2008-08-25T11:22:24.373+0000:1219634544:2008-08-25T11:22:24.373+0000:http://www.nabble.com/mina-tcp-client-problem-td19105767s22882.html
davsclaus:1219634708:2008-08-25T11:25:08.159+0000:1219634708:2008-08-25T11:25:08.159+0000:Change of tactic

I think camel-mina should be MEP agnostic and only use the sync option as:

*MinaProducer*
- if false, just send data and don't wait for response
- if true, send data and wait for response. set response on either IN or OUT depending on the MEP

*MinaConsumer*
- if false, just recieve data and don't send a response
- if true, recieve data and send the response from either IN or OUT depending on the MEP


davsclaus:1219654176:2008-08-25T16:49:36.947+0000:1219654176:2008-08-25T16:49:36.947+0000:Also it should be more spring friendly configurable using setters/getters style so we have IDE completion in spring xml files.
davsclaus:1219696758:2008-08-26T04:39:18.640+0000:1219696758:2008-08-26T04:39:18.640+0000:sync should be default true as its confusing why camel doesn't wait for a response when calling a remote server.
davsclaus:1219700417:2008-08-26T05:40:17.316+0000:1219700417:2008-08-26T05:40:17.316+0000:Default behavior changed

In Camel 1.5 the sync option has changed its default value from false to true, as we felt it was confusing for end-users when they used Mina to call remote servers and Camel wouldn't wait for the response.
davsclaus:1224707833:2008-10-23T04:37:13.662+0000:1224707833:2008-10-23T04:37:13.662+0000:Closing 1.5 issues"
0,CAMEL-846,Improvement,Major,None,1.5.0,"
None
",Closed,Fixed,1.5.0,Willem Jiang,Willem Jiang,0,0,2008-08-25 03:01:39+00:00,2009-02-16 05:51:51+00:00,"In CamelTarget , we should support to send the response to the dynamical message channel by checking the return address in then message header.","njiang:1219627099:2008-08-25T09:18:19.616+0000:1219627099:2008-08-25T09:18:19.616+0000:According to  the Spring Integration Reference Manual,  the header's RETURN_ADDRESS value just is the fall back. 

""This is consistent across both configuration options (namespace and annotations) in that the the endpoint's output channel will be used if available, and the message header's RETURN_ADDRESS value will be the fallback. ""

My last commit just makes sure this.
davsclaus:1234734711:2009-02-16T05:51:51.455+0000:1234734711:2009-02-16T05:51:51.455+0000:Closing all 1.5.0 issues"
0,CAMEL-845,Improvement,Minor,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Drazen Kozic,0,1,2008-08-23 19:24:00+00:00,2009-02-16 05:51:51+00:00,"It would be nice if timer component add some header with System.currentTimeMillis() value.
I suggest name of header timer.currentTimeMillis.
Adding header value should be optional. Uri parameter currentTimeMillis=true/false should regulate setting this header value.


This header value would be very useful for debugging purposes and other purposes (generating simple unique values).


Also, there is need for formating this value: just simple long value or String formated with ISO datetime pattern (yyyy-MM-dd hh:mm:ss)","davsclaus:1219654308:2008-08-25T16:51:48.615+0000:1219654308:2008-08-25T16:51:48.615+0000:Document the headers that camel-timer adds to the exchange in the wiki

There are already 3 headers. Add the new current time millis as suggested.
davsclaus:1219658529:2008-08-25T18:02:09.325+0000:1219658529:2008-08-25T18:02:09.325+0000:timer component done.

The fired time is added as a exchange property as the others. See the wiki documentation.
org.apache.camel.timer.firedtime 	 Date 	 Camel 1.5: the current time when the consumer fired
davsclaus:1219658631:2008-08-25T18:03:51.287+0000:1219658631:2008-08-25T18:03:51.287+0000:the quartz component already has all this info straight from quartz. Just need to add it to the wiki.

The fire time:
 map.put(""fireTime"", jobExecutionContext.getFireTime());
davsclaus:1219661680:2008-08-25T18:54:40.402+0000:1219661680:2008-08-25T18:54:40.402+0000:Added wiki documentation for camel-quartz as it already have the fire time as a header (fireTime) on the message object itself. See the wiki documentation.
davsclaus:1234734711:2009-02-16T05:51:51.420+0000:1234734711:2009-02-16T05:51:51.420+0000:Closing all 1.5.0 issues"
0,CAMEL-844,Improvement,Major,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-08-23 15:37:08+00:00,2008-10-23 04:37:13+00:00,"The bean language is fantastic, but using the java DSL routing without the spring beans is a bit painful as you need to register the beans in the registry before you can use it.


Sometimes you just want it to invoke a method on pojo class so we need to support this style also:



bean(MyPojoClass.class, ""helloworld"")




Where MyPojoClass will be created on the fly and invoking the helloworld method.


Also if the class is already created we can use a reference to it:



bean(myInstance, ""helloworld"")","davsclaus:1219477329:2008-08-23T15:42:09.294+0000:1219477329:2008-08-23T15:42:09.294+0000:Also the BeanProcessors debug logging isn't useful:

 DEBUG BeanProcessor                  - >>>> invoking method for: Exchange[Message: org.apache.camel.example.reportincident.InputReportIncident@1f78ef1]

It doesn't output what method or pojo or whatever it invokes.
davsclaus:1219478236:2008-08-23T15:57:16.668+0000:1219478236:2008-08-23T15:57:16.668+0000:Commited code changes. Need to update wiki
davsclaus:1219643672:2008-08-25T13:54:32.774+0000:1219643672:2008-08-25T13:54:32.774+0000:Added wiki documentation to Bean Language
davsclaus:1224707833:2008-10-23T04:37:13.633+0000:1224707833:2008-10-23T04:37:13.633+0000:Closing 1.5 issues"
0,CAMEL-843,Task,Minor,"1.3.0, 1.4.0, 1.5.0",1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-08-22 15:49:24+00:00,2008-10-23 04:37:13+00:00,"We are running the old 1.5.x version. 1.6 has been out for a while but would love to wait for the first point release.


1.6.1RC2 has just been released so hopefully James House will release the GA this fall.","davsclaus:1223863008:2008-10-13T09:56:48.741+0000:1223863008:2008-10-13T09:56:48.741+0000:Quartz 1.6.1 has been released. Waiting for it in maven repo
davsclaus:1224074013:2008-10-15T20:33:33.505+0000:1224074013:2008-10-15T20:33:33.505+0000:Is in servicemix repo:

<?xml version=""1.0"" encoding=""UTF-8""?><project>
  <modelVersion>4.0.0</modelVersion>
  <groupId>opensymphony</groupId>
  <artifactId>quartz</artifactId>
  <version>1.6.1</version>
  <description>POM was created from install:install-file</description>
</project>
davsclaus:1224707833:2008-10-23T04:37:13.616+0000:1224707833:2008-10-23T04:37:13.616+0000:Closing 1.5 issues"
0,CAMEL-842,Bug,Major,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Hadrian Zbarcea,Hadrian Zbarcea,0,0,2008-08-21 15:58:41+00:00,2009-02-16 05:51:51+00:00,"See following thread for more details.


http://www.nabble.com/Handling-JBI-faults-td19090487s22882.html#a19090487",davsclaus:1234734711:2009-02-16T05:51:51.387+0000:1234734711:2009-02-16T05:51:51.387+0000:Closing all 1.5.0 issues
0,CAMEL-841,Task,Minor,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Willem Jiang,Claus Ibsen,0,0,2008-08-21 12:59:34+00:00,2008-10-23 04:40:40+00:00,"Spring just released M6 and I know they have changed quite a lot, at least impacting end-users. Maybe something needs to be changed in our component as well.",
0,CAMEL-840,Improvement,Major,1.5.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-08-21 10:56:14+00:00,2008-10-23 04:37:13+00:00,"If you have overloaded setter methods for a given property Camel can only use the first found.



    private Expression expression;

    public void setExpression(Expression expression) {
        this.expression = expression;
    }

    public void setExpression(String fileLanguageExpression) {
        this.expression = FileLanguage.file(fileLanguageExpression);
    }




isn't supported. As Camel will try to convert the type before finding the 2nd setter method with the correct type.


Maybe the solution is to improve the code so it finds the String setter if the input is a string property instead of the Expression object, ie find the setter with a 100% match and use it, if not then fallback to type convertions.","davsclaus:1219289809:2008-08-21T11:36:49.688+0000:1219289809:2008-08-21T11:36:49.688+0000:Okay got a much better solution now with better end-user feedback

{code}
java.lang.IllegalArgumentException: Could not find a suitable setter for property: expression as there isn't a setter method with same type: java.lang.String nor type convertion possbile: Could not convert ""${id}.bak"" to org.apache.camel.Expression
{code}

Would be thrown in case there isn't a setExpression(String stringType) or no type converters from Expression -> String.
Adding the setExpression(String stringType) will let Camel pick this overloaded method instead and use it.
davsclaus:1219294308:2008-08-21T12:51:48.964+0000:1219294308:2008-08-21T12:51:48.964+0000:rev 687732
davsclaus:1224707833:2008-10-23T04:37:13.558+0000:1224707833:2008-10-23T04:37:13.558+0000:Closing 1.5 issues"
0,CAMEL-839,Improvement,Minor,1.5.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-08-21 09:43:47+00:00,2008-10-23 04:37:12+00:00,"An end-user had a route that didn't work and had trouble figure out the problem. Could be the fact that the type converted failed for some reason and no trace in his log.


We should add some DEBUG logging to the type converter stuff what it does, especially in cases where it cant convert.
http://www.nabble.com/Marshaling-jdbc-output-with-xstream-td19065283s22882.html


Notice we have another ticket about type converters should fail instead of returning null etc.","davsclaus:1219452924:2008-08-23T08:55:24.544+0000:1219452924:2008-08-23T08:55:24.544+0000:Added a debug for no type converter found.
davsclaus:1219462810:2008-08-23T11:40:10.625+0000:1219462810:2008-08-23T11:40:10.625+0000:Changed to log a WARN for non camel internal convertions
davsclaus:1224707832:2008-10-23T04:37:12.755+0000:1224707832:2008-10-23T04:37:12.755+0000:Closing 1.5 issues"
0,CAMEL-838,New Feature,Major,None,None,"
None
",Closed,Won't Fix,Future,Jonathan Anstey,James Strachan,0,0,2008-08-21 09:16:21+00:00,2009-09-21 11:42:04+00:00,"http://commons.apache.org/transaction/file/index.html


to get transactional processing of files","davsclaus:1219282193:2008-08-21T09:29:53.990+0000:1219282193:2008-08-21T09:29:53.990+0000:In what component should we this?
camel-core.jar should be kept to a bare minimum of its .jar dependencies as of today
jstrachan:1219282549:2008-08-21T09:35:49.029+0000:1219282549:2008-08-21T09:35:49.029+0000:agreed - maybe a separate component? 
janstey:1219299278:2008-08-21T14:14:38.761+0000:1219299278:2008-08-21T14:14:38.761+0000:This looks neat! I'm gonna take a look into it.
davsclaus:1220498777:2008-09-04T11:26:17.964+0000:1220498777:2008-09-04T11:26:17.964+0000:Moving to 2.0
davsclaus:1237804702:2009-03-23T18:38:22.849+0000:1237804702:2009-03-23T18:38:22.849+0000:I think Commons TX is a ""dead"" project.

I dont think we should work on integrating it with Camel. So lets close this ticket?

Jon, what do you say?
jstrachan:1237805009:2009-03-23T18:43:29.860+0000:1237805009:2009-03-23T18:43:29.860+0000:Wonder if there's an OSS project out there doing transactions on files?
janstey:1237872584:2009-03-24T13:29:44.218+0000:1237872584:2009-03-24T13:29:44.218+0000:Yeah, it looks a bit dead to me too... last release was in 2007 and last issue resolved was also in 2007 :) 

Though JBoss uses it here

http://www.jboss.org/jbosstm/fileio/

I wonder if there is still value...
davsclaus:1253486430:2009-09-21T06:40:30.037+0000:1253486430:2009-09-21T06:40:30.037+0000:Hmm I think we should ditch this. Commons File Transaction has not had a commit in 18 months.

I for sure would not go in production with this stuff that wasnt anyone around to keep supported.
janstey:1253504511:2009-09-21T11:41:51.355+0000:1253504511:2009-09-21T11:41:51.355+0000:Yeah, and looking at the actual source of the project... no commits have been made in over 2 years :S

I agree Claus, we should close this one."
0,CAMEL-837,Sub-task,Major,1.5.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-08-21 07:36:02+00:00,2008-10-23 04:37:12+00:00,"Hadrian implemented the parent ticket - thanks a lot 


What we need is also to document it in the wiki at:
http://activemq.apache.org/camel/type-converter.html","davsclaus:1220402941:2008-09-03T08:49:01.908+0000:1220402941:2008-09-03T08:49:01.908+0000:updated wiki
davsclaus:1224707832:2008-10-23T04:37:12.738+0000:1224707832:2008-10-23T04:37:12.738+0000:Closing 1.5 issues"
0,CAMEL-836,Improvement,Major,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Unassigned,Willem Jiang,0,0,2008-08-19 11:24:46+00:00,2009-02-16 05:51:51+00:00,"We should support to setup the same route with Spring xml like the below DSL 
   from(""direct:parallel"")
  .multicast(new BodyOutAggregatingStrategy(), true)
  .setThreadPoolExecutor(yourExecutor)
  .to(""direct:x"", ""direct:y"", ""direct:z"");","njiang:1219208267:2008-08-20T12:57:47.076+0000:1219208267:2008-08-20T12:57:47.076+0000:Please check out spring xml [1] for example .
[1] https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-spring/src/test/resources/org/apache/camel/spring/processor/multicastAggregator.xml
davsclaus:1234734711:2009-02-16T05:51:51.367+0000:1234734711:2009-02-16T05:51:51.367+0000:Closing all 1.5.0 issues"
0,CAMEL-835,Improvement,Major,None,1.5.0,"
None
",Closed,Fixed,1.5.0,Willem Jiang,Willem Jiang,0,0,2008-08-19 01:36:48+00:00,2009-02-16 05:51:51+00:00,"CXF 2.1.2 is released, so we can upgrade CXF version in Camel.",davsclaus:1234734711:2009-02-16T05:51:51.348+0000:1234734711:2009-02-16T05:51:51.348+0000:Closing all 1.5.0 issues
0,CAMEL-834,Bug,Major,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Aleksandar Vidakovic,0,0,2008-08-18 13:09:07+00:00,2009-02-16 05:51:51+00:00,"When this route 



    <camel:route>
        <camel:from uri=""sftp://someuser@hostname/path/to/directory/?password=secret&amp;directory=true&amp;binary=true&amp;consumer.useFixedDelay=false&amp;consumer.setNames=true&amp;consumer.recursive=false"" />
        <camel:to uri=""file:///C:/camel/output/"" />
    </camel:route>




is configured the files in the remote directory are download, but subsequent calls of the method ""pollDir"" result in this exception:



[ Thread: 1 RemoteFileComponent] SftpConsumer                   WARN  Caught SftpException:2: No such file
[ Thread: 1 RemoteFileComponent] SftpConsumer                   WARN  Doing nothing for now, need to determine an appropriate action
[ Thread: 1 RemoteFileComponent] ScheduledPollConsumer          WARN  An exception occured while polling: Endpoint[sftp://someuser@hostname/path/to/directory/?password=secret&amp;directory=true&amp;binary=true&amp;consumer.useFixedDelay=false&amp;consumer.setNames=true&amp;consumer.recursive=false]: No such file 2: No such file




As you can see the slash is definitely in the configured route. If I check for the missing slash and add it to the dir variable (line 115 in SftpConsumer) then the consumer works:



    	if(!dir.startsWith(""/"")) {
    		dir = ""/"" + dir;
    	}




Didn't have the time to have a closer look. The root cause of the missing slash is somewhere else.","davsclaus:1219052337:2008-08-18T17:38:57.192+0000:1219052337:2008-08-18T17:38:57.192+0000:Hi

Thanks for reporting this. Do you mind trying 1.5-SNAPSHOT as the camel-ftp component has been refactored and improved quite a bit.

See the download page how to setup the maven repo to get snapshot releases
http://activemq.apache.org/camel/download.html
spaddo:1219056026:2008-08-18T18:40:26.349+0000:1219056026:2008-08-18T18:40:26.349+0000:Actually I did test it against the latest Maven snapshots. Forgot to tell that. The problem with those was that the download didn't even start. For the moment I can't tell why.
davsclaus:1219089317:2008-08-19T03:55:17.599+0000:1219089317:2008-08-19T03:55:17.599+0000:Hmm strange.

You can enable {{TRACE}} logging at {{org.apache.camel}} and then the logging might hint what could be wrong. 


davsclaus:1219090453:2008-08-19T04:14:13.321+0000:1219090453:2008-08-19T04:14:13.321+0000:Yes the TRACE logging should output what directory it tries to poll

        if (log.isTraceEnabled()) {
            log.trace(""Polling directory: "" + dir);
        }

So if you can enable the TRACE logging on camel 1.5-SNAPSHOT and see what is happening.
Also the new feature for exclusive read lock might have an influce. So setting consumer.exclusiveReadLock=false could help also.
davsclaus:1219090916:2008-08-19T04:21:56.087+0000:1219090916:2008-08-19T04:21:56.087+0000:What SFTP server are you using?
spaddo:1219109270:2008-08-19T09:27:50.679+0000:1219109270:2008-08-19T09:27:50.679+0000:The hint with ""consumer.exclusiveReadLock=false"" pointed me in the right direction. I verified if I have write rights on the server... and I do not. I guess that's why nothing was downloaded when I tried with 1.5-SNAPSHOT.

So, I'm happy... bug is fixed in 1.5... I'll continue to use this version.

Thanks for the extensive help Claus.
davsclaus:1219109935:2008-08-19T09:38:55.343+0000:1219109935:2008-08-19T09:38:55.343+0000:Hi

Glad its working in 1.5 also for the SFTP part that we dont have a mock test server for.

I am wondering if exclusiveReadLock should be *false* in the FTP part as having write privileges is not always the normal use-case.
davsclaus:1219176499:2008-08-20T04:08:19.092+0000:1219176499:2008-08-20T04:08:19.092+0000:The exclusiveReadLock option is now default *false* in Camel 1.5.
davsclaus:1234734711:2009-02-16T05:51:51.310+0000:1234734711:2009-02-16T05:51:51.310+0000:Closing all 1.5.0 issues"
0,CAMEL-833,Improvement,Major,None,None,"
None
",Closed,Duplicate,1.4.0,Jonathan Anstey,Moulliard Charles,0,0,2008-08-18 12:50:10+00:00,2009-02-16 05:53:17+00:00,"Hi,


It should be interesting that camel archetypes appear in the list of the archetypes catalog available through Nexus Repository, Maven.


Remark : Mule is there so Camel should also be there 


Kind regards,


Charles Moulliard","janstey:1219035260:2008-08-18T12:54:20.449+0000:1219035260:2008-08-18T12:54:20.449+0000:This was fixed after the 1.4 release. The next release of Camel should show up in Nexus.
janstey:1219035391:2008-08-18T12:56:31.021+0000:1219035391:2008-08-18T12:56:31.021+0000:See https://issues.apache.org/activemq/browse/CAMEL-753
davsclaus:1234734797:2009-02-16T05:53:17.573+0000:1234734797:2009-02-16T05:53:17.573+0000:Closing old tickets"
0,CAMEL-832,Test,Major,None,1.5.0,"
None
",Closed,Fixed,1.5.0,Willem Jiang,Willem Jiang,0,0,2008-08-18 03:59:20+00:00,2009-02-16 05:51:51+00:00,http://www.nabble.com/Jetty-Component-Routing-td19024402s22882.html#a19024402,"njiang:1219009459:2008-08-18T05:44:19.014+0000:1219009459:2008-08-18T05:44:19.014+0000:http://svn.apache.org/viewvc?rev=686675&view=rev
davsclaus:1234734711:2009-02-16T05:51:51.292+0000:1234734711:2009-02-16T05:51:51.292+0000:Closing all 1.5.0 issues"
0,CAMEL-831,New Feature,Major,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-08-17 15:43:09+00:00,2008-10-23 04:37:12+00:00,"The flatpack component currently doesn't support the opposite operation = from Object Model to write to exported format.


This is what is called writers in flatpack.","davsclaus:1220159001:2008-08-31T13:03:21.595+0000:1220159001:2008-08-31T13:03:21.595+0000:Added it for data format so use this one to marshal to flatpack format (fixed, delimited text)
davsclaus:1224707832:2008-10-23T04:37:12.718+0000:1224707832:2008-10-23T04:37:12.718+0000:Closing 1.5 issues"
0,CAMEL-830,Improvement,Major,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-08-17 14:15:58+00:00,2008-10-23 04:37:12+00:00,"Using the flatpack component now you get one exchange per row in the file. 


But sometimes you need the entire content as one exchange so you can do some processing on the entire content. We need an option for this.","davsclaus:1218957128:2008-08-17T15:12:08.090+0000:1218957128:2008-08-17T15:12:08.090+0000:Added option: *splitRows* that can be turned off to return the entire content that you can convert to a List and then iterate each rows as a Map object.
Updated wiki as well.

Committed revision 686616.
davsclaus:1224707832:2008-10-23T04:37:12.692+0000:1224707832:2008-10-23T04:37:12.692+0000:Closing 1.5 issues"
0,CAMEL-829,Improvement,Major,None,1.5.0,"
None
",Closed,Fixed,1.5.0,Willem Jiang,Willem Jiang,0,0,2008-08-17 13:00:15+00:00,2009-02-16 05:51:51+00:00,CxfMessage's getBody will extract the return result from the MessageContentsList by passing the result type class as the getbody() parameter,"njiang:1218952985:2008-08-17T14:03:05.418+0000:1218952985:2008-08-17T14:03:05.418+0000:http://svn.apache.org/viewvc?rev=686607&view=rev
davsclaus:1234734711:2009-02-16T05:51:51.274+0000:1234734711:2009-02-16T05:51:51.274+0000:Closing all 1.5.0 issues"
0,CAMEL-828,Improvement,Major,1.4.0,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Claus Ibsen,0,0,2008-08-16 08:27:21+00:00,2009-07-31 06:33:35+00:00,"When producing files an idea is to write to a temp file that has a name pattern that will be skipped by consumers (such as starting with a dot) and then after the write rename the file to the correct name.
Then the consumers wont need to use exotic locking to get exclusive read access to the file. Works on all file systems.


There is a nabble discussion on this issue somewhere.","davsclaus:1227789345:2008-11-27T20:35:45.089+0000:1227789345:2008-11-27T20:35:45.089+0000:There is a ticket for the FTP/SFTP as well something with uploadSuffix. It should use the same option name as this file producer, so it should be tempPrefix.
davsclaus:1248993215:2009-07-31T06:33:35.001+0000:1248993215:2009-07-31T06:33:35.001+0000:Closing 2.0m1 tickets"
0,CAMEL-827,New Feature,Major,None,1.5.0,"
None
",Closed,Fixed,1.5.0,Hadrian Zbarcea,Jonathan Anstey,0,0,2008-08-15 14:20:51+00:00,2009-02-16 05:51:51+00:00,"Given that our archetypes will be showing up in m2eclipse after our next release, we should really have a few more options that will make it easier for someone to start using Camel.


I propose a Spring XML based archetype which is basically the camel-router archetype with the Java DSL transposed to Spring XML. Another archetype shows how easy it is to start using Camel with ActiveMQ.","janstey:1218781296:2008-08-15T14:21:36.638+0000:1218781296:2008-08-15T14:21:36.638+0000:Here are the two archetypes I proposed. 
janstey:1218785122:2008-08-15T15:25:22.410+0000:1218785122:2008-08-15T15:25:22.410+0000:I made a minor change to get rid of the <amq:broker syntax... the embedded AMQ broker definition now looks like

{code:language=xml}
  <broker xmlns=""http://activemq.apache.org/schema/core"" useJmx=""false"" persistent=""false"">
    <transportConnectors>
      <transportConnector uri=""tcp://localhost:61616"" />
    </transportConnectors>
  </broker>
{code}
janstey:1218785209:2008-08-15T15:26:49.816+0000:1218785209:2008-08-15T15:26:49.816+0000:Re-attaching :)
hadrian:1218799014:2008-08-15T19:16:54.986+0000:1218799014:2008-08-15T19:16:54.986+0000:@Jon: this is great.  what do you think about renaming camel-router-spring to just camel-spring and camel-router-with-activemq to camel-activemq, well, this will conflict with the components, but anyway, something shorter?
janstey:1218807270:2008-08-15T21:34:30.259+0000:1218807270:2008-08-15T21:34:30.259+0000:Hadrian,

I'm fine with the rename although if its just because of the length of the artifactId, it really shouldn't be an issue. Just take a look at some of the other archetypes out there (in attached image). I don't think we're breaking any records here :) IMHO its better to be more descriptive, especially since we'll probably have more archetypes in the future.
hadrian:1218868480:2008-08-16T14:34:40.624+0000:1218869398:2008-08-16T14:49:58.330+0000:Yeah, I agree with more descriptive.  That was the point, camel-router doesn't add much more than just camel.  And length is nice, but not the most important.  What about camel-archetype-spring and camel-archetype-activemq then?  Or leave your original names?  I'll bow to your decision :).

Yeah, rereading my previous comment, it didn't make much sense; ""shorter"" referred to the camel-router part.  Sorry.
janstey:1219032839:2008-08-18T12:13:59.007+0000:1219032839:2008-08-18T12:13:59.007+0000:Hmmm... Looks like having archetype in the artifactId is the standard used at the Maven project (even if it is redundant :)) We should probably go with that then. So, how about this as the final list of archetypes:

camel-archetype-component (was camel-component)
camel-archetype-java (was camel-router)
camel-archetype-spring (was camel-router-spring)
camel-archetype-activemq (was camel-router-with-activemq)
hadrian:1219033976:2008-08-18T12:32:56.822+0000:1219033976:2008-08-18T12:32:56.822+0000:Just in time :).  I was ready to commit as is.
hadrian:1219036953:2008-08-18T13:22:33.314+0000:1219036953:2008-08-18T13:22:33.314+0000:Awsome patch Jon.  Applied with many thanks!
davsclaus:1234734711:2009-02-16T05:51:51.237+0000:1234734711:2009-02-16T05:51:51.237+0000:Closing all 1.5.0 issues"
0,CAMEL-826,Bug,Major,1.3.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Hadrian Zbarcea,Hadrian Zbarcea,0,0,2008-08-14 23:38:53+00:00,2009-02-16 05:51:51+00:00,No Desc,"hadrian:1218729999:2008-08-15T00:06:39.187+0000:1218729999:2008-08-15T00:06:39.187+0000:Fixed in revision 686094
davsclaus:1234734711:2009-02-16T05:51:51.218+0000:1234734711:2009-02-16T05:51:51.218+0000:Closing all 1.5.0 issues"
0,CAMEL-825,Improvement,Major,None,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,James Strachan,0,0,2008-08-14 09:59:31+00:00,2009-11-21 11:57:54+00:00,No Desc,"davsclaus:1242345008:2009-05-15T07:50:08.106+0000:1242345008:2009-05-15T07:50:08.106+0000:Use the new async API if you want asynchronous routing
huntc@internode.on.net:1243266936:2009-05-25T23:55:36.708+0000:1243266936:2009-05-25T23:55:36.708+0000:I see the seda queue as being very similar to a jms queue in Camel with the main difference being no persistence; which is fine. In fact I would probably use a seda endpoint pretty much everywhere I'd use a JMS queue endpoint where I do not require persistence.

I think that request reply should therefore be supported for seda.
davsclaus:1243663440:2009-05-30T14:04:00.733+0000:1243663440:2009-05-30T14:04:00.733+0000:trunk:  780261, 780262, 780267

Works now for both seda and vm.

Updated wiki for seda component.
davsclaus:1258775874:2009-11-21T11:57:54.586+0000:1258775874:2009-11-21T11:57:54.586+0000:Closing all 2.0M2 tickets"
0,CAMEL-824,Improvement,Major,None,None,"
None
",Closed,Won't Fix,Future,Unassigned,James Strachan,0,0,2008-08-14 08:34:45+00:00,2010-02-07 09:54:15+00:00,"kinda like a language overview in programming languages.


e.g. starting off describing the RouteBuilder and from(), then inputs to() or bean() or processor() then describing filter/content based routing and blocks to introduce expressions (custom languages + Java) then go onto more esoteric patterns like routing slip, splitter, aggregator etc","jstrachan:1218674164:2008-08-14T08:36:04.779+0000:1218674164:2008-08-14T08:36:04.779+0000:Maybe showing some common use cases that folks tend to do.

e.g.

* sending the same message to multiple destinations
* adding a custom Processor into a route to see whats going on in a debugger - or enabling the [Tracer]
* using parallelism
* splitting a route using a seda/direct endpoint
davsclaus:1220498650:2008-09-04T11:24:10.432+0000:1220498650:2008-09-04T11:24:10.432+0000:Moving to 2.0
davsclaus:1236834284:2009-03-12T13:04:44.680+0000:1236834284:2009-03-12T13:04:44.680+0000:Moving to future"
0,CAMEL-823,Improvement,Major,None,None,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,James Strachan,0,0,2008-08-13 18:25:35+00:00,2009-02-16 05:51:51+00:00,No Desc,"davsclaus:1218846019:2008-08-16T08:20:19.572+0000:1218846019:2008-08-16T08:20:19.572+0000:Committed revision 686463.

Updated the wiki documentation also.
davsclaus:1234734711:2009-02-16T05:51:51.173+0000:1234734711:2009-02-16T05:51:51.173+0000:Closing all 1.5.0 issues"
0,CAMEL-822,New Feature,Major,None,None,"
None
",Closed,Fixed,"1.6.0, 2.0-M1",Willem Jiang,James Strachan,0,0,2008-08-13 14:44:32+00:00,2009-07-31 06:33:34+00:00,"http://code.google.com/p/google-gson/


http://jettison.codehaus.org/","davsclaus:1220498650:2008-09-04T11:24:10.674+0000:1220498650:2008-09-04T11:24:10.674+0000:Moving to 2.0
njiang:1225928020:2008-11-06T07:33:40.767+0000:1225928020:2008-11-06T07:33:40.767+0000:After quick document reviewing of gson and jettison, I find XStream provides a more sophisticate support of JSON by leverage jettison.
Since we have camel-xstream component , it takes my litter time to implement the JSON DataFormat support in Camel ;) 
davsclaus:1225931671:2008-11-06T08:34:31.836+0000:1225931671:2008-11-06T08:34:31.836+0000:Willem, we need wiki documentation for his one. 

Please add a new subpage for the new dataformat at:
http://activemq.apache.org/camel/data-format.html




davsclaus:1225931761:2008-11-06T08:36:01.386+0000:1225931761:2008-11-06T08:36:01.386+0000:And it should also be added to camel-spring in the jaxb.index so we get it in spring XSD as well.

And the class javadoc for JsonDataFormat is a copy from the xstream, it should state that its for Json.
njiang:1225948801:2008-11-06T13:20:01.981+0000:1225948801:2008-11-06T13:20:01.981+0000:Thank Claus for your review, I will do a quick fix of Spring stuff and update the wiki page.
njiang:1226270377:2008-11-10T06:39:37.242+0000:1226270377:2008-11-10T06:39:37.242+0000:Added the wiki page http://cwiki.apache.org/confluence/display/CAMEL/JSON
davsclaus:1248993214:2009-07-31T06:33:34.957+0000:1248993214:2009-07-31T06:33:34.957+0000:Closing 2.0m1 tickets"
0,CAMEL-821,Improvement,Major,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-08-13 14:08:03+00:00,2008-10-23 04:37:12+00:00,"See nabble:
http://www.nabble.com/camel-1.4-redelivery-issue-td18960138s22882.html


Without this option you can not use the fluent builders to set this option.",davsclaus:1224707832:2008-10-23T04:37:12.676+0000:1224707832:2008-10-23T04:37:12.676+0000:Closing 1.5 issues
0,CAMEL-820,Sub-task,Major,None,None,"
None
",Closed,Fixed,1.5.0,James Strachan,James Strachan,0,0,2008-08-13 11:43:31+00:00,2009-02-16 05:51:51+00:00,No Desc,"davsclaus:1220499558:2008-09-04T11:39:18.572+0000:1220499558:2008-09-04T11:39:18.572+0000:Moving to 2.0
jstrachan:1224575257:2008-10-21T15:47:37.864+0000:1224575257:2008-10-21T15:47:37.864+0000:see http://activemq.apache.org/camel/guice-jms-example.html
davsclaus:1234734711:2009-02-16T05:51:51.128+0000:1234734711:2009-02-16T05:51:51.128+0000:Closing all 1.5.0 issues"
0,CAMEL-819,Task,Major,None,1.5.0,"
None
",Closed,Fixed,1.5.0,Willem Jiang,Jonathan Anstey,0,0,2008-08-13 11:39:50+00:00,2009-02-16 05:51:50+00:00,The FileConsumeSingleDirectoryOnlyTest.testConsumeFileOnly unit test is failing... I'm looking into this now.,"janstey:1218602225:2008-08-13T12:37:05.416+0000:1218602225:2008-08-13T12:37:05.416+0000:Turns out it was just an ordering issue on *some* Linux boxes (it didn't fail on the bamboo server). I've added the ability to expect message bodies in any order on a mock endpoint to support this fix.
njiang:1218757631:2008-08-15T07:47:11.892+0000:1218757631:2008-08-15T07:47:11.892+0000:Patch applied with thanks to Jonathan
http://svn.apache.org/viewvc?rev=685546&view=rev
davsclaus:1234734710:2009-02-16T05:51:50.164+0000:1234734710:2009-02-16T05:51:50.164+0000:Closing all 1.5.0 issues"
0,CAMEL-818,Bug,Major,"1.3.0, 1.4.0",1.5.0,"
None
",Closed,Fixed,1.5.0,Willem Jiang,Jonathan Anstey,0,0,2008-08-13 11:25:14+00:00,2009-02-16 05:51:50+00:00,"Currently, the routing slip will create a new InOut exchange for each target based on the target endpoint type. This means that someone calling from a jbi endpoint (or other endpoint with custom exchange) into the routing slip will have their exchange type changed (to mostly likely DefaultExchange). I will be including a patch to fix this issue shortly.","janstey:1218598314:2008-08-13T11:31:54.291+0000:1218598314:2008-08-13T11:31:54.291+0000:Patch to fix the issue.

The fix employs a technique similar to that of the pipeline processor to preserve the exchange type. Basically, in order for a type of Exchange to be propagated, it must override the newInstance method so the routing slip has a way to create a clean instance of it.
njiang:1218757782:2008-08-15T07:49:42.383+0000:1218757782:2008-08-15T07:49:42.383+0000:Applied patch with thanks to Jonathan.
http://svn.apache.org/viewvc?rev=685557&view=rev
davsclaus:1234734710:2009-02-16T05:51:50.128+0000:1234734710:2009-02-16T05:51:50.128+0000:Closing all 1.5.0 issues"
0,CAMEL-817,New Feature,Major,None,None,"
None
",Closed,Fixed,1.5.0,James Strachan,James Strachan,0,0,2008-08-12 17:13:44+00:00,2009-02-16 05:51:50+00:00,see http://code.google.com/p/google-guice/,"jstrachan:1218608814:2008-08-13T14:26:54.754+0000:1218608814:2008-08-13T14:26:54.754+0000:there's a first cut that shows how to create and inject a camel context with some route builders. We could do with improving this to also support showing how to inject endpoints and components
jstrachan:1218611146:2008-08-13T15:05:46.494+0000:1218611146:2008-08-13T15:05:46.494+0000:documentation here http://cwiki.apache.org/CAMEL/guice.html


jstrachan:1219298204:2008-08-21T13:56:44.443+0000:1219298204:2008-08-21T13:56:44.443+0000:marking this as resolved for now - we can always raise further JIRAs or sub tasks to improve it over time
davsclaus:1234734710:2009-02-16T05:51:50.092+0000:1234734710:2009-02-16T05:51:50.092+0000:Closing all 1.5.0 issues"
0,CAMEL-816,New Feature,Major,None,None,"
None
",Closed,Fixed,1.5.0,James Strachan,James Strachan,0,0,2008-08-12 17:09:44+00:00,2009-02-16 05:51:50+00:00,"we need the converse of @MessageDriven for sending - without using any proprietary, middleware or Camel APIs","davsclaus:1223291450:2008-10-06T19:10:50.159+0000:1223291450:2008-10-06T19:10:50.159+0000:James haven't you already implement this?

We are closing in on a 1.5 release and should update the roadmap
davsclaus:1223631983:2008-10-10T17:46:23.885+0000:1223631983:2008-10-10T17:46:23.885+0000:James have implemented it already:
http://activemq.apache.org/camel/bean-integration.html
davsclaus:1234734710:2009-02-16T05:51:50.073+0000:1234734710:2009-02-16T05:51:50.073+0000:Closing all 1.5.0 issues"
0,CAMEL-815,Improvement,Major,"1.3.0, 1.4.0",1.5.0,"
None
",Closed,Fixed,1.5.0,Willem Jiang,Willem Jiang,0,0,2008-08-12 13:57:10+00:00,2009-02-16 05:51:50+00:00,"Current  Camel only support the set the LoadBalancer Strategy after the outputs like this 



<camelContext id=""camel"" xmlns=""http://activemq.apache.org/camel/schema/spring"">
    <route>
      <from uri=""direct:start""/>
      <loadBalance>          
          <to uri=""mock:x""/>        
          <to uri=""mock:y""/>       
          <to uri=""mock:z""/>
          <roundRobin/>       
      </loadBalance>
    </route>
  </camelContext>




It should be much better with the below configuration file



<camelContext id=""camel"" xmlns=""http://activemq.apache.org/camel/schema/spring"">
    <route>
      <from uri=""direct:start""/>
      <loadBalance>  
          <roundRobin/>           
          <to uri=""mock:x""/>        
          <to uri=""mock:y""/>       
          <to uri=""mock:z""/>              
      </loadBalance>
    </route>
  </camelContext>","njiang:1218520828:2008-08-12T14:00:28.316+0000:1218520828:2008-08-12T14:00:28.316+0000:http://svn.apache.org/viewvc?rev=685153&view=rev
davsclaus:1234734710:2009-02-16T05:51:50.005+0000:1234734710:2009-02-16T05:51:50.005+0000:Closing all 1.5.0 issues"
0,CAMEL-814,Improvement,Major,1.4.0,,"
None
",Closed,Won't Fix,None,Claus Ibsen,Ron Gavlin,0,0,2008-08-12 13:03:57+00:00,2010-02-07 09:54:15+00:00,Users looking to upgrade from smx-eip to smx-camel should be provided an out-of-the-box aggregator strategy/collection to replace the smx-eip SplitterAggregator & RecipientListAggregator.,"davsclaus:1223628463:2008-10-10T16:47:43.157+0000:1223628463:2008-10-10T16:47:43.157+0000:Ron can you elaborate what's the gap currently between the aggregator and splitter in Camel vs. the ones in ServiceMix?
rgavlin:1223665792:2008-10-11T03:09:52.251+0000:1223665792:2008-10-11T03:09:52.251+0000:Hi Claus,

The following servicemix-eip class is responsible for building aggregate messages for both Splitters and RecipientLists. The buildAggregate() method listed below actually builds the aggregate message. The two element names and attribute names used to build the aggregate message are also listed below, each of which is customizable in a declarative fashion. It would be ideal if folks upgrading from servicemix-eip to servicemix-camel were provided an out-of-the-box aggregator strategy/collection that built aggregate messages using the same format. Existing smx-eip customers have already built follow-on transforms that expect to find this format.

Let me know if you have further questions.

Ron

http://svn.apache.org/viewvc/servicemix/components/engines/servicemix-eip/trunk/src/main/java/org/apache/servicemix/eip/patterns/SplitAggregator.java?view=markup



    protected QName aggregateElementName = new QName(""aggregate"");
    protected QName messageElementName = new QName(""message"");
    protected String countAttribute = ""count"";
    protected String indexAttribute = ""index"";

public void buildAggregate(Object aggregation, NormalizedMessage message, 
            MessageExchange exchange, boolean doTimeout) throws Exception {
        NormalizedMessage[] messages = ((SplitterAggregation) aggregation).messages;
        String correlationId = ((SplitterAggregation) aggregation).correlationId;
        SourceTransformer st = new SourceTransformer();
        Document doc = st.createDocument();
        Element root = createChildElement(aggregateElementName, doc);
        root.setAttribute(countAttribute, Integer.toString(messages.length));
        for (int i = 0; i < messages.length; i++) {
            if (messages[i] != null) {
                Element elem = st.toDOMElement(messages[i]);
                if (messageElementName != null) {
                    Element msg = createChildElement(messageElementName, root);
                    msg.setAttribute(indexAttribute, Integer.toString(i));
                    msg.appendChild(doc.importNode(elem, true));
                } else {
                    root.appendChild(doc.importNode(elem, true));
                }
                if (isCopyProperties()) {
                    copyProperties(messages[i], message);
                }
                if (isCopyAttachments()) {
                    copyAttachments(messages[i], message);
                }
            }
        }
        message.setContent(new DOMSource(doc));
        message.setProperty(AbstractSplitter.SPLITTER_CORRID, correlationId);
    }
    
    protected Element createChildElement(QName name, Node parent) {
        Document doc = parent instanceof Document ? (Document) parent : parent.getOwnerDocument();
        Element elem;
        if ("""".equals(name.getNamespaceURI())) {
            elem = doc.createElement(name.getLocalPart());   
        } else {
            elem = doc.createElementNS(name.getNamespaceURI(),
                                       name.getPrefix() + "":"" + name.getLocalPart());
        }
        parent.appendChild(elem);
        return elem;
    }

davsclaus:1252838485:2009-09-13T18:41:25.966+0000:1252838485:2009-09-13T18:41:25.966+0000:We are looking into an overhaul of the Aggregator for Camel 2.x, likely 2.1.

People migrating from SMX JBI must redo their aggregation strategies to Camel style.

Ron as you get hands on the Camel {{AggregationStrategy}} you will get the hang of it and will be able to adapt your code fairly easily"
0,CAMEL-813,Improvement,Trivial,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Kevin Urciolo,0,0,2008-08-11 19:38:27+00:00,2009-02-16 05:51:49+00:00,No Desc,"greenbean:1218455073:2008-08-11T19:44:33.595+0000:1218455073:2008-08-11T19:44:33.595+0000:We would like to configure ExceptionType objects for a DeadLetterChannelBuilder in Spring XML.  If the ErrorHandlerBuilderSupport exposed a setter for exceptions, then we could potentially create a list of ExceptionType objects and inject them in to the DeadLetterChannelBuilder.

We want to do something like this, but in Spring XML:

exception(NullPointerException.class)
    .maximumRedeliveries(1)
    .setHeader(MESSAGE_INFO, constant(""Damm a NPE""))
    .to(ERROR_QUEUE);
davsclaus:1218846185:2008-08-16T08:23:05.018+0000:1218846185:2008-08-16T08:23:05.018+0000:Hi Kevin

Can you re-attach the patch file, this time with the ASF license granted. We can not accept patch files that hasn't this license.
davsclaus:1220442725:2008-09-03T19:52:05.414+0000:1220442725:2008-09-03T19:52:05.414+0000:Kevin any update?
davsclaus:1220874716:2008-09-08T19:51:56.881+0000:1220874716:2008-09-08T19:51:56.881+0000:The setter is named {{setErrorHandlers}}
davsclaus:1234734709:2009-02-16T05:51:49.971+0000:1234734709:2009-02-16T05:51:49.971+0000:Closing all 1.5.0 issues"
0,CAMEL-812,Sub-task,Minor,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,1,2008-08-11 18:37:22+00:00,2008-10-23 04:37:12+00:00,"See discussion on parent. 


Option d) is choose to implement in Camel 1.5","davsclaus:1218492386:2008-08-12T06:06:26.671+0000:1218492386:2008-08-12T06:06:26.671+0000:BTW: Will also support setting multiple recipients in a single string by separating with either colon or semi colon (, or ;)
avatah:1218497065:2008-08-12T07:24:25.886+0000:1218497065:2008-08-12T07:24:25.886+0000:What about moving 
appendHeadersFromCamel(mimeMessage, exchange, exchange.getIn());
line in method MailBinding.populateMailMessage
a few lines below?
Doesn't it solve the problem?
davsclaus:1218498980:2008-08-12T07:56:20.608+0000:1218498980:2008-08-12T07:56:20.608+0000:Well it wasn't as easy as it looked liked.

What we want is to *not mix* but only use headers if provided or only use pre configured. If we mix and match then it gets very confusing.
So I actually had to do a bit more coding to handle this. 

I need to add a few more unit tests to explicitly tests this change some more. 
davsclaus:1218515334:2008-08-12T12:28:54.578+0000:1218515334:2008-08-12T12:28:54.578+0000:Update wiki
davsclaus:1218516068:2008-08-12T12:41:08.615+0000:1218516068:2008-08-12T12:41:08.615+0000:Updated wiki as well
davsclaus:1224707832:2008-10-23T04:37:12.655+0000:1224707832:2008-10-23T04:37:12.655+0000:Closing 1.5 issues"
0,CAMEL-811,Bug,Major,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Hadrian Zbarcea,Jonathan Anstey,0,0,2008-08-11 16:45:49+00:00,2009-02-16 05:51:49+00:00,You can't configure the delayer pattern properly in the Spring DSL currently. I will be attaching a patch for this shortly.,"janstey:1218444452:2008-08-11T16:47:32.546+0000:1218444452:2008-08-11T16:47:32.546+0000:Patch to fix this issue.
hadrian:1218447830:2008-08-11T17:43:50.959+0000:1218447830:2008-08-11T17:43:50.959+0000:Patch applied with many thanks to Jon.
davsclaus:1234734709:2009-02-16T05:51:49.950+0000:1234734709:2009-02-16T05:51:49.950+0000:Closing all 1.5.0 issues"
0,CAMEL-810,New Feature,Major,None,1.5.0,"
None
",Closed,Fixed,1.5.0,James Strachan,James Strachan,0,0,2008-08-11 14:20:36+00:00,2009-02-16 05:51:49+00:00,No Desc,"jstrachan:1218436479:2008-08-11T14:34:39.278+0000:1218436479:2008-08-11T14:34:39.278+0000:am adding a @OneWay annotation; things nearly working - will commit soon...
jstrachan:1218439814:2008-08-11T15:30:14.605+0000:1218439814:2008-08-11T15:30:14.605+0000:the test case SpringRemotingWithOneWayTest shows we can now invoke a method marked as async
davsclaus:1218450699:2008-08-11T18:31:39.971+0000:1218450699:2008-08-11T18:31:39.971+0000:Hawk-eye strikes back!

I was reading the nice javadoc on the @OneWay annotation (great James that you have added such elaborate documentation). I was puzzled with this

Where the <b>notOneWayMethod</b> will not be using one way invocation while all other methods will inherit the InOut exchange pattern

Should it be ... inherit InOnly exchange pattern?
davsclaus:1218450815:2008-08-11T18:33:35.774+0000:1218450815:2008-08-11T18:33:35.774+0000:Maybe the override MEP is drifting 

@OneWay(InOut) => couldl be named @TwoWay 

ha ha 
Okay just joking but couldn't resist.
jstrachan:1218451676:2008-08-11T18:47:56.293+0000:1218451676:2008-08-11T18:47:56.293+0000:Yeah - I kinda figured, the default for all interfaces & methods by default is InOut. You might wanna mark some methods as InOnly and some interfaces/classes as being all InOnly - but if you mark a class as InOnly you might wanna mark one or two methods as being InOut.

Maybe the OneWay class name is bad; but I wanted the annotation to naturally default to InOnly unless you explicitly specified an ExchangePattern configuration. i.e. so just using the annotation kinda implies InOnly.

Maybe we should just use an annotation thats something like @MEP or @Pattern with just folks knowing that by default it uses InOnly - but then I wanted the common 80% case - adding just an annotation to mark oneway method invocations.

I think its gonna be pretty rare for folks to mark a class as @OneWay then explicitly configure the MEP of a specific method as being not InOnly.

But maybe we need more annotations?

e.g. @InOnly, @InOut and @Pattern (for others that are not the common InOnly/InOut)?


davsclaus:1218485442:2008-08-12T04:10:42.593+0000:1218485442:2008-08-12T04:10:42.593+0000:I would prefer the annotations to be named after the MEP

@InOnly
@InOut

And not being able to ""override"" their behavior. So @InOnly is 100% in only. And @InOut 100% out

@OneWay(InOut) is *confusing*.

And btw OneWay is a new term for InOnly that I haven't seen or read before.

And I guess @InOnly and @InOut is feasible for now. Is the @Pattern really needed?
jstrachan:1218507939:2008-08-12T10:25:39.863+0000:1218507939:2008-08-12T10:25:39.863+0000:Agreed. I've been hacking something along those lines.

Am thinking of @InOnly which is only ExchangePattern.InOnly and @InOut which is only ExchangePattern.InOut then allowing @Pattern(ExchangePattern.RobustInOut) for any other non-common exchange patterns.

While users might not use @Pattern directly - I was thinking of using this annotation to annotate the annotations themselves. e.g. rather than knowing about the special @InOut or @InOnly annotations - we'd just look for annotations which are annotated with @Pattern to specify the pattern. That way folks who already have created, say, an @Async annotation could just add @Pattern(ExchangePattern.InOnly) so camel would auto-recognise it as being a oneway rather than request reply operation.
jstrachan:1218508579:2008-08-12T10:36:19.103+0000:1218508579:2008-08-12T10:36:19.103+0000:Just to be more clear - @InOnly and @InOut would have no configuration whatsoever - they would be fixed MEPs; whereas @Pattern would take a mandatory MEP. So @InOnly would be an abbreviation for @Pattern(ExchangePattern.InOut). @Pattern could remain a purely internal implementation detail.

At some point if there is demand we could create an annotation for every possible MEP; but am thinking mostly folks will only need @InOut and @InOnly for a while and @Pattern can be for the uncommon stuff
jstrachan:1218531962:2008-08-12T17:06:02.001+0000:1218531962:2008-08-12T17:06:02.001+0000:See the documentation http://cwiki.apache.org/CAMEL/using-exchange-pattern-annotations.html

i.e. the user just adds @InOnly to a method to enable async processing
davsclaus:1234734709:2009-02-16T05:51:49.910+0000:1234734709:2009-02-16T05:51:49.910+0000:Closing all 1.5.0 issues"
0,CAMEL-809,Task,Major,None,1.5.0,"
None
",Closed,Fixed,1.5.0,Willem Jiang,Jonathan Anstey,0,0,2008-08-11 14:16:10+00:00,2009-02-16 05:51:49+00:00,"As was mentioned in the thread http://www.nabble.com/-HEADS-UP--Missing-ftpserver-dependency-td18870393s22882.html#a18870393 , the current ftpserver dependency is no longer available. The 1.0.0-M2 release is supposed to go up today so we should update camel-ftp to pick this up.


I'm currently running camel-ftp against the release candidate... will attach patch if any changes are required.","janstey:1218436124:2008-08-11T14:28:44.041+0000:1218436124:2008-08-11T14:28:44.041+0000:There were only a couple of minor changes required + a few extra test dependencies. Since ftpserver is a subproject of mina now, the release should appear at repo1.maven.org later today.

For reference, the vote thread is here http://www.nabble.com/-VOTE--Releasing-FtpServer-1.0.0-M2-td18840655.html
njiang:1218438435:2008-08-11T15:07:15.487+0000:1218438435:2008-08-11T15:07:15.487+0000:I will commit this patch when the release is done ;)
njiang:1218495047:2008-08-12T06:50:47.891+0000:1218495047:2008-08-12T06:50:47.891+0000:Patch applied with thanks to Jonathan. 

 http://svn.apache.org/viewvc?rev=685022&view=rev
davsclaus:1234734709:2009-02-16T05:51:49.867+0000:1234734709:2009-02-16T05:51:49.867+0000:Closing all 1.5.0 issues"
0,CAMEL-808,Sub-task,Minor,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-08-11 08:38:51+00:00,2008-10-23 04:37:12+00:00,Just a ticket for a reminder for myself to improve the wiki documentation a bit for these two components.,davsclaus:1224707832:2008-10-23T04:37:12.614+0000:1224707832:2008-10-23T04:37:12.614+0000:Closing 1.5 issues
0,CAMEL-777,Bug,Major,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Wojciech Durczynski,0,0,2008-08-01 09:11:29+00:00,2009-02-16 05:51:49+00:00,Many servers use 'username'@'servername' as a login name. Camel-mail doesn't allow this.,"magyardude:1217570708:2008-08-01T14:05:08.807+0000:1217571692:2008-08-01T14:21:32.802+0000:It does allow it. Try to upgrade to 1.4.
This works for me:

String smtpUri = 
			 ""smtp://mail.server.com?username=freeforall@server.com&password=freeforall"" +
			 ""&From=freeforall@server.com&To=otheruser@server.com"";

avatah:1217571996:2008-08-01T14:26:36.583+0000:1217572357:2008-08-01T14:32:37.978+0000:I use camel 1.4 and javax.mail 1.4.1.
If I define camel endpoint with '@' in username there is an exception during sending mail:
org.springframework.mail.MailParseException: Could not parse mail; nested exception is javax.mail.internet.AddressException: Illegal character in domain in string ``Wojciech.Durczynski@server.com@smtp.server.com''
	at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:363)
	at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:346)
	at org.apache.camel.component.mail.MailProducer.process(MailProducer.java:46)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:75)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:155)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:91)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:101)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:85)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:39)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:66)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:47)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:149)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:86)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:84)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:122)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:117)
	at com.comarch.p7samples.minis.password.PasswordPlugin$1.onSubmit(PasswordPlugin.java:92)
	at org.apache.wicket.markup.html.form.Form.delegateSubmit(Form.java:1355)
	at org.apache.wicket.markup.html.form.Form.onFormSubmitted(Form.java:810)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.wicket.RequestListenerInterface.invoke(RequestListenerInterface.java:183)
	at org.apache.wicket.request.target.component.listener.ListenerInterfaceRequestTarget.processEvents(ListenerInterfaceRequestTarget.java:73)
	at org.apache.wicket.request.AbstractRequestCycleProcessor.processEvents(AbstractRequestCycleProcessor.java:91)
	at com.comarch.p7.ui.core.application.BaseRequestCycleProcessor.processEvents(BaseRequestCycleProcessor.java:20)
	at org.apache.wicket.RequestCycle.processEventsAndRespond(RequestCycle.java:1171)
	at org.apache.wicket.RequestCycle.step(RequestCycle.java:1248)
	at org.apache.wicket.RequestCycle.steps(RequestCycle.java:1349)
	at org.apache.wicket.RequestCycle.request(RequestCycle.java:493)
	at org.apache.wicket.protocol.http.WicketFilter.doGet(WicketFilter.java:387)
	at org.apache.wicket.protocol.http.WicketServlet.doPost(WicketServlet.java:145)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:727)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:820)
	at com.comarch.p7.ui.webscope.ListenerServlet$FilterChainImpl.doFilter(ListenerServlet.java:206)
	at com.comarch.p7.ui.webscope.ListenerServlet.service(ListenerServlet.java:85)
	at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:487)
	at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:362)
	at org.ops4j.pax.web.service.internal.HttpServiceServletHandler.handle(HttpServiceServletHandler.java:66)
	at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181)
	at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:726)
	at org.ops4j.pax.web.service.internal.HttpServiceContext.handle(HttpServiceContext.java:107)
	at org.ops4j.pax.web.service.internal.JettyServerHandlerCollection.handle(JettyServerHandlerCollection.java:64)
	at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
	at org.mortbay.jetty.Server.handle(Server.java:324)
	at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:505)
	at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:843)
	at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:648)
	at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:211)
	at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:380)
	at org.mortbay.jetty.bio.SocketConnector$Connection.run(SocketConnector.java:228)
	at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:488)
Caused by: javax.mail.internet.AddressException: Illegal character in domain in string ``Wojciech.Durczynski@server.com@smtp.server.com''
	at javax.mail.internet.InternetAddress.checkAddress(InternetAddress.java:947)
	at javax.mail.internet.InternetAddress.parse(InternetAddress.java:833)
	at javax.mail.internet.InternetAddress.parse(InternetAddress.java:569)
	at javax.mail.internet.InternetAddress.parse(InternetAddress.java:546)
	at javax.mail.internet.MimeMessage.setRecipients(MimeMessage.java:607)
	at org.apache.camel.component.mail.MailBinding.populateMailMessage(MailBinding.java:53)
	at org.apache.camel.component.mail.MailProducer$1.prepare(MailProducer.java:48)
	at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:354)
	... 56 more
avatah:1217572447:2008-08-01T14:34:07.563+0000:1217572447:2008-08-01T14:34:07.563+0000:and in RouteBuilder I do simply:
.to(""smtp://smtp.server.com?password=myPass&username=Wojciech.Durczynski@server.com&debugMode=true"")
avatah:1217573623:2008-08-01T14:53:43.220+0000:1217573623:2008-08-01T14:53:43.220+0000:The problem probably exists because in class MailConfiguration there is a method:

    public void setUsername(String username) {
        this.username = username;
        if (!recipients.containsKey(Message.RecipientType.TO)) {
            // set default destination to username@host for backwards compatibility
            // can be overridden by URI parameters
            String address = username + ""@"" + host;
            recipients.put(Message.RecipientType.TO, address);
        }
    }

If ""To"" isn't a parameter in url, broken address is added to recipients map.
And my url doesn't have ""To"" parameter, because I always provide it as a header in a message.
davsclaus:1217823219:2008-08-04T12:13:39.089+0000:1217823219:2008-08-04T12:13:39.089+0000:Hi

Ah interesting, I would assume the TO header option is a quite common use-case. I do think Camel should support this as well.
davsclaus:1217970397:2008-08-06T05:06:37.044+0000:1217970397:2008-08-06T05:06:37.044+0000:Okay I got it now. Added a unit test that demonstrated the bug and now you can have @ in the username option.
avatah:1218075385:2008-08-07T10:16:25.508+0000:1218075385:2008-08-07T10:16:25.508+0000:Sadly your improvement doesn't solve problem.

Look into this usecase:
endpoint: smtp://smtp.server.com?password=secret&username=user1@server.com
header: To=user2@server2.com

Then during sending mail:
In MailConfiguration.setUsername() recipients map doesn't have element ""To"", so 
    recipients.put(javax.mail.Message.RecipientType.TO, ""user1@server.com"");
is invoked

Later in MailBinding.populateMailMessage()
appendHeadersFromCamel() is invoked, which sets ""To"" recipients of message right (to user2@server2.com)
but in the same method just after this, is invoked:
        if(recipients.containsKey(javax.mail.Message.RecipientType.TO))
            mimeMessage.setRecipients(javax.mail.Message.RecipientType.TO, (String)recipients.get(javax.mail.Message.RecipientType.TO));

And this rewrites ""To"" recipients of message to these, which are set in recipients map. And that's ""user1@server.com"" only, which is wrong.

Because of this recipient of the mail doesn't receive message, but only sender gets it.

Why to bother with the following code and not remove it?:
        if(!recipients.containsKey(javax.mail.Message.RecipientType.TO))
        {
            String address = username;
            if(address.indexOf(""@"") == -1)
                address = (new StringBuilder()).append(address).append(""@"").append(host).toString();
            recipients.put(javax.mail.Message.RecipientType.TO, address);
        }

davsclaus:1218077260:2008-08-07T10:47:40.298+0000:1218077260:2008-08-07T10:47:40.298+0000:Hi Wojciech

Yeah I was a little battle to try to fix it while staying 100% backwards compatible. I might as well take the heat and improve it so the *headers* always overrides whatever you have pre configured on the endpoint/URI. 

And the userinfo from the URI should not be set as TO but in a special holder then we are in a better situation to preserve the *headers* while populating the minemessage.


davsclaus:1218104895:2008-08-07T18:28:15.331+0000:1218104895:2008-08-07T18:28:15.331+0000:Wojciech

I am thinking about the following
- configuration of recipients (to, from, bcc) is *either* pre configured only (etc. URI) *or* message headers only.

So if you have *none* To, CC or BCC in the message headers it will use the pre configured
If you have a To, CC and/or BCC in the message header camel will only use these and not any from the pre configuration.

So its like exclusive. Either pre configuration or headers (never mixed).

Some will use it with pre configuration to just send mails to the same all the time (eg alert mails)
Others as you need dynamic recipients and therefore use message headers.
davsclaus:1218145849:2008-08-08T05:50:49.459+0000:1218145849:2008-08-08T05:50:49.459+0000:Change of strategy.

Camel will first apply any headers from the message and set them as To, CC and BCC.
And then if any provided on the URI configuration they will *override* these settings.

This will support your use-case and let people without any headers configure camel to use the same To, CC and BCC from the URI configuration at all times.
davsclaus:1218146037:2008-08-08T05:53:57.540+0000:1218146037:2008-08-08T05:53:57.540+0000:Hi

Try my latest patch that is just committed.
davsclaus:1218146099:2008-08-08T05:54:59.118+0000:1218146099:2008-08-08T05:54:59.118+0000:Update wiki with the mail *overrule* strategy *TODO*
avatah:1218426155:2008-08-11T11:42:35.865+0000:1218426155:2008-08-11T11:42:35.865+0000:Yes it works well now. But why have you changed your strategy? Headers should have greater priority then url parameters. Consider following use case:
somebody wants to define smtp endpoint with default recipient. If recipient is given in header, he receives mail. And if not, then default recipient receives it. 
With your current approach this use case is impossible to achieve. 
Maybe apply headers at the end of processing in MailBinding?
davsclaus:1218426839:2008-08-11T11:53:59.703+0000:1218426839:2008-08-11T11:53:59.703+0000:The short answer is that it will break existing behaviors in Camel 1.4 or older.

I also though that if you have any recipient informations in the headers what should Camel do?
a) only use headers 
b) only use pre configued (no - then dynamic recipients is not possible)
c) headers append to existing pre configured
d) headers override existing pre configured
e) pre configured override headers (reverse as option e)

What we have now is option (e). What you want is option (d). But what about option (c) isn't the the most correct and least surprised one to have?

I would like to change the behavior and if its not 100% backwards compatible then its okay anyway - we will write about it in the release notes.

Any thoughts?
avatah:1218437860:2008-08-11T14:57:40.221+0000:1218437860:2008-08-11T14:57:40.221+0000:Both (c) and (d) are better than (e). I don't know which one of them is better. 
When there is no To recipients in url, MailConfiguration adds sender as recipient. And what you surely need to avoid is sending mail to recipients declared in message headers AND to sender himself. There is danger of this behaviour in (c).
Maybe think about new parameter in url, something like overrideRecipientsInHeaders. And depending on it use (c) or (d) for particular endpoint.


davsclaus:1218450896:2008-08-11T18:34:56.291+0000:1218450896:2008-08-11T18:34:56.291+0000:From Hadrian

To me it looks like d) is better than c) (and e) ).  I think headers explicitly express the expected behavior and that should not be altered by the pre-existing conf.  imho the pre-existing conf is there only for the case where explicit info is not present in the headers, constituting a default behaviour, but not a base to be added to.

my $0.02,
Hadrian

davsclaus:1218450969:2008-08-11T18:36:09.988+0000:1218450969:2008-08-11T18:36:09.988+0000:I also think that d) is the best one and least surprise. Will create a sub task to implement it in Camel 1.5
davsclaus:1234734709:2009-02-16T05:51:49.306+0000:1234734709:2009-02-16T05:51:49.306+0000:Closing all 1.5.0 issues"
0,CAMEL-776,Improvement,Major,None,1.5.0,"
None
",Closed,Fixed,1.5.0,Willem Jiang,Willem Jiang,0,0,2008-08-01 08:38:35+00:00,2009-02-16 05:51:49+00:00,Current trace and trace interceptor do not support to be configured when the camel context is started.,"njiang:1217560929:2008-08-01T11:22:09.033+0000:1217560929:2008-08-01T11:22:09.033+0000:http://svn.apache.org/viewvc?rev=681654&view=rev

TODO update the wiki page.
davsclaus:1234734709:2009-02-16T05:51:49.286+0000:1234734709:2009-02-16T05:51:49.286+0000:Closing all 1.5.0 issues"
0,CAMEL-775,Sub-task,Major,1.4.0,"1.6.0, 2.0-M1","
None
",Closed,Not A Problem,"1.6.0, 2.0-M1",Unassigned,Claus Ibsen,1,1,2008-08-01 06:30:37+00:00,2009-10-24 11:16:12+00:00,"See parent issue.


Thanks Claus. I hope this can help getting it resolved. Let me know if it is, even a snapshot will do very well for us.


Another question, is below ""DynamicImport-Package workaround"" supposed to be bug? Or it's just the way Camel needs to be configured on OSGi? If so it should be mentioned somewhere in the docs... not everybody knows that DynamicImport-Package even exists.. (even some OSGi programmers)


First of all, to even get this to ""work"" requires my own bundle to have this manifest:
DynamicImport-Package: org.apache.camel.*


Failing to do so will result in more classloading errors.","ceefour:1217560716:2008-08-01T11:18:36.016+0000:1217560716:2008-08-01T11:18:36.016+0000:Without DynamicImport-Package this is what results...


[SpringOsgiExtenderThread-2] TRACE org.apache.camel.util.ResolverUtil - Testing for class org.apache.camel.converter.ObjectConverter matches criteria [annotated with @Converter]
[SpringOsgiExtenderThread-2] TRACE org.springframework.osgi.util.DebugUtils - Could not find class [org.apache.camel.converter.ObjectConverter] required by [org.elfattah.shell(org.elfattah.shell)] scanning available bundles
[SpringOsgiExtenderThread-2] DEBUG org.apache.camel.util.ResolverUtil - Could not find class 'org/apache/camel/converter/ObjectConverter.class' in classloader: BundleDelegatingClassLoader for [org.elfattah.shell (org.elfattah.shell)]. Reason: java.lang.ClassNotFoundException: org.apache.camel.converter.ObjectConverter not found from bundle [org.elfattah.shell]
java.lang.ClassNotFoundException: org.apache.camel.converter.ObjectConverter not found from bundle [org.elfattah.shell]
	at org.springframework.osgi.util.BundleDelegatingClassLoader.findClass(BundleDelegatingClassLoader.java:103)
	at org.springframework.osgi.util.BundleDelegatingClassLoader.loadClass(BundleDelegatingClassLoader.java:156)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:251)
	at org.apache.camel.util.ResolverUtil.addIfMatching(ResolverUtil.java:531)
	at org.apache.camel.util.ResolverUtil.loadImplementationsInBundle(ResolverUtil.java:409)
	at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:302)
	at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:279)
	at org.apache.camel.util.ResolverUtil.findAnnotated(ResolverUtil.java:255)
	at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:66)
	at org.apache.camel.impl.converter.DefaultTypeConverter.checkLoaded(DefaultTypeConverter.java:218)
	at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:64)
	at org.apache.camel.util.IntrospectionSupport.convert(IntrospectionSupport.java:216)
	at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:194)
	at org.apache.camel.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:167)
	at org.apache.camel.impl.DefaultComponent.setProperties(DefaultComponent.java:195)
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:89)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:272)
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:52)
	at org.apache.camel.model.RouteType.resolveEndpoint(RouteType.java:99)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:102)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:108)
	at org.apache.camel.model.FromType.resolveEndpoint(FromType.java:73)
	at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:77)
	at org.apache.camel.model.RouteType.addRoutes(RouteType.java:213)
	at org.apache.camel.model.RouteType.addRoutes(RouteType.java:89)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:539)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:531)
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:149)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:47)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:103)
	at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:78)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:76)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:275)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:737)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.finishRefresh(AbstractDelegatedExecutionApplicationContext.java:306)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:279)
	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:145)
	at java.lang.Thread.run(Thread.java:619)
Caused by: java.lang.ClassNotFoundException: org.apache.camel.converter.ObjectConverter
	at org.eclipse.osgi.framework.internal.core.BundleLoader.findClassInternal(BundleLoader.java:481)
	at org.eclipse.osgi.framework.internal.core.BundleLoader.findClass(BundleLoader.java:397)
	at org.eclipse.osgi.framework.internal.core.BundleLoader.findClass(BundleLoader.java:385)
	at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass(DefaultClassLoader.java:87)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:251)
	at org.eclipse.osgi.framework.internal.core.BundleLoader.loadClass(BundleLoader.java:313)
	at org.eclipse.osgi.framework.internal.core.BundleHost.loadClass(BundleHost.java:227)
	at org.eclipse.osgi.framework.internal.core.AbstractBundle.loadClass(AbstractBundle.java:1274)
	at org.springframework.osgi.util.BundleDelegatingClassLoader.findClass(BundleDelegatingClassLoader.java:99)
	... 38 more
[SpringOsgiExtenderThread-2] TRACE org.apache.camel.util.ResolverUtil - Testing for class org.apache.camel.converter.ObjectConverter matches criteria [annotated with @Converter]

ceefour:1217560843:2008-08-01T11:20:43.077+0000:1217560843:2008-08-01T11:20:43.077+0000:I've tagged my project specifically to aid this subtask as:

http://svn.assembla.com/svn/elfattah/tags/camel-dynimport-bug
ceefour:1217561185:2008-08-01T11:26:25.453+0000:1217561185:2008-08-01T11:26:25.453+0000:To me the answer is clear:

[SpringOsgiExtenderThread-2] DEBUG org.apache.camel.util.ResolverUtil - Could not find class 'org/apache/camel/converter/ObjectConverter.class' in classloader: BundleDelegatingClassLoader for [org.elfattah.shell (org.elfattah.shell)]. Reason: java.lang.ClassNotFoundException: org.apache.camel.converter.ObjectConverter not found from bundle [org.elfattah.shell]

Question is, what ResolverUtils wants to do?

org.apache.camel.converter.ObjectConverter is definitely not in our (org.elfattah.shell)'s import package.... therefore it should not be accessible from there anyway. And we don't have any code that uses that class explicitly. Which means ResolverUtil's hands is dirty...

ResolverUtil should know which classloader it wants to load a class from.

Or use a classloader that has ""Import-Package: org.apache.camel.converter""
davsclaus:1220875185:2008-09-08T19:59:45.497+0000:1220875185:2008-09-08T19:59:45.497+0000:Ahh the OSGIBundleLoader might have more options to be able to reader what packages it is allowed to read in (from the manifest) so its able to determine if it can find what it wants (org/apache/camel/converter/ObjectConverter) in your case above.

BTW That stuff is part of Camel's annotations based type converted discovery.
davsclaus:1220875412:2008-09-08T20:03:32.516+0000:1220875412:2008-09-08T20:03:32.516+0000:Hendy it should be able to run without the dynamicimport. The ""error"" is logged at DEBUG/TRACE level for diagnostic to the camel team if end-users has problem with loading resources in a camel application.

We might be able to let the OSGI bundle discovery be smarter in the future.
gnodet:1221003790:2008-09-10T07:43:10.003+0000:1221003790:2008-09-10T07:43:10.003+0000:I don't think dynamic imports are actually needed.
What happens is that the ResolverUtil scans all the osgi bundles for META-INF/services/org/apache/camel/TypeConverter.
When one is found, it contains a list of packages that contains converters.
Then, the ResolverUtil looks for all the classes in these packages from all bundles and tries to load these classes.
Such converters have to be either annotated with the @Converter annotation or implement the TypeConverter class.
This means that the bundles containing these converters has to import the needed camel packages in some way.
You could use dynamic imports or static imports.  I would recommend using static imports.
What we need is to come with a list of the imports that the user needs to add on his bundle to be able to make the discovery process work easily.
I may be wrong, but for annotated converters, i think a static import of org.apache.camel package should be sufficient.

I agree the discovery process in OSGi could be a bit smarter and look for some camel specific MANIFEST entry, but this would not change the fact that the bundle has to import the needed packages.
davsclaus:1221004543:2008-09-10T07:55:43.859+0000:1221004543:2008-09-10T07:55:43.859+0000:Look at chatlog at:
http://servlet.uwyn.com/drone/log/hausbot/camel/20080910
davsclaus:1221005574:2008-09-10T08:12:54.300+0000:1221005574:2008-09-10T08:12:54.300+0000:Target for 2.0
davsclaus:1232445361:2009-01-20T17:56:01.718+0000:1232445361:2009-01-20T17:56:01.718+0000:Willem Jiang has done some great update on the camel-osgi side in Camel 2.0 and 1.6.

Closing this one, also based on gnodets suggestion that the dynamic is not needed.


cameronbraid:1239507091:2009-04-12T11:31:31.414+0000:1239507091:2009-04-12T11:31:31.414+0000:I've hit a similar issue - using camel 2.0 snapshot

I added static import of org.apache.camel to my manifest and it didn't fix it.

Adding ""DynamicImport-Package: org.apache.camel.*"" fixes it.

[SpringOsgiExtenderThread-2] DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver - Loading from osgi buindle using classloader: BundleDelegatingClassLoader for [cut (cut)]
[SpringOsgiExtenderThread-2] DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver - Could not find class 'org/apache/camel/component/file/GenericFileProducer.class' in classloader: BundleDelegatingClassLoader for [cut (cut)]. Reason: java.lang.ClassNotFoundException: org.apache.camel.component.file.GenericFileProducer not found from bundle [cut]
java.lang.ClassNotFoundException: org.apache.camel.component.file.GenericFileProducer not found from bundle [cut]
	at org.springframework.osgi.util.BundleDelegatingClassLoader.findClass(BundleDelegatingClassLoader.java:103)
	at org.springframework.osgi.util.BundleDelegatingClassLoader.loadClass(BundleDelegatingClassLoader.java:156)

If this is a different issue, I am happy to open a new ticket."
0,CAMEL-774,Bug,Major,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Hendy Irawan,0,1,2008-07-31 20:39:19+00:00,2009-02-16 05:51:48+00:00,"This is a sequel of CAMEL-577, which itself duplicated by CAMEL-558 and CAMEL-522. Probably related to CAMEL-636, CAMEL-693, and CAMEL-689.


First of all, to even get this to ""work"" requires my own bundle to have this manifest:
DynamicImport-Package: org.apache.camel.*


Failing to do so will result in more classloading errors.


Even so, it still fails with this:


[SpringOsgiExtenderThread-2] TRACE org.apache.camel.util.ResolverUtil - Testing for class org.apache.camel.converter.jaxp.XmlConverter matches criteria [annotated with @Converter]
[SpringOsgiExtenderThread-2] TRACE org.apache.camel.util.ResolverUtil - Found class: class org.apache.camel.converter.jaxp.XmlConverter in classloader: BundleDelegatingClassLoader for [org.elfattah.shell (org.elfattah.shell)]
[SpringOsgiExtenderThread-2] TRACE org.apache.camel.util.ResolverUtil - Testing for class org.apache.camel.converter.stream.StreamCacheConverter$StreamSourceCache matches criteria [annotated with @Converter]
[SpringOsgiExtenderThread-2] TRACE org.apache.camel.util.ResolverUtil - Testing for class org.apache.camel.converter.stream.StreamCacheConverter$InputStreamCache matches criteria [annotated with @Converter]
[SpringOsgiExtenderThread-2] TRACE org.apache.camel.util.ResolverUtil - Searching for: annotated with @Converter in package: org/apache/camel/converter using classloader: org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader
[SpringOsgiExtenderThread-2] TRACE org.apache.camel.util.ResolverUtil - It's not an osgi bundle classloader
[SpringOsgiExtenderThread-2] TRACE org.apache.camel.util.ResolverUtil - Getting resource URL for package: org/apache/camel/converter with classloader: org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader@1a5db4b
[SpringOsgiExtenderThread-2] TRACE org.apache.camel.util.ResolverUtil - URL from classloader: bundleresource://20/org/apache/camel/converter
[SpringOsgiExtenderThread-2] TRACE org.apache.camel.util.ResolverUtil - Decoded urlPath: /org/apache/camel/converter
[SpringOsgiExtenderThread-2] TRACE org.apache.camel.util.ResolverUtil - Scanning for classes in [/org/apache/camel/converter] matching criteria: annotated with @Converter
[SpringOsgiExtenderThread-2] DEBUG org.apache.camel.util.ResolverUtil - Loading from jar: /org/apache/camel/converter
[SpringOsgiExtenderThread-2] ERROR org.apache.camel.util.ResolverUtil - Could not search jar file '/org/apache/camel/converter' for classes matching criteria: annotated with @Converter due to an IOException: /org/apache/camel/converter (No such file or directory)
java.io.FileNotFoundException: /org/apache/camel/converter (No such file or directory)
	at java.io.FileInputStream.open(Native Method)
	at java.io.FileInputStream.<init>(FileInputStream.java:106)
	at org.apache.camel.util.ResolverUtil.loadImplementationsInJar(ResolverUtil.java:476)
	at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:362)
	at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:277)
	at org.apache.camel.util.ResolverUtil.findAnnotated(ResolverUtil.java:253)
	at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:66)
	at org.apache.camel.impl.converter.DefaultTypeConverter.checkLoaded(DefaultTypeConverter.java:218)
	at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:64)
	at org.apache.camel.util.IntrospectionSupport.convert(IntrospectionSupport.java:216)
	at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:194)
	at org.apache.camel.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:167)
	at org.apache.camel.impl.DefaultComponent.setProperties(DefaultComponent.java:187)
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:89)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:270)
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:52)
	at org.apache.camel.model.RouteType.resolveEndpoint(RouteType.java:100)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:102)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:108)
	at org.apache.camel.model.FromType.resolveEndpoint(FromType.java:73)
	at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:77)
	at org.apache.camel.model.RouteType.addRoutes(RouteType.java:214)
	at org.apache.camel.model.RouteType.addRoutes(RouteType.java:90)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:537)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:529)
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:149)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:47)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:103)
	at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:78)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:76)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:275)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:737)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.finishRefresh(AbstractDelegatedExecutionApplicationContext.java:306)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:279)
	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:145)
	at java.lang.Thread.run(Thread.java:619)
[SpringOsgiExtenderThread-2] DEBUG org.apache.camel.util.ResolverUtil - Found: [class org.apache.camel.converter.ObjectConverter, class org.apache.camel.converter.jaxp.DomConverter, class org.apache.camel.converter.IOConverter, class org.apache.camel.converter.jaxp.StaxConverter, class org.apache.camel.converter.jaxp.XmlConverter, class org.apache.camel.converter.stream.StreamCacheConverter, class org.apache.camel.converter.jaxp.StreamSourceConverter, class org.apache.camel.converter.NIOConverter, class org.apache.camel.converter.CollectionConverter, class org.apache.camel.converter.CamelConverter]


The project that demonstrates this error is open source, check it out here:
http://svn.assembla.com/svn/elfattah/trunk


do mvn install on elfattah-api and elfattah-shell


Then go to elfattah-shell and:


mvn pax:provision","ceefour:1217508387:2008-07-31T20:46:27.878+0000:1217508387:2008-07-31T20:46:27.878+0000:FYI, the bundle #20 mentioned by the error logger is camel-core:

osgi> b 20
initial@reference:file:org.apache.camel.camel-core_1.4.0.jar/ [20]
  Id=20, Status=ACTIVE      Data Root=/home/ceefour/project/elfattah/elfattah-shell/runner/equinox/org.eclipse.osgi/bundles/20/data
  No registered services.
  No services in use.
  Exported packages
    org.apache.camel.model.loadbalancer; version=""1.4.0""[exported]
    org.apache.camel.component.dataset; version=""1.4.0""[exported]
    org.apache.camel.language.simple; version=""1.4.0""[exported]
    org.apache.camel.processor.loadbalancer; version=""1.4.0""[exported]
    org.apache.camel.processor.aggregate; version=""1.4.0""[exported]
    org.apache.camel.component.log; version=""1.4.0""[exported]
    org.apache.camel.converter.jaxp; version=""1.4.0""[exported]
    org.apache.camel.processor.resequencer; version=""1.4.0""[exported]
    org.apache.camel.processor.interceptor; version=""1.4.0""[exported]
    org.apache.camel.impl.converter; version=""1.4.0""[exported]
    org.apache.camel.management; version=""1.4.0""[exported]
    org.apache.camel.util.jndi; version=""1.4.0""[exported]
    org.apache.camel.util; version=""1.4.0""[exported]
    org.apache.camel.impl; version=""1.4.0""[exported]
    org.apache.camel.builder.xml; version=""1.4.0""[exported]
    org.apache.camel.component.list; version=""1.4.0""[exported]
    org.apache.camel.component.direct; version=""1.4.0""[exported]
    org.apache.camel.component.seda; version=""1.4.0""[exported]
    org.apache.camel.component.ref; version=""1.4.0""[exported]
    org.apache.camel.component.file; version=""1.4.0""[exported]
    org.apache.camel.converter; version=""1.4.0""[exported]
    org.apache.camel.language.bean; version=""1.4.0""[exported]
    org.apache.camel.model.config; version=""1.4.0""[exported]
    org.apache.camel.model.dataformat; version=""1.4.0""[exported]
    org.apache.camel.processor; version=""1.4.0""[exported]
    org.apache.camel.component.mock; version=""1.4.0""[exported]
    org.apache.camel.component.timer; version=""1.4.0""[exported]
    org.apache.camel.component.vm; version=""1.4.0""[exported]
    org.apache.camel.model.language; version=""1.4.0""[exported]
    org.apache.camel.model; version=""1.4.0""[exported]
    org.apache.camel.converter.stream; version=""1.4.0""[exported]
    org.apache.camel.builder; version=""1.4.0""[exported]
    org.apache.camel.component.jmx; version=""1.4.0""[exported]
    org.apache.camel.spi; version=""1.4.0""[exported]
    org.apache.camel; version=""1.4.0""[exported]
    org.apache.camel.component.bean; version=""1.4.0""[exported]
    org.apache.camel.language; version=""1.4.0""[exported]
    org.apache.camel.view; version=""1.4.0""[exported]
    org.apache.camel.processor.validation; version=""1.4.0""[exported]
    org.apache.camel.processor.idempotent; version=""1.4.0""[exported]
    org.apache.camel.processor.exceptionpolicy; version=""1.4.0""[exported]
    org.apache.camel.component.file.strategy; version=""1.4.0""[exported]
  Imported packages
    javax.activation; version=""0.0.0""<System Bundle [0]>
    javax.management; version=""0.0.0""<System Bundle [0]>
    javax.management.modelmbean; version=""0.0.0""<System Bundle [0]>
    javax.management.monitor; version=""0.0.0""<System Bundle [0]>
    javax.management.remote; version=""0.0.0""<System Bundle [0]>
    javax.naming; version=""0.0.0""<System Bundle [0]>
    javax.naming.spi; version=""0.0.0""<System Bundle [0]>
    javax.xml.bind.annotation; version=""0.0.0""<System Bundle [0]>
    javax.xml.namespace; version=""0.0.0""<System Bundle [0]>
    javax.xml.parsers; version=""0.0.0""<System Bundle [0]>
    javax.xml.stream; version=""0.0.0""<System Bundle [0]>
    javax.xml.transform; version=""0.0.0""<System Bundle [0]>
    javax.xml.transform.dom; version=""0.0.0""<System Bundle [0]>
    javax.xml.transform.sax; version=""0.0.0""<System Bundle [0]>
    javax.xml.transform.stream; version=""0.0.0""<System Bundle [0]>
    javax.xml.validation; version=""0.0.0""<System Bundle [0]>
    javax.xml.xpath; version=""0.0.0""<System Bundle [0]>
    org.apache.commons.logging; version=""1.1.1""<initial@reference:file:org.ops4j.pax.logging.pax-logging-api_1.1.1.jar/ [12]>
    org.osgi.framework; version=""1.4.0""<System Bundle [0]>
    org.springframework.jmx.export.annotation; version=""2.5.5""<initial@reference:file:org.springframework.bundle.spring.context_2.5.5.jar/ [15]>
    org.springframework.jmx.export.assembler; version=""2.5.5""<initial@reference:file:org.springframework.bundle.spring.context_2.5.5.jar/ [15]>
    org.springframework.jmx.export.metadata; version=""2.5.5""<initial@reference:file:org.springframework.bundle.spring.context_2.5.5.jar/ [15]>
    org.w3c.dom; version=""0.0.0""<System Bundle [0]>
    org.xml.sax; version=""0.0.0""<System Bundle [0]>
  No fragment bundles
  Named class space
    org.apache.camel.camel-core; bundle-version=""1.4.0""[provided]
  No required bundles

ceefour:1217508678:2008-07-31T20:51:18.785+0000:1217508678:2008-07-31T20:51:18.785+0000:To assist you and to make sure that future revisions of our project don't mask the bug, I've tagged it dedicated to this bug:

http://svn.assembla.com/svn/elfattah/tags/camel-774-bug
davsclaus:1217540625:2008-08-01T05:43:45.047+0000:1217540625:2008-08-01T05:43:45.047+0000:Hi Hendry

Thanks for the detailed error report. The bug is definitely that Camel fails to identify that its is a *bundle* loader
{code}
[SpringOsgiExtenderThread-2] TRACE org.apache.camel.util.ResolverUtil - It's not an osgi bundle classloader
{code}
ceefour:1217541602:2008-08-01T06:00:02.841+0000:1217541602:2008-08-01T06:00:02.841+0000:Thanks Claus. I hope this can help getting it resolved. Let me know if it is, even a snapshot will do very well for us.

Another question, is below ""DynamicImport-Package workaround"" supposed to be bug? Or it's just the way Camel needs to be configured on OSGi? If so it should be mentioned somewhere in the docs... not everybody knows that DynamicImport-Package even exists.. (even some OSGi programmers)

-----

First of all, to even get this to ""work"" requires my own bundle to have this manifest:
DynamicImport-Package: org.apache.camel.*

Failing to do so will result in more classloading errors.
davsclaus:1217543382:2008-08-01T06:29:42.799+0000:1217543382:2008-08-01T06:29:42.799+0000:Hi Hendry

I got your project and is running it with jdk6 update 7 (had to update from u3, not using java6 normally with camel development).
I can reproduce the bug on my laptop.

It actually pick ups the converters with the real bundle classloader, but since Camel will try several classloaders it gets to this one as well that we are not supposed to use.
I will work on a patch.

About the dynamic stuff. I am not an OSGi expert either but we get the attentions of the good people that know much more about this stuff.
davsclaus:1217544046:2008-08-01T06:40:46.123+0000:1217544046:2008-08-01T06:40:46.123+0000:Okay got it working now with a 1.5-SNAPSHOT.

I will improve the fix in camel-core and commit it later. I am afraid you need to use 1.5 snapshots but they are published on apache snapshot repos.

{code}
[seda:shellIn thread:1] DEBUG org.apache.camel.impl.ProducerCache - >>>> Endpoint[seda:shellOut] Exchange[Message: Thank you for saying 'Hej med dig']
[seda:shellIn thread:1] DEBUG org.apache.camel.impl.ProducerCache - >>>> Endpoint[seda:shellOut] Exchange[Message: Seriously, this is good...!]
{code}
davsclaus:1217546403:2008-08-01T07:20:03.032+0000:1217546403:2008-08-01T07:20:03.032+0000:Hendry

I have commited a patch in camel 1.5 snapshot that should work - at least on my laptop.

You can try it out by switching from 1.4.0 to 1.5-SNAPSHOT for camel-version. You can get the jars from apache snapshot maven repo
Documentation is here:
http://activemq.apache.org/camel/download.html

Wait 2-3 hours or more before the CI server have build and published the jars.
davsclaus:1217546417:2008-08-01T07:20:17.059+0000:1217546417:2008-08-01T07:20:17.059+0000:And please let us know if it works for you.
ceefour:1217551592:2008-08-01T08:46:32.042+0000:1217551592:2008-08-01T08:46:32.042+0000:Thanks Claus I'll check it out

Regarding DynamicImport-Package for me it's ""OK"" bcuz I also do it with Swing, however maybe there are better alternative

For now the workaround is that, so should put it somewhere in documentation especially the ones relating to OSGi - Camel relationship (as Camel have been touted as OSGi friendly since 1.2 esp. by James)
ceefour:1217560268:2008-08-01T11:11:08.743+0000:1217560268:2008-08-01T11:11:08.743+0000:Thanks, working fine:

http://trac.assembla.com/elfattah/changeset/26

Changeset 26

Timestamp:
    08/01/08 11:09:03 (less than one hour ago)
Author:
    ceefour
Message:

    Now using Apache Camel 1.5-SNAPSHOT, which fixed an OSGi problem. See: https://issues.apache.org/activemq/browse/CAMEL-774 . Thank you Claus Ibsen for helping me in this.

Files:

        *          trunk/elfattah-parent/pom.xml (modified) (2 diffs)
        *          trunk/elfattah-shell/debug.args (added)
        *          trunk/elfattah-shell/pom.xml (modified) (1 diff)
        *          trunk/elfattah-shell/src/main/java/org/elfattah/shell/ShellRouteBuilder.java (modified) (1 diff)


davsclaus:1234734708:2009-02-16T05:51:48.211+0000:1234734708:2009-02-16T05:51:48.211+0000:Closing all 1.5.0 issues"
0,CAMEL-773,Bug,Minor,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Unassigned,Jonathan Anstey,0,0,2008-07-30 15:06:58+00:00,2009-02-16 05:51:48+00:00,This has a simple fix - it was a spelling error,"hadrian:1217403219:2008-07-30T15:33:39.686+0000:1217403219:2008-07-30T15:33:39.686+0000:Patch applied with many thanks!
davsclaus:1234734708:2009-02-16T05:51:48.178+0000:1234734708:2009-02-16T05:51:48.178+0000:Closing all 1.5.0 issues"
0,CAMEL-772,Improvement,Major,1.4.0,2.0-M1,"
None
",Closed,Won't Fix,2.0-M1,Claus Ibsen,Claus Ibsen,0,0,2008-07-30 12:06:05+00:00,2009-10-24 11:16:12+00:00,"I had this unit test where I want to assert that the message body contains this string part



        MockEndpoint error = getMockEndpoint(""mock:errorQueue"");
        error.expectedMessageCount(1);
        error.message(0).body().contains(""<patientCpr>0101701234</patientCpr>"");




But the expression fails because the body is byte array and is not casted to String as the contains type is.
If I change the code to:



        error.message(0).body().convertTo(String.class).contains(""<patientCpr>0101701234</patientCpr>"");




Then it of course works. But what if there already is a type convert in Camel that could have done the cast for me?


But is it dangerous to add such automatic type casting behind the end-users back? Any thoughts?","davsclaus:1217391017:2008-07-30T12:10:17.854+0000:1217391017:2008-07-30T12:10:17.854+0000:Here is a snippet how I have prototyped the constains() predicate (a bit quick and dirty) but good for show and tell:

{code}
    public static <E extends Exchange> Predicate<E> contains(final Expression<E> left,
                                                             final Expression<E> right) {
        return new BinaryPredicateSupport<E>(left, right) {

            protected boolean matches(E exchange, Object leftValue, Object rightValue) {
                Object castedValue = exchange.getContext().getTypeConverter().convertTo(rightValue.getClass(), leftValue);
                if (castedValue != null) {
                    return ObjectHelper.contains(castedValue, rightValue);
                } else {
                    return ObjectHelper.contains(leftValue, rightValue);
                }
            }

            protected String getOperationText() {
                return ""contains"";
            }
        };
    }
{code}
davsclaus:1230436107:2008-12-28T11:48:27.561+0000:1230436107:2008-12-28T11:48:27.561+0000:A patch
davsclaus:1230436262:2008-12-28T11:51:02.710+0000:1230436262:2008-12-28T11:51:02.710+0000:I have attached a patch with this change. However as it's a bit magical that Camel will type convert to the right value (usually the data type on the exchange/message) before performing the matching.

But you can do: 
{code}
mock.message(0).body().contains(""<patientCpr>0101701234</patientCpr>"");
{code}
And it will convert the string to byte[] as the body() is a byte[]

You can still do the convertBodyTo as well:
{code}
mock.message(0).convertBodyTo(String.class).contains(""<patientCpr>0101701234</patientCpr>"");
{code}

davsclaus:1232447960:2009-01-20T18:39:20.445+0000:1232447960:2009-01-20T18:39:20.445+0000:The problem is that both types (right vs. left) might need to be casted and you really dont know which one was the one the end user wanted it to be expected as. "
0,CAMEL-771,Improvement,Trivial,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-07-30 11:34:14+00:00,2008-10-23 04:37:12+00:00,"If you start a route that is referenced to a bean that isn't registered in the registry you get a CamelRuntimeException.
org.apache.camel.RuntimeCamelException: target not provided]


As you can have long and complex routes it isn't the best feedback.


With a little help we can now give feedback on the node caused the problem such as:
org.apache.camel.RuntimeCamelException: target not provided for node: Processor[ref:  skyggedb]


BTW: I am wondering if we should have a special exception for misconfiguration or throw a IllegalArgumentException isntead of this ""very generic exception?"" Any thoughts?


The route in the sample is:



                from(""direct:inhouseQueue"")
                    .unmarshal().xstream()
                    .processRef(""skyggedb"")
                    .to(""mock:result"");","davsclaus:1217393567:2008-07-30T12:52:47.790+0000:1217393567:2008-07-30T12:52:47.790+0000:I changed the RuntimeCamelException to ILE as the others in the ProcessorType class.
davsclaus:1224707832:2008-10-23T04:37:12.415+0000:1224707832:2008-10-23T04:37:12.415+0000:Closing 1.5 issues"
0,CAMEL-770,Improvement,Major,None,None,"
None
",Closed,Fixed,1.5.0,Willem Jiang,James Strachan,1,1,2008-07-30 10:26:07+00:00,2009-02-16 05:51:48+00:00,"To visualise routes its kinda handy to just boot up a Camel Context and check everything configures correctly, then get the route configurations - rather than having to actually start all the routes up.


i.e. to check the configuration works - and to apply any Java / Scala / XML route creation code - but not actually start any routes processing","akuhtz:1218174996:2008-08-08T13:56:36.012+0000:1218174996:2008-08-08T13:56:36.012+0000:This would also allow to start the routes only after a user was successfully authenticated in a system if Camel is used in a client application.
janstey:1218694013:2008-08-14T14:06:53.879+0000:1218694013:2008-08-14T14:06:53.879+0000:James,

Is this what you had in mind? It seems a bit too simple to me...

Anyway, if you wanna disable the SpringCamelContext from starting routes, just set the 'shouldStartContext' system property to false.
jstrachan:1218694493:2008-08-14T14:14:53.513+0000:1218694493:2008-08-14T14:14:53.513+0000:yeah - the use case really is to be able to boot up a camel context, look at the route definitions - but then not have to actually activate the routing rules
janstey:1218695126:2008-08-14T14:25:26.487+0000:1218695126:2008-08-14T14:25:26.487+0000:Ah well, I'm pretty sure this is OK then :)

For a quick test, just run 'mvn camel:run -DshouldStartContext=false' on the camel-spring-example - no routes will be started.

This one was really meant to be used with http://issues.apache.org/activemq/browse/CAMEL-769 IIRC.
jstrachan:1218695436:2008-08-14T14:30:36.760+0000:1218695436:2008-08-14T14:30:36.760+0000:Awesome! :)
njiang:1218759751:2008-08-15T08:22:31.644+0000:1218759751:2008-08-15T08:22:31.644+0000:Applied patch with thanks to Jonathan.
http://svn.apache.org/viewvc?rev=686171&view=rev
davsclaus:1234734708:2009-02-16T05:51:48.138+0000:1234734708:2009-02-16T05:51:48.138+0000:Closing all 1.5.0 issues"
0,CAMEL-769,Improvement,Major,None,None,"
None
",Closed,Fixed,1.5.0,Hadrian Zbarcea,James Strachan,0,0,2008-07-30 10:21:35+00:00,2009-02-16 05:51:48+00:00,"e.g. 



java org.apache.camel.spring.Main -out foo.xml




Then once the CamelContext is created it grabs the getRouteDefintions() and writes them to an XML file



<routes xmlns=""..."">
  <route/> ...
</routes>




This will then make it easy for tooling to visualise the routes","janstey:1217907728:2008-08-05T11:42:08.995+0000:1217907728:2008-08-05T11:42:08.995+0000:I'm taking a look at this one.
janstey:1217931383:2008-08-05T18:16:23.847+0000:1217931383:2008-08-05T18:16:23.847+0000:This patch adds the ability to export all route definitions as an XML file. To use it, you can simply provide the '-Dcamel.routesOutputFile=foo.xml' parameter to the camel-maven-plugin run mojo. For example, running 'mvn camel:run -Dcamel.routesOutputFile=`pwd`/theroutes.xml' in the camel docs example will create the file theroutes.xml as:

{code:language=xml}
<?xml version=""1.0"" encoding=""UTF-8""?>
<routes xmlns=""http://activemq.apache.org/camel/schema/spring"">
  <route group=""org.apache.camel.example.docs.ContentBasedRouteRoute"">
    <from uri=""seda:cbr.input""/>
    <interceptor>
      <choice id=""choice1"">
        <when>
          <expressionType/>
          <to uri=""seda:cbr.output.a""/>
        </when>
        <otherwise>
          <to uri=""seda:cbr.output.b""/>
        </otherwise>
      </choice>
    </interceptor>
  </route>
  <route group=""org.apache.camel.example.docs.PipelineRoute"">
    <from uri=""seda:pipeline.in""/>
    <interceptor>
      <to id=""to1"" uri=""seda:pipeline.out1""/>
      <to id=""to2"" uri=""seda:pipeline.out2""/>
      <to id=""to3"" uri=""seda:pipeline.out3""/>
    </interceptor>
  </route>
  <route group=""org.apache.camel.example.docs.MulticastRoute"">
    <from uri=""seda:multicast.in""/>
    <interceptor>
      <multicast id=""multicast1"">
        <to uri=""seda:multicast.out1""/>
        <to uri=""seda:multicast.out2""/>
        <to uri=""seda:multicast.out3""/>
      </multicast>
    </interceptor>
  </route>
  <route>
    <from uri=""seda:other.a""/>
    <interceptor>
      <to id=""to4"" uri=""seda:other.b""/>
      <to id=""to5"" uri=""seda:other.c""/>
    </interceptor>
  </route>
</routes>
{code} 
hadrian:1217936368:2008-08-05T19:39:28.575+0000:1217936368:2008-08-05T19:39:28.575+0000:Jon, awesome patch.  I'll give it a whirl today.  I am curious if/how we could make the output reusable for starting routes say in a different context.
davsclaus:1217971058:2008-08-06T05:17:38.681+0000:1217971058:2008-08-06T05:17:38.681+0000:Sure looks killer, but I guess the interceptor tag isn't what we normally would add. Is it because of the default DeadLetterChannel adding a interceptors to all routes?
davsclaus:1217971180:2008-08-06T05:19:40.132+0000:1217971180:2008-08-06T05:19:40.132+0000:About the DLC interceptor thingy. It has borthered me a bit during debugging that the routes that is outputted nicely with toString in the debug inspector gets very long and a bit confusing because of the DLC adding the pipeline and what not.

I was wondering if there could be somekind of ""feature"" to surpress this from showing? Or is it to dangerous to not show it all? Maybe we need to discuss this on the dev forum instead of JIRA?
janstey:1217996676:2008-08-06T12:24:36.433+0000:1217996676:2008-08-06T12:24:36.433+0000:Hadrian,

Maybe I just need my morning coffee but I can't think of the usecase you are envisaging here :) Do you mean starting up a selected route on another context or taking the whole lot and loading them up on another context? In either of these scenarios I *think* the output would also need to contain a camelContext element so the factory bean could load it up properly.
janstey:1217996970:2008-08-06T12:29:30.310+0000:1217996970:2008-08-06T12:29:30.310+0000:Claus,

I agree that the internal route representation is getting quite hairy... however, I think this feature + the toString methods should show all of whats going on or it may be even more confusing to the user (i.e. showing one thing, doing another). This is just my opinion though... :) 
hadrian:1217998848:2008-08-06T13:00:48.716+0000:1217998946:2008-08-06T13:02:26.775+0000:Exactly :)

While almost all xml is defined via jaxb in oac.model, there is no root element, so those don't fully define a schema.  That is generated from camel spring.  The root element over there is camelContext correct.  That means a few things:
* camel xml can only be valid(ated) in a spring xml document, or something conforming to the spring xml schema
* the xml you generate is not valid (in the absence of a schema)
* the xml you generate cannot be later used to say instantiate a clone of the process.  i.e. if some archaeologist discovers a file generated using your method, what else should she do create an exact replica of the camel process.  

I put quite a lot of thought lately into what improvements could be made to the dsl, which imho is one of the most significant innovations in camel.  Most notably:
* How could we for instance translate from one dsl to another (java, xml, scala, etc)?
* What is the most suitable language for tooling? Is it xml, an EIP DSL (which we'd have to define)?

hadrian:1218087551:2008-08-07T13:39:11.487+0000:1218087551:2008-08-07T13:39:11.487+0000:Patch applied with thanks!
janstey:1218088411:2008-08-07T13:53:31.680+0000:1218088411:2008-08-07T13:53:31.680+0000:Thanks for looking at this Hadrian! 

Before Camel 2.0 though, we should certainly look into the great points you made earlier. In particular, the ability to switch features between DSLs seems very important. IIRC we get a lot of list traffic from folks trying out stuff in the Java DSL (cause its so damn easy) and wanting to convert their stuff over to Spring DSL for production deployment. At the very least we could have improved docs on this topic. 
davsclaus:1234734708:2009-02-16T05:51:48.065+0000:1234734708:2009-02-16T05:51:48.065+0000:Closing all 1.5.0 issues"
0,CAMEL-768,Improvement,Minor,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-07-29 17:50:46+00:00,2008-10-23 04:37:12+00:00,"The PlatformMBeanServer option should be default=true


See nabble:
http://www.nabble.com/any-reason-we-don%27t-use-the-platform-MBeanServer-by-default--td18709017s22882.html","davsclaus:1217365791:2008-07-30T05:09:51.112+0000:1217365791:2008-07-30T05:09:51.112+0000:Applied patch with thanks to William Tam
davsclaus:1224707832:2008-10-23T04:37:12.378+0000:1224707832:2008-10-23T04:37:12.378+0000:Closing 1.5 issues"
0,CAMEL-767,Improvement,Major,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-07-29 07:31:54+00:00,2008-10-23 04:37:12+00:00,"Should always exclude .camelLock and . regardless if end-user add their own list. As of now they must remember to set these as well when they provide their own list.


And maybe we should change the type from String[] to something that is easier to work with, and easier to set using Spring XML.


Also consider adding the opposite a include name pre and postfix for people not experts in regexp patterns. But then again we end up having to many options.
There could also be a regexp for exclusion, instead of only pre and postfix.","davsclaus:1217287984:2008-07-29T07:33:04.073+0000:1217287984:2008-07-29T07:33:04.073+0000:The FTP consumer should also skip *.camelLock* and *.* files. And maybe we should also have the exclude pre and postfix options on the FTPConsumers as well.
davsclaus:1217453139:2008-07-31T05:25:39.991+0000:1217453139:2008-07-31T05:25:39.991+0000:FTPConsumer should also skip any files starting with a dot.
davsclaus:1217455346:2008-07-31T06:02:26.619+0000:1217455346:2008-07-31T06:02:26.619+0000:FileConsumer *DONE*
SFTP and FTPConsumer *TODO*

davsclaus:1217497535:2008-07-31T17:45:35.115+0000:1217497535:2008-07-31T17:45:35.115+0000:Also added the excludedNamePrefix and excludedNamePostfix on the ftp consumer as we have these options on the file consumer also.
davsclaus:1224707832:2008-10-23T04:37:12.359+0000:1224707832:2008-10-23T04:37:12.359+0000:Closing 1.5 issues"
0,CAMEL-766,Improvement,Minor,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Willem Jiang,William Tam,0,0,2008-07-29 05:15:52+00:00,2010-07-01 06:10:30+00:00,"We have explored some ideas of how one may retreive protocol headers from of a Camel message in this thread: http://www.nabble.com/-PROPOSAL--ProtocolMessage-to18078001s22882.html#a18078001.  In summary, there were two train of thoughts: 1) set aside a place for ""ProtocolHeaders"" in Camel message which is strictly for storing what a component recognizes as protocol headers.  A component can still select some or all of these protocol headers to be copied to/from the native message header.  2) Using the current headers in Camel message and let people configure what should be copied to/form native message.


I thought about both approaches a bit.  I went with the later and created a patch.  I guess the problem with the first approach is it introduces one more place to look for headers.   We may end up forcing components examine both places for processing information.  


In my patch, I create a HeaderFilterStrategy that can control what to copy in/out Camel message headers.  A component can be injected with a strategy by Spring or using APIs.  I modified the following components to use this strategy: jms, cxf, http, jetty, and jhc.  Please review my patch and will update other components based on feedbacks.","davsclaus:1217500160:2008-07-31T18:29:20.484+0000:1217500160:2008-07-31T18:29:20.484+0000:Hi

Very good work. Makes the filtering logic of the headers coded ""using the same standard"". Great work.

Looks very good. Just a comment while digging into the code/javadoc:
- DefaultHeaderFilterStrategy could the class javadoc state what ""out"" direction is referred as. For completeness and not to miss understand it.
- DefaultHeaderFilterStrategy the interface methods applyFilerXXX is in the bottom of the file. I would move the to the top. And let the properties be in the bottom.
- DefaultHeaderFilterStrategy would be nice with javadoc on the extendsXXX method that implementators is supposed to use if needed

Maybe giving a hint in the class javadoc to see the camel-jms component for an example how you should use it as a component developer.

Since the applyFilterXXX methods works as *excluding* headers it can be a bit confusing at first reading the code that you use !applyFilterXXX and then add the header on a camel exchange etc. I guess it just take a little while to get used to ;) People are not good at reading the ! in if statements.


BTW: How many of the components are still to be of the same standard


wtam@iona.com:1217512203:2008-07-31T21:50:03.656+0000:1217512203:2008-07-31T21:50:03.656+0000:Thanks for the applying the patch and the feedbacks.  I will come up with a list of candidates to be updated for header filtering strategy.
wtam@iona.com:1217593666:2008-08-01T20:27:46.567+0000:1217593666:2008-08-01T20:27:46.567+0000:mail and xmpp are the only components that could be updated.  I'll work on those.  ampq inherits from jms so it is all set.
wtam@iona.com:1217797682:2008-08-04T05:08:02.550+0000:1217797682:2008-08-04T05:08:02.550+0000:headerflterstrategy_aware_patch achieves the following: 1) create a new interface ""HeaderFilterStrategyAware"" which can identify components that should support header filter strategy.  2) Remove getters/setters of the strategy from (Default)Endpoint and (Default)Component.   Endpoint and Component interfaces are not aware of the strategy.
wtam@iona.com:1217861942:2008-08-04T22:59:02.341+0000:1217861942:2008-08-04T22:59:02.341+0000:HFS_aware_plus_cxf.patch supercedes headerflterstrategy_aware.patch

It does what headerflterstrategy_aware.patch does.  It also makes CxfComponent HeaderFilterStrategy aware and the component now propagates headers like the CxfSoapComponent.
davsclaus:1218105056:2008-08-07T18:30:56.418+0000:1218105056:2008-08-07T18:30:56.418+0000:Tam are there still some components that needs to be refactored with your new strategy?

Do you mind posting a little status update? I assume all your patches have been committed by Jiang?
wtam@iona.com:1218106144:2008-08-07T18:49:04.846+0000:1218106144:2008-08-07T18:49:04.846+0000:Yea, I still have to update mail and xmpp.  I'll have it done this week.  Sorry about the delay.  Willem have applied my patches so far (and thanks).
davsclaus:1218138698:2008-08-08T03:51:38.532+0000:1218138698:2008-08-08T03:51:38.532+0000:Thanks Tam. Don't be sorry about the delay your patches are great. And we have plenty time before we start cutting a 1.5 release ;)
wtam@iona.com:1218196101:2008-08-08T19:48:21.469+0000:1218196101:2008-08-08T19:48:21.469+0000:update xmpp and mail component with header filter strategy.  Once this patch is reviewed and applied, we can resolve this issue.
hadrian:1218197534:2008-08-08T20:12:14.267+0000:1218197575:2008-08-08T20:12:55.393+0000:@William.  Last patch (xmpp_mail_hfs.patch) applied with many thanks!
davsclaus:1234734708:2009-02-16T05:51:48.017+0000:1234734708:2009-02-16T05:51:48.017+0000:Closing all 1.5.0 issues"
0,CAMEL-765,Bug,Major,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Willem Jiang,William Tam,0,0,2008-07-29 04:02:15+00:00,2008-07-29 13:15:17+00:00,"The InstrumentationProcessor currently only catches exception and sets it in the exception.   Runtime errors and throwables can be thrown all the way out of the DeadLetterChannel's process method, out of the reach of exception policy.","njiang:1217286183:2008-07-29T07:03:03.871+0000:1217286183:2008-07-29T07:03:03.871+0000:Patch applied with thanks to William.

 http://svn.apache.org/viewvc?rev=680633&view=rev"
0,CAMEL-764,Sub-task,Major,"1.3.0, 1.4.0",1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-07-28 04:30:22+00:00,2008-10-23 04:37:12+00:00,"camel-ftp should have the same move related options as the file component:



moveNamePrefix
moveNamePostfix



It is a common use-case to after downloading from a FTP Server to either:



delete the file
move it



So we should support the 2nd use-case as well.","davsclaus:1217190872:2008-07-28T04:34:32.192+0000:1217190872:2008-07-28T04:34:32.192+0000:When moving and the target filename exists, it should delete it first as the file component does. If the operations failed it should log a WARN
davsclaus:1217195629:2008-07-28T05:53:49.611+0000:1217195629:2008-07-28T05:53:49.611+0000:The regular FTP part is almost done. Need an extra unit test.
davsclaus:1217196269:2008-07-28T06:04:29.028+0000:1217196269:2008-07-28T06:04:29.028+0000:Committed the regular FTP part.

*TODO* The SFTP consumer.
davsclaus:1217196320:2008-07-28T06:05:20.964+0000:1217196320:2008-07-28T06:05:20.964+0000:*TODO* Update Wiki
davsclaus:1217320338:2008-07-29T16:32:18.272+0000:1217320338:2008-07-29T16:32:18.272+0000:Done now. Bela will help test the SFTP part.
magyardude:1217596935:2008-08-01T21:22:15.331+0000:1217596935:2008-08-01T21:22:15.331+0000:I run a couple of tests in my environment:

- moving files to sub folders that doesn't exists: PASS
- moving files where an existing file already exists (camel should try to delete the existing file first): PASS
- moving files to same folder: PASS

Notes:

- recursive=false was set at all times. I think the false should be the default not true. Wiki really should warn about the implications of the recursive poll.

- Same folder move was tested with prefix/suffix + exclusions.

- Wiki also should point out that exclusion prefix ""done/"" is not substitute for recursive=false. Or is it?? Then we have a bug .. 
davsclaus:1217822856:2008-08-04T12:07:36.289+0000:1217822856:2008-08-04T12:07:36.289+0000:Hi Bela

Thanks a lot for testing. Good point about the default value for recursive. I have changed it for Camel 1.5
davsclaus:1224707832:2008-10-23T04:37:12.335+0000:1224707832:2008-10-23T04:37:12.335+0000:Closing 1.5 issues"
0,CAMEL-763,Bug,Major,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Willem Jiang,Willem Jiang,0,0,2008-07-28 04:07:30+00:00,2009-02-16 05:51:47+00:00,"The example applications from Camel 1.4 source distribution work correctly on my machine.  After comparing the sample Spring XML configuration and my Spring configuration, I noticed there is no jmxAgent element in the sample XML where my configuration has this element.  The problem I noticed was that when the disabled attribute of the jmxAgent element is set to true, the redelivery policy does not work.   


http://www.nabble.com/DeadLetterChannel-Configuration-Camel-1.4-td18622356s22882.html#a18622356","njiang:1217203820:2008-07-28T08:10:20.835+0000:1217203820:2008-07-28T08:10:20.835+0000:http://svn.apache.org/viewvc?rev=680249&view=rev
davsclaus:1234734707:2009-02-16T05:51:47.998+0000:1234734707:2009-02-16T05:51:47.998+0000:Closing all 1.5.0 issues"
0,CAMEL-762,New Feature,Major,1.4.0,None,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-07-27 07:00:22+00:00,2008-10-23 04:37:12+00:00,"The smoks framework
http://milyn.codehaus.org/Smooks


has mappings for various data formats such as EDI, CSV, XML etc. As EDI is still a big deal in integration we should also have integration from Camel to Smoks.
There can be a license issue as smoks is GPL so we should host it at camel-extra.


TSS also had a news bit about smoks in Mule:
http://www.theserverside.com/news/thread.tss?thread_id=50129","davsclaus:1218596892:2008-08-13T11:08:12.669+0000:1218596892:2008-08-13T11:08:12.669+0000:Asked on user forum about Apache firendly license:
http://www.nabble.com/Milyn-Smoks---License-td18944385.html

However they don't wanna change
davsclaus:1218598550:2008-08-13T11:35:50.760+0000:1218598550:2008-08-13T11:35:50.760+0000:See issue #4 at camel-extra
http://code.google.com/p/camel-extra/
davsclaus:1218931200:2008-08-17T08:00:00.581+0000:1218931200:2008-08-17T08:00:00.581+0000:Added initial component in camel-extra and updated the wiki.

However we didn't gain as much as I hoped from Smooks. Only a data format to unmarshal from a stream to a XML document.
davsclaus:1224707832:2008-10-23T04:37:12.299+0000:1224707832:2008-10-23T04:37:12.299+0000:Closing 1.5 issues"
0,CAMEL-761,Task,Major,1.4.0,2.0-M3,"
None
",Closed,Fixed,2.0-M3,Claus Ibsen,Claus Ibsen,0,0,2008-07-26 16:51:00+00:00,2009-11-21 11:59:09+00:00,"We have some source in camel-core for a JMX component to monitor a JMX. Maybe we should improve the JMXConsumer, add unit tests and document it on the wiki.


Just added this ticket so its not forgotten. The component is not exposed.","davsclaus:1245743972:2009-06-23T15:59:32.440+0000:1245743972:2009-06-23T15:59:32.440+0000:the jmx component in camel-core is @deprecated and will be removed in Camel 2.0.

We do an overhaul of JMX in 2.1.
And the jmx component that is in camel-core does not work at all.
davsclaus:1245789935:2009-06-24T04:45:35.044+0000:1245789935:2009-06-24T04:45:35.044+0000:trunk: 787905.
davsclaus:1258775949:2009-11-21T11:59:09.274+0000:1258775949:2009-11-21T11:59:09.274+0000:Closing all 2.0M3 tickets"
0,CAMEL-760,Sub-task,Major,"1.3.0, 1.4.0",1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-07-26 13:41:53+00:00,2008-10-23 04:37:12+00:00,Just as the new option in the ftp component consumer.exclusiveRead we should have this option for the FileConsumer so we wont poll file that are in progress of being written.,"davsclaus:1217054953:2008-07-26T14:49:13.024+0000:1217054953:2008-07-26T14:49:13.024+0000:Commited to trunk

http://svn.apache.org/viewvc?view=rev&revision=680002
davsclaus:1217061633:2008-07-26T16:40:33.828+0000:1217061633:2008-07-26T16:40:33.828+0000:Could be an issue on unix boxes that we acquire the read access to soon. We need to test it some more and find a better solution. 
davsclaus:1217133103:2008-07-27T12:31:43.087+0000:1217133103:2008-07-27T12:31:43.087+0000:Committed a better solution using java.nio for the locking test
davsclaus:1224707832:2008-10-23T04:37:12.241+0000:1224707832:2008-10-23T04:37:12.241+0000:Closing 1.5 issues"
0,CAMEL-759,Improvement,Major,"1.2.0, 1.3.0, 1.4.0",1.5.0,"
None
",Closed,Fixed,1.5.0,Willem Jiang,Willem Jiang,0,0,2008-07-25 09:54:48+00:00,2009-02-16 05:51:47+00:00,"Added a parameter ""MultiParameterArray"" for the camel-bean take an array of parameters from body without any parameter expression work.","njiang:1216965405:2008-07-25T13:56:45.622+0000:1216965405:2008-07-25T13:56:45.622+0000:http://svn.apache.org/viewvc?rev=679753&view=rev
davsclaus:1234734707:2009-02-16T05:51:47.974+0000:1234734707:2009-02-16T05:51:47.974+0000:Closing all 1.5.0 issues"
0,CAMEL-758,Bug,Major,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-07-25 07:39:03+00:00,2008-10-23 04:37:12+00:00,"The SFTP (the secure) has this bug that it doesn't check if the folder already exsits before it tries to create the remote folder.


See nabble:
http://www.nabble.com/SftpProducer-bug-td18640519s22882.html


Bela the reported want to contribute a patch later, or he will be able to test it.","davsclaus:1216943055:2008-07-25T07:44:15.506+0000:1216943055:2008-07-25T07:44:15.506+0000:Remember to check the regular FTP producer as well, it could have similar bug.
davsclaus:1217042142:2008-07-26T11:15:42.365+0000:1217042142:2008-07-26T11:15:42.365+0000:A fix is committed
http://svn.apache.org/viewvc?view=rev&revision=679979

Bela should test it on SFTP.
magyardude:1217174513:2008-07-28T00:01:53.577+0000:1217174513:2008-07-28T00:01:53.577+0000:It works only if the last folder is missing. It seems the sftp servers don't create intrermediate folders for you. At least my server doesn't (out of the box Fedora 7). So I think we have to bring back the code to create the folders on by one.
magyardude:1217174651:2008-07-28T00:04:11.806+0000:1217174651:2008-07-28T00:04:11.806+0000:SftpProducer patch to fix the folder creation issue.
davsclaus:1217189734:2008-07-28T04:15:34.811+0000:1217189734:2008-07-28T04:15:34.811+0000:Applied patch. Thanks Bela.
davsclaus:1217189757:2008-07-28T04:15:57.220+0000:1217189757:2008-07-28T04:15:57.220+0000:Just for the record. I made the same code changes for the regular FTP producer as well.
davsclaus:1224707832:2008-10-23T04:37:12.219+0000:1224707832:2008-10-23T04:37:12.219+0000:Closing 1.5 issues"
0,CAMEL-757,Improvement,Minor,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Vadim Chekan,0,0,2008-07-25 06:59:22+00:00,2009-02-16 05:51:47+00:00,Currently XmppEndpoint support room only for producer but not for consumer.,"davsclaus:1217324637:2008-07-29T17:43:57.378+0000:1217324637:2008-07-29T17:43:57.378+0000:Vadim I anticipate that you can create the consumer part as well and attach a patch? If so we can target this for Camel 1.5?
vchekan:1217356448:2008-07-30T02:34:08.723+0000:1217356448:2008-07-30T02:34:08.723+0000:Absolutely. I'm mostly done with the code and busy with QA and junit modifications. Likely I'll be done in 1-2 weeks so 1.5 is the target.
vchekan:1217451906:2008-07-31T05:05:06.693+0000:1217451906:2008-07-31T05:05:06.693+0000:Comments for the patch:

Added support of MultiUserChat to XmppConsumer. I opted to add it into XmppConsumer instead of creating a separate XmppMultiUserchatConsumer because when I did it, it turned out to be two identical classes with slight differences.

Bug fix.
XmppConsumer listened to ""raw"" xmpp packages filtering and processing those of type ""Message"". Because of low-level nature of packages XmppConsumer failed to check either the type of message is ""error"" or ""response"" so unit test passed successfully because XmppComponent thought that message has been received when in fact echo with error message has been sent by server.
I fixed it by removing listener to the raw xmpp connection packages and utilizing smack.Chat class which does all error detecting and other low level functions. It allowed to remove some extra code from XmppConsumer.processPacket too.

XmppEndpoint
As soon as nobody listens to the raw packages, no need to have PacketFilter property anymore.
Added conference subdomain detection code (CAMEL-748 can be closed if patch is accepted)

GroupChat Producer and Consumer: added attribute to suppress history messages to be sent upon room joining.

Unit test:
Had some problems with accounts kicking out each other when log in or join room. Solved by introducing 3 different resources/nicknames for a single account.
davsclaus:1217455599:2008-07-31T06:06:39.921+0000:1217455599:2008-07-31T06:06:39.921+0000:Vadim

You have this code. Could you explain with code comments why you are creating the private chat two times?

privateChat = endpoint.getConnection().createChat(endpoint.getParticipant());
+	        privateChat.addMessageListener(this);
+	        privateChat = endpoint.getConnection().createChat(endpoint.getParticipant());

vchekan:1217457526:2008-07-31T06:38:46.307+0000:1217457526:2008-07-31T06:38:46.307+0000:/*
 * Because I'm a sleepy head :(
*/
vchekan:1217457743:2008-07-31T06:42:23.002+0000:1217457743:2008-07-31T06:42:23.002+0000:Replaced the attach.
vchekan:1217458643:2008-07-31T06:57:23.916+0000:1217458643:2008-07-31T06:57:23.916+0000:Another attempt to attach file.
davsclaus:1217461255:2008-07-31T07:40:55.036+0000:1217461255:2008-07-31T07:40:55.036+0000:Vadim, nice patch. I have a few comments:

- Would be nice with INFO logging in doStart() about connecting to ... so end-users can see what room / chat server / whatever is connected to (there is an if .. else in the start code)
- You can fix the TODO about the swallowing exceptions by wrapping in a CamelRuntimeExchangeException or what is is called - see mail on dev forum

And then is there any new stuff that needs to be updated in the wiki as well?
vchekan:1217529282:2008-08-01T02:34:42.489+0000:1217529282:2008-08-01T02:34:42.489+0000:Claus, thanks for your review and guidance.
Attached new diff.

Added logging in doStart()
I do understand the issue with exceptions now. processPacket() which sends a message is invoked asynchronously from smack library. And it is defined as not throwing any exceptions because there is nobody up in the stack to handle it.
It is tempting to add exception handling to camel process() call but it would be a bad idea. Sometimes endpoint needs information about success/failure for example jdbc endpoint would rollback transaction if message have not been sent.
So I left try/catch but I replaced e.printStackTrace with LOG.error.
vchekan:1217529343:2008-08-01T02:35:43.348+0000:1217529343:2008-08-01T02:35:43.348+0000:Oh, and I'll take care about wiki update.
davsclaus:1217540778:2008-08-01T05:46:18.482+0000:1217540778:2008-08-01T05:46:18.482+0000:Vadim. A good idea of patches is to name the files differenty, so for instance with the bug id number. You have attached a *patch.txt* that is a very small patch and not like the other one.

Could you check it out and attach the correct path ;)
vchekan:1217678147:2008-08-02T19:55:47.152+0000:1217678147:2008-08-02T19:55:47.152+0000:Ok, another attempt to attach the correct file :)
davsclaus:1217848010:2008-08-04T19:06:50.047+0000:1217848010:2008-08-04T19:06:50.047+0000:Applied patch with thanks to Vadim. Thanks again for all the hard work on the XMPP stuff.
davsclaus:1234734707:2009-02-16T05:51:47.941+0000:1234734707:2009-02-16T05:51:47.941+0000:Closing all 1.5.0 issues"
0,CAMEL-756,Bug,Major,"1.4.0, 1.5.0",None,"
None
",Closed,Fixed,2.0-M2,Jonathan Anstey,Jonathan Anstey,0,0,2008-07-24 18:09:21+00:00,2009-11-21 11:57:54+00:00,Sending a TextMessage and BytesMessage work fine but when you try to send a Serializable object it gets lost somehow... see the testJmsRouteWithObjectMessage test in http://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-amqp/src/test/java/org/apache/camel/component/amqp/AMQPRouteTest.java to see what happens.,"janstey:1216979890:2008-07-25T17:58:10.559+0000:1216979890:2008-07-25T17:58:10.559+0000:I tried the same test out on ActiveMQ and it works fine. This maybe an issue with Qpid itself or maybe how camel-jms interacts with Qpid.

Since sending a byte array works, a workaround for sending objects could be to get the AMQP component to serialize the object itself before sending it along to Qpid.

If there are no objections, I could submit a patch for this.
davsclaus:1217034052:2008-07-26T09:00:52.831+0000:1217034052:2008-07-26T09:00:52.831+0000:+1
janstey:1217234801:2008-07-28T16:46:41.370+0000:1217234801:2008-07-28T16:46:41.370+0000:After further inspection, this is a known Qpid bug. See: https://issues.apache.org/jira/browse/QPID-1092. The fix has been merged already so the next Qpid release should work.

As for the workaround I mentioned, it wouldn't work as well as I thought. By not using Qpid's ObjectMessage (and just using BytesMessage) Camel would have no way of knowing it had to auto deserialize the byte array back to an Object. This would actually be more confusing to the user IMO.

I guess we'll just have to wait until Qpid gets released again?


jstrachan:1217287257:2008-07-29T07:20:57.791+0000:1217287257:2008-07-29T07:20:57.791+0000:Yeah - lets just wait for qpid to get stable & working

davsclaus:1217320815:2008-07-29T16:40:15.683+0000:1217320815:2008-07-29T16:40:15.683+0000:Damm they have approx 250 fixed out of 400 and its just M3 to M4. There is a long way ;)
janstey:1220596588:2008-09-05T14:36:28.880+0000:1220596588:2008-09-05T14:36:28.880+0000:FYI M3 has just passed the vote so will be available soonish. The issue in Qpid has been fixed in M3 so sending ObjectMessages should be OK... a quick test didn't work for me but maybe after a little more investigation this can be solved for Camel 1.5.
davsclaus:1220689968:2008-09-06T16:32:48.057+0000:1220689968:2008-09-06T16:32:48.057+0000:Jon could you try to upgrade the dep on mina-core to the the same from the uber pom = 1.1.7

We have a conflict here:
http://activemq.apache.org/camel/maven/dependency-convergence.html
janstey:1220949955:2008-09-09T16:45:55.178+0000:1220949955:2008-09-09T16:45:55.178+0000:Unfortunately, Qpid requires MINA 1.0.1... it blows up otherwise.  
janstey:1222331997:2008-09-25T16:39:57.921+0000:1222331997:2008-09-25T16:39:57.921+0000:M3 still isn't released. I'm moving this one to Camel 2.0
davsclaus:1222903432:2008-10-02T07:23:52.748+0000:1222903432:2008-10-02T07:23:52.748+0000:Jonathan. I just got a blog news that M3 has been released.
janstey:1222917422:2008-10-02T11:17:02.416+0000:1222917422:2008-10-02T11:17:02.416+0000:Cool stuff. Doesn't seem to be in the incubating maven repo yet but I'm sure it eventually will be.
janstey:1223353637:2008-10-07T12:27:17.673+0000:1223353637:2008-10-07T12:27:17.673+0000:The Qpid project has apparently abandoned Maven altogether! I guess we could always put the qpid artifacts in a maven repo ourselves (perhaps the ServiceMix repo)?  

See: http://aidan-skinner.livejournal.com/229584.html
davsclaus:1226794010:2008-11-16T08:06:50.011+0000:1226794010:2008-11-16T08:06:50.011+0000:Jon we might need to let gertv add the M3 on the servicemix repo so we can upgrade

The M3 version is here:
http://www.apache.org/dist/incubator/qpid/M3-incubating/
janstey:1226812677:2008-11-16T13:17:57.004+0000:1226812677:2008-11-16T13:17:57.004+0000:Yeah, this seems to be our only option. I was hoping the Qpid guys would use the script I made for them to do the maven deploy... doesn't look like they've used it yet :(

Gert, would be great if you could add Qpid M3 to the ServiceMix repo. 
davsclaus:1238475410:2009-03-31T12:56:50.221+0000:1238475410:2009-03-31T12:56:50.221+0000:Jonathan they have released M4

I can upload .jars to fusesource repo, so if the M4 or later is not in a central maven repo, we should upload to our own and get this done in 2.0
http://qpid.apache.org/download.html

davsclaus:1244592755:2009-06-10T08:12:35.550+0000:1244592755:2009-06-10T08:12:35.550+0000:upgraded to qpid v0.5.0 and the object unit test now works.

trunk: 783248.
davsclaus:1258775874:2009-11-21T11:57:54.489+0000:1258775874:2009-11-21T11:57:54.489+0000:Closing all 2.0M2 tickets"
0,CAMEL-755,Bug,Major,1.4.0,None,"
None
",Closed,Fixed,1.5.0,Unassigned,Jonathan Anstey,0,0,2008-07-24 18:02:12+00:00,2009-02-16 05:51:47+00:00,"The AMQP tests are currently disabled. Adding an older version of MINA (than Camel uses) & commons lang to the classpath got the tests passing except for ObjectMessage type test.


Sending a TextMessage and BytesMessage work fine so I'm opening up a separate JIRA for the ObjectMessage issue.","janstey:1216894351:2008-07-24T18:12:31.929+0000:1216894351:2008-07-24T18:12:31.929+0000:Granting Apache license this time around...
davsclaus:1216896326:2008-07-24T18:45:26.186+0000:1216896326:2008-07-24T18:45:26.186+0000:Applied patch with thanks.
davsclaus:1234734707:2009-02-16T05:51:47.922+0000:1234734707:2009-02-16T05:51:47.922+0000:Closing all 1.5.0 issues"
0,CAMEL-754,New Feature,Major,None,None,"
None
",Closed,Won't Fix,Future,Unassigned,James Strachan,0,0,2008-07-24 13:56:34+00:00,2010-02-07 09:54:15+00:00,see http://code.google.com/p/gxp/,davsclaus:1220498650:2008-09-04T11:24:10.073+0000:1220498650:2008-09-04T11:24:10.073+0000:Moving to 2.0
0,CAMEL-753,Improvement,Major,None,None,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,James Strachan,0,0,2008-07-24 13:55:38+00:00,2009-02-16 05:51:47+00:00,"It'd be nice to see the camel archetypes along with things like struts, appfuse and the other default archetypes in the eclipse tooling for maven","janstey:1217222651:2008-07-28T13:24:11.607+0000:1217222651:2008-07-28T13:24:11.607+0000:I'm taking a look at this today.
janstey:1217223858:2008-07-28T13:44:18.185+0000:1217223858:2008-07-28T13:44:18.185+0000:After looking at http://svn.sonatype.org/nexus/trunk/nexus-indexer/src/main/java/org/sonatype/nexus/index/creator/MinimalArtifactInfoIndexCreator.java, it seems that archetypes need to have 'archetype' somewhere in the groupId/artifactId in order for Nexus (& m2eclipse) to pick them up.

I've attached a simple patch for this issue. 


janstey:1217223900:2008-07-28T13:45:00.587+0000:1217223900:2008-07-28T13:45:00.587+0000:The screenshot shows that the Nexus Indexer picks up the locally built Camel archetype perfectly! :D We'll have to wait for the 1.5 release though to get them in the default list from repo1.maven.org...
janstey:1217224031:2008-07-28T13:47:11.598+0000:1217224031:2008-07-28T13:47:11.598+0000:Of course, once this patch is applied I'll go ahead and update http://activemq.apache.org/camel/creating-a-new-spring-based-camel-route.html
davsclaus:1217320573:2008-07-29T16:36:13.341+0000:1217320573:2008-07-29T16:36:13.341+0000:Jonathan. Thanks for the patch. I have applied it. Feel free to update the wiki.
janstey:1217390193:2008-07-30T11:56:33.871+0000:1217390193:2008-07-30T11:56:33.871+0000:Its updated now. Once 1.5 gets released (and shows up in m2eclipse) we should definitely mention the m2eclipse create project option as an alternative to the command line.
davsclaus:1217390921:2008-07-30T12:08:41.238+0000:1217390921:2008-07-30T12:08:41.238+0000:Jonathan you could write something about this on the release note page:
http://activemq.apache.org/camel/camel-150-release.html

Then its not forgotten and that it should show up in m2eclipse.
janstey:1217391553:2008-07-30T12:19:13.863+0000:1217391553:2008-07-30T12:19:13.863+0000:Done. :)
davsclaus:1234734707:2009-02-16T05:51:47.897+0000:1234734707:2009-02-16T05:51:47.897+0000:Closing all 1.5.0 issues"
0,CAMEL-752,New Feature,Major,1.4.0,Future,"
None
",Resolved,Later,Future,Gert Vanthienen,Gert Vanthienen,0,1,2008-07-24 07:59:12+00:00,2012-07-06 07:54:45+00:00,"Actors in Scala are concurrent processes that communicate by exchanging messages.  We should add a component that allows people to use Scala actors for implementing concurrent execution in Camel, even from within the Java/Spring DSLs.



from(""direct:a"").to(""actor:pong"");
from(""actor:pong"").process(...);","davsclaus:1220498650:2008-09-04T11:24:10.221+0000:1220498650:2008-09-04T11:24:10.221+0000:Moving to 2.0
davsclaus:1258777195:2009-11-21T12:19:55.363+0000:1258777195:2009-11-21T12:19:55.363+0000:Gertv I am closing this one.

Feel free to create new tickets in the future for any work on camel-scala
davsclaus:1258777268:2009-11-21T12:21:08.560+0000:1258777268:2009-11-21T12:21:08.560+0000:Ups sorry I though this was the initial ticket for camel-scala

Obvious this is for using actors
davsclaus:1341532460:2012-07-06T07:54:20.826+0000:1341532460:2012-07-06T07:54:20.826+0000:Is there any demand for this? People can use camel-akka for example
davsclaus:1341532485:2012-07-06T07:54:45.225+0000:1341532485:2012-07-06T07:54:45.225+0000:Lets close old ticket that are not in demand."
0,CAMEL-751,Improvement,Major,"1.3.0, 1.4.0",1.5.0,"
None
",Closed,Fixed,1.5.0,Willem Jiang,Willem Jiang,0,0,2008-07-24 07:55:32+00:00,2009-02-16 05:51:47+00:00,"Current ErrorHandler instance is get from RouterBuilder, but if we set the ErrorHandler into the CamelContext,  RouterBuilder will not take that into consideration.
You can find more information here[1]


[1] http://www.nabble.com/DeadLetterChannel-Configuration-Camel-1.4-td18622356s22882.html#a18622356","njiang:1216867612:2008-07-24T10:46:52.954+0000:1216867612:2008-07-24T10:46:52.954+0000:http://svn.apache.org/viewvc?rev=679345&view=rev
davsclaus:1234734707:2009-02-16T05:51:47.870+0000:1234734707:2009-02-16T05:51:47.870+0000:Closing all 1.5.0 issues"
0,CAMEL-750,Bug,Major,1.4.0,1.5.0,"
None
",Closed,Cannot Reproduce,1.5.0,Unassigned,Vadim Chekan,0,0,2008-07-24 06:11:14+00:00,2008-07-25 06:41:21+00:00,"Apparently xmpp component can produce consumers endpoint but so far I wasn't successful running it.
Neither this feature is mentioned in documentation.
Neither it is covered by nunit.


Code:
		from(""xmpp://xxxxxxx@jabber.org/?password=xxxxxxx&participant=yyyyyyy@jabber.org"").
		to(""mock:vadim"");","vchekan:1216939272:2008-07-25T06:41:12.589+0000:1216939272:2008-07-25T06:41:12.589+0000:Ok, it was an issue with me logged in into xmpp server twice. Works fine now."
0,CAMEL-749,Sub-task,Minor,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-07-24 06:00:31+00:00,2008-10-23 04:37:12+00:00,Upgrade pom.xml to v1.3,davsclaus:1224707832:2008-10-23T04:37:12.186+0000:1224707832:2008-10-23T04:37:12.186+0000:Closing 1.5 issues
0,CAMEL-748,Improvement,Minor,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Unassigned,Vadim Chekan,0,0,2008-07-24 04:58:48+00:00,2009-02-16 05:51:47+00:00,"Usually rooms are on URL which is different from the server url. For example if you login as me@jabber.org then rooms will be room33@conferences.jabber.org.
Use xmpp discovery to find what rooms server is and make it possible to set room by name instead of room@server.
Preserve backward compatibilty by analyzing room string and if there is no ""@"" symbol then perform autodiscovery.","davsclaus:1217324695:2008-07-29T17:44:55.840+0000:1217324695:2008-07-29T17:44:55.840+0000:Vadim feel free to submit a patch with this feature.
vchekan:1217356127:2008-07-30T02:28:47.627+0000:1217356127:2008-07-30T02:28:47.627+0000:Sure Claus. The fix is ready and I'm working on junit now.
davsclaus:1217848086:2008-08-04T19:08:06.054+0000:1217848086:2008-08-04T19:08:06.054+0000:Resolved by CAMEL-757
davsclaus:1234734707:2009-02-16T05:51:47.833+0000:1234734707:2009-02-16T05:51:47.833+0000:Closing all 1.5.0 issues"
0,CAMEL-747,Bug,Major,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-07-23 19:17:01+00:00,2008-10-23 04:37:12+00:00,"Using the $headerkey shorthand for xpath expression throws a NPE if the headerkey doesn't exists on the in message.


We should try to find a better workaround for key doesn't exists. The NPE is thrown by SUN in their xpath engine.


Check nabble:
http://www.nabble.com/Camel-XPath-and-no-variables-found-in-MessageVariableResolver---What-should-Camel-do--td18603960s22882.html","davsclaus:1216813550:2008-07-23T19:45:50.610+0000:1216813550:2008-07-23T19:45:50.610+0000:Fixed in trunk, rev 679170
davsclaus:1224707832:2008-10-23T04:37:12.168+0000:1224707832:2008-10-23T04:37:12.168+0000:Closing 1.5 issues"
0,CAMEL-746,Sub-task,Major,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Jonathan Anstey,0,0,2008-07-23 18:22:04+00:00,2009-02-16 05:51:47+00:00,No Desc,"janstey:1216808791:2008-07-23T18:26:31.939+0000:1216808791:2008-07-23T18:26:31.939+0000:This patch adds support for setting the out header in the Spring DSL. 

I've also made a few modifications to the setHeader DSL method:
  - Removed the SetHeaderProcessor because it was much cleaner to just use the ProcessorBuilder's version of this.
  - Removed the ability to have a child processor in the <setHeader> element. There is a good reason for this: (1) the Java DSL doesn't even support this, (2) its really not intuitive and no one IMO would want to use it! :)
davsclaus:1216811564:2008-07-23T19:12:44.536+0000:1216811564:2008-07-23T19:12:44.536+0000:Jonathan, great patch.

I am wondering if we can improve the tag for the attribute only solution as below:
+      <setOutHeader headerName=""theHeader"" value=""the value"">
+        <expression/>        
+      </setOutHeader>

It requires the empty expression tag that is a bit confusing for end-users. Wold be great with:
+      <setOutHeader headerName=""theHeader"" value=""the value""/>

But I guess its declare in the XSD file.

If not maybe we should not support the value attribute and force the child expression tag
+      <setOutHeader headerName=""theHeader"">
+        <constant>the value</constant>
+      </setOutHeader>


janstey:1216815115:2008-07-23T20:11:55.699+0000:1216815115:2008-07-23T20:11:55.699+0000:Hey Claus, I'm not sure if we can support this format

<setOutHeader headerName=""theHeader"" value=""the value""/> 

because the XmlElementRef JAXB attribute cannot be set to optional (thus the expression node is mandatory)... I haven't looked at depth into this though. There may be another way around this.

I do like the second option however. I think the main bit there would be adding the 'constant' expression type to the Spring DSL as its not there currently. Shouldn't be too bad. I'll take a look tomorrow.
janstey:1216881687:2008-07-24T14:41:27.330+0000:1216881687:2008-07-24T14:41:27.330+0000:I've switched things up a bit and now the setHeader/setOutHeader features use the following nicer syntax for constants:

{code:language=xml}
<route>
  <from uri=""seda:a""/>
  <setOutHeader headerName=""theHeader"">
    <constant>the value</constant>
  </setOutHeader>
  <to uri=""mock:b""/>     
</route>
{code}

davsclaus:1216894390:2008-07-24T18:13:10.331+0000:1216894390:2008-07-24T18:13:10.331+0000:We must remember to update the wiki documentation with this new constant in the spring xml.
janstey:1216895526:2008-07-24T18:32:06.546+0000:1216895526:2008-07-24T18:32:06.546+0000:How about this?

http://cwiki.apache.org/confluence/display/CAMEL/Constant
janstey:1216895579:2008-07-24T18:32:59.823+0000:1216895579:2008-07-24T18:32:59.823+0000:I also added the link here http://cwiki.apache.org/confluence/display/CAMEL/Languages+Supported so it would show up elsewhere in the documentation.
davsclaus:1216895770:2008-07-24T18:36:10.612+0000:1216895770:2008-07-24T18:36:10.612+0000:Very good. Could you state that constant language is in Camel 1.5.
davsclaus:1216895889:2008-07-24T18:38:09.290+0000:1216895889:2008-07-24T18:38:09.290+0000:Applied patch. Thanks a lot Jonathan. Great work with the new constant language to not make the spring DSL confusing with the empty expression tags.

Committed revision 679483.
janstey:1216896362:2008-07-24T18:46:02.727+0000:1216896362:2008-07-24T18:46:02.727+0000:I've added the availability comment in the docs. I'm glad to see the empty expression tags go too :) 
davsclaus:1216896431:2008-07-24T18:47:11.086+0000:1216896431:2008-07-24T18:47:11.086+0000:Again thanks a lot, its a great patch (as always from you)
davsclaus:1216942539:2008-07-25T07:35:39.069+0000:1216942539:2008-07-25T07:35:39.069+0000:Jonathan, I assume the <constant> also works for the regular setHeader tag as well? If so I think we should add a sample with setHeader to the wiki as well. I do think setHeader is more used than setOutHeader.

If the regular setHeader has the value attribute also, we should probably @deprecated it, so we remember to remove it in Camel 2.0
janstey:1216957605:2008-07-25T11:46:45.379+0000:1216957605:2008-07-25T11:46:45.379+0000:This patch deprecates the setHeader+value attribute DSL method and changes a bunch of usages so any snippets on the wiki will be updated. I've also added a little comment to the Camel 1.5 release notes so any users won't be surprised by this change.
davsclaus:1216978392:2008-07-25T17:33:12.688+0000:1216978392:2008-07-25T17:33:12.688+0000:Applied patch no 3. Thanks.
davsclaus:1234734707:2009-02-16T05:51:47.798+0000:1234734707:2009-02-16T05:51:47.798+0000:Closing all 1.5.0 issues"
0,CAMEL-745,Improvement,Major,1.4.0,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Jonathan Anstey,Jonathan Anstey,0,0,2008-07-23 11:57:24+00:00,2009-07-31 06:33:34+00:00,No Desc,"davsclaus:1220498650:2008-09-04T11:24:10.175+0000:1220498650:2008-09-04T11:24:10.175+0000:Moving to 2.0
janstey:1222145986:2008-09-23T12:59:46.833+0000:1222145986:2008-09-23T12:59:46.833+0000:Assigning this to me so I don't forget about it.
janstey:1222332196:2008-09-25T16:43:16.191+0000:1222332196:2008-09-25T16:43:16.191+0000:Removing fault stuff from list as this will be most likely deprecated. 

org.apache.camel.model.ProcessorType.removeFaultHeader(String)
org.apache.camel.model.ProcessorType.setFaultBody(Expression)
org.apache.camel.model.ProcessorType.setFaultHeader(String, Expression)
janstey:1222332277:2008-09-25T16:44:37.661+0000:1222332277:2008-09-25T16:44:37.661+0000:Removing org.apache.camel.model.ProcessorType.convertFaultBodyTo(Class) from the list as faults will be changed to outputs in Camel 2.0.


janstey:1222334826:2008-09-25T17:27:06.464+0000:1222334826:2008-09-25T17:27:06.464+0000:Removing org.apache.camel.model.ProcessorType.end() as this is handled implicitly in the Spring DSL.

janstey:1222335985:2008-09-25T17:46:25.171+0000:1222335985:2008-09-25T17:46:25.171+0000:org.apache.camel.model.ProcessorType.policies() - not even sure how this would be used from the Spirng DSL... not sure why it was in my original list.
janstey:1222401274:2008-09-26T11:54:34.066+0000:1222401274:2008-09-26T11:54:34.066+0000:Deprecated org.apache.camel.model.ProcessorType.trace() and org.apache.camel.model.ProcessorType.trace(String) in revision 699285.
davsclaus:1222648117:2008-09-29T08:28:37.085+0000:1222648117:2008-09-29T08:28:37.085+0000:Java DSL: exception
Spring DSL: onException

I think we should align these.
janstey:1222663739:2008-09-29T12:48:59.044+0000:1222663739:2008-09-29T12:48:59.044+0000:I've updated the Java DSL to align with Spring. We now have onException for both.
davsclaus:1222682308:2008-09-29T17:58:28.993+0000:1222682308:2008-09-29T17:58:28.993+0000:Java DSL: method(bean, method)
Spring DSL: methodCall(bean, method)

Example here:
http://activemq.apache.org/camel/bean-language.html
janstey:1222682984:2008-09-29T18:09:44.253+0000:1222682984:2008-09-29T18:09:44.253+0000:Nice catch! I kinda like the method() name better which means we'd have to deprecate the Spring DSL methodCall element. Not sure how to do this without duplicating all the JAXB classes (yuck!). I think I'll just assign myself a JIRA to change this is 2.0 when we're not afraid to break API stuff :) 
davsclaus:1222687091:2008-09-29T19:18:11.090+0000:1222687091:2008-09-29T19:18:11.090+0000:Java DSL: script(""js"", ""some javascript here"")
Spring DSL: <expression language=""js"">some javascript here</expression>

And with the Java DSL you can add attributes to the script engine. This is not possible at all with spring DSL today.

See: http://cwiki.apache.org/confluence/display/CAMEL/Scripting+Languages+Context
davsclaus:1222939067:2008-10-02T17:17:47.070+0000:1222939067:2008-10-02T17:17:47.070+0000:Could there be a problem when using the recipientList in spring xml you can not build expressions with eg a tokenizer.

Eg: http://activemq.apache.org/camel/recipient-list.html
the last java example:

from(""direct:a"").recipientList(
        header(""recipientListHeader"").tokenize("",""));

How do you do this in spring XML.

And end user indicated he could not do this
janstey:1222941485:2008-10-02T17:58:05.762+0000:1222941485:2008-10-02T17:58:05.762+0000:Yikes, I think you've uncovered a major gap here! It doesn't look like we can do any of the chained expression stuff in the Spring XML. If you look in ValueBuilder, there are a bunch of things in there which we can only do in the Java DSL.
davsclaus:1223249306:2008-10-06T07:28:26.865+0000:1223249306:2008-10-06T07:28:26.865+0000:Well I think closing the gap should be a major goal in Camel 2.0 then ;)
davsclaus:1224575429:2008-10-21T15:50:29.406+0000:1224575429:2008-10-21T15:50:29.406+0000:Maybe we need to rework the spring DSL so we group outputs in a nested shadow element, to not confuse end users and having to many options in the ctrl + editor helper

eg: onException has these outputs currently (see below) and all that is mixed with the important elements you need to configure specially for onException. And the editor unlike (IDEA) doesnt bold the important ones.


{code}
 <xs:choice maxOccurs=""unbounded"" minOccurs=""0"">
            <xs:element ref=""tns:aggregator""/>
            <xs:element ref=""tns:bean""/>
            <xs:element ref=""tns:catch""/>
            <xs:element ref=""tns:choice""/>
            <xs:element ref=""tns:when""/>
            <xs:element ref=""tns:otherwise""/>
            <xs:element ref=""tns:convertBodyTo""/>
            <xs:element ref=""tns:delayer""/>
            <xs:element ref=""tns:onException""/>
            <xs:element ref=""tns:filter""/>
            <xs:element ref=""tns:finally""/>
            <xs:element ref=""tns:handleFault""/>
            <xs:element ref=""tns:interceptor""/>
            <xs:element ref=""tns:idempotentConsumer""/>
            <xs:element ref=""tns:intercept""/>
            <xs:element ref=""tns:loadBalance""/>
            <xs:element ref=""tns:loop""/>
            <xs:element ref=""tns:marshal""/>
            <xs:element ref=""tns:multicast""/>
            <xs:element ref=""tns:pipeline""/>
            <xs:element ref=""tns:policy""/>
            <xs:element ref=""tns:proceed""/>
            <xs:element ref=""tns:process""/>
            <xs:element ref=""tns:recipientList""/>
            <xs:element ref=""tns:removeHeader""/>
            <xs:element ref=""tns:removeProperty""/>
            <xs:element ref=""tns:resequencer""/>
            <xs:element ref=""tns:route""/>
            <xs:element ref=""tns:routingSlip""/>
            <xs:element ref=""tns:setBody""/>
            <xs:element ref=""tns:setHeader""/>
            <xs:element ref=""tns:setOutHeader""/>
            <xs:element ref=""tns:setProperty""/>
            <xs:element ref=""tns:splitter""/>
            <xs:element ref=""tns:thread""/>
            <xs:element ref=""tns:throttler""/>
            <xs:element ref=""tns:throwFault""/>
            <xs:element ref=""tns:to""/>
            <xs:element ref=""tns:transform""/>
            <xs:element ref=""tns:try""/>
            <xs:element ref=""tns:unmarshal""/>
          </xs:choice>
{code}
davsclaus:1235092238:2009-02-20T09:10:38.286+0000:1235092238:2009-02-20T09:10:38.286+0000:You can now do:
{code}
<recipientList delimiter="","">
    <header>myHeader</header>
  </recipientList>
{code}
davsclaus:1248993214:2009-07-31T06:33:34.138+0000:1248993214:2009-07-31T06:33:34.138+0000:Closing 2.0m1 tickets"
0,CAMEL-744,Bug,Critical,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Unassigned,Vadim Chekan,0,0,2008-07-22 18:52:11+00:00,2008-10-23 19:51:44+00:00,"1. Set -Dfile.encoding=Cp1252


2. Set tracing ON.


3. Run the code:
====================================================
from(""timer://kickoff?period=10000"").
		process(new Processor() {
			public void process(Exchange exchange) throws Exception 

{
				ArrayList<HashMap<String, Object>> rows = new ArrayList<HashMap<String, Object>>();
				HashMap<String, Object> row = new HashMap<String, Object>();
				row.put(""column1"", ""Value 1"");
				rows.add(row);
				exchange.getOut().setBody(rows);
			}

		}).
		marshal().xstream().
		to(""mock:result"");
====================================================


3. Observe output:
====================================================
Jul 22, 2008 11:35:28 AM org.apache.camel.processor.Logger process
INFO: ID-vchekan/4855-1216751728436/1-0 -> interceptor1 Interceptor[Delegate(Pipeline[DeadLetterChannel[Delegate(TraceInterceptor[Processor[enviance.org.test.MessageBrokerPackage$1@13e0aba]]), RecipientList[log:org.apache.camel.DeadLetterChannel?level=error], RedeliveryPolicy[maximumRedeliveries=6]], DeadLetterChannel[Delegate(TraceInterceptor[Marshal[org.apache.camel.model.dataformat.XStreamDataFormat@3257b8]]), RecipientList[log:org.apache.camel.DeadLetterChannel?level=error], RedeliveryPolicy[maximumRedeliveries=6]], DeadLetterChannel[Delegate(TraceInterceptor[To[mock:result]]), RecipientList[log:org.apache.camel.DeadLetterChannel?level=error], RedeliveryPolicy[maximumRedeliveries=6]]])] InOnly Properties:

{org.apache.camel.timer.time=null, org.apache.camel.timer.period=10000, org.apache.camel.timer.name=kickoff} Headers:{} BodyType:null Body:Message: null


Jul 22, 2008 11:35:28 AM org.apache.camel.processor.Logger process


INFO: ID-vchekan/4855-1216751728436/1-0 -> processor1 Processor
[enviance.org.test.MessageBrokerPackage$1@13e0aba]
 InOnly Properties:{org.apache.camel.timer.time=null, org.apache.camel.timer.period=10000, CamelCauseException=null, org.apache.camel.timer.name=kickoff} Headers:{} BodyType:null Body:Message: null


Jul 22, 2008 11:35:28 AM org.apache.camel.processor.Logger process


INFO: ID-vchekan/4855-1216751728436/1-0 -> marshal1 Marshal
[org.apache.camel.model.dataformat.XStreamDataFormat@3257b8]
 InOnly Properties:{org.apache.camel.timer.time=null, org.apache.camel.timer.period=10000, CamelCauseException=null, org.apache.camel.timer.name=kickoff} Headers:{} BodyType:java.util.ArrayList Body:
[{column1=Value 1}]


Jul 22, 2008 11:35:29 AM org.apache.camel.processor.Logger process


INFO: ID-vchekan/4855-1216751728436/1-0 -> to1 To
[mock:result]
 InOnly Properties:{org.apache.camel.timer.time=null, org.apache.camel.timer.period=10000, CamelCauseException=null, org.apache.camel.timer.name=kickoff} Headers:{} BodyType:[B Body:


====================================================





As you see xstream returms an empty array (the end of the last line).





4. Change encoding in step 1 to -Dfile.encoding=UTF-8 and re-run the application.


====================================================


Jul 22, 2008 11:40:18 AM org.apache.camel.processor.Logger process


INFO: ID-vchekan/4875-1216752017927/1-0 -> interceptor1 Interceptor[Delegate(Pipeline[DeadLetterChannel[Delegate(TraceInterceptor[Processor
[enviance.org.test.MessageBrokerPackage$1@13e0aba]
]), RecipientList
[log:org.apache.camel.DeadLetterChannel?level=error]
, RedeliveryPolicy
[maximumRedeliveries=6]
], DeadLetterChannel[Delegate(TraceInterceptor[Marshal
[org.apache.camel.model.dataformat.XStreamDataFormat@3257b8]
]), RecipientList
[log:org.apache.camel.DeadLetterChannel?level=error]
, RedeliveryPolicy
[maximumRedeliveries=6]
], DeadLetterChannel[Delegate(TraceInterceptor[To
[mock:result]
]), RecipientList
[log:org.apache.camel.DeadLetterChannel?level=error]
, RedeliveryPolicy
[maximumRedeliveries=6]
]])] InOnly Properties:{org.apache.camel.timer.time=null, org.apache.camel.timer.period=10000, org.apache.camel.timer.name=kickoff}

 Headers:{} BodyType:null Body:Message: null
Jul 22, 2008 11:40:18 AM org.apache.camel.processor.Logger process
INFO: ID-vchekan/4875-1216752017927/1-0 -> processor1 Processor[enviance.org.test.MessageBrokerPackage$1@13e0aba] InOnly Properties:

{org.apache.camel.timer.time=null, org.apache.camel.timer.period=10000, CamelCauseException=null, org.apache.camel.timer.name=kickoff} Headers:{} BodyType:null Body:Message: null


Jul 22, 2008 11:40:18 AM org.apache.camel.processor.Logger process


INFO: ID-vchekan/4875-1216752017927/1-0 -> marshal1 Marshal
[org.apache.camel.model.dataformat.XStreamDataFormat@3257b8]
 InOnly Properties:{org.apache.camel.timer.time=null, org.apache.camel.timer.period=10000, CamelCauseException=null, org.apache.camel.timer.name=kickoff}

 Headers:{} BodyType:java.util.ArrayList Body:[

{column1=Value 1}

]
Jul 22, 2008 11:40:18 AM org.apache.camel.processor.Logger process
INFO: ID-vchekan/4875-1216752017927/1-0 -> to1 To[mock:result] InOnly Properties:

{org.apache.camel.timer.time=null, org.apache.camel.timer.period=10000, CamelCauseException=null, org.apache.camel.timer.name=kickoff}

 Headers:{} BodyType:[B Body:<?xml version=""1.0"" ?><list><map><entry><string>column1</string><string>Value 1</string></entry></map></list>
====================================================


You see xml now.


I think it is a bug when xstream component silently refuses to work by producing empty output. It should either take into account configured encoding when producing output or explicitly refuse to work if encoding is ""wrong"" (throw an exception explaining the reasons of error).


Fixing this error is important because it affects at least 2 windows environments: Eclipse and ActiveMQ.
By default Eclipse on Windows has Cp1252 encoding set.
I do not know what encoding is set in ActiveMQ for Windows but it does not work unless activemq.bat is edited and encoding is explicitly set there.","davsclaus:1216850388:2008-07-24T05:59:48.615+0000:1216850388:2008-07-24T05:59:48.615+0000:Vadim I have tried to reproduce the bug but failed. I have added a unit test to camel-xstream component: MarshalListTest

I have also upgraded the xstream .jars in the pom.xml to newer releases. So could you try it out with the 1.5-SNAPSHOT version?
vchekan:1216933422:2008-07-25T05:03:42.909+0000:1216933422:2008-07-25T05:03:42.909+0000:This is getting interesting Claus.
I've upgraded to trunk and I still can reproduce the issue.
In my output in eclipse there is no encoding in xml. But I get it in the test. And maven tests pass on my box.
So now I have 3 combinations: no body at all, xml without encoding and xml with encoding 8)
I keep working on it.
vchekan:1216938505:2008-07-25T06:28:25.277+0000:1216938505:2008-07-25T06:28:25.277+0000:Claus, looks like upgrade to xstream 1.3 solved the problem. After I refreshed my eclipse project and made sure that xstream-1.3.jar is loaded I have xml output with explicit encoding whichever file.encofing I set.
You can close the issue. Thanks!
vchekan:1216938595:2008-07-25T06:29:55.427+0000:1216938595:2008-07-25T06:29:55.427+0000:Actually I can close it :)"
0,CAMEL-743,New Feature,Major,None,2.6.0,"
None
",Closed,Duplicate,2.6.0,Willem Jiang,James Strachan,0,0,2008-07-22 15:07:27+00:00,2011-04-24 09:57:07+00:00,"for more background see...



console and commands
extending the console



some ideas for what the console can do



listing routes and the steps in routes
dynamically add some simple routes. e.g. type in ""from uri to uri"". Maybe the Scala DSL could be its own shell?
enable/disable tracing
debugging? e.g. stepping through, setting breakpoints
enable/disable a 'go slow dial' for easier debugging etc","njiang:1217379426:2008-07-30T08:57:06.295+0000:1217379426:2008-07-30T08:57:06.295+0000:Hi James,

I think this command line console should be placed in the camel trunk to avoid the camel-core dependency on the ServiceMix side.
Now I have no idea about how to implement the dynamical adding simple routes. How can I map the ""from uri to  uri"" to a Java DSL file without writing a stupid parser ?

Can you show me some hits ?

Thanks,

Willem
jstrachan:1217380369:2008-07-30T09:12:49.341+0000:1217380369:2008-07-30T09:12:49.341+0000:Agreed on putting it into the camel distro; it should only depend on some gshell stuff which shouldn't change very much. 

How about we start by adding the easy stuff; like listing all routes, endpoints. 

Something like an ls command? 

Maybe we should make a kinda virtual camel file system - kinda like unix. e.g. 

{code} 
camel> ls 
routes endpoints 
camel> cd endpoints 
camel> ls 
direct:foo mock:cheese 
camel> ls -l 
direct:foo org.apache.camel.component.direct.DirectEndpoint 
mock:cheese org.apache.camel.component.mock.MockEndpoint 
camel> cd ../routes 
camel> ls 
route1 route2 route3 
camel> cd route1 
camel> ls -al 
from1 to1 to2 
camel> ls -al 
from1 direct:foo 
to1 mock:cheese 
camel> cd mock:cheese 
camel> ls 
properties exchanges 
camel> cd exchanges 
camel> ls 
exchangeId1 exchangeId2 exchangeId3 
camel> cd exchangeId1 
camel> ls 
properties in out 
{code} 

You get the idea :) 

i.e. maybe we write a little generic kinda cd / ls file system shell which can be really easy to extend can then navigate around all the available endpoints & routes showing a summary listing or a detail listing etc. 

(Maybe we can just make this a kinda JMX browser really - not sure). 

Then other things we'd need to add are things like [turning on / off tracing|http://activemq.apache.org/camel/tracer.html], or enable/disable the the [delayer to really slow down the processing of routes so its easy to watch|http://issues.apache.org/activemq/browse/CAMEL-640] - or even allowing stepping through routes maybe via the [debugger|http://activemq.apache.org/camel/debugger.html] and showing the contents of endpoints (i.e. showing what the tracer has collected). 

To answer your question on how to add new routes via a shell - maybe we just have a separate camel-scala shell that lets you type in the [scala DSL|http://activemq.apache.org/camel/scala-dsl.html]?
njiang:1217381867:2008-07-30T09:37:47.301+0000:1217381867:2008-07-30T09:37:47.301+0000:Thanks, James,
It is much clearer for me.

I just have another question, how can I get the camel context from the gshell ?
Is there any registry in the SMX where I can look it up ?


jstrachan:1217382175:2008-07-30T09:42:55.027+0000:1217382175:2008-07-30T09:42:55.027+0000:Its probably best to use JMX for all this I think - it avoids possible class loader issues. Though maybe we could use the OSGi registry too; but JMX is probably simpler
njiang:1217383363:2008-07-30T10:02:43.259+0000:1217383363:2008-07-30T10:02:43.259+0000:OK, I will try JMX first :)
davsclaus:1220498650:2008-09-04T11:24:10.870+0000:1220498650:2008-09-04T11:24:10.870+0000:Moving to 2.0
hadrian:1292417821:2010-12-15T20:57:01.648+0000:1292417821:2010-12-15T20:57:01.648+0000:CAMEL-3383 will do it in Apache Karaf
davsclaus:1303610227:2011-04-24T09:57:07.650+0000:1303610227:2011-04-24T09:57:07.650+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-742,New Feature,Major,1.3.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Gert Vanthienen,Gert Vanthienen,0,0,2008-07-22 12:22:35+00:00,2009-02-16 05:51:47+00:00,Add a maven archetype to allow users to easily create/use a Scala DSL RouteBuilder,"davsclaus:1220498650:2008-09-04T11:24:10.719+0000:1220498650:2008-09-04T11:24:10.719+0000:Moving to 2.0
gertvanthienen:1224419764:2008-10-19T20:36:04.317+0000:1224419764:2008-10-19T20:36:04.317+0000:Fixed in http://svn.eu.apache.org/viewvc?view=rev&revision=706062
davsclaus:1234734707:2009-02-16T05:51:47.766+0000:1234734707:2009-02-16T05:51:47.766+0000:Closing all 1.5.0 issues"
0,CAMEL-741,Bug,Major,1.3.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Willem Jiang,Willem Jiang,0,0,2008-07-22 10:08:08+00:00,2009-02-16 05:51:47+00:00,"CAMEL-726 shows a ws-address error when using Camel transport for CXF.
After running the code , I found there is no To address tag  generated in the soap header. It was caused by the CamelConduit can set right targe reference.","njiang:1216840355:2008-07-24T03:12:35.375+0000:1216840355:2008-07-24T03:12:35.375+0000:http://svn.apache.org/viewvc?rev=678732&view=rev
davsclaus:1234734707:2009-02-16T05:51:47.736+0000:1234734707:2009-02-16T05:51:47.736+0000:Closing all 1.5.0 issues"
0,CAMEL-740,Improvement,Trivial,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Vadim Chekan,0,0,2008-07-22 07:41:48+00:00,2009-02-16 05:51:47+00:00,"When using tracing and  message body is byte[] then trace looks like this:


2008-07-19 14:26:12,391 [enerContainer-1] INFO  TraceInterceptor
>>>        - ID-vchekan/3625-1216502771610/1-1 -> to3
>>> To[activemq:vadim44] InOnly Properties: ..................  BodyType:[B Body:


Notice BodyType=""[B"".
Proposal: use getCanonicalName instead of getName in interceptor.
I will publish the patch when I sort out problems with junit.","davsclaus:1216851066:2008-07-24T06:11:06.204+0000:1216851066:2008-07-24T06:11:06.204+0000:Vadim. Thanks for the point of use the canoical classname it works nice.
You get byte[] now.
davsclaus:1234734707:2009-02-16T05:51:47.716+0000:1234734707:2009-02-16T05:51:47.716+0000:Closing all 1.5.0 issues"
0,CAMEL-739,Improvement,Major,"1.3.0, 1.4.0",1.5.0,"
None
",Closed,Fixed,1.5.0,Willem Jiang,Willem Jiang,0,0,2008-07-21 08:36:38+00:00,2009-02-16 05:51:47+00:00,"Eduard Hildebrandt  logged a JIRA[1]  in CXF, it is actually a camel transport issue.


https://issues.apache.org/jira/browse/CXF-1703","njiang:1216602241:2008-07-21T09:04:01.691+0000:1216602241:2008-07-21T09:04:01.691+0000:http://svn.apache.org/viewvc?rev=678367&view=rev
davsclaus:1234734707:2009-02-16T05:51:47.689+0000:1234734707:2009-02-16T05:51:47.689+0000:Closing all 1.5.0 issues"
0,CAMEL-738,Bug,Major,"1.3.0, 1.4.0",1.5.0,"
None
",Closed,Fixed,1.5.0,Willem Jiang,Ryadh Amar,0,0,2008-07-20 01:50:50+00:00,2009-02-16 05:51:47+00:00,"When downloading a directory with a complex layout (mutli level directory), the downloaded files do not reflect the local one
more info here http://www.nabble.com/FTP-component%3A-Possible-bug-td18540318s22882.html","iamryadh:1216490564:2008-07-20T02:02:44.313+0000:1216490564:2008-07-20T02:02:44.313+0000:The patch also contains the unit test.
iamryadh:1216490671:2008-07-20T02:04:31.116+0000:1216490671:2008-07-20T02:04:31.116+0000:license granted to ASF
njiang:1216493565:2008-07-20T02:52:45.429+0000:1216493565:2008-07-20T02:52:45.429+0000:Patch applied with thanks to Ryadh.

http://svn.apache.org/viewvc?rev=678246&view=rev
davsclaus:1216507724:2008-07-20T06:48:44.326+0000:1216507724:2008-07-20T06:48:44.326+0000:Just for the note: the SFTP part has the same issue then
davsclaus:1216507965:2008-07-20T06:52:45.648+0000:1216507965:2008-07-20T06:52:45.648+0000:Comitted the fix for the SFTP part, and the failing test on Bamboo due to clash with port number. Remember to use a new number for each test.
iamryadh:1216508090:2008-07-20T06:54:50.844+0000:1216508090:2008-07-20T06:54:50.844+0000:note taken regarding the port number.
davsclaus:1216509059:2008-07-20T07:10:59.761+0000:1216509059:2008-07-20T07:10:59.761+0000:Ryadh. Oh the port number issue is only surfaced on the Bamboo CI server. Running mvn test locally doesn't really show this issue. So this issue has bitten us from time to time ;)

BTW: Thanks for taking a good look at the FTP component and finding the issues it has and fixing them as well. This is really great.
I have added a new improved unit test that uses 2 folders and different logo files. Works correctly now.
iamryadh:1216510406:2008-07-20T07:33:26.357+0000:1216510406:2008-07-20T07:33:26.357+0000:That's a pity, thought that jsch would cut it.
You welcome, I'll try to provide help as much as I can ;)
davsclaus:1234734707:2009-02-16T05:51:47.668+0000:1234734707:2009-02-16T05:51:47.668+0000:Closing all 1.5.0 issues"
0,CAMEL-737,Bug,Major,1.4.0,None,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Moulliard Charles,0,0,2008-07-18 13:01:00+00:00,2009-02-16 05:51:47+00:00,"When 


getContext().addInterceptorStrategy(new Tracer());


is added in a RouteBuilder Class, then the timer component does not start.


e.g. 


public class RouteBuilder extends RouteBuilder {


    getContext().addInterceptorStrategy(new Tracer());


    public void configure() 

{

        from(""timer://export"")
        .to(""bean:myBean"");
    }

}","davsclaus:1216357944:2008-07-18T13:12:24.280+0000:1216357944:2008-07-18T13:12:24.280+0000:Moving to Camel 1.5
wtam@iona.com:1216363789:2008-07-18T14:49:49.707+0000:1216363789:2008-07-18T14:49:49.707+0000:let me take a look.
wtam@iona.com:1216366988:2008-07-18T15:43:08.684+0000:1216366988:2008-07-18T15:43:08.684+0000:It was caused by NPE thrown by TraceFormatter

java.lang.NullPointerException
	at org.apache.camel.processor.interceptor.TraceFormatter.getBodyTypeAsString(TraceFormatter.java:124)
	at org.apache.camel.processor.interceptor.TraceFormatter.format(TraceFormatter.java:46)
	at org.apache.camel.processor.interceptor.TraceInterceptor.format(TraceInterceptor.java:68)
	at org.apache.camel.processor.Logger.logMessage(Logger.java:218)
	at org.apache.camel.processor.Logger.process(Logger.java:125)
	at org.apache.camel.processor.interceptor.TraceInterceptor.logException(TraceInterceptor.java:128)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:59)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:155)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:91)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:39)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:66)
	at org.apache.camel.component.timer.TimerConsumer.sendTimerExchange(TimerConsumer.java:91)
	at org.apache.camel.component.timer.TimerConsumer$1.run(TimerConsumer.java:48)
	at java.util.TimerThread.mainLoop(Unknown Source)
	at java.util.TimerThread.run(Unknown Source)
wtam@iona.com:1216367065:2008-07-18T15:44:25.448+0000:1216367065:2008-07-18T15:44:25.448+0000:The patch fixes NPE in TraceFormatter and adds an unit test .
davsclaus:1216376784:2008-07-18T18:26:24.605+0000:1216376784:2008-07-18T18:26:24.605+0000:Applied patch with thanks to William Tam.

Also fixed the same problem for LogFormatter.
davsclaus:1234734707:2009-02-16T05:51:47.644+0000:1234734707:2009-02-16T05:51:47.644+0000:Closing all 1.5.0 issues"
0,CAMEL-736,Improvement,Minor,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-07-18 11:19:18+00:00,2008-10-23 04:37:12+00:00,"The camel-http component uses the http scheme and thus some end-users could by mistake enter the http protocol twice:


http://http://www.google.com etc


The error you get now is something with host is null.


See nabble:
http://www.nabble.com/How-to-define-a-HTTP-Post-destination-in-a-route-in-spring-td18506233s22882.html","davsclaus:1216378720:2008-07-18T18:58:40.743+0000:1216378720:2008-07-18T18:58:40.743+0000:Will throw a ResolveEndpointFailedException in case of miss configuration such as: http://http://www.google.com
davsclaus:1224707832:2008-10-23T04:37:12.150+0000:1224707832:2008-10-23T04:37:12.150+0000:Closing 1.5 issues"
0,CAMEL-735,Improvement,Major,1.4.0,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Unassigned,Claus Ibsen,0,1,2008-07-18 05:56:59+00:00,2009-07-31 06:33:34+00:00,"We should be sure that when registering the mbean the objectname is really the correct one we use. If its a shared endpoint then we should only have a single instance. If not then we should of course have multi.


And beware the WebSphere 6.1 can have issues with the objectname as it prefixes the objectname with its own server context (the /cell/node stuff). 


We should alvoid confusing end-users with ""InstanceAlreadyRegistered"" exceptions with stacktraces, they should not be logged if it's not really a problem.
William Tam has a good grip on this, so we will work together with him to improve it.


See nabble:
http://www.nabble.com/How-can-avoid-to-have-such-error-message-%22instanceAllreadyExistsException%22---td18503700s22882.html","davsclaus:1220499558:2008-09-04T11:39:18.481+0000:1220499558:2008-09-04T11:39:18.481+0000:Moving to 2.0
davsclaus:1234922469:2009-02-18T10:01:09.146+0000:1234922469:2009-02-18T10:01:09.146+0000:Already fixed by Hadrian
albiii:1242280373:2009-05-14T13:52:53.795+0000:1242280373:2009-05-14T13:52:53.795+0000:We can not use Milestone builds on our project :-(
Can you please port this fix to the 1.6.1. branch
davsclaus:1242280650:2009-05-14T13:57:30.814+0000:1242280650:2009-05-14T13:57:30.814+0000:You can disable JMX when using 1.x.

JMX has been slater for a total overhaul and rewrite in Camel 2.1.
hadrian:1242281038:2009-05-14T14:03:58.753+0000:1242281038:2009-05-14T14:03:58.753+0000:The 1.6.1 release is already built.  If the community vote passes this will have to wait for 1.6.2.
davsclaus:1242455366:2009-05-16T14:29:26.229+0000:1242455366:2009-05-16T14:29:26.229+0000:The JMX issue in 1.x is not serious in that sense it logs WARN messages. And with the JMX being planned for total makeover in 2.1 timeframe. And that 1.6.x is being the *stable* release of 1.x we do not plan to look into this in 1.x.
davsclaus:1248993214:2009-07-31T06:33:34.080+0000:1248993214:2009-07-31T06:33:34.080+0000:Closing 2.0m1 tickets"
0,CAMEL-734,Bug,Major,None,1.5.0,"
None
",Closed,Fixed,1.5.0,Hadrian Zbarcea,Geoff Holden,0,0,2008-07-17 16:15:20+00:00,2009-02-16 05:51:47+00:00,Using a URI like ftp://localhost/file.txt?directory=false the FtpConsumer will give a index out of bounds exception.,"gholden:1216282566:2008-07-17T16:16:06.978+0000:1216282566:2008-07-17T16:16:06.978+0000:The error happens when poll() is called.
hadrian:1216285047:2008-07-17T16:57:27.784+0000:1216285047:2008-07-17T16:57:27.784+0000:Patch applied with many thanks! Good catch!
davsclaus:1234734707:2009-02-16T05:51:47.604+0000:1234734707:2009-02-16T05:51:47.604+0000:Closing all 1.5.0 issues"
0,CAMEL-733,Bug,Major,1.4.0,1.5.0,"
None
",Closed,Duplicate,1.5.0,Claus Ibsen,Moulliard Charles,0,0,2008-07-17 15:35:36+00:00,2009-02-16 05:51:47+00:00,"Hi,


I have discovered that the header/trailer rows have been removed from the DataSet object by the Camel Flatpack component. I have prepared a small junit test case to show you that the records Header / Trailer does not exist anymore.","davsclaus:1218953649:2008-08-17T14:14:09.532+0000:1218953649:2008-08-17T14:14:09.532+0000:Duplicate of CAMEL-731
davsclaus:1234734707:2009-02-16T05:51:47.573+0000:1234734707:2009-02-16T05:51:47.573+0000:Closing all 1.5.0 issues"
0,CAMEL-732,Improvement,Minor,1.4.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-07-17 08:41:33+00:00,2008-07-17 12:01:15+00:00,"Camel does not check for already registered mbeans. There can be shared endpoints in the camel routes etc.


We used to have an instance count and everything but at the end a jms endpoint such as ""activemq:topic:orders"" can be reused in several routes and we should in fact only register it once.","davsclaus:1216255310:2008-07-17T08:41:50.958+0000:1216255310:2008-07-17T08:41:50.958+0000:See nabble:
http://www.nabble.com/How-can-avoid-to-have-such-error-message-%22instanceAllreadyExistsException%22---td18503700s22882.html
davsclaus:1216259216:2008-07-17T09:46:56.334+0000:1216259216:2008-07-17T09:46:56.334+0000:Fix commited to SVN:
http://svn.apache.org/viewvc?view=rev&revision=677549
cmoulliard:1216266179:2008-07-17T11:42:59.509+0000:1216266179:2008-07-17T11:42:59.509+0000:Claus,

I have tested and the error message does not appear anymore. You can close the issue.

Many thanks

davsclaus:1216266459:2008-07-17T11:47:39.550+0000:1216266459:2008-07-17T11:47:39.550+0000:Charles. Thanks a lot for reporting and testing the fixes. We appreciate all you patient work with us and the Camel."
0,CAMEL-731,Improvement,Major,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-07-16 12:12:46+00:00,2008-10-23 04:37:12+00:00,"See nabble:
http://www.nabble.com/Component-to-read-FixedLength-file---td18444614s22882.html


post on july-16 by Charles.","davsclaus:1216181711:2008-07-16T12:15:11.058+0000:1216181711:2008-07-16T12:15:11.058+0000:Also all the options/headers that is set after the processing should be updated on the wiki
davsclaus:1218954533:2008-08-17T14:28:53.273+0000:1218954533:2008-08-17T14:28:53.273+0000:Committed revision 686614.
davsclaus:1218954565:2008-08-17T14:29:25.337+0000:1218954565:2008-08-17T14:29:25.337+0000:See camel-flatpack wiki documentation how to use this. Also there is a unit test as well.
davsclaus:1224707832:2008-10-23T04:37:12.114+0000:1224707832:2008-10-23T04:37:12.114+0000:Closing 1.5 issues"
0,CAMEL-730,Task,Minor,1.4.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-07-16 08:53:57+00:00,2008-07-17 12:01:15+00:00,jsch in pom.xml is old at 0.1.31. Now 0.1.38 is finally at the central maven repo. However 0.1.39 has also just been released. We will upgrade to 0.1.38.,
0,CAMEL-729,Improvement,Major,None,1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,Willem Jiang,0,0,2008-07-16 07:41:03+00:00,2008-07-23 03:57:32+00:00,"CAMEL-485 shows the extension of ScheduledPollConsumer should have special consumer options for delay etc.
Current SpringIntegrationEndpoint doesn't extend the ScheduledPollEndpoint.


Also need to update the wiki page.","njiang:1216166669:2008-07-16T08:04:29.286+0000:1216166669:2008-07-16T08:04:29.286+0000:http://svn.apache.org/viewvc?rev=677185&view=rev

http://cwiki.apache.org/confluence/display/CAMEL/SpringIntegration
davsclaus:1216756652:2008-07-23T03:57:32.145+0000:1216756652:2008-07-23T03:57:32.145+0000:Closing 1.4 issues."
0,CAMEL-728,Bug,Major,None,None,"
None
",Closed,Fixed,1.4.0,Willem Jiang,Willem Jiang,0,0,2008-07-16 04:48:28+00:00,2008-07-23 03:57:32+00:00,"Since Spirng-aop is used when we enable the jmx support for camel by default,  we need to ship that jar in the camel bin distribution.","njiang:1216156708:2008-07-16T05:18:28.286+0000:1216156708:2008-07-16T05:18:28.286+0000:http://svn.apache.org/viewvc?rev=677153&view=rev
davsclaus:1216756652:2008-07-23T03:57:32.119+0000:1216756652:2008-07-23T03:57:32.119+0000:Closing 1.4 issues."
0,CAMEL-697,Bug,Major,1.4.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-07-11 08:53:15+00:00,2008-07-12 08:45:35+00:00,"The new transform() DSL doesn't propogate headers so you can not do:



                from(""direct:four"")
                    .transform().constant(""London"")
                    .to(""mock:result"");




And expect that any headers on the exchange at direct:four is received after the transform","davsclaus:1215737647:2008-07-11T08:54:07.305+0000:1215737647:2008-07-11T08:54:07.305+0000:The solution is to add this in the TransformProcessor
{code}
    public void process(Exchange exchange) throws Exception {
        Object newBody = expression.evaluate(exchange);
        exchange.getOut().setBody(newBody);

        // propogate headers
        exchange.getOut().getHeaders().putAll(exchange.getIn().getHeaders());
        
        super.process(exchange);
    }
{code}"
0,CAMEL-696,Bug,Major,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-07-11 08:38:47+00:00,2008-07-12 08:45:35+00:00,"The code the extracts the result that is returned when you use the sendXXX, requestXXX methods on the producer template doens't honor the exchange pattern.



    protected Object extractResultBody(E result) {
        Object answer = null;
        if (result != null) {
            Message out = result.getOut(false);
            if (out != null) {
                answer = out.getBody();
            } else {
                answer = result.getIn().getBody();
            }
        }
        return answer;
    }




It defaults to preferring out messages all the time. But in some circumstances the out body could be set to null but the real response is in the in body.
Setting the exchange pattern to InOnly doesn't honor this.


Maybe this ticket is a symptom of the MEP problem that we have in Camel. See the discussion on the dev forum.",davsclaus:1215740502:2008-07-11T09:41:42.819+0000:1215740502:2008-07-11T09:41:42.819+0000:I do think the MEP should be added as a parameter and isOutCapable should be tested if we want to get the Out body as the answer.
0,CAMEL-695,Bug,Major,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-07-11 08:35:09+00:00,2008-07-23 03:57:31+00:00,"You can not propagate headers through the xquery component



                from(""direct:one"")
                    .to(""xquery:org/apache/camel/component/xquery/transform.xquery"")
                    .to(""mock:result"");




The mock will not receive any of the headers the exchange had when it was send to direct:one",davsclaus:1216756651:2008-07-23T03:57:31.834+0000:1216756651:2008-07-23T03:57:31.834+0000:Closing 1.4 issues.
0,CAMEL-694,Bug,Major,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,Willem Jiang,0,0,2008-07-11 04:43:56+00:00,2008-07-23 03:57:31+00:00,"CamelTransportFactory does not need to call
""configurer.configurationBean(destination)"" as it has been performed
by CamelDestination..initConfig() in its constructor.  



Index: components/camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/CamelTransportFactory.java
===================================================================
--- components/camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/CamelTransportFactory.java	(revision 675685)
+++ components/camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/CamelTransportFactory.java	(working copy)
@@ -26,7 +26,6 @@
 
 import org.apache.camel.CamelContext;
 import org.apache.cxf.Bus;
-import org.apache.cxf.configuration.Configurer;
 import org.apache.cxf.service.model.EndpointInfo;
 import org.apache.cxf.transport.AbstractTransportFactory;
 import org.apache.cxf.transport.Conduit;
@@ -87,12 +86,7 @@
     }
 
     public Destination getDestination(EndpointInfo endpointInfo) throws IOException {
-        CamelDestination destination = new CamelDestination(camelContext, bus, this, endpointInfo);
-        Configurer configurer = bus.getExtension(Configurer.class);
-        if (null != configurer) {
-            configurer.configureBean(destination);
-        }
-        return destination;
+        return new CamelDestination(camelContext, bus, this, endpointInfo);
     }
 
     public Set<String> getUriPrefixes() {","njiang:1215730109:2008-07-11T06:48:29.231+0000:1215730109:2008-07-11T06:48:29.231+0000:Patch applied with thanks to William.

http://svn.apache.org/viewvc?rev=675833&view=rev
davsclaus:1216756651:2008-07-23T03:57:31.810+0000:1216756651:2008-07-23T03:57:31.810+0000:Closing 1.4 issues."
0,CAMEL-693,Improvement,Major,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Freeman Yue Fang,0,0,2008-07-11 03:57:45+00:00,2008-07-17 12:01:14+00:00,"for example, some virtual jar like


bundle:\109.0:1\lib\camel-core-1.4-SNAPSHOT.jar should be ignored by loadImplementationsInJar since when try to open it, will get FileNotFoundException","davsclaus:1215720979:2008-07-11T04:16:19.253+0000:1215720979:2008-07-11T04:16:19.253+0000:Thanks for the patch. I decided to more the filter logic up a notch in the while loop where we should have such filtering logic.

{code}
                // osgi bundles should be skipped
                if (urlPath.startsWith(""bundle:"")) {
                    if (LOG.isTraceEnabled()) {
                        LOG.trace(""it's a virtual osgi bundle, skipping this file: "" + urlPath);
                    }
                    continue;
                }
{code}
ffang:1215722591:2008-07-11T04:43:11.667+0000:1215722591:2008-07-11T04:43:11.667+0000:Hi Claus,

Yeah, it's better.
Thanks

Freeman"
0,CAMEL-692,Bug,Major,1.4.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-07-10 07:28:00+00:00,2008-07-11 04:30:42+00:00,"Hi,


I am playing with Camel 1.4-SNAPSHOT.


I have created a route that goes to jpa, but I receive the error
""[PersistenceUnit: camel-jpa] class or package not found"". 


In persistence.xml in camel-jpa-1.4-SNAPSHOT.jar camel-jpa is defined as:
<persistence-unit name=""camel-jpa"" transaction-type=""RESOURCE_LOCAL"">


<class>org.apache.camel.processor.idempotent.jpa.MessageProcessed</class>
  </persistence-unit>


Where can I find the MessageProcessed class? It is not in camel-core nor camel-jpa.","davsclaus:1215646105:2008-07-10T07:28:25.410+0000:1215646105:2008-07-10T07:28:25.410+0000:See nabble:
http://www.nabble.com/-PersistenceUnit%3A-camel-jpa--class-or-package-not-found-td18362845s22882.html"
0,CAMEL-691,Bug,Major,"1.2.0, 1.3.0",1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,Willem Jiang,0,0,2008-07-10 07:26:00+00:00,2008-07-23 03:57:31+00:00,"When I applied the CAMEL-688 patch , I found the CxfSoapMessageProviderTest failed. 
After digging into the code , I found CxfExchange do not copy the exchange pattern when the exchange copying itself.","njiang:1215649574:2008-07-10T08:26:14.875+0000:1215649574:2008-07-10T08:26:14.875+0000:http://svn.apache.org/viewvc?rev=675467&view=rev
davsclaus:1216756651:2008-07-23T03:57:31.793+0000:1216756651:2008-07-23T03:57:31.793+0000:Closing 1.4 issues."
0,CAMEL-690,Bug,Major,"1.3.0, 1.4.0",1.4.0,"
None
",Closed,Fixed,1.4.0,Unassigned,Vadim Chekan,0,0,2008-07-10 04:54:43+00:00,2008-07-17 12:01:14+00:00,"XMPP component page http://activemq.apache.org/camel/xmpp.html states that uri is ""xmpp:hostname[:port][/room]"". But in fact it does not work: the room is not recognised for ""xmpp:jabber.org/room33"". There is missing // to make it a valid hierarchical uri. See http://java.sun.com/j2se/1.4.2/docs/api/java/net/URI.html


Fix:
the url should be ""xmpp://vchekan@jabber.org/room33"". Notice ""//"".


Also: according to the code it is possible to set a user name like this:
xmpp://[login@]hostname[:port][/room]
which would be nice to mention.


Also it is not clear at all how to set up password. Without password there is not too much use of this component so it is critical to document it.


If I am provided with access to confluence, I could fix it on my own. Mu login is ""vchekan"".",davsclaus:1215831546:2008-07-12T10:59:06.952+0000:1215831546:2008-07-12T10:59:06.952+0000:Thanks for the reporting. There are a few tickets on the XMPP slated for 1.5 with features to set password and more.
0,CAMEL-689,Improvement,Major,1.4.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,Freeman Yue Fang,0,0,2008-07-10 03:59:32+00:00,2008-07-11 04:21:45+00:00,"org.apache.felix.framework.searchpolicy.ContentClassLoader is in OSGI env which is not URLClassloader, we should resort to the
BundleDelegatingClassLoader in OSGI evniorment,  so just ignore it in find method","davsclaus:1215643913:2008-07-10T06:51:53.861+0000:1215643913:2008-07-10T06:51:53.861+0000:Are there more such classloaders that should be skipped in OGSi environments? Anyone from the other platforms, knopplerfish, equianox? I think I have seen such in the spring framework source code once."
0,CAMEL-688,Bug,Major,"1.3.0, 1.4.0",None,"
None
",Closed,Fixed,1.4.0,Willem Jiang,Freeman Yue Fang,0,0,2008-07-10 03:22:28+00:00,2008-07-23 03:57:31+00:00,No Desc,"ffang:1215631594:2008-07-10T03:26:34.169+0000:1215631594:2008-07-10T03:26:34.169+0000:sorry, not complete the subject of this issue, and I have no permission to edit it :-(
the subject of this issue should be 
""process method of BeanProcessor should check ExchangePattern before set out message""
this part
           if (value != null) {
                exchange.getOut().setBody(value);
           }
the exchange.getOut() might return null if the ExchangePattern is InOnly of this Exchange, so get NPE here

shoud be
           if (value != null && !exchange.getPattern().equals(ExchangePattern.InOnly)) {
                exchange.getOut().setBody(value);
            }
davsclaus:1215643746:2008-07-10T06:49:06.137+0000:1215643746:2008-07-10T06:49:06.137+0000:Ah good the patch uses outCapable check

Note: We can use getOut(true) to force the out message being created if not exists.

Could we have a unit test that demonstrates the NPE bug that this patch fixes? That would be awesome.
njiang:1215645736:2008-07-10T07:22:16.958+0000:1215645736:2008-07-10T07:22:16.958+0000:Applying this patch help me find out a CxfExchange bug in camel-cxf which do not copy the change pattern :)
I am still working on it.
davsclaus:1215646753:2008-07-10T07:39:13.500+0000:1215646753:2008-07-10T07:39:13.500+0000:Target for 1.4
davsclaus:1215654022:2008-07-10T09:40:22.690+0000:1215654022:2008-07-10T09:40:22.690+0000:I found a side effect for this patch.

I do think the code should be like this:
{code}
            if (value != null) {
                if (exchange.getPattern().isOutCapable()) {
                    // force out creating if not already created (as its lazy)
                    if (LOG.isDebugEnabled()) {
                        LOG.debug(""Setting bean invocation value on OUT message: "" + value);
                    }
                    exchange.getOut(true).setBody(value);
                } else {
                    // if not out then set it on the in
                    if (LOG.isDebugEnabled()) {
                        LOG.debug(""Setting bean invocation value on IN message: "" + value);
                    }
                    exchange.getIn().setBody(value);
                }
{code}

Before in some situations the bean invocation value was never set, as this route demonstrates:
{code}
                from(""direct:in"").
                    to(""bean:myBean"").
                    setHeader(FileComponent.HEADER_FILE_NAME, ""hello.txt"").
                    to(""file://target"");
{code}


davsclaus:1215654109:2008-07-10T09:41:49.602+0000:1215654109:2008-07-10T09:41:49.602+0000:As Gert have pointed out on the dev forum we should step up and find out what we want with this MEP that can turn into a mess:

http://www.nabble.com/ExchangePattern-handling-in-Camel-td18378396s22882.html
davsclaus:1215656133:2008-07-10T10:15:33.617+0000:1215656133:2008-07-10T10:15:33.617+0000:Okay I have comitted my change and added unit test to demonstrate the bug caused by the original patch.
davsclaus:1215656428:2008-07-10T10:20:28.670+0000:1215656428:2008-07-10T10:20:28.670+0000:D:\project\camel\camel-core>svn commit --message ""CAMEL-688: Fixed problem when bean processor did not set invocation value at all. Added unit test to demonstrate the bug.""
Sending        camel-core\src\main\java\org\apache\camel\component\bean\BeanProcessor.java
Adding         camel-core\src\test\java\org\apache\camel\component\file\BeanToFileTest.java
Transmitting file data ..
Committed revision 675500.
davsclaus:1216756651:2008-07-23T03:57:31.764+0000:1216756651:2008-07-23T03:57:31.764+0000:Closing 1.4 issues."
0,CAMEL-687,Improvement,Minor,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Gert Vanthienen,Gert Vanthienen,0,0,2008-07-09 11:22:04+00:00,2008-07-11 04:21:45+00:00,"This will allow camel-saxon to be used in an OSGi environment, using the ServiceMix bundle for Saxon 9.0 to provide the Saxon classes",gertvanthienen:1215584447:2008-07-09T14:20:47.871+0000:1215584447:2008-07-09T14:20:47.871+0000:Fixed in http://svn.eu.apache.org/viewvc?view=rev&revision=675184
0,CAMEL-686,Bug,Major,1.4.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,Claus Ibsen,0,0,2008-07-08 11:05:57+00:00,2008-07-23 03:57:31+00:00,"See user forum:
http://www.nabble.com/Fwd%3A-Using-Apache-Camel-as-Transport-for-Apache-CXF-with-SOAP-over-JMS-td18314917s22882.html","davsclaus:1215492141:2008-07-08T12:42:21.925+0000:1215492141:2008-07-08T12:42:21.925+0000:Lets see how much Willem makes before the next 1.4 RC ;). Set the fix to 1.4.
njiang:1215557362:2008-07-09T06:49:22.886+0000:1215557362:2008-07-09T06:49:22.886+0000:FYI,  there are some discussions about the protocol header.
http://www.nabble.com/-PROPOSAL--ProtocolMessage-to18078001s22882.html#a18078001

njiang:1215633739:2008-07-10T04:02:19.982+0000:1215633739:2008-07-10T04:02:19.982+0000:The patch and test case are all in the trunk now.
davsclaus:1216756651:2008-07-23T03:57:31.738+0000:1216756651:2008-07-23T03:57:31.738+0000:Closing 1.4 issues."
0,CAMEL-685,Bug,Critical,"1.3.0, 1.4.0",1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-07-08 11:05:13+00:00,2008-07-11 04:21:45+00:00,"See the user forum:
http://www.nabble.com/Fwd%3A-Using-Apache-Camel-as-Transport-for-Apache-CXF-with-SOAP-over-JMS-td18314917s22882.html


Basically JmsBinding should check for primitives before setting the object property on the jms message.","davsclaus:1215489036:2008-07-08T11:50:36.387+0000:1215489036:2008-07-08T11:50:36.387+0000:Will allow primitive types, strings, numbers etc.

But objects will be skipped
2008-07-08 13:47:29,843 [main           ] DEBUG JmsBinding                     - Ignoring non primitive header: order of class: org.apache.camel.component.jms.issues.DummyOrder with value: DummyOrder{orderId=333, itemId=4444, quantity=2}

davsclaus:1215490014:2008-07-08T12:06:54.027+0000:1215490014:2008-07-08T12:06:54.027+0000:Fixed in Revision #674786"
0,CAMEL-684,Improvement,Major,1.3.0,None,"
None
",Closed,Fixed,1.4.0,Gert Vanthienen,Gert Vanthienen,0,0,2008-07-07 12:41:32+00:00,2008-07-11 04:21:45+00:00,We should upgrade to the 1.1.1 version of the different Geronimo specs jar – they include the necessary OSGi metadata.,"gertvanthienen:1215411162:2008-07-07T14:12:42.663+0000:1215411162:2008-07-07T14:12:42.663+0000:Apparently, all the Geronimo spec jars have their own release cycle.  A fix is in http://svn.eu.apache.org/viewvc?view=rev&revision=674495.  I didn't think it made any sense to keep a separate <properties/> entry for every spec if they are just going to be used once, but feel free to let me know if you still prefer having them around instead of this solution."
0,CAMEL-682,Wish,Trivial,None,1.4.0,"
None
",Closed,Won't Fix,1.4.0,Unassigned,George Titan,0,0,2008-07-07 09:34:24+00:00,2008-10-23 19:55:14+00:00,"Hi Folks


Can we try to create a FAQ section like some other open source projects?


I need to find the binary dist. of Camel.1.4, but don't know where it is. The links I tried aren't working.


I guess others might try the same thing and they would have the same question.","davsclaus:1215395364:2008-07-07T09:49:24.298+0000:1215395364:2008-07-07T09:49:24.298+0000:The FAQ is here:
http://activemq.apache.org/camel/faq.html

The download page where to find binaries:
http://activemq.apache.org/camel/download.html

Camel 1.4 has *not* been released yet.

However RC2 can be downloaded from here (binaries):
http://people.apache.org/~hadrian/apache-camel-1.4.0-RC2/maven2/org/apache/camel/apache-camel/1.4.0/

look into the camel-dev mailing list for announcements of new RC distributions.
davsclaus:1215484767:2008-07-08T10:39:27.850+0000:1215484767:2008-07-08T10:39:27.850+0000:See also contributing:
http://activemq.apache.org/camel/contributing.html
gtitan:1215514740:2008-07-08T18:59:00.397+0000:1215514740:2008-07-08T18:59:00.397+0000:
Mange tak.

Jeg er en dansker som i oejeblikket arbejder her in Holland.

Jeg har arbejdet in Canada og USA for de sidste 10 aar.

Hvordan er job mulighederne i edb branchen i Danmark?

Med Venlig Hilsen,
 George Titan


_________________________________________________________________


davsclaus:1215547535:2008-07-09T04:05:35.242+0000:1215547535:2008-07-09T04:05:35.242+0000:Hi George

The job market in Denmark is looking very positive (from employee) . Basically if you have good skills you can park your car where you want ;)
Okay that is a bit overstating but I am sure most companies is always on the look out for new talents and bright people.

So whenever you fell like it we have jobs at home ;) And the real estate market is also in your favor as the prices has been cut down with 10-25% at least so you should be able to buy/rent a place to live.
gtitan:1215604320:2008-07-09T19:52:00.305+0000:1215604320:2008-07-09T19:52:00.305+0000:
cool, so I guess I'll be on my way. I have commited myself to a project until December and so I figure I'll be here until then.

I got a perm. job here in Holland after 10 days coming here from Munich. I just wanted to experience central Europe for a while.
As for Holland, I think Holland has a lower living standard than Denmark. The food is very bad. Weather is terrible, and quality of service is 
irritating at best.


Sincerely
George Titan


_________________________________________________________________

"
0,CAMEL-681,Improvement,Major,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,Willem Jiang,0,0,2008-07-07 07:58:37+00:00,2008-07-23 03:57:31+00:00,"Current camel:run plugin will take the duration as the read only option ,  we may need to set the duration sometime.","njiang:1215668739:2008-07-10T13:45:39.810+0000:1215668739:2008-07-10T13:45:39.810+0000:http://svn.apache.org/viewvc?rev=674415&view=rev
davsclaus:1216756651:2008-07-23T03:57:31.682+0000:1216756651:2008-07-23T03:57:31.682+0000:Closing 1.4 issues."
0,CAMEL-680,Improvement,Minor,1.4.0,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Claus Ibsen,0,0,2008-07-07 05:06:42+00:00,2009-07-31 06:33:33+00:00,"We should more clearly document that some of the annotations requires the use of came-spring to let it be injected and setup.


http://activemq.apache.org/camel/bean-integration.html


eg. the really nice MessageDriven is in camel-core but only injected by the camel-spring component. We should document this more clearly.","jstrachan:1218532349:2008-08-12T17:12:29.717+0000:1218532349:2008-08-12T17:12:29.717+0000:agreed.

btw the main reason for many of the annotations all being inside camel-core is so that folks can use other Dependency Injection containers - like Guice to perform the injections
jstrachan:1228967648:2008-12-11T11:54:08.299+0000:1228967648:2008-12-11T11:54:08.299+0000:I think this is all now covered in the bean integration section http://activemq.apache.org/camel/bean-integration.html



davsclaus:1248993213:2009-07-31T06:33:33.972+0000:1248993213:2009-07-31T06:33:33.972+0000:Closing 2.0m1 tickets"
0,CAMEL-679,Bug,Minor,1.4.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,William Tam,0,0,2008-07-07 05:05:04+00:00,2008-07-10 19:56:59+00:00,"If you have a route like this: from(""jms:queue"").to(""bean:testBean"").to(""bean:testBean""),
the second instance of the processor ""to(bean:testBean)"" will fail to register with mbean server because of duplicated objectname.  As a result, only one instance of the ""to(bean:testBean)"" processor is visible to mbean server and we won't set the performance counter of the second instance.


 http://www.nabble.com/Starting-Camel-context-causes-JMX-exception.-tp18304692s22882p18304692.html","wtam@iona.com:1215384374:2008-07-07T06:46:14.240+0000:1215384374:2008-07-07T06:46:14.240+0000:Patch to include node id in processor's objectname.  Since node id is an option id, instrumentation agent adds instance id into the objectname as well.
davsclaus:1215491861:2008-07-08T12:37:41.763+0000:1215491861:2008-07-08T12:37:41.763+0000:Applied patch with thanks to William Tam."
0,CAMEL-678,Task,Major,None,1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,Willem Jiang,0,0,2008-07-07 02:39:16+00:00,2008-07-12 08:45:35+00:00,"There are some tests cases are commented out in the itest/pom.xml  , we should clean them up.",njiang:1215378458:2008-07-07T05:07:38.296+0000:1215378458:2008-07-07T05:07:38.296+0000:http://svn.apache.org/viewvc?rev=674384&view=rev
0,CAMEL-677,Bug,Major,1.4.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Christian Schneider,0,0,2008-07-06 17:09:24+00:00,2008-07-23 03:57:31+00:00,Currently the BAM example is commented out for the distribution. As Claus said probably as it does not work at the moment. Does anyone know what exactly goes wrong with the example?,"davsclaus:1215376258:2008-07-07T04:30:58.468+0000:1215376258:2008-07-07T04:30:58.468+0000:On my trunk I get this output
{code}
[INFO] [camel:run]
[pache.camel.spring.Main.main()] Main                           INFO  Apache Camel 1.4-SNAPSHOT starting
[pache.camel.spring.Main.main()] Main                           INFO  Generating DOT file for routes: D:\project\camel\examples\camel-example-bam\target/site/cameldoc for: org.apache.camel.spring.SpringCamelContext@bdb6ae with name: camel
Failed to load preferences.  Proceeding with defaults:

[         ActivityMonitorEngine] BamFailures                    ERROR Exchange[Message: ActivityState[3 on ProcessInstance[p1] Activity[1 name: file:src/data/invoices?noop=true]]]
[         ActivityMonitorEngine] BamFailures                    ERROR Exchange[Message: ActivityState[5 on ProcessInstance[p2] Activity[1 name: file:src/data/invoices?noop=true]]]
[         ActivityMonitorEngine] BamFailures                    ERROR Exchange[Message: ActivityState[6 on ProcessInstance[p3] Activity[1 name: file:src/data/invoices?noop=true]]]
Stopping
{code}
davsclaus:1215492432:2008-07-08T12:47:12.948+0000:1215492432:2008-07-08T12:47:12.948+0000:Revision: 666227
Author: jstrachan
Date: 19:33:36, 10. juni 2008
Message:
removed the BAM examples from the distro until we can figure out how to get the example working again :)
----
Modified : /activemq/camel/trunk/apache-camel/src/main/descriptors/unix-bin.xml
Modified : /activemq/camel/trunk/apache-camel/src/main/descriptors/windows-bin.xml



davsclaus:1215492489:2008-07-08T12:48:09.268+0000:1215492489:2008-07-08T12:48:09.268+0000:James any update on this? Can you try again. It seems fine on my windows laptop. Any mac / unix out there to try it on their platform?
davsclaus:1215731373:2008-07-11T07:09:33.849+0000:1215731373:2008-07-11T07:09:33.849+0000:Claus,

Doesn't this output report three missing files now instead of just one (for the missing invoiceB.xml) or am I just mis-interpreting the log output?  Only invoiceB.xml is missing for purchase order p2 and these errors seems to indicate BAM failures for all three PO/Invoice combinations.

Regards,

Gert

davsclaus:1215765806:2008-07-11T16:43:26.639+0000:1215765806:2008-07-11T16:43:26.639+0000:Okay got the sample to work again.
davsclaus:1215765930:2008-07-11T16:45:30.541+0000:1215765930:2008-07-11T16:45:30.541+0000:Readded the bam-example in the bin dist

D:\project\camel\apache-camel>svn commit --message ""CAMEL-677: BAM example now works again.""
Sending        apache-camel\src\main\descriptors\unix-bin.xml
Sending        apache-camel\src\main\descriptors\windows-bin.xml
Transmitting file data ..
Committed revision 676027.
davsclaus:1216756651:2008-07-23T03:57:31.649+0000:1216756651:2008-07-23T03:57:31.649+0000:Closing 1.4 issues."
0,CAMEL-676,Sub-task,Major,1.4.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-07-06 07:58:36+00:00,2008-07-11 04:21:45+00:00,"If the intercept has a predicate it seems as if it doesn't proceed by default or the like.



    public void testInterceptor() throws Exception {
        MockEndpoint mockTest = getMockEndpoint(""mock:test"");
        mockTest.expectedBodiesReceived(""Camel in Action"");

        MockEndpoint mockOk = getMockEndpoint(""mock:ok"");
        mockOk.expectedBodiesReceived(""Camel in Action"");

        template.sendBodyAndHeader(""seda:order"", ""Camel in Action"", ""user"", ""test"");

        mockTest.assertIsSatisfied();
        mockOk.assertIsSatisfied();
    }

    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            public void configure() throws Exception {
                // TODO: enable this with predicate instead of the one below fails the unit test
                //intercept(header(""user"").isEqualTo(""test"")).to(""mock:test"");

                // this without predicate success
                intercept().to(""mock:test"");

                from(""seda:order"").to(""mock:ok"");
            }
        };
    }","davsclaus:1215307649:2008-07-06T09:27:29.751+0000:1215307649:2008-07-06T09:27:29.751+0000:Okay its the InterceptType#createProxy that has a flaw when there is a predicate it doesn't add the default proceed at the otherwise in the answer.
davsclaus:1215308687:2008-07-06T09:44:47.308+0000:1215308687:2008-07-06T09:44:47.308+0000:See failing unit test InterceptorPredicateProceedAndStopTest
method: testInterceptorWithPredicate

It has a TODO statement, so its easy to find in IDEA
davsclaus:1215314348:2008-07-06T11:19:08.086+0000:1215314348:2008-07-06T11:19:08.086+0000:*Without proceed:*
*dsl:* intercept(header(""user"").isEqualTo(""test"")).to(""mock:test"");
*answer:* Intercept[[Choice[ [When[ Expression[null] -> [org.apache.camel.model.ProceedType@1226a77]]] Otherwise[[To[mock:test]]]]]]

*With explicit proceed:*
*dsl:* intercept(header(""user"").isEqualTo(""test"")).to(""mock:test"").proceed();
*answer:* Intercept[[Choice[ [When[ Expression[null] -> [org.apache.camel.model.ProceedType@1226a77]]] Otherwise[[To[mock:test], org.apache.camel.model.ProceedType@1226a77]]]]]
davsclaus:1215317741:2008-07-06T12:15:41.810+0000:1215317741:2008-07-06T12:15:41.810+0000:Okay got it covered - I think.

In a route like this
{code}
intercept(header(""foo"").isEqualTo(""bar"")).to(""mock:b"").stop();
{code}

All messages that fails the predicate test (foo != bar) is now proceeded by default.
This is that if (foo == bar) then its routed to mock and stopped.

This is the most intuitive.

To stop all don't use a predicate.
{code}
intercept().to(""mock:b"").stop();
{code}
davsclaus:1215318460:2008-07-06T12:27:40.161+0000:1215318460:2008-07-06T12:27:40.161+0000:Fixed in revision #674289
davsclaus:1215318631:2008-07-06T12:30:31.280+0000:1215318631:2008-07-06T12:30:31.280+0000:See also
http://activemq.apache.org/camel/dsl.html

The section ""Changes in Camel 1.4""."
0,CAMEL-675,Bug,Critical,1.4.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-07-06 07:56:03+00:00,2008-07-11 04:21:45+00:00,"I am working to improve the intercept DSL documentation and the new stop() type


This code fails with a NPE



    public void testInterceptor() throws Exception {
        MockEndpoint mockOk = getMockEndpoint(""mock:ok"");
        mockOk.expectedBodiesReceived(""Camel in Action"");

        template.sendBodyAndHeader(""direct:order"", ""Camel in Action"", ""user"", ""James"");

        mockOk.assertIsSatisfied();
    }

    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            public void configure() throws Exception {
                intercept(header(""user"").isEqualTo(""test"")).to(""mock:test"").stop();

                from(""direct:order"").to(""mock:ok"");
            }
        };
    }


java.lang.NullPointerException
	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:48)
	at org.apache.camel.processor.Interceptor.process(Interceptor.java:41)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:155)",davsclaus:1215308637:2008-07-06T09:43:57.803+0000:1215308637:2008-07-06T09:43:57.803+0000:See ChoiceProcessor#process
0,CAMEL-674,Improvement,Major,1.4.0,Future,"
None
",Closed,Duplicate,Future,Unassigned,Claus Ibsen,0,0,2008-07-05 15:51:09+00:00,2010-02-07 09:54:15+00:00,"See this documentation:
http://activemq.apache.org/camel/how-do-i-use-spring-property-placeholder-with-camel-xml.html


We should try to support the spring property placeholders in full.",davsclaus:1223631598:2008-10-10T17:39:58.623+0000:1223631598:2008-10-10T17:39:58.623+0000:Requires Spring 3.0
0,CAMEL-673,Task,Major,None,None,"
None
",Closed,Fixed,1.4.0,Willem Jiang,Willem Jiang,0,0,2008-07-05 03:24:27+00:00,2008-07-12 08:45:35+00:00,"We could put the dependency module's version into the camel parent pom dependency manager section.
In this way the child module can specify the dependency module without version.","njiang:1215199732:2008-07-05T03:28:52.329+0000:1215199732:2008-07-05T03:28:52.329+0000:Just cleaned up the spring modules dependencies.
davsclaus:1215235159:2008-07-05T13:19:19.879+0000:1215235159:2008-07-05T13:19:19.879+0000:Willem. Bamboo is not failing with 6 unit tests. Looks like a mock FTP server uses some backport jars that isn't there anymore.
njiang:1215236054:2008-07-05T13:34:14.133+0000:1215236054:2008-07-05T13:34:14.133+0000:Sorry , I will fix these error ASAP.
njiang:1215633549:2008-07-10T03:59:09.681+0000:1215633549:2008-07-10T03:59:09.681+0000:done."
0,CAMEL-672,Task,Minor,1.4.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-07-04 18:48:10+00:00,2008-07-06 06:29:29+00:00,"The pom.xml uses hardcoded versions, but should use the one from the uber pom.xml",
0,CAMEL-671,Task,Trivial,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Gert Vanthienen,Gert Vanthienen,0,0,2008-07-04 14:43:19+00:00,2008-07-06 06:35:11+00:00,Camel HTTP still depends on 1.3.1 while everything else uses 1.3.2,"gertvanthienen:1215153893:2008-07-04T14:44:53.947+0000:1215153893:2008-07-04T14:44:53.947+0000:Fixed in http://svn.eu.apache.org/viewvc?view=rev&revision=674070
davsclaus:1215297311:2008-07-06T06:35:11.688+0000:1215297311:2008-07-06T06:35:11.688+0000:Closing 1.4 issues"
0,CAMEL-670,Sub-task,Major,None,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-07-04 13:07:59+00:00,2008-07-06 06:29:29+00:00,In lack of real spring XML tags for all the DLC stuff we now have a ref attribute so you can use plain spring beans for the error handler.,"davsclaus:1215171897:2008-07-04T19:44:57.248+0000:1215172197:2008-07-04T19:49:57.726+0000:Also document that the transaction error handler can be build / configured in the Java DSL *DONE*
davsclaus:1215237695:2008-07-05T14:01:35.271+0000:1215237695:2008-07-05T14:01:35.271+0000:Documented here (in the bottom)
http://activemq.apache.org/camel/transactional-client.html

And some parts here:
http://activemq.apache.org/camel/error-handler.html"
0,CAMEL-669,Improvement,Major,None,None,"
None
",Closed,Fixed,1.4.0,Unassigned,James Strachan,0,0,2008-07-04 12:51:50+00:00,2008-07-11 04:21:45+00:00,if using exponential backoff we might wanna cap the redelivery delay,
0,CAMEL-668,Improvement,Minor,1.4.0,None,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-07-04 12:19:09+00:00,2008-07-06 06:29:29+00:00,"Currently you have to setup the transaction demarcation in the spring xml file as:



    <bean id=""PROPAGATION_REQUIRED"" class=""org.apache.camel.spring.spi.SpringTransactionPolicy"">
        <constructor-arg>
            <bean class=""org.springframework.transaction.support.TransactionTemplate"">
                <property name=""transactionManager"" ref=""jmsTransactionManager""/>
            </bean>
        </constructor-arg>
    </bean>




to be able to use the policy from XML directly in the tag:



            <camel:policy ref=""PROPAGATION_REQUIRED""/>




We should support a neater syntax without the nested bean and constructor args.","davsclaus:1215229939:2008-07-05T11:52:19.160+0000:1215229980:2008-07-05T11:53:00.515+0000:You can now do

{code}
    <!-- policy for required transaction used in our Camel routes -->
    <bean id=""PROPAGATION_REQUIRED"" class=""org.apache.camel.spring.spi.SpringTransactionPolicy"">
        <property name=""transactionManager"" ref=""txManager""/>
    </bean>
{code}

And use it in Java DSL directly

{code}
                SpringTransactionPolicy required = context.getRegistry()
                    .lookup(""PROPAGATION_REQUIRED"", SpringTransactionPolicy.class);

...

   from(""xxxx"").policy(required).to(""yyyy"");
{code}

Or you can avoid the lookup code above and use the bean DSL to lookup the spring bean
{code}
   from(""xxxx"").policy(bean(Policy.class, ""PROPAGATION_REQUIRED"")).to(""yyyy"");
{code}
davsclaus:1215231594:2008-07-05T12:19:54.537+0000:1215231594:2008-07-05T12:19:54.537+0000:The propogationBehaviourName is also a propery, see the wiki documentation
http://activemq.apache.org/camel/transactional-client.html"
0,CAMEL-667,Bug,Major,1.4.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-07-04 10:24:07+00:00,2008-07-06 06:29:29+00:00,"The new changes to the transactional client EIP pattern to let Camel support spring based TX does a trick to the DLC to set its max redeliveries to 1 if in transacted mode.
This causes the normal DLC code to be executed and it will report that in case of failures that its being handled by its error handler, this is normally to move it to an error queue.
This of course doesn't happen. The DLC should be short cutted to let the underlying system handling the redelivery without the DLC infecting it currently.","davsclaus:1215146236:2008-07-04T12:37:16.152+0000:1215146236:2008-07-04T12:37:16.152+0000:Maybe a better approach than my current fix is to not add the DLC to the route node in questions that are under transactional control somehow with the policy element?
jstrachan:1215147525:2008-07-04T12:58:45.113+0000:1215147525:2008-07-04T12:58:45.113+0000:BTW I've just added a TransactionalErrorHandlerBuilder...

https://issues.apache.org/activemq/browse/CAMEL-663

that never retries - but just rollsback the transaction which might be better for transacational routes.

You can now use XML to specify this on the <camelContext> <route> or a <pipeline> now
https://issues.apache.org/activemq/browse/CAMEL-662
https://issues.apache.org/activemq/browse/CAMEL-661



davsclaus:1215147940:2008-07-04T13:05:40.438+0000:1215147940:2008-07-04T13:05:40.438+0000:Ah maybe we should try switching whatever error handler the node has currently set (ie DLC as default) to the transaction one instead?
davsclaus:1215168770:2008-07-04T18:52:50.058+0000:1215168770:2008-07-04T18:52:50.058+0000:The new TransactionErrorHandlerBuilder is in camel-spring and the others is in camel-core.
jstrachan:1215169212:2008-07-04T19:00:12.196+0000:1215169212:2008-07-04T19:00:12.196+0000:Yeah - its in camel-spring as it depends on spring. We should have a ponder for 1.5 or 2.0 as to whether Spring transaction based error handler - or a retry/deadletter is the best default
davsclaus:1215172297:2008-07-04T19:51:37.556+0000:1215172297:2008-07-04T19:51:37.556+0000:Fixed with CAMEL-663 and that end-users should switch error handler to the transaction one instead of the default.

Later as James write we can change the behavior in Camel 1.5 or 2.0.
Also the wiki documentation for the transactional client has been updated with this new error handler."
0,CAMEL-666,Improvement,Major,None,1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,Willem Jiang,0,0,2008-07-04 08:46:38+00:00,2008-07-23 03:57:31+00:00,"Getting hold on the http session can be important for end-users, so it makes sense to support this out-of-the-box as easy as possible.","davsclaus:1215133164:2008-07-04T08:59:24.474+0000:1215133164:2008-07-04T08:59:24.474+0000:Its a good idea to add a link to the forum request:
http://www.nabble.com/servlet-issues-with-camel..-td18261581s22882.html
njiang:1215378932:2008-07-07T05:15:32.396+0000:1215378932:2008-07-07T05:15:32.396+0000:http://svn.apache.org/viewvc?rev=674401&view=rev
Also updated the wiki page.
davsclaus:1216756651:2008-07-23T03:57:31.622+0000:1216756651:2008-07-23T03:57:31.622+0000:Closing 1.4 issues."
0,CAMEL-665,Task,Major,1.4.0,,"
None
",Closed,Won't Fix,None,Unassigned,Claus Ibsen,0,0,2008-07-04 07:30:54+00:00,2010-02-07 09:54:14+00:00,"I do think we should have a more clear picture how Camel kick-starts itself. Currently you can do it in several ways according to your needs and Camel is pretty smart in that regard.


You can start Camel with:



Standalone with your own java main code
Using camel-spring Main class
From maven tools
Spring configured (a normal use-case)
Web-app with spring configured
OSGi activator (or how does it do this?)



And on a related note as well, how to easy do unit testing of your own camel integrations



standard junit
using camel-core-tests
using camel-spring-tests
using spring unit tests with all its annotations etc
etc.","pledge:1236832244:2009-03-12T12:30:44.641+0000:1236832244:2009-03-12T12:30:44.641+0000:Why is this ""Won't Fix""?"
0,CAMEL-664,Bug,Major,1.4.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,William Tam,0,0,2008-07-03 21:50:24+00:00,2008-07-06 08:03:49+00:00,"Operattion namespace never gets set.  As the result, invoking an operation that has a different namespace than the service will not work.","wtam@iona.com:1215093084:2008-07-03T21:51:24.888+0000:1215093084:2008-07-03T21:51:24.888+0000:quick fix attached
davsclaus:1215123988:2008-07-04T06:26:28.864+0000:1215123988:2008-07-04T06:26:28.864+0000:Williem have applied the patch with thanks"
0,CAMEL-663,Improvement,Major,1.4.0,1.4.0,"
None
",Closed,Fixed,1.4.0,James Strachan,James Strachan,0,0,2008-07-03 19:19:32+00:00,2008-07-23 03:57:31+00:00,No Desc,"jstrachan:1215147199:2008-07-04T12:53:19.688+0000:1215147199:2008-07-04T12:53:19.688+0000:There's now a TransactionErrorHandlerBuilder which has a configurable RedeliveryPolicy
davsclaus:1215171154:2008-07-04T19:32:34.043+0000:1215171187:2008-07-04T19:33:07.967+0000:You have to set the spring TransactionTemplate on this new error builder before it works
{code}
                TransactionTemplate tt = context.getRegistry()
                    .lookup(""PROPAGATION_REQUIRED"", TransactionTemplate.class);
                Policy required = new SpringTransactionPolicy(tt);

                // create the transational error handler
                TransactionErrorHandlerBuilder transError = new TransactionErrorHandlerBuilder();
                transError.setTransactionTemplate(tt);

                // use this error handler instead of DeadLetterChannel that is the default
                errorHandler(transError);

                from(""direct:okay"").policy(required).
                    setBody(constant(""Tiger in Action"")).beanRef(""bookService"").
                    setBody(constant(""Elephant in Action"")).beanRef(""bookService"");
{code}

Maybe we could have it accept a SpringTransactionPolicy object where it can get hold of the template.

We could also create a DSL method on SpringRouteBuilder so you could do something like
{code}
                errorHandler(transactionErrorHandler(required));
{code}
davsclaus:1215171250:2008-07-04T19:34:10.066+0000:1215171250:2008-07-04T19:34:10.066+0000:But come again how many end users knows there is a SpringRouteBuilder. They are so used to RouteBuilder when they use Java DSL routing.
davsclaus:1215173682:2008-07-04T20:14:42.831+0000:1215173682:2008-07-04T20:14:42.831+0000:James I found a small glitch with the new error handler and the spring TransactionInterceptor.

Its the state of previous rollback that gets set to a wrong condition if your pipeline has more than one route.
As the TransactionalClientDataSourceTest has two routes where its the 2nd route that fails with a runtime exception then the previous rollback flag is wrong.

It goes like this

1st route = OK => previous rollback flag => false
2nd route = Fail => previous rollback flag => true

And since I have a route that is (from above, the stuff with the books) the setBody node is always going to be OK so there is never going to be any delay in this transaction.

So we need some more clever feature to have it sleep once during a route path.

You can try the TransactionalClientDataSourceTest its rollback test that can demonstrate that there is never a delay.
davsclaus:1215174487:2008-07-04T20:28:07.143+0000:1215174487:2008-07-04T20:28:07.143+0000:I committed some improvements:
- Java DSL builder method just like the DLC so you can create transaction error handler in neat java syntax
- Added missing builder method for new option in DLC
- Added TODO for the bug above with the delay
- Improved unit test for wiki documentation
davsclaus:1215232766:2008-07-05T12:39:26.840+0000:1215232766:2008-07-05T12:39:26.840+0000:Sorry the DataSource example is actually bad as the direct component doesn't retry as its backend system hasn't a transaction manager such as JMS. So I am trying a sample at the camel-jms component instead.
hadrian:1215767374:2008-07-11T17:09:34.147+0000:1215767374:2008-07-11T17:09:34.147+0000:Claus, James, could we move this to 1.5 so I can start building the kit, or you're almost done with it?

davsclaus:1215812604:2008-07-12T05:43:24.867+0000:1215812604:2008-07-12T05:43:24.867+0000:Hadrian. Yes its fine to move it to 1.5. I think this one will take some time to get right, so no time to get it in 1.4
davsclaus:1216756651:2008-07-23T03:57:31.592+0000:1216756651:2008-07-23T03:57:31.592+0000:Closing 1.4 issues."
0,CAMEL-662,Improvement,Major,None,None,"
None
",Closed,Fixed,1.4.0,James Strachan,James Strachan,0,0,2008-07-03 19:18:26+00:00,2008-07-11 04:21:45+00:00,No Desc,
0,CAMEL-661,Improvement,Major,None,None,"
None
",Closed,Fixed,1.4.0,James Strachan,James Strachan,0,0,2008-07-03 19:17:34+00:00,2008-07-11 04:21:45+00:00,No Desc,"jstrachan:1215141362:2008-07-04T11:16:02.097+0000:1215141362:2008-07-04T11:16:02.097+0000:see the documentation here

http://cwiki.apache.org/CAMEL/pipes-and-filters.html
"
0,CAMEL-660,Improvement,Major,1.4.0,1.6.0,"
None
",Closed,Fixed,1.6.0,Willem Jiang,Claus Ibsen,1,1,2008-07-03 12:44:02+00:00,2009-11-21 11:56:56+00:00,"We should provider better documentation how to try the osgi example. It can be a bit tricky to install bundles in an osgi container and start it up, and see where it actually logs it output / progress etc.


And the MANIFEST.MF files on this example looks a bit odd since it doesn't import any camel-core or camel-spring related.","davsclaus:1218838956:2008-08-16T06:22:36.434+0000:1218838956:2008-08-16T06:22:36.434+0000:See nabble:
http://www.nabble.com/OSGI-example.-Is-it-really-using-osgi--td18996399s22882.html

Christian wants to help out
njiang:1222279012:2008-09-25T01:56:52.832+0000:1222279012:2008-09-25T01:56:52.832+0000:We could use servicemix4's kernal module to load the camel bundles.
And the features.xml will help us to load the other bundles those camel-example-osgi needs.
gertvanthienen:1222403534:2008-09-26T12:32:14.570+0000:1222403534:2008-09-26T12:32:14.570+0000:Willem,

On http://gertvanthienen.blogspot.com/2008/09/servicemix-kernel-and-camel.html you can find a basic rundown on how to get Camel working with ServiceMix Kernel 1.0.0.  You can find the command to install the camel-example-osgi example from the kernel console in the comments.

For the features.xml, there already is a ServiceMix JIRA issue for creating that (SMX4-49).  We have a SNAPSHOT for it that contains a subset of the Camel components right now -- available at http://people.apache.org/maven-snapshot-repository/org/apache/servicemix/camel/org.apache.servicemix.camel.features/4.0-m2-SNAPSHOT.

Regards,

Gert
njiang:1222407694:2008-09-26T13:41:34.285+0000:1222407694:2008-09-26T13:41:34.285+0000:Cool, we just need to add this into wiki page of camel now.
njiang:1223663060:2008-10-11T02:24:20.596+0000:1223663060:2008-10-11T02:24:20.596+0000:Thanks for Gert's great blog post , I just copy it into the camel wiki page 
http://cwiki.apache.org/confluence/display/CAMEL/How+to+run+Camel+in+a+osgi+container
huntc@internode.on.net:1225828137:2008-11-05T03:48:57.148+0000:1225828137:2008-11-05T03:48:57.148+0000:Just wondering if any actually tried the instructions on the Wiki and that blog - it didn't work for me. Instead I had to 

osgi install -s mvn:org.apache.geronimo.specs/geronimo-activation_1.1_spec/1.0.2
osgi install -s mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.stax-api-1.0/1.1.0
osgi install -s mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.jaxb-api-2.1/1.1.0
osgi install -s mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.jaxb-impl/2.1.6_1
osgi install -s mvn:org.apache.camel/camel-core/1.5.0
osgi install -s mvn:org.springframework/spring-tx/2.5.5
osgi install -s mvn:org.apache.camel/camel-spring/1.5.0
osgi install -s mvn:org.apache.camel/camel-osgi/1.5.0

#osgi install -s mvn:org.apache.camel/camel-example-osgi/1.5.0
(can also install from the file system of course)

as per the instructions here:

http://servicemix.apache.org/kernel/1-quick-start.html

njiang:1225844603:2008-11-05T08:23:23.889+0000:1225844603:2008-11-05T08:23:23.889+0000:Hi Christopher,

Thanks for the verification, since camel 1.5.0 is released. we need to update the wiki page to show the installation of camel 1.5.0.
It is a wiki page , please feel free to modify it :)

Willem 
davsclaus:1225869987:2008-11-05T15:26:27.357+0000:1225869987:2008-11-05T15:26:27.357+0000:Changing to fix v1.5.1
davsclaus:1229029797:2008-12-12T05:09:57.289+0000:1229029797:2008-12-12T05:09:57.289+0000:Thanks to Charles tutorial we have more documetation with OSGi.

http://activemq.apache.org/camel/tutorial-osgi-camel-part1.html
davsclaus:1229030802:2008-12-12T05:26:42.760+0000:1229030802:2008-12-12T05:26:42.760+0000:I have updated the wiki
davsclaus:1258775816:2009-11-21T11:56:56.439+0000:1258775816:2009-11-21T11:56:56.439+0000:Closing all 1.6.0 issues"
0,CAMEL-659,Improvement,Major,"1.3.0, 1.4.0",1.5.0,"
None
",Closed,Fixed,1.5.0,Willem Jiang,Michael Kahn,0,0,2008-07-03 10:40:11+00:00,2009-02-16 05:51:47+00:00,"In 1.3.0, XmppEndpoint.java and related classes use the smack 2.2.1 API, and have a getConnection() method that sets up and caches the xmpp connection and chat once when the endpoint is initialized. If the network connection to the xmpp server is subsequently lost, attempts to route throw an exception.  This makes use of this component on remote and roaming/wireless devices difficult.


Smack API 3.0.4+ (the only version available for ""official"" download right now) should auto-reconnect the XMPPConnection once it is created, reusing the same credentials from the current login() session, however the API is not a drop-in replacement, there are a few differences.  It also isn't in the maven repository yet - that maxes out at 2.2.1.","davsclaus:1215174745:2008-07-04T20:32:25.327+0000:1215174745:2008-07-04T20:32:25.327+0000:Michael thanks for the report and the maven investigations.

This is quite a problem that frameworks doesn't upgrades in the maven repos.
mkahn:1215229755:2008-07-05T11:49:15.018+0000:1215229755:2008-07-05T11:49:15.018+0000:I probably should not be asking this here - however, is there a general architectural approach in camel for reconnecting or attempting to reinitialize a route that is failing due to an IO-type error or exception?  I mean not just with the XMPP component but with components in general.  It seems to me if certain errors occur ""downstream"", such as the above failure to connect to the XMPP server, the entire route (i.e.: consuming the inbound endpoint) should/could be suspended until the route can be properly reestablished.   Is this a feature that is there already that I am missing?
davsclaus:1215234923:2008-07-05T13:15:23.907+0000:1215234923:2008-07-05T13:15:23.907+0000:Yes please ask at the user forum. Much broader audience to shed some light on this matter.
davsclaus:1215646811:2008-07-10T07:40:11.980+0000:1215646811:2008-07-10T07:40:11.980+0000:Michael if you are able to find it Smack API on any maven repo that would be great. We need a maven repo where we can get the .jars from.
freetwix:1215661773:2008-07-10T11:49:33.780+0000:1215661773:2008-07-10T11:49:33.780+0000:Hey, this is a working port of camel-xmpp to smack 3.0.4. I didn't get the maven repo stuff to work (as mentioned on the smack forum - see comments in the pom.xml) - need to download it manual and tweak the local maven repo.
i added a todo for the nickname stuff. think it would be nice to add the nickname to the room uri (like room1@foo.com/dude) and parse it when consuming the room.
the code works with openfire 3.5.1/2. i will submit new changes as patches here, too, and hereby grant all rights of the patch code to ASF.

hope the patch will help and are appreciating comments and more suggestions,
greets 
freetwix

ps: tried to be javaesk though on the ruby path these days ...
davsclaus:1215813558:2008-07-12T05:59:18.555+0000:1215813558:2008-07-12T05:59:18.555+0000:Hi Freetwix

The ""_amq"" what does it really do? Do you have a link to some documentation that explains this ""feature""?
mkahn:1215833177:2008-07-12T11:26:17.162+0000:1215833177:2008-07-12T11:26:17.162+0000:Wow, that was quick, thanks Claus.  I looked for a maven repo with the new smack API and could not find one.  How would one get it added to the main repo?
davsclaus:1215833587:2008-07-12T11:33:07.077+0000:1215833587:2008-07-12T11:33:07.077+0000:I do think our friends at SeriviceMix have a maven repo where we could have the smack hosted.

But no promises. In fact we have other components that hang on older .jars because *sadly* the central maven repos out there tend to not get updated. So its a pain in the ass to find a decent maven repo that host the jars.
freetwix:1215843298:2008-07-12T14:14:58.751+0000:1215843298:2008-07-12T14:14:58.751+0000:hey claus,

the '_amq' is just an extension to the username providing a unique nickname of the amq user in the muc. a nickname in a muc needs to be unique, else an exception will be raised.
you found the point what i meant by 'think it would be nice to add the nickname to the room uri (like room1@foo.com/dude) and parse it when consuming the room.'.
it would be ok to just use the username, too - it was just in my current project that the same username already entered the muc and i really needed another nick for the camel user.
i just recommend the smack sources for documentation, and sorry, the '_amq' feature wasn't really documented at all.

greets,
freetwix
vchekan:1215904839:2008-07-13T07:20:39.090+0000:1215904839:2008-07-13T07:20:39.090+0000:Nice job Michael,
I have a question about the fragment:
-            if (shouldOutputHeader(exchange, name, value)) {
+            // BUG?
+            if (value != null && shouldOutputHeader(exchange, name, value)) {

Does it cause errors having a header without value?  I can imagine situation when it matters just the fact that header is in the message and there is no need to put any value into it. Or indication of empty  set.
freetwix:1215996473:2008-07-14T08:47:53.407+0000:1215996473:2008-07-14T08:47:53.407+0000:Hey Vadim,

the problem is the serialization of null which will cause an error.
vchekan:1216851650:2008-07-24T06:20:50.246+0000:1216851650:2008-07-24T06:20:50.246+0000:Hmm, may be sending empty string is possible? It may cost a lot of time for user to understand why header vanishes.
davsclaus:1217541329:2008-08-01T05:55:29.911+0000:1217541329:2008-08-01T05:55:29.911+0000:Okay the smack API is somewhere on a maven repo

<?xml version=""1.0"" encoding=""UTF-8""?><project>
  <modelVersion>4.0.0</modelVersion>
  <groupId>org.igniterealtime.smack</groupId>
  <artifactId>smack</artifactId>
  <version>3.0.4</version>
</project>
davsclaus:1217547902:2008-08-01T07:45:02.136+0000:1217547902:2008-08-01T07:45:02.136+0000:I think we need the good servicemix guys to put smack on their repo
davsclaus:1217980714:2008-08-06T07:58:34.031+0000:1217980714:2008-08-06T07:58:34.031+0000:There are two artifacts needed:
      <artifactId>smack</artifactId>
and
      <artifactId>smackx</artifactId>

Gertv will look into adding the jars to the servicemix maven repo later.


gertvanthienen:1217987742:2008-08-06T09:55:42.363+0000:1217987742:2008-08-06T09:55:42.363+0000:Artifacts org.igniterealtime.smack:smack:3.0.4 and org.igniterealtime.smack:smackx:3.0.4 have been added to the servicemix repo.
davsclaus:1217988573:2008-08-06T10:09:33.909+0000:1217988573:2008-08-06T10:09:33.909+0000:Thanks Gert. I will modify the pom.xml so we grab these new babies.

And I guess Vadim, Michael or other can help upgrade the java code in camel-xmpp if anything is needed.
davsclaus:1217988626:2008-08-06T10:10:26.440+0000:1217988626:2008-08-06T10:10:26.440+0000:BTW: If anyone beats me to it  feel free to modify the pom.xml so we are using 3.0.4 that can be resolved in the servicemix repo. Check out the saxon component where the servicemix repo is added as a maven repo.
davsclaus:1218017944:2008-08-06T18:19:04.564+0000:1218017944:2008-08-06T18:19:04.564+0000:Anyone up for the task of creating a patch for the upgrade to smack 3.0.4. Michael, sorry we have changed the camel-xmpp quite a bit lately so your original patch must be redone.

We have a maven repo with the 3.0.4 jars now. 

1) Add this to pom.xml
  <repositories>
    <!-- ServiceMix repo -->
    <repository>
      <id>servicemix</id>
      <name>Apache ServiceMix Repository</name>
      <url>http://svn.apache.org/repos/asf/servicemix/m2-repo</url>
    </repository>
  </repositories>

2) Upgrade to 3.0.4 in pom.xml
    <dependency>
      <groupId>org.igniterealtime.smack</groupId>
      <artifactId>smack</artifactId>
      <version>3.0.4</version>
    </dependency>
    <dependency>
      <groupId>org.igniterealtime.smack</groupId>
      <artifactId>smackx</artifactId>
      <version>3.0.4</version>
    </dependency>

Then you are set. You will get some compilation errors since the API in 3.0 is different than 2.x.
njiang:1218147792:2008-08-08T06:23:12.900+0000:1218147792:2008-08-08T06:23:12.900+0000:I just manually apply the patch, please try it out  :)
http://svn.apache.org/viewvc?rev=683640&view=rev
davsclaus:1234734707:2009-02-16T05:51:47.244+0000:1234734707:2009-02-16T05:51:47.244+0000:Closing all 1.5.0 issues"
0,CAMEL-658,Task,Minor,"1.3.0, 1.4.0",1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-07-03 05:34:07+00:00,2008-07-17 12:01:14+00:00,"wiki documentation should be improved. An end-user had trouble using it.



it is pure standard java SQL dependent (no spring etc.)
structure of output object as list of maps, each map has a key for the columnname
retrives rs.metadata
that it must be on the producer side (...to) is a bit confusing, but it is in fact correctly as it can not run in the database, but end-users need a timer or somesort to kick it of once in a while",
0,CAMEL-657,Bug,Minor,1.3.0,None,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Bart Frackiewicz,0,0,2008-07-02 13:19:52+00:00,2008-07-06 06:30:56+00:00,"Affected class: org.apache.camel.dataformat.csv.CsvDataFormat 


Method ""marshal"" has a strange behaviour. The CSVConfig for the CSVWriter can not be set via setConfig, because ""marshal"" has this line:



CSVConfig conf = createConfig();




Therefore you can not use your own CSVConfig to adjust marshalling. 


Fix proposal:



remove method createConfig
see unmarshaling with corresponding getter/setter","davsclaus:1214996892:2008-07-02T19:08:12.163+0000:1214996892:2008-07-02T19:08:12.163+0000:Bart, thanks alot for the bug report. It should be fixed now using:
{code}
CSVConfig conf = getConfig();
{code}
that will use the config from the setter if provided.
davsclaus:1215297056:2008-07-06T06:30:56.643+0000:1215297056:2008-07-06T06:30:56.643+0000:Closing 1.4 issues"
0,CAMEL-656,Improvement,Major,"1.3.0, 1.4.0",2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2008-07-02 04:17:32+00:00,2009-11-21 11:57:54+00:00,"Our extensive list of components needs to be checked for its state of current documentation standard in the wiki.


The should be checked for



options
headers they use/set
pitfalls
samples both java and spring XML
see also
etc



And whats the difference / relation to similar component (the http ones, the sql ones etc.)","davsclaus:1220067298:2008-08-30T11:34:58.609+0000:1226022468:2008-11-07T09:47:48.766+0000:camel-jms

missing options:
- jmsOperations *DONE*
- templateConnectionFactory *DONE*
- listenerConnectionFactory *DONE*
- acknowledgementMode *DONE*
- consumerType *DONE*
- pubSubNoLocal *DONE*
- cacheLevel *DONE*
- requestTimeout *DONE*
- replyToDeliveryPersistent *DONE*
- preserveMessageQos *DONE*
- requestMapPurgePollTimeMillis
- eagerLoadingOfProperties *DONE*
- alwaysCopyMessage *DONE*
- useMessageIDAsCorrelationID *DONE*
- replyToTempDestinationAffinity *DONE*
- replyToDestination *DONE*
- replyToDestinationSelectorName *DONE*

mapping between JMS and Camel
- when sending *DONE*
- when receiving *DONE*

missing headers/properties
- exchange and headers *DONE*

better samples
- add some more java and spring DSL samples *DONE*
davsclaus:1226026441:2008-11-07T10:54:01.029+0000:1226293453:2008-11-10T13:04:13.175+0000:camel-core

Log component *DONE*
Direct component *DONE*
Seda component *DONE*
VM component *DONE*
Ref component *DONE*
Timer component *DONE*
Mock component *DONE*
List component *DONE*
DataSet component *DONE*
Bean component *DONE*
File component *DONE*
davsclaus:1226033577:2008-11-07T12:52:57.818+0000:1226306392:2008-11-10T16:39:52.229+0000:camel-mail *DONE*
- Sample how to read attachment polled from the mailbox *DOME*
davsclaus:1226294965:2008-11-10T13:29:25.496+0000:1226294965:2008-11-10T13:29:25.496+0000:camel-ftp *DONE*
davsclaus:1226400884:2008-11-11T18:54:44.474+0000:1226400884:2008-11-11T18:54:44.474+0000:camel-mina *DONE*
davsclaus:1226462450:2008-11-12T12:00:50.949+0000:1226462450:2008-11-12T12:00:50.949+0000:camel-sql *DONE*
davsclaus:1226571755:2008-11-13T18:22:35.603+0000:1226571755:2008-11-13T18:22:35.603+0000:camel-jdbc *DONE*
davsclaus:1226715985:2008-11-15T10:26:25.805+0000:1226715985:2008-11-15T10:26:25.805+0000:camel-http *DONE*
davsclaus:1227526657:2008-11-24T19:37:37.154+0000:1227526657:2008-11-24T19:37:37.154+0000:camel-jetty *DONE*
davsclaus:1241640697:2009-05-07T04:11:37.394+0000:1241640697:2009-05-07T04:11:37.394+0000:The most important components is documented.
davsclaus:1258775874:2009-11-21T11:57:54.415+0000:1258775874:2009-11-21T11:57:54.415+0000:Closing all 2.0M2 tickets"
0,CAMEL-655,Bug,Major,"1.3.0, 1.4.0",1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,Aaron Mulder,0,1,2008-07-01 20:03:50+00:00,2008-07-23 03:57:31+00:00,"A Jython expression used for example like this always returns null, which is now translated to false:


from(""..."").choice().when().jython(""some expression"").to(...)


For example, here's an expression that always evaluates to null/false:


request.headers['foo'] == 'bar'


To see this, look at the test PythonExpressionTest in the camel-script module.","ammulder:1214913879:2008-07-01T20:04:39.969+0000:1214913917:2008-07-01T20:05:17.101+0000:I asked a Jython guy and here's what I got:

---------

The Python syntax is correct, but the Jython script engine does not return the value of the expression from engine.eval.  I think you need to put the value into the context.  This is how it used to work pre-JSR, and a quick test show this still works.  

In the following quick and dirty example, the output is always null, but the result.flag is getting set correctly.

---------
{code:java}
import java.io.FileReader;
import java.io.Reader;
import java.util.HashMap;
import java.util.Map;

import javax.script.ScriptEngine;
import javax.script.ScriptException;
import javax.script.ScriptEngineFactory;
import javax.script.ScriptEngineManager;

public class ScriptEval {
    public static void main(String[] args) throws Exception {
        final ScriptEngineManager manager = new ScriptEngineManager();
        final ScriptEngine engine = manager.getEngineByName(""jython"");

        final MyRequest request = new MyRequest(args[0]);
        engine.put(""request"", request);
        final EvalResult result = new EvalResult();
        engine.put(""result"", result);
        final Reader script = new FileReader(args[1]);
        System.out.printf(""Output: %s\n"", engine.eval(script));
        System.out.printf(""Result value: %s\n"", result.getFlag());
    }
}

class MyRequest {
    private Map<String, String> headers;

    public MyRequest(final String value) {
        headers = new HashMap<String, String>();
        headers.put(""console"", value);
        headers.put(""other_key"", ""other_value"");
    }

    public Map<String, String> getHeaders() {
        return headers;
    }
}

class EvalResult {
    private boolean flag;

    public void setFlag(final boolean flag) {
        this.flag = flag;
    }

    public boolean getFlag() {
        return flag;
    }
}
{code}
ammulder:1214915017:2008-07-01T20:23:37.856+0000:1214915017:2008-07-01T20:23:37.856+0000:A follow-up from Dave, my Jython guy.  We'd obviously need to massage this a bit if we were going to go this way, but it's an option.

-----------

It figures that I found Invocable right after I sent that out.  This works:

args[0] should be the value you want for request.headers['foo']
args[1] should be the name of the script file

{code:java|title=JyScript.java}
import java.io.*;
import java.util.*;
import javax.script.*;

public class JyScript {
    public static void main(String[] args) throws Exception {
        final ScriptEngineManager manager = new ScriptEngineManager();
        final ScriptEngine engine = manager.getEngineByName(""jython"");
        final MyRequest request = new MyRequest(args[0]);
        engine.put(""request"", request);
        engine.eval(new BufferedReader(new FileReader(args[1])));
        final Invocable invocable = (Invocable) engine;
        Object result = invocable.invokeFunction(""is_console_header_value"", ""bar"");
        System.out.printf(""Result is: %s"", result);
    }
}

class MyRequest {
    private Map<String, String> headers;

    public MyRequest(final String value) {
        headers = new HashMap<String, String>();
        headers.put(""foo"", value);
        headers.put(""other_key"", ""other_value"");
    }

    public Map<String, String> getHeaders() {
        return headers;
    }
}
{code}

{code:title=my_func.py}
def is_console_header_value(val):
    return request.headers['foo'] == val
{code}
njiang:1215045585:2008-07-03T08:39:45.190+0000:1215045585:2008-07-03T08:39:45.190+0000:Jython engin.eval(""print a"") always return null,
I got a way to walk around it by set the result value to result variable.

Please check the latest camel svn trunk for more information.


davsclaus:1215046080:2008-07-03T08:48:00.294+0000:1215046080:2008-07-03T08:48:00.294+0000:Willem, please add code comments that you do this deliberately for the phyton, jython engines - with the result stuff.

And a small cosmetic issue. Please uppercase the first letter when outputting to debugger.
davsclaus:1215046121:2008-07-03T08:48:41.029+0000:1215046121:2008-07-03T08:48:41.029+0000:And Willem, there is another jira ticket for script unit test is not running - you have fixed this now - great. You can close that ticket.
dcoleman:1215468394:2008-07-08T06:06:34.104+0000:1215468520:2008-07-08T06:08:40.555+0000:The Jython JSR-223 engine defaults to compiling code in ""exec"" mode.
Changing this to ""eval"" mode allows Py.runCode() to return results to engine.eval()

{code}
if (isPython()) {
    ScriptContext context = engine.getContext();
    context.setAttribute(""com.sun.script.jython.comp.mode"", ""eval"", ScriptContext.ENGINE_SCOPE);
}
{code}

CAMEL-655.patch.txt fixes ScriptBuilder.java and the unit tests

njiang:1215470312:2008-07-08T06:38:32.635+0000:1215470312:2008-07-08T06:38:32.635+0000:cool, I will take care of this patch.
hadrian:1215635132:2008-07-10T04:25:32.719+0000:1215635132:2008-07-10T04:25:32.719+0000:Not critical for the 1.4 release, I suppose.
njiang:1215636560:2008-07-10T04:49:20.502+0000:1215636560:2008-07-10T04:49:20.502+0000:I think the patch resolved that issue, and I also committed it into the trunk.
Now it is a port of camel 1.4 :)
njiang:1215636587:2008-07-10T04:49:47.951+0000:1215636587:2008-07-10T04:49:47.951+0000:The patch is in the trunk now.
davsclaus:1216756651:2008-07-23T03:57:31.558+0000:1216756651:2008-07-23T03:57:31.558+0000:Closing 1.4 issues."
0,CAMEL-654,Improvement,Major,"1.3.0, 1.4.0",1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Børge,0,0,2008-07-01 09:26:37+00:00,2009-02-16 05:51:47+00:00,"When creating a route from File Camel starts working on the file before it is fully transferred, which results in an error.
See this thread: http://www.nabble.com/Overall-notes-on-FTP-SFTP-component-td18166447s22882.html#a18198751","davsclaus:1214876471:2008-07-01T09:41:11.534+0000:1214876471:2008-07-01T09:41:11.534+0000:Target for 1.5. Important that Camel has good components for file, ftp etc. as they are still a major means of transport for integrations.
davsclaus:1214943683:2008-07-02T04:21:23.219+0000:1214943683:2008-07-02T04:21:23.219+0000:The same could apply for the plain File component.
davsclaus:1214943981:2008-07-02T04:26:21.230+0000:1214943981:2008-07-02T04:26:21.230+0000:See also this:
http://www.nabble.com/CAMEL-250%3A-Still-having-probs-td18223318s22882.html
davsclaus:1217043647:2008-07-26T11:40:47.978+0000:1217043647:2008-07-26T11:40:47.978+0000:The same for FileConsumer, should not poll the file before it has access. Maybe a new option to set this strategy
davsclaus:1217049330:2008-07-26T13:15:30.410+0000:1217049330:2008-07-26T13:15:30.410+0000:I am adding a new option - *consumer.exclusiveRead* with values *true|false* that will only start polling the file if it has exclusive read to the file (= not in progress of being written).

I am opting for a default value of *true* so we don't poll files in progress. Anyone thoughts on this?
I have implemented it for the regular FTP component. Will check the SFTP part later.


davsclaus:1217050704:2008-07-26T13:38:24.037+0000:1217050704:2008-07-26T13:38:24.037+0000:Comitted to trunk

http://svn.apache.org/viewvc?view=rev&revision=679990
davsclaus:1217367769:2008-07-30T05:42:49.805+0000:1217367769:2008-07-30T05:42:49.805+0000:The option has been renamed to: *consumer.exclusiveReadLock* and is default *true* in Camel 1.5
davsclaus:1234734707:2009-02-16T05:51:47.207+0000:1234734707:2009-02-16T05:51:47.207+0000:Closing all 1.5.0 issues"
0,CAMEL-653,Bug,Major,"1.3.0, 1.4.0",1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Bruce Elmore,0,1,2008-06-30 12:57:16+00:00,2008-07-06 06:30:56+00:00,"I noticed a problem in JmsBinding.java. If Camel has read a JMS message from a queue and that message has a bean method specified in the header (""org.apache.camel.MethodName""), the method header will removed if that message is written to another queue. Here's the offending code: 


    protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName, 
                                         Object headerValue) 

{ 
        return headerValue != null && !getIgnoreJmsHeaders().contains(headerName) 
               && ObjectHelper.isJavaIdentifier(headerName); 
    }

 


""org.apache.camel.MethodName"" fails the check isJavaIdentifier and is excluded from the headers written to the new message. I'm not sure the purpose of this check, but this might be an unintended side effect. 


The call chain is something like this: 


JmsProducer.process 
JmsBinding.makeJmsMessage 
JmsBinding.appendJmsProperties 
JmsBinding.shouldOutputHeader 


Update: Experimenting later with WebLogic's JMS, I noticed that WebLogic (9.2) does not allow this header name. Maybe this was the original motivation for this check. In order to be compatible with WebLogic, perhaps the method header name should changed to something like ""CamelMethod"". I believe this would correct both problems.","davsclaus:1214802849:2008-06-30T13:14:09.172+0000:1214802849:2008-06-30T13:14:09.172+0000:Yes the JMS spec doesn't allow dots in header names for JMS properties.

So either there should be some convention to substitute dots to underscore and reverse when receive the message (not nice).
Or to use simpler header names without dots.
davsclaus:1214802912:2008-06-30T13:15:12.517+0000:1214802912:2008-06-30T13:15:12.517+0000:We should agree how to handle properties on exchanges. Maybe all the dot should be removed, even though we favor to use keys that has a package name of some sort.
davsclaus:1214802993:2008-06-30T13:16:33.917+0000:1214802993:2008-06-30T13:16:33.917+0000:Marat has a patch to the transactional client not working properly that uses an helper (ExchangeProperties) to access properties on exchanges. Using this indirection we can ensure that dots and other non wanted names is not used.

However we could break old application that still uses dots in the headers. Okay we should discuss this on the dev forum.
davsclaus:1214876698:2008-07-01T09:44:58.234+0000:1214876698:2008-07-01T09:44:58.234+0000:Also affected by 1.4.

Target for 1.5 to address this. We could for being backwards compatible add two headers
- the original long name with package name with dots
- without packagename

And let the bean component look for the header in the two keys?

Later we could use the ExchangeProperty feature where we have a mean to address more generally the dot problem with JMS destinations.

Bruce are you in a desperate need for a fix? Or can you wait for 1.5?
belmore:1214888760:2008-07-01T13:06:00.310+0000:1214888760:2008-07-01T13:06:00.310+0000:Claus,

I'd rather not resort to changing the Camel source myself. On the hand, I know a simple change that I could make (changing the method header name constant in the BeanInfo) that would fix the problem.
Thanks!

Bruce


davsclaus:1214900116:2008-07-01T16:15:16.660+0000:1214900116:2008-07-01T16:15:16.660+0000:If you have a unit test or route example that demonstrates the bug then we will be faster to implement a fix for it.
davsclaus:1214945161:2008-07-02T04:46:01.663+0000:1214945161:2008-07-02T04:46:01.663+0000:There are some tickets for the JMS header exclusion stuff as using illegal characters in MQ / WebLogic is prohibited and what we should do to avoid this problem.
davsclaus:1214947988:2008-07-02T05:33:08.444+0000:1214947988:2008-07-02T05:33:08.444+0000:I am adding a workaround special for BeanProcessor so we can send {{org.apache.camel.MethodName}} over the wire, and being backwards compatible so end-users doesn't need to change their code.

The workaround is to send {{org.apache.camel.MethodName}} as {{org_apache_camel_MethodName}} and have BeanProcessor fallback to the underscore if the regular key wasn't found.
davsclaus:1214952233:2008-07-02T06:43:53.368+0000:1214952233:2008-07-02T06:43:53.368+0000:The workaround works but I am not satisfied. Asking for thoughts on this in the dev forum.
We have the same problem for the FileComponent.

My best shot is to fix Camel headers only by
- the key must start with ""org.apache.camel"" 
- will use underscore and restore the key when Camel consumes the message again
belmore:1214974802:2008-07-02T13:00:02.738+0000:1214974802:2008-07-02T13:00:02.738+0000:Keep in mind that if the user is using WebLogic's JMS (at least WL 9.2), a message with the header named ""org.apache.camel.Method"" will be rejected when you initially try to add it to a queue.

The problem that I was initially describing (the header getting stripped off when writing to second queue) would be true regardless of the implementation of the JMS queue (even ActiveMQ).

Off the top of my head, I'd think a solution would be to change the constant to use the underscores and change the logic in the BeanProcessor and BeanInfo to handle the method being specified by either ""org.apache.camel.Method"" or ""org_apache_camel_Method"".


davsclaus:1214983137:2008-07-02T15:18:57.581+0000:1214983137:2008-07-02T15:18:57.581+0000:Bruce that was also my first shot on the solution = hacking BeanProcessor to accept headers with underscore as well.
But then again I wanted to try a generic solution that also works for the FileProducer and other areas in Camel where headers use package name.

So a solution to handle {{org.apache.camel}} specially would be ideal for a first shot solution. Or maybe even better replacing all dots with underscore and if the headerkey is a valid java identifier then its accepted.
davsclaus:1214995520:2008-07-02T18:45:20.243+0000:1214995520:2008-07-02T18:45:20.243+0000:Okay got it into the trunk now.

See JmsBeanMethodHeaderTest added to jms component unit tests
And there is also one for the file example as well.

Notice only dot to underscore is supported and the header key must still be a java identifier to be accepted, so no other funny chars in the name is allowed.

davsclaus:1215297056:2008-07-06T06:30:56.605+0000:1215297056:2008-07-06T06:30:56.605+0000:Closing 1.4 issues"
0,CAMEL-652,Bug,Major,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,Willem Jiang,0,0,2008-06-30 09:24:19+00:00,2008-07-06 08:03:58+00:00,Need to update the build.xml of example-camel-cxf to support run the examples of camel transport and web service provider API.,njiang:1214797886:2008-06-30T11:51:26.222+0000:1214797886:2008-06-30T11:51:26.222+0000:The build.xml is updated.
0,CAMEL-651,Bug,Major,1.4.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-06-30 06:55:49+00:00,2008-07-06 06:29:29+00:00,"The example: example-spring-jms using AOP proxies as a part of the enhancer server demonstration to do somekind of audit tracking using aspectj and spring.


However Camel now have trouble picking the correct method (broken in later 1.4-SNAPSHOT) or as the AOP proxied object now has an removeAdvisor(int) method that Camel think it can invoke also.


However the BeanInfo#chooseMethodWithMatchingBody method doens't consider the MEP pattern (InOut etc). So when there is an Out pattern the method should not be void.","davsclaus:1214781500:2008-06-30T07:18:20.594+0000:1214781500:2008-06-30T07:18:20.594+0000:Okay got a better matching now considering the MEP pattern.

Will now skip void methods for out capable exchanges.
davsclaus:1214893877:2008-07-01T14:31:17.942+0000:1214893877:2008-07-01T14:31:17.942+0000:This issue can be closed, however would be nice with an exclude list of known AOP proxy methods. But its not a show stopper to cut a new 1.4.0 RC"
0,CAMEL-650,Bug,Major,1.4.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Hadrian Zbarcea,Claus Ibsen,0,0,2008-06-30 04:39:51+00:00,2008-07-12 08:45:35+00:00,In the big jar file apache-camel-1.4.0.jar we have included log4j.properties in the root classpath. This file should not be there. Its very annoying.,"davsclaus:1214772016:2008-06-30T04:40:16.212+0000:1214772016:2008-06-30T04:40:16.212+0000:Also the big jars contain the package

org.apache.camel.issues that contains unit tests
davsclaus:1214772052:2008-06-30T04:40:52.790+0000:1214772052:2008-06-30T04:40:52.790+0000:Also unit tests in org.apache.camel.management
davsclaus:1214772088:2008-06-30T04:41:28.219+0000:1214772088:2008-06-30T04:41:28.219+0000:And some spring xml test files in org.apache.camel.model as well
davsclaus:1214772144:2008-06-30T04:42:24.190+0000:1214772144:2008-06-30T04:42:24.190+0000:Unit tests in the org.apache.camel.processor package as well
davsclaus:1214772208:2008-06-30T04:43:28.951+0000:1214772208:2008-06-30T04:43:28.951+0000:And unit tests in util and view"
0,CAMEL-649,Task,Minor,1.4.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,Claus Ibsen,0,0,2008-06-30 04:34:09+00:00,2008-06-30 11:50:40+00:00,"The two new examples in 1.4 needs support for ANT build files.


loan-broker
spring-jms","davsclaus:1214775188:2008-06-30T05:33:08.292+0000:1214775188:2008-06-30T05:33:08.292+0000:The existing examples is failing. the build files must be changed.
davsclaus:1214776240:2008-06-30T05:50:40.475+0000:1214776240:2008-06-30T05:50:40.475+0000:loan-broker already had ANT files
njiang:1214777743:2008-06-30T06:15:43.294+0000:1214777743:2008-06-30T06:15:43.294+0000:Oh,  there is no ant file in loan-broker example.
I will add one for it.
davsclaus:1214778008:2008-06-30T06:20:08.409+0000:1214778008:2008-06-30T06:20:08.409+0000:Oh my eyes must have played a trick with me. I had to run it from the ANT from the RC2 disto exploded zip to let it find the libs needed. Okay William you are the best to add the ANT for your great demo
njiang:1214797840:2008-06-30T11:50:40.006+0000:1214797840:2008-06-30T11:50:40.006+0000:The loan broker build.xml is in the svn repository."
0,CAMEL-648,Task,Trivial,1.4.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,Claus Ibsen,0,0,2008-06-30 04:14:13+00:00,2008-07-06 06:29:29+00:00,camel-core-1.4.0-tests.jar contains jndi-example.properties in the root classpath. We should try not to include it.,"davsclaus:1214771568:2008-06-30T04:32:48.889+0000:1214771568:2008-06-30T04:32:48.889+0000:Also in the big apache-camel-1.4.0.jar there is a dummy.txt file in the org.apache.camel.converter package.
davsclaus:1214901292:2008-07-01T16:34:52.861+0000:1214901292:2008-07-01T16:34:52.861+0000:Hadrian, is this one a ticket you can try to remedy? You are a maven wizard ;)
njiang:1214981241:2008-07-02T14:47:21.557+0000:1214981241:2008-07-02T14:47:21.557+0000:I just move the came-core and camel-spring *Support class from test directory to main directory.
The bundler jar's  is reduced about 500K.
njiang:1215135178:2008-07-04T09:32:58.829+0000:1215135178:2008-07-04T09:32:58.829+0000:I managed to remove the camel-core-test.jar from bundler jar without touching camel-core and camel-spring test modules.
We could put the reconstruct of  camel-core-test.jar Camel 2.0 :)

"
0,CAMEL-647,Task,Minor,1.4.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Unassigned,Claus Ibsen,0,0,2008-06-30 04:08:40+00:00,2008-07-17 12:01:14+00:00,In chapter 3 the architecture chapter on page 13 the URI's is listed in a table. This table get chopped in the description.,davsclaus:1216017145:2008-07-14T14:32:25.913+0000:1216017145:2008-07-14T14:32:25.913+0000:James fixed this.
0,CAMEL-616,New Feature,Minor,"1.3.0, 1.4.0",1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Gert Vanthienen,0,0,2008-06-19 04:45:31+00:00,2009-02-16 05:51:47+00:00,"Cfrr. http://flatpack.sourceforge.net/parsing.html


We should have a good way of handling flat files (delimited and fixed positions).  There have been a few requests for this on the different mailing lists and forums.","davsclaus:1216078637:2008-07-15T07:37:17.339+0000:1216078637:2008-07-15T07:37:17.339+0000:James has fixed it now. His new component is though not a datatformat but as a producer/consumer.
davsclaus:1216159811:2008-07-16T06:10:11.080+0000:1216159811:2008-07-16T06:10:11.080+0000:James is on a roll now so he is also doing the dataformat as well, so the flatpack gets the whole deal now.
davsclaus:1216181756:2008-07-16T12:15:56.467+0000:1216181756:2008-07-16T12:15:56.467+0000:Also the wiki should be updated with this new dataformat
davsclaus:1220159136:2008-08-31T13:05:36.827+0000:1220159136:2008-08-31T13:05:36.827+0000:Code implemented, need to add the wiki documentation
davsclaus:1234734707:2009-02-16T05:51:47.003+0000:1234734707:2009-02-16T05:51:47.003+0000:Closing all 1.5.0 issues"
0,CAMEL-615,Improvement,Major,"1.3.0, 1.4.0",1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,Hadrian Zbarcea,0,0,2008-06-17 16:46:50+00:00,2008-07-11 04:21:45+00:00,"See context at:
http://www.nabble.com/Exchange-headers-in-velocity-td17916457s22882.html","sjoyner:1213703116:2008-06-17T19:45:16.522+0000:1213703116:2008-06-17T19:45:16.522+0000:JUnit test project demonstrating the issue.
sjoyner:1213707875:2008-06-17T21:04:35.413+0000:1213707875:2008-06-17T21:04:35.413+0000:I believe this patch would do what needs to be done to fix the header issue we are seeing.
njiang:1213728256:2008-06-18T02:44:16.386+0000:1213728256:2008-06-18T02:44:16.386+0000:Just wrote a unit test  which based on patch's test.
The patch is applied with thanks to Stephen.
http://svn.apache.org/viewvc?rev=669059&view=rev"
0,CAMEL-614,Improvement,Major,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,Willem Jiang,0,0,2008-06-17 07:02:39+00:00,2008-06-18 05:16:17+00:00,We can share the application context with camel context in CXF bus for the CXFEndpoint in stead of using the cxf.xml.,"njiang:1213668098:2008-06-17T10:01:38.015+0000:1213668098:2008-06-17T10:01:38.015+0000:http://svn.apache.org/viewvc?rev=668598&view=rev
njiang:1213737377:2008-06-18T05:16:17.406+0000:1213737377:2008-06-18T05:16:17.406+0000:Here is a unit test to show how to set the configuration of the cxf http-conduite in the camel context spring configuration file.

https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/spring/CxfEndpointBeanTest.java"
0,CAMEL-613,Improvement,Major,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,Willem Jiang,0,1,2008-06-17 03:27:12+00:00,2008-07-11 04:27:25+00:00,"Since the Camel default JMX connector's URL is same with ActiveMQ and ServiceMix default JMX Connector URL,  we need to change it to avoid the conflict.","davsclaus:1213650753:2008-06-17T05:12:33.416+0000:1213650753:2008-06-17T05:12:33.416+0000:Maybe even ServiceMix and ActiveMQ should start using their own URL so there are no conflicts there as well.
davsclaus:1213650797:2008-06-17T05:13:17.068+0000:1213650797:2008-06-17T05:13:17.068+0000:When JMX is enabled as default this issue with conflicting urls should also be fixed, so it works out-of-the-box.
njiang:1213655968:2008-06-17T06:39:28.601+0000:1213655968:2008-06-17T06:39:28.601+0000:Servicemix has a servicemix -camel component , camel will work in servicemix container.
So I think we need to change the camel default connector's url.

BTW, if Camel JMX is enabled as default, how can't we deploy more than two camel context (with same default JMX connector URL) in the same servicemix container.
wtam@iona.com:1213688731:2008-06-17T15:45:31.816+0000:1213688731:2008-06-17T15:45:31.816+0000:I can take care of the jira, too.

The current implementation is limited to one agent per CamelContext.  Notice a bug in the following code that findMBeanServer() always returns empty list because the find method is searching by mbean server id (not default domain name).   Once we address that we can share agent among CamelContext.  The CamelNamingStrategy already supports naming mbeans from different CamelContexts to be registered with an agent.  . 

 // jmx is enabled but there's no MBeanServer, so create one
            List servers = MBeanServerFactory.findMBeanServer(jmxDomainName);
            if (servers.size() == 0) {
                server = MBeanServerFactory.createMBeanServer(jmxDomainName);
            } else {
                server = (MBeanServer)servers.get(0);
            }

Also, multiple agents can be attached to a connector server by registering the connector server (itself a mbean) to the agents.

Even we say we enable jmx by default, I am not sure we should create a connector server by default.  The reason is that applications may already have a connector server in the VM (like the above use case of Camel in ServiceMix deployment).  Also, it increases the chances of port conflict as it tries to grab 1099.   I think by default, Camel should create or find an agent and register all camel mbeans.   The user can then configures to attach to a connector server or create a new one.


davsclaus:1213785619:2008-06-18T18:40:19.669+0000:1213785619:2008-06-18T18:40:19.669+0000:William do you have a patch for the bug with finding the mbean server by domain name?
wtam@iona.com:1213889593:2008-06-19T23:33:13.842+0000:1213889593:2008-06-19T23:33:13.842+0000:I attach a patch in camel-613 that includes a fix for the finding mbean server issue. 

So, what would you like for the default jmx connector url? The current default path is /jmxrmi.  
njiang:1213890397:2008-06-19T23:46:37.071+0000:1213890397:2008-06-19T23:46:37.071+0000:I want to change it to /jmxrmi/camel and  will take a look at your patch :)
davsclaus:1214258447:2008-06-24T06:00:47.220+0000:1214258447:2008-06-24T06:00:47.220+0000:Willem we are closing in on a new 1.4 RC - could we get the connector url fixed before that? 
njiang:1214283307:2008-06-24T12:55:07.625+0000:1214283307:2008-06-24T12:55:07.625+0000:Done,  I changed the default connector address to service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi/camel, also updated the wiki page http://activemq.apache.org/camel/camel-jmx.html"
0,CAMEL-612,Bug,Trivial,"1.3.0, 1.4.0",1.4.0,"
None
",Closed,Fixed,1.4.0,Gert Vanthienen,Gert Vanthienen,0,0,2008-06-16 06:38:46+00:00,2008-07-11 04:21:45+00:00,"When you define a route with a choice() and no matching when() clause is found, the Exchange just ends successfully without doing anything.  In my mind, it should fail by default in this case (or we should at least have an easy way to get this behavior).



from(DIRECT_ROUTER).choice()
  .when(xpath(""/oc:order_confirmation/oc:order/oc:customer/@category = '140'""))
    .to(DIRECT_CUSTOMER1)
  .when(xpath(""/oc:order_confirmation/oc:order/oc:customer/@category = '116'""))
    .to(DIRECT_CUSTOMER2);","davsclaus:1213577720:2008-06-16T08:55:20.519+0000:1213577720:2008-06-16T08:55:20.519+0000:Gert I do think that the choice() should *always* have an otherwise() so there always is a match.

{code}
from(DIRECT_ROUTER).choice()
  .when(xpath(""/oc:order_confirmation/oc:order/oc:customer/@category = '140'""))
    .to(DIRECT_CUSTOMER1)
  .when(xpath(""/oc:order_confirmation/oc:order/oc:customer/@category = '116'""))
    .to(DIRECT_CUSTOMER2);
  .otherwise().to(DIRECT_CUSTOMER3);
{code}

If the otherwise() is missing on the choice() then Camel should thrown an exception. Maybe checked during the route creation stuff.
gertvanthienen:1213656578:2008-06-17T06:49:38.822+0000:1213656578:2008-06-17T06:49:38.822+0000:Claus,

I actually do think this use case for a choice() block does make sense.  I definitely do not want all my unmatched exchanges to go to any third customer, so I usually code something like:
{code}
...otherwise().process(new Processor() { //make the exchange fail here });
{code}
... to get my RouteBuilder's error handler to pick it up.

We should at least make this behavior easier to implement or maybe even make it the default when no explicit otherwise() was given.  

Gert
hadrian:1213680582:2008-06-17T13:29:42.558+0000:1213682129:2008-06-17T13:55:29.902+0000:-1 [edit: retracting my +1]

In other words if there is no explicit otherwise() to go the errorHandler (no redelivery of course).

Thinking more about this I think the behavior of choice should be the way it already is.  If no clause matches and there is no otherwise it should silently succeed with a noop.  Users are familiar with this from switch() statements and is i think a reasonable expectation.

I think it's perfectly reasonable to add the otherwise (as one would add a default: ) to make it explicit that the exchange should fail if there is no match:

{code}
    [...].otherwise().exception(MyException.class);
{code}

What I would do though is adding a log (below INFO) in the ChoiceProcessor.process() if otherwise == null that would say that exchange is not processed.
davsclaus:1213733361:2008-06-18T04:09:21.654+0000:1213733361:2008-06-18T04:09:21.654+0000:Hadrian good comments.

>In other words if there is no explicit otherwise() to go the errorHandler (no redelivery of course).
How can we archive this, the DeadLetterChannel is probably already ""chaining"" the routing?

Would be good to have it documented somehow. I do think the wiki needs a section where each DSL types is documented one-by-one. That is a however a extensive work to do.
gertvanthienen:1213770587:2008-06-18T14:29:47.523+0000:1213770587:2008-06-18T14:29:47.523+0000:OK, I wasn't aware of the {{throwFault()}} method that allows a user to easily make the message exchange fail instead of having to use the {{Processor}} trick.  Reducing the priority of the issue, because I guess I only need to document the default, messsage filtering behavior of the choice() on the site to make people more aware of it.  
gertvanthienen:1214196118:2008-06-23T12:41:58.402+0000:1214196118:2008-06-23T12:41:58.402+0000:I added a warning to the logging in http://svn.apache.org/viewvc?view=rev&revision=670544 and I changed the documentation at http://cwiki.apache.org/confluence/x/IcE"
0,CAMEL-611,Task,Major,1.4.0,None,"
None
",Closed,Fixed,1.4.0,Jonathan Anstey,Jonathan Anstey,0,0,2008-06-15 20:12:23+00:00,2008-07-06 06:35:10+00:00,"Just noticed that the wire tap docs were pointing to an old version of the wire tap in the following file (its fixed now):


http://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-spring/src/test/resources/org/apache/camel/spring/builder/spring_route_builder_test.xml


This file is not even tested so who knows if the routes work anymore","janstey:1213533828:2008-06-15T20:43:48.648+0000:1213533828:2008-06-15T20:43:48.648+0000:Updated the following wiki pages:

http://cwiki.apache.org/confluence/display/CAMEL/Message+Router
http://cwiki.apache.org/confluence/display/CAMEL/Publish+Subscribe+Channel
http://cwiki.apache.org/confluence/display/CAMEL/Content+Based+Router
http://cwiki.apache.org/confluence/display/CAMEL/Message+Filter
http://cwiki.apache.org/confluence/display/CAMEL/Recipient+List
http://cwiki.apache.org/confluence/display/CAMEL/Splitter
http://cwiki.apache.org/confluence/display/CAMEL/Selective+Consumer
http://cwiki.apache.org/confluence/display/CAMEL/Idempotent+Consumer

Not sure if there are any more refs. We may need to actually remove spring_route_builder_test.xml to get the remaining (the snippet errors would show up in the confluence admin area). 

Anyone want to try that? :)
davsclaus:1213573050:2008-06-16T07:37:30.470+0000:1213573050:2008-06-16T07:37:30.470+0000:I'm about to delete the file
davsclaus:1213574918:2008-06-16T08:08:38.578+0000:1213574918:2008-06-16T08:08:38.578+0000:Jonathan the file is deleted from trunk.
janstey:1213583785:2008-06-16T10:36:25.685+0000:1213583785:2008-06-16T10:36:25.685+0000:Thanks Claus. Found another reference here http://cwiki.apache.org/confluence/display/CAMEL/Spring+XML+Extensions. I say we resolve this now as any more snippet errors would be sent to the space admin.
davsclaus:1215297310:2008-07-06T06:35:10.802+0000:1215297310:2008-07-06T06:35:10.802+0000:Closing 1.4 issues"
0,CAMEL-610,Bug,Major,None,1.4.0,"
None
",Closed,Fixed,1.4.0,Guillaume Nodet,Guillaume Nodet,0,0,2008-06-13 13:36:11+00:00,2008-07-11 04:21:45+00:00,No Desc,"gnodet:1213343060:2008-06-13T15:44:20.029+0000:1213343060:2008-06-13T15:44:20.029+0000:URL: http://svn.apache.org/viewvc?rev=667533&view=rev
"
0,CAMEL-609,Improvement,Major,"1.3.0, 1.4.0",1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-06-13 09:31:30+00:00,2008-07-06 06:29:28+00:00,"http://activemq.apache.org/camel/transactional-client.html


We should have better documentation how to use this. Maybe in an example.
And some unit testing as well.


See nabble:
http://www.nabble.com/two-to-database-endpoints-in-one-transaction-td17707633s22882.html","davsclaus:1214720054:2008-06-29T14:14:14.498+0000:1214720054:2008-06-29T14:14:14.498+0000:This should be fixed first
davsclaus:1215144696:2008-07-04T12:11:36.540+0000:1215144696:2008-07-04T12:11:36.540+0000:Added a database example, now working on a simple JMS example
davsclaus:1215147227:2008-07-04T12:53:47.073+0000:1215147227:2008-07-04T12:53:47.073+0000:Phew it does take some time to document it, but now its much better with real backing unit tests that works."
0,CAMEL-608,Task,Major,"1.3.0, 1.4.0",None,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-06-13 08:25:37+00:00,2008-07-06 06:29:28+00:00,"The http component had system out code.


Look in all component for similar issues. The core has been fixed.
Unit testing can be omitted, but we should prefer to use logging instead.","davsclaus:1213319297:2008-06-13T09:08:17.501+0000:1213319297:2008-06-13T09:08:17.501+0000:Removed all relevant system out in components.

Now only the unit testing should be improved by using logging or more assertions instead of system.out"
0,CAMEL-607,Bug,Minor,"1.3.0, 1.4.0",1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-06-13 08:24:08+00:00,2008-07-06 06:29:28+00:00,"See nabble
http://www.nabble.com/how-to-disable-warn-log-message-when-running-HttpGetTest.java---td17598680s22882.html


Basically the duplicated should be removed and the System.out removed as well!",davsclaus:1213318721:2008-06-13T08:58:41.005+0000:1213318721:2008-06-13T08:58:41.005+0000:Is already fixed in trunk
0,CAMEL-606,Wish,Major,"1.3.0, 1.4.0",1.4.0,"
None
",Closed,Fixed,1.4.0,Hadrian Zbarcea,Claus Ibsen,0,1,2008-06-13 07:39:15+00:00,2008-07-06 06:29:28+00:00,"> Hi
>
> Should we consider enabling JMX as default in Camel? It runs on JDK1.5 and thus its possible.


Yeah, I think we should.


> What is the default in ServiceMix? Maybe Camel should align what they do?


AFAIK ServiceMix and ActiveMQ default it to true. Folk should have to disable it IMHO as its so useful


–
James
-------","wtam@iona.com:1213338977:2008-06-13T14:36:17.649+0000:1213338977:2008-06-13T14:36:17.649+0000:I'm working on it.
davsclaus:1213517830:2008-06-15T16:17:10.783+0000:1213517830:2008-06-15T16:17:10.783+0000:William is again busy working on patch for Camel ;)
wtam@iona.com:1213888910:2008-06-19T23:21:50.667+0000:1213888910:2008-06-19T23:21:50.667+0000:I will update wiki once this patch has been applied.

* By default, Camel mbean objects are registered with a mbean server and performance counters are enabled. However, RMI connector server is not started by default.
* Mbean server is ""found"" by mbean server's default domain name as it can be shared among camel contexts and with other application when it is desirable (as mentioned in CAMEL-613).
* If no mbean server can be found, a new one will be created.  
* As before, it is also possible to use the platform mbean server.
* System properties (found in JmxSystemPropertyKeys.java) and Spring configuration (found in CamelJMXAgentType.java) support the same set of configuration parameters.
* Instrumentation agent can be disabled by system property or spring configuration.
* Default Instrumentation agent is started and stop by the camel context as a service eliminating the need for SpringInstrumentationAgent subclass.
* Moved CamelChoiceWithManagementTest from spring to core where it belongs 
* updated RouteBuilderTest, ErrorHandlerTest to account for instrumentation interceptors
* Fixed some of the JMX tests that does not clear and restore system properties properly and release mbean servers at the end of the test.
* Update AggregatorType to allow it to be wrapped by interceptors.
* add ErrorHandlerWrappingStrategy mechanism as we need to prevent instrumentation interceptor from being wrapped by ErrorHandlers.
* rename LifecycleStrategy.onContextAdd() to onContextStart() since the lifecycle strategy is typically created after camel context.  Therefore, we are not really able to invoke the lifecycle strategy at that time.  It's more meaningful to be notified when camel context is started instead.
* since the default domain name for the mbean server and the domain name of the registered mbean object can be differ, we make them into different properties.  
* Add a check in ProcessorType.wrapProcessorInInterceptors() to prevent intercept ref from changing target processor.  It is a potential cycling problem.  This problem is discovered by enabling instrumentaton interceptor in StreamCachingInterceptorTest.  We'll probably should revisit StreamCachingInterceptor.  I'll create a JIRA.
* workaround NPE (CAMEL-620) in ResequencerType to allow createProcesssor to be invoked (so we can wrap Resequencer by an interceptor).
*  add async support for InstrumentationProcessor
* Fix CAMEL-553 (Firewall-friendly JMX Connector URL) by adding a property for RMI connection port.

njiang:1213891351:2008-06-20T00:02:31.630+0000:1213891351:2008-06-20T00:02:31.630+0000:Hi William,

Thanks for your contribution. It's  a huge patch,  I will take some time to review it .

Claus, I take this task for getting the patch into repository ASAP :)

Willem


davsclaus:1213907471:2008-06-20T04:31:11.933+0000:1213907471:2008-06-20T04:31:11.933+0000:William Tam - thanks a lot for the great patch. This is awesome work. You did go all the way - started with an issue to enable jmx and then discovered more and more that could/should be fixed. That is great that you have this talent and wanted to contribute it back. Thanks a lot ;)

Looking forward for the wiki documentation as well - that is where the frameworks put themselves into a higher level if the documentation is concise and up to date.

Since its a big patch I do think we test the JMX stuff a bit more a final 1.4 can be released.
davsclaus:1213922617:2008-06-20T08:43:37.138+0000:1213922617:2008-06-20T08:43:37.138+0000:Could we improve the DEBUG/INFO logging when the JMX stuff is started / registered?

End-users should be able to find the URI endpoints etc. at INFO level how to connect to the camel context.
davsclaus:1213922639:2008-06-20T08:43:59.748+0000:1213922639:2008-06-20T08:43:59.748+0000:This unit test CamelChoiceWithManagementTest file is 0 in file size. Maybe it should be deleted from SVN.
njiang:1213927854:2008-06-20T10:10:54.841+0000:1213927854:2008-06-20T10:10:54.841+0000:Done,  removed the CamelChoiceWithManagementTest from SVN.
wtam@iona.com:1213945200:2008-06-20T15:00:00.874+0000:1213945200:2008-06-20T15:00:00.874+0000:Sorry, CamelChoiceWithManagementTest.java was missing from my patch.    Here is it.
davsclaus:1214131134:2008-06-22T18:38:54.118+0000:1214164419:2008-06-23T03:53:39.043+0000:William, thanks for the missing unit test. Its *now* added to the trunk.

The unit test passed on my local laptop."
0,CAMEL-605,Test,Minor,None,None,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Freeman Yue Fang,0,0,2008-06-13 04:16:30+00:00,2008-07-06 06:30:56+00:00,"I notice that in bamboo nightly build recently SpringDataSetTest failed intermittently.
I try this test on my local machine, I can see this test failure once about every 10 times try","ffang:1213301899:2008-06-13T04:18:19.968+0000:1213301899:2008-06-13T04:18:19.968+0000:seems other guys already found this problem

On Jun 6, 2008, at 1:12 AM, Claus Ibsen wrote:

> Hi
>
> Why does the SpringDataSetTest fails once in a while on the Bamboo? It's a bit annoying.
>
>
> SpringDataSetTest : Run (testRun) History
> java.lang.AssertionError: dataset:foo Failed due to caught exception: java.lang.AssertionError: Header: camelDataSetIndex does not match. Expected: 9 but was: 8 on  Exchange[Message: <hello>world!</hello>] with headers: {camelDataSetIndex=8}
>     at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:662)
>     at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:240)
>     at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:199)
>     at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:126)
>     at org.apache.camel.component.dataset.SpringDataSetTest.testRun(SpringDataSetTest.java:34)
>
>
> Med venlig hilsen
>
> Claus Ibsen
> ......................................
> Silverbullet
> Skovsgårdsvænget 21
> 8362 Hørning
> Tlf. +45 2962 7576
> Web: www.silverbullet.dk
>


davsclaus:1213524067:2008-06-15T18:01:07.276+0000:1213524067:2008-06-15T18:01:07.276+0000:a bit odd how the exhange is created. The content and the header doesnt match up.
Message number 50: suddenly have a index of only 5.

And later on we get more and more of these missmatches.

{code}
2008-06-15 19:52:56,562 DEBUG SedaConsumer - Consuming: Exchange[Message: Hello World from message number 45] with header {camelDataSetIndex=45} 
2008-06-15 19:52:56,562 DEBUG SedaConsumer - Consuming: Exchange[Message: Hello World from message number 46] with header {camelDataSetIndex=46} 
2008-06-15 19:52:56,562 DEBUG SedaConsumer - Consuming: Exchange[Message: Hello World from message number 47] with header {camelDataSetIndex=47} 
2008-06-15 19:52:56,562 DEBUG SedaConsumer - Consuming: Exchange[Message: Hello World from message number 48] with header {camelDataSetIndex=48} 
2008-06-15 19:52:56,562 DEBUG SedaConsumer - Consuming: Exchange[Message: Hello World from message number 49] with header {camelDataSetIndex=49} 
2008-06-15 19:52:56,562 DEBUG SedaConsumer - Consuming: Exchange[Message: Hello World from message number 50] with header {camelDataSetIndex=5} 
2008-06-15 19:52:56,562 DEBUG SedaConsumer - Consuming: Exchange[Message: Hello World from message number 51] with header {camelDataSetIndex=51} 
2008-06-15 19:52:56,562 DEBUG SedaConsumer - Consuming: Exchange[Message: Hello World from message number 52] with header {camelDataSetIndex=52} 
2008-06-15 19:52:56,562 DEBUG SedaConsumer - Consuming: Exchange[Message: Hello World from message number 53] with header {camelDataSetIndex=53} 
2008-06-15 19:52:56,562 DEBUG SedaConsumer - Consuming: Exchange[Message: Hello World from message number 54] with header {camelDataSetIndex=54}
...
2008-06-15 19:52:56,625 DEBUG SedaConsumer - Consuming: Exchange[Message: Hello World from message number 193] with header {camelDataSetIndex=63} 
{code}
davsclaus:1213525549:2008-06-15T18:25:49.233+0000:1213525549:2008-06-15T18:25:49.233+0000:Okay it must be the seda producer that has a concurrency issue:

I have added some logging (CollectionProducer = SedaProducer)

{code}
2008-06-15 20:23:29,875 DEBUG CollectionProducer - Producing: Exchange[Message: Hello World from message number 8] with headers: {camelDataSetIndex=8} 
2008-06-15 20:23:29,875 DEBUG CollectionProducer - Producing: Exchange[Message: Hello World from message number 9] with headers: {camelDataSetIndex=9} 
2008-06-15 20:23:29,875 DEBUG CollectionProducer - Producing: Exchange[Message: Hello World from message number 10] with headers: {camelDataSetIndex=10} 
2008-06-15 20:23:29,875 DEBUG CollectionProducer - Producing: Exchange[Message: Hello World from message number 11] with headers: {camelDataSetIndex=11} 
2008-06-15 20:23:29,875 DEBUG CollectionProducer - Producing: Exchange[Message: Hello World from message number 12] with headers: {camelDataSetIndex=0} 
2008-06-15 20:23:29,875 DEBUG CollectionProducer - Producing: Exchange[Message: Hello World from message number 13] with headers: {camelDataSetIndex=13} 
2008-06-15 20:23:29,875 DEBUG CollectionProducer - Producing: Exchange[Message: Hello World from message number 14] with headers: {camelDataSetIndex=14} 
2008-06-15 20:23:29,875 DEBUG CollectionProducer - Producing: Exchange[Message: Hello World from message number 15] with headers: {camelDataSetIndex=15} 
{code}
davsclaus:1213534123:2008-06-15T20:48:43.584+0000:1213534123:2008-06-15T20:48:43.584+0000:The problem is CollectionProducer that copies the exchange to produce. However it looks like that exchange.copy is not safe in concurrent environments. Maybe we get bitten by some shared objects for the headers.

Copying the information ""more manually"" fixes the problem.
davsclaus:1213534186:2008-06-15T20:49:46.558+0000:1213534186:2008-06-15T20:49:46.558+0000:A workaround to the failed spring unit test is to use a different queue such as the direct one. However we still have this bug with concurrent seda
davsclaus:1213574325:2008-06-16T07:58:45.993+0000:1213574325:2008-06-16T07:58:45.993+0000:I am changing this to use direct queues so it wont fail from time to time on Bamboo. 
I will then create a unit test in camel-core that demonstrates the seda concurrency issue bug, that we can use as baseline for fixing that issue.
davsclaus:1213577447:2008-06-16T08:50:47.097+0000:1213577447:2008-06-16T08:50:47.097+0000:Bamboo should be happy now.

Added a new unit test that demonstrates the bug in camel-core. DataSetSedaTest.
Unit test is exluded by default until we have the seda combined with dataset fixed.
davsclaus:1215297056:2008-07-06T06:30:56.462+0000:1215297056:2008-07-06T06:30:56.462+0000:Closing 1.4 issues"
0,CAMEL-604,Bug,Major,1.3.0,1.4.0,"
None
",Closed,Won't Fix,1.4.0,Unassigned,Eric Levin,0,0,2008-06-11 14:58:20+00:00,2012-03-29 10:06:38+00:00,"A new connection is being created / shutdown for every message that is sent through my ActiveMQ JMSComponent.  I thought this issue had been resolved for Camel 1.3; however, as shown within the example project, it doesn't seem to be.  This is very concerning for rapidly produced messages as there is alot of overhead with creating a new connection.


Forum posting on this issue: http://www.nabble.com/New-connection-being-created-for-every-message-(post-1.3-camel)-td17684874s22882.html


Steps to running the attached sample:


-Have an instance of ActiveMQ running (localhost to the test app) with openwire exposed on port 61616 (the default port)
-After extracting the example project, simply run 'mvn test' and it will begin sending messages through Camel
-Open JConsole and look under the Connections for localhost broker - you will notice the suffix on connections increasing very quickly as connections are being opened/torn down for every message sent from the test app.","davsclaus:1213649872:2008-06-17T04:57:52.395+0000:1213649872:2008-06-17T04:57:52.395+0000:I am running your sample against ActiveMQ and have enabled jmx in activemq.

I have sent more than 130 messages and got this JMX output.
I am running on JDK1.5
davsclaus:1213649933:2008-06-17T04:58:53.930+0000:1213649933:2008-06-17T04:58:53.930+0000:And I had to add this to your pom.xml to enable JDK1.5
{code}
  <build>
    <defaultGoal>install</defaultGoal>

    <pluginManagement>
      <plugins>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>2.0.2</version>
          <configuration>
            <source>1.5</source>
            <target>1.5</target>
            <maxmem>256M</maxmem>
            <fork>${compiler.fork}</fork>
          </configuration>
        </plugin>

      </plugins>
    </pluginManagement>
{code}
davsclaus:1213649976:2008-06-17T04:59:36.456+0000:1213649976:2008-06-17T04:59:36.456+0000:Erik what is the status now? Do you have 130 open connections when you have sent 130 messages?
davsclaus:1213650022:2008-06-17T05:00:22.362+0000:1213650022:2008-06-17T05:00:22.362+0000:I does indeed looks a bit strange. I have about 30 connections open after sending about 370 messages.
davsclaus:1213650838:2008-06-17T05:13:58.123+0000:1213650838:2008-06-17T05:13:58.123+0000:I get the same behavior with Camel 1.4-SNAPSHOT as with 1.3.0
davsclaus:1213652135:2008-06-17T05:35:35.491+0000:1213652135:2008-06-17T05:35:35.491+0000:Ah I figured it out. When I stopped the unit tests they are not properly shutdown, so I had 5-10 rouge java processes still sending messages to ActiveMQ.

Now I killed them all and started again. After sending more than 660 messages I still only have 2 connections that I started with.
davsclaus:1213652210:2008-06-17T05:36:50.716+0000:1213652210:2008-06-17T05:36:50.716+0000:Eric in the process I tried to use the activemq specifc component in Camel
http://activemq.apache.org/camel/activemq.html

{code}
   <bean id=""activemq"" class=""org.apache.activemq.camel.component.ActiveMQComponent"">
    <property name=""brokerURL"" value=""tcp://localhost:61616""/>
  </bean>
{code}
jstrachan:1213863302:2008-06-19T16:15:02.513+0000:1213863302:2008-06-19T16:15:02.513+0000:As Claus said, if you use the activemq component directly - which is what we recommend if you are using ActiveMQ - rather than the JMS component everything works fine.

See the blue info box on the JMS page which describes your issue and why you should use the ActiveMQ component - or explicitly use a JMS pool wrapper around the ActiveMQ connection factory
http://activemq.apache.org/camel/jms.html

Its easier to just use the ActiveMQ component as that does the right thing for you
http://activemq.apache.org/camel/activemq.html

ejlevin1:1214166082:2008-06-23T04:21:22.933+0000:1214166082:2008-06-23T04:21:22.933+0000:Thanks guys -- sorry I was out of town the last week so didn't see the comments until just now.  The problem was that I noticed a new connection being opened and closed for every message being sent.  I am guessing this is a JMS standard thing, and that is why it showed up with using the JmsComponent instead of the ActiveMQ specific component. Apparently I need to pay more attention as I didn't realize there were 2 different components for AMQ vs. generic JMS component...  I'll test it out, but I'm sure that'll do the trick.  Thanks again!
davsclaus:1215297310:2008-07-06T06:35:10.764+0000:1215297310:2008-07-06T06:35:10.764+0000:Closing 1.4 issues
weberjn:1332981128:2012-03-29T08:32:08.968+0000:1332981128:2012-03-29T08:32:08.968+0000:Is this bug/feature still present in Camel 1.9.1? We have to use Websphere MQ as JMS provider, so using AMQ instead of generic JMS component is not a good workaround.
I did a trace of MQ within Camel, and there were indeed a lot of MQOPEN calls, so I guess the problem is still there.
Effectively this bug makes the JMS component unusable, so the bug should be fixed.
davsclaus:1332986798:2012-03-29T10:06:38.310+0000:1332986798:2012-03-29T10:06:38.310+0000:Jurgen I suggest to use the Camel mailing list / forum for help with Camel, and *not* comment on old JIRA tickets.

And read on the Camel JMS wiki page, it talks about some cache level options you can adjust to your needs. And on the user forum there is many people using Camel with IBM MQ and you can find some threads about this as well."
0,CAMEL-603,New Feature,Major,None,2.0-M2,"
None
",Closed,Won't Fix,2.0-M2,Unassigned,Claus Ibsen,0,0,2008-06-11 10:58:52+00:00,2009-11-21 11:57:54+00:00,"We should be able to run smx as a war in 'embedded mode' with whatever camel routes we need
We should create a little example of how to mix and match servicemix, jbi components and camel in a war",davsclaus:1258775874:2009-11-21T11:57:54.396+0000:1258775874:2009-11-21T11:57:54.396+0000:Closing all 2.0M2 tickets
0,CAMEL-602,Task,Major,None,1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,Willem Jiang,0,0,2008-06-11 06:59:02+00:00,2008-07-06 08:01:56+00:00,"Update the https://svn.apache.org/repos/asf/activemq/scripts/activemq-schema-copy.sh for copying the schema.
Also need to create a directory which name is integration in activemq.apache.org/camel/schema/spring.","njiang:1213139895:2008-06-11T07:18:15.949+0000:1213139895:2008-06-11T07:18:15.949+0000:Hi James,

Could you create a directory (integration) in the /www/activemq.apache.org/camel/schema/spring for publishing the schema?

The activemq-schema-copy.sh is updated.

Thanks,

Willem
davsclaus:1213701283:2008-06-17T19:14:43.992+0000:1213701283:2008-06-17T19:14:43.992+0000:Any update on this. We should have this fixed before a 1.4 release.
njiang:1213720509:2008-06-18T00:35:09.674+0000:1213720509:2008-06-18T00:35:09.674+0000:The script is working now , you can get the schema here
 http://activemq.apache.org/camel/schema/spring/integration/"
0,CAMEL-601,New Feature,Major,1.4.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,0,0,2008-06-10 11:47:15+00:00,2008-10-23 04:37:11+00:00,"We need an camel example that can be package as a standard war application and be deployed in eg. Tomcat.
We should have a tutorial wiki that documents how to setup the project and let maven create the war file etc.


I am working on a new example that I will adjust to a web application.","davsclaus:1216096928:2008-07-15T12:42:08.826+0000:1216096928:2008-07-15T12:42:08.826+0000:Tutorial documentation in wiki:
http://cwiki.apache.org/confluence/display/CAMEL/Tutorial-Example-ReportIncident

Work in progress. Long way to go!
davsclaus:1220754453:2008-09-07T10:27:33.210+0000:1220754453:2008-09-07T10:27:33.210+0000:New tutorial at:
http://activemq.apache.org/camel/tutorial-axis-camel.html

This example shows how Camel integrates with older frameworks such as Apache Axis 1.4.
It can be run using Maven.

The example exposes a webservice using Apache Axis that uses Camel to send the input
as a message to an endpoint. The endpoint is a file endpoint that stores a backup of the request.
The purpose is more to demonstrate the integration between Axis, Spring and Camel than
other concepts in Camel such as its powerful routing and mediation framework.

davsclaus:1221735633:2008-09-18T19:00:33.487+0000:1221735633:2008-09-18T19:00:33.487+0000:We have an example now and James also wrote a tutorial on how to use camel as a web application.
davsclaus:1224707831:2008-10-23T04:37:11.860+0000:1224707831:2008-10-23T04:37:11.860+0000:Closing 1.5 issues"
0,CAMEL-600,Improvement,Major,None,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Freeman Yue Fang,0,0,2008-06-10 10:28:55+00:00,2008-07-06 06:30:56+00:00,should be same as it used in cxf 2.1 since camel now use cxf 2.1,"davsclaus:1213068508:2008-06-10T11:28:28.416+0000:1213068508:2008-06-10T11:28:28.416+0000:Nice that all 2.1.6 artifacts is in maven repos. Thanks for the patch Freeman
davsclaus:1213069297:2008-06-10T11:41:37.221+0000:1213069297:2008-06-10T11:41:37.221+0000:Damm company firewall - I can not commit the patch. Any committers fell free to assign the task and do it.
davsclaus:1213069527:2008-06-10T11:45:27.290+0000:1213069527:2008-06-10T11:45:27.290+0000:Okay got the proxy setting configured. Applied the patch with thanks to Freeman.
davsclaus:1215297056:2008-07-06T06:30:56.432+0000:1215297056:2008-07-06T06:30:56.432+0000:Closing 1.4 issues"
0,CAMEL-599,Bug,Minor,1.3.0,1.4.0,"
None
",Closed,Won't Fix,1.4.0,Willem Jiang,David Brosius,0,0,2008-06-09 21:28:54+00:00,2008-07-06 06:35:10+00:00,"AbstractDataFormatFeature has problems when deleting interceptors based on phase names when multiple interceptors are removed, due to bad collection removal while iterating, patch fixes this. unit test added.","njiang:1213054545:2008-06-10T07:35:45.325+0000:1213054545:2008-06-10T07:35:45.325+0000:The Interceptor Lists are the instance of CopyOnWriteArrayList, which iterator  is guaranteed not to throw ConcurrentModificationException and does not support the remove method.
So I will not apply this patch.

davsclaus:1215297310:2008-07-06T06:35:10.744+0000:1215297310:2008-07-06T06:35:10.744+0000:Closing 1.4 issues"
0,CAMEL-598,Bug,Major,1.4.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,Jonathan Anstey,0,0,2008-06-09 19:37:56+00:00,2008-06-18 05:13:12+00:00,"I've been getting this weird error in the 1.4.0 release candidate. I needed to delete my local .m2 directory, and then run mvn camel:run in the bam example (others failed similarly). The patch I attached seems to fix the issue.


[INFO] [compiler:testCompile]
[INFO] No sources to compile
-----------------------------------------------------
this realm = app0.child-container[org.apache.camel:camel-maven-plugin]
urls[0] = file:/home/janstey/.m2/repository/org/apache/camel/camel-maven-plugin/1.4.0/camel-maven-plugin-1.4.0.jar
urls[1] = file:/home/janstey/.m2/repository/org/codehaus/plexus/plexus-utils/1.1/plexus-utils-1.1.jar
Number of imports: 6
import: org.codehaus.classworlds.Entry@4891bb28
import: org.codehaus.classworlds.Entry@f8e44ca4
import: org.codehaus.classworlds.Entry@c51bc9e7
import: org.codehaus.classworlds.Entry@bece5185
import: org.codehaus.classworlds.Entry@3fee8e37
import: org.codehaus.classworlds.Entry@3fee19d8


this realm = plexus.core
urls[0] = file:/opt/apache-maven-2.0.9/lib/maven-2.0.9-uber.jar
Number of imports: 6
import: org.codehaus.classworlds.Entry@4891bb28
import: org.codehaus.classworlds.Entry@f8e44ca4
import: org.codehaus.classworlds.Entry@c51bc9e7
import: org.codehaus.classworlds.Entry@bece5185
import: org.codehaus.classworlds.Entry@3fee8e37
import: org.codehaus.classworlds.Entry@3fee19d8
-----------------------------------------------------
[INFO] ------------------------------------------------------------------------
[ERROR] BUILD ERROR
[INFO] ------------------------------------------------------------------------
[INFO] Internal error in the plugin manager executing goal 'org.apache.camel:camel-maven-plugin:1.4.0:run': Unable to find the mojo 'org.apache.camel:camel-maven-plugin:1.4.0:run' in the plugin 'org.apache.camel:camel-maven-plugin'
org/codehaus/mojo/exec/AbstractExecMojo","njiang:1213120829:2008-06-11T02:00:29.634+0000:1213120829:2008-06-11T02:00:29.634+0000:Patch applied with thanks to Jonathan.
http://svn.apache.org/viewvc?rev=665957&view=rev"
0,CAMEL-597,Bug,Minor,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,David Brosius,0,0,2008-06-09 17:51:10+00:00,2008-07-06 06:30:56+00:00,"JmsQueueEndpoint has faulty initialization logic, checking a parameter and if null, setting that parameter. The code should be setting the member variable instead.


Code was


     public JmsQueueEndpoint(String uri, JmsComponent component, String destination,
             JmsConfiguration configuration, QueueBrowseStrategy queueBrowseStrategy) {
         super(uri, component, destination, false, configuration);
         this.queueBrowseStrategy = queueBrowseStrategy;
         if (queueBrowseStrategy == null) 

{
            queueBrowseStrategy = createQueueBrowseStrategy();
         }

     }


patch fixes this (two places)","davsclaus:1213008635:2008-06-09T18:50:35.579+0000:1213008635:2008-06-09T18:50:35.579+0000:Applied patch with thanks to Dave.
davsclaus:1213008729:2008-06-09T18:52:09.389+0000:1213008729:2008-06-09T18:52:09.389+0000:Dave you have to remember to add the file after your create the ticket as you could then tick off ""grant ASF rights"" = so the is an Apache icon on the file attachment.

Could you reattch the file so the ASF license is in order?
davsclaus:1215297056:2008-07-06T06:30:56.410+0000:1215297056:2008-07-06T06:30:56.410+0000:Closing 1.4 issues"
0,CAMEL-596,Improvement,Trivial,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,David Brosius,0,0,2008-06-09 17:44:53+00:00,2008-07-06 06:30:56+00:00,code creates queue browsing strategy even if not needed. patch pushes creation down to relevant branch.,"davsclaus:1213007923:2008-06-09T18:38:43.378+0000:1213007923:2008-06-09T18:38:43.378+0000:Applied patch with thanks to Dave. Good catch.
davsclaus:1215297056:2008-07-06T06:30:56.382+0000:1215297056:2008-07-06T06:30:56.382+0000:Closing 1.4 issues"
0,CAMEL-595,Bug,Trivial,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,David Brosius,0,0,2008-06-09 17:09:42+00:00,2008-07-06 06:30:56+00:00,"code uses in.read(buf) assuming that the read will be greedy. This isn't guaranteed, Patch fixes this.","davsclaus:1213008948:2008-06-09T18:55:48.439+0000:1213008948:2008-06-09T18:55:48.439+0000:Dave thanks for all the findings. Is there other places in the code that have similiar issues with the read?, could be in some of the components as well.

However I haven't seen this kind of code to properly handling reading from an inputsource to a buffer not done with the just the one-liners in.read(buf) in other frameworks.
I don't think its well know that this problem could exists that the buffer isn't read in one operation.

Dave do you have experience that this has happened? eg reading a very large file etc?
dbrosius:1213011121:2008-06-09T19:32:01.413+0000:1213011271:2008-06-09T19:34:31.979+0000:It's not guaranteed by the InputStream contract. Some streams may greedy read, others may not. Large streams are a likely cause. For files, I believe it's up to each platform to decide how to manage this, so it might be that unix and win32 work perfectly fine, but perhaps some smaller platform does not. I didn't notice any other places in the code that has this problem. 
davsclaus:1213015041:2008-06-09T20:37:21.883+0000:1213015041:2008-06-09T20:37:21.883+0000:Thanks Dave for all your patches. Great that you take the time to dig into the code and find these. Please keep em coming -. I will fire up to svn commit command ;)
davsclaus:1215297056:2008-07-06T06:30:56.350+0000:1215297056:2008-07-06T06:30:56.350+0000:Closing 1.4 issues"
0,CAMEL-594,Bug,Major,1.4.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Jonathan Anstey,Jonathan Anstey,0,0,2008-06-09 14:34:01+00:00,2008-07-06 06:35:10+00:00,I noticed that some examples that are run via mvn exec:java require that the example be compiled first. I've updated the readmes to include this step...,"janstey:1212993306:2008-06-09T14:35:06.602+0000:1212993306:2008-06-09T14:35:06.602+0000:Patch to update the readmes.
davsclaus:1213006312:2008-06-09T18:11:52.149+0000:1213006312:2008-06-09T18:11:52.149+0000:Thanks again Jonathan for your care of details and providing easy to patch patches.
davsclaus:1215297310:2008-07-06T06:35:10.722+0000:1215297310:2008-07-06T06:35:10.722+0000:Closing 1.4 issues"
0,CAMEL-593,Bug,Minor,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,David Brosius,0,0,2008-06-08 21:59:59+00:00,2008-06-18 05:12:31+00:00,a couple places streams are opened and are not closed. patch fixes this.,"davsclaus:1212955202:2008-06-09T04:00:02.791+0000:1212955202:2008-06-09T04:00:02.791+0000:Dave thanks for the patches. I do think we have in Camel a ObjectHelper.close that is usable for closing stuff (That is Closeable) and handling the try catch warn logging.
We ought to use this one instead of our own try ... catch handling
njiang:1212971018:2008-06-09T08:23:38.388+0000:1212971018:2008-06-09T08:23:38.388+0000:Patch applied with thanks to Dave.
http://svn.apache.org/viewvc?rev=664624&view=rev
[ Show » ]
Willem Jiang - 09/Jun/08 01:23 AM Patch applied with thanks to Dave. http://svn.apache.org/viewvc?rev=664624&view=rev
"
0,CAMEL-592,Improvement,Trivial,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,David Brosius,0,0,2008-06-08 21:52:07+00:00,2008-06-18 05:12:17+00:00,"Various places code uses autoboxing of constants that just wastes time, as using the other constant (true vs Boolean.true) would remove that useless work. patch fixes this","njiang:1212971022:2008-06-09T08:23:42.933+0000:1212971022:2008-06-09T08:23:42.933+0000:Patch applied with thanks to Dave.
http://svn.apache.org/viewvc?rev=664624&view=rev
[ Show » ]
Willem Jiang - 09/Jun/08 01:23 AM Patch applied with thanks to Dave. http://svn.apache.org/viewvc?rev=664624&view=rev
"
0,CAMEL-591,Improvement,Trivial,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,David Brosius,0,0,2008-06-08 21:37:14+00:00,2008-06-18 05:12:00+00:00,this patch removes some minor code that isn't used,"njiang:1212970997:2008-06-09T08:23:17.255+0000:1212970997:2008-06-09T08:23:17.255+0000:Patch applied with thanks to Dave.  
http://svn.apache.org/viewvc?rev=664624&view=rev"
0,CAMEL-590,Sub-task,Minor,1.4.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-06-08 14:41:43+00:00,2008-07-06 06:29:28+00:00,The wiki need a little overhaul now that the example has changed slightly.,"davsclaus:1212907314:2008-06-08T14:41:54.308+0000:1212907314:2008-06-08T14:41:54.308+0000:The wiki:
http://activemq.apache.org/camel/tutorial-jmsremoting.html
davsclaus:1213012569:2008-06-09T19:56:09.730+0000:1213046428:2008-06-10T05:20:28.101+0000:TODO: Run the server *done*
TODO: Add the -aop server also *done*
TODO: Continue replacing code with snippets *done*
davsclaus:1213132695:2008-06-11T05:18:15.010+0000:1213132695:2008-06-11T05:18:15.010+0000:TODO: Add new client that used the Camel Endpoint pattern.
davsclaus:1213181903:2008-06-11T18:58:23.028+0000:1213181903:2008-06-11T18:58:23.028+0000:Okay the tutorial has been updated and we now have 3 clients as well. The tutorial is good to go for a 1.4 release."
0,CAMEL-589,Improvement,Minor,1.4.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-06-08 13:45:25+00:00,2008-07-06 06:29:28+00:00,"The new sample needed a bit of cleanup so I did some work.


I added some code comments to assist end-users.
I also let the broker be configured out-of-the-box in the spring xml instead of embedded java code that wasn't best-practice.


And I added an AOP aspect to act as a kind of audi interceptor on the server side to log all the incomming requests. Part of investigation of an aspectj-aop autoproxy bug report, that I can not reproduce in trunk.","davsclaus:1212904757:2008-06-08T13:59:17.123+0000:1212904757:2008-06-08T13:59:17.123+0000:Hmm its sunday and the sun is shining and i'm sitting in the shade with a beer and a laptop and cranking on the sample to use AOP stuff to do audit backups with camel endpoints all configued using the xml and aspects. It's kinda scary what you can do in a few lines of code.
njiang:1212905592:2008-06-08T14:13:12.933+0000:1212905592:2008-06-08T14:13:12.933+0000:Hi Claus,

I think the sample you mentioned is the camel-example-spring-jms  not jmx.

Am I right?

Willem.

davsclaus:1212906084:2008-06-08T14:21:24.145+0000:1212906084:2008-06-08T14:21:24.145+0000:Oh yes its the JMS messaging sample ;)

And it needs to update the wiki as well with my modifications (well Claus you get the pain when you mess with the code!)
http://activemq.apache.org/camel/tutorial-jmsremoting.html

"
0,CAMEL-588,Improvement,Major,1.4.0,None,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Christian Schneider,0,0,2008-06-08 10:59:55+00:00,2009-07-31 06:33:33+00:00,"Currently there is a bad dependency cycle between camel, spi and model. camel.CamelContext references model.RouteType. spi.RouteContext references model.RouteType and model.FromType.  Additionally spi.RouteContext and spi.InterceptStrategy reference model.ProcessorType. These references are especially bad ones as camel and spi are the most low level packages and these references close the loop that makes camel one big tangle. I managed to remove this tangle and so lower the excess(xs) measurement in structure 101 from 4300 to 2400. I added the dependency views to the issue. I hided the deprecated CamelTemplate in the views to show that the cycle will be broken once we can delete this.


The first thing I found out is that model is in my opinion not especially well named. The model package is not the inner domain model of camel as the name suggests but more the java dsl. So I think it could make sense to rename it at some point into javadsl or dsl. This change would be too destructive so I did not change this. But I think it is reasonable to define that camel and spi should not be dependent on the dsl as the dsl is only needed while creating the routes. So my goal was to cut these dependencies.


I first moved spi.RouteContext and spi.InterceptStrategy to model. With RouteContext I am quite sure that this is a good thing as it is only needed in the Java DSL and the builders. InterceptStrategy is of course part of an spi but as it references model it can´t life in spi.  As LifecycleStrategy references RouteContext I split this interface in the part that does not references RouteContext which I just left in spi and a new interface ModelLifecycleStrategy which lives in model. This interface has the onRouteContextCreate.


Then I reworked the communication between DefaultCamelContext and RouteBuilder. I removed the routedefinitions from DefaultCamelContext and mode sure they are not needed anywhere. So only the RouteBuilder knows about the definitions and keeps them encapsulated. In the current code the intialization of the RouteBuilder and the transfer of Routes and RouteDefinitions between Routebuilder and DefaultCamelContext is very complicated and intransparent. The getRouteList does the initialization as a side effect and additionally feeds the route definitions into the CamelContext. This is extremly intransparent. I replaced this with a simple and speaking method in Routes. btw I would vote to rename Routes to RouteProvider. This would make the responsbility clearer.


List<Route> configureAndRetrieveRoutes(CamelContext context) throws Exception;


This method intializes the RouteBuilder, creates the definitions and routes and simply returns the List of Routes. This is all communication between DefaultCamelContext and RouteBuilder. The only little difference in behaviour compared to before is that the Endpoint resolution happens already in this step and not when the CamelContext is started.


All unit tests except one worked out of the box with this change. The one that failed was RouteWithMistypeComponentNameTest. I this test the expected exception happened now while adding the RouteBuilder to the context not when starting the context. This was easily solved by extending the try to include the addRoutes call. This is of course a minor change in contract but I believe the architectural benefits are worth this little change.


I also had to do some little tweaks to make the GraphGeneratorSupport work again. As CamelContext now does not know the route definitions this information has to be taken from BuilderSupport. So made the CamelContext know all its RouteBuilders as a list of Routes. In the Graph generation I then cast them to BuilderSupport and extract the route defintions. So I was able to keep the balance between encapsulation and enough knowledge to draw the graphs. 


The last thing I did was to remove the createProcessor method from RouteContext. I think this method was quite redundant. I was able to replace all occurances of this with the much simpler call. RouteType.createOutputProcessor. This removes another part of a cycle.


I set the version for this issue to 1.4.0 so it does not get lost but feel free to move it to the version of camel where you want it solved. As this is a big patch I would of course prefer it to be commited as soon as possible. If we wait too long I probably have to redo the patch as there will be too many changes in camel in the mean time.","davsclaus:1235896278:2009-03-01T16:31:18.215+0000:1235896278:2009-03-01T16:31:18.215+0000:ExpressionAdapater should be moved from impl to util or a support package
davsclaus:1235896301:2009-03-01T16:31:41.971+0000:1235944447:2009-03-02T05:54:07.633+0000:DataFormatType should not implement DataFormat *DONE*
davsclaus:1235944435:2009-03-02T05:53:55.975+0000:1235944435:2009-03-02T05:53:55.975+0000:Bean component uses model *DONE*
davsclaus:1235944514:2009-03-02T05:55:14.087+0000:1235947161:2009-03-02T06:39:21.164+0000:LoggingLevel enum should be moved to root package *DONE*
davsclaus:1235949371:2009-03-02T07:16:11.798+0000:1235949371:2009-03-02T07:16:11.798+0000:StreamCache interface should be moved to root package *DONE*
Bean- and MockComponent uses Converter classes directly. *DONE*
davsclaus:1235954514:2009-03-02T08:41:54.288+0000:1235954514:2009-03-02T08:41:54.288+0000:CamelPostProcessorHelper from impl uses component/bean, try to avoid this
davsclaus:1236039792:2009-03-03T08:23:12.777+0000:1236039792:2009-03-03T08:23:12.777+0000:I will close this one now as we got most fixed and have a much better package structure now.

The bean component is becoming a central piece in Camel and I am wondering if we should move parts of it into the spi/camel/impl and let the bean component be a endpoint factory facade as most others are.
davsclaus:1248993213:2009-07-31T06:33:33.823+0000:1248993213:2009-07-31T06:33:33.823+0000:Closing 2.0m1 tickets"
0,CAMEL-587,Bug,Major,"1.2.0, 1.3.0",1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,Willem Jiang,0,0,2008-06-08 08:31:08+00:00,2008-06-18 05:11:45+00:00,"Need to make sure we Use CXF LogUtils to get logger , so we can switch the logger from java.utils.Logger to log4j.","njiang:1213121189:2008-06-11T02:06:29.044+0000:1213121189:2008-06-11T02:06:29.044+0000:Patch revision is 664468.
http://svn.apache.org/viewvc?rev=664468&view=rev"
0,CAMEL-586,Improvement,Major,"1.2.0, 1.3.0",1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,Willem Jiang,0,0,2008-06-08 03:08:59+00:00,2008-06-18 05:11:27+00:00,"Current camel-cxf component can only handler set the out message body with the CXF message object (CAMEL-569), we should support more than that.


When we set the camel exchange out message's body in the other component , 
camel-cxf component should copy that message body back to the CXF message which will be used in the CXF intercepter chains for the further processing.","njiang:1212869404:2008-06-08T04:10:04.462+0000:1212869404:2008-06-08T04:10:04.462+0000:The patch is applied in the revision 664432.

URL: http://svn.apache.org/viewvc?rev=664432&view=rev"
0,CAMEL-585,Task,Major,"1.3.0, 1.4.0",2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,1,2008-06-07 13:43:56+00:00,2009-11-21 11:57:54+00:00,"Bruce Elmore have investigated and do think that Camel has a bug in the JMS compoenent regarding how exceptions is received from the JMS Producer (when receiving the reply).


If the reply was a thrown exception from the other part, this is not currently set as an exception on the build Exchange but on the body as is.
Pitfall: If an exception should be deserialized and set as an exception object on the created exception there could be problems with that the exception class does not exists on the receive side.


Would be great to get James and other core comitters opinion on this matter, as it's maybe also a more general pattern for other components as well.
This ticket is created to not forget about the postings on the user forum:


nabble: (Handle Bean Exception)
http://www.nabble.com/Handling-Bean-exceptions-td17671948s22882.html","davsclaus:1221361285:2008-09-14T11:01:25.963+0000:1221361285:2008-09-14T11:01:25.963+0000:BTW: The ProducerTemplate has been improved so it will throw the caused exception. As Bruce also pointed out.

I am looking into Bruces ideas.

This is to be added:
- if the exchanged failed and a FAULT message was set, then that is used for reply

Still considering:
- if the exchanged failed and an Exception was set, then that is used for reply (as a javax.jms.ObjectMessage).

Maybe we can add a flag to enable/disable this behaviour. To send exception as objects over the wire in the body. If not then we can send the message as a toString and maybe add a JMSHeader to indicate the failure.

Any thoughts?
davsclaus:1221363301:2008-09-14T11:35:01.662+0000:1221363301:2008-09-14T11:35:01.662+0000:The FAULT stuff is now in place. However the exception needs more consideration and feedback.

Currently if the exchange could not be proceseed it will throw a runtime exception that Spring will catch and do a rollback on the TX. This is something that end-users might want to happend vs. sending a serialized stacktrace back over the wire.

I think we need a flag to set what behavior end-users want.

Feedback welcome
davsclaus:1221365152:2008-09-14T12:05:52.415+0000:1223594306:2008-10-10T07:18:26.433+0000:Remember to me. Add a unit test for send JMS asInOut by it timeout. *DONE*
belmore:1223970129:2008-10-14T15:42:09.687+0000:1223970129:2008-10-14T15:42:09.687+0000:I've been thinking about this again because I will have to implement similar changes that I made for 1.3 for 1.4. I gather that there is some reluctance to making this change, because of the issues related to serialization of the exception. Obviously, an exception that occurs on the server side might not deserialize on the client side.

I worked around this issue by creating a exception class that is shared by both the client and the server:

public class MyCamelRemoteException extends RuntimeException {

	private String causeClassName;
	
	public MyCamelRemoteException(Throwable cause) {
		super(String.format(""%s (%s)"", cause.getMessage() == null ? """" : cause.getMessage(), 
			cause.getClass().getName()));
		this.setStackTrace(cause.getStackTrace());
		causeClassName = cause.getClass().getName();
	}

	public String getCauseClassName() {
		return causeClassName;
	}
}

The MyCamelRemoteException contains the exception message, stack trace and the class name of the original exception. I realize that this is a bit of a kludge, however, I believe that it is an improvement over what occurs in 1.3, at least, where the exception is thrown away and the client simply gets a copy of the request as the response. 

Note that the JmsBinding would need to wrap the original exception:

public class MyJmsBinding extends JmsBinding {

	public MyJmsBinding() {
	}

	@Override
	public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage,
		Session session) throws JMSException
	{
		// TODO: Passing back to raw exception on the queue could be problematic. If
		// the client doesn't have the class in its classpath, it wouldn't be able to
		// deserialize the exception. It need to test this to be sure either way.
		
		Message answer = null;
		if (camelMessage instanceof JmsMessage) {
			JmsMessage jmsMessage = (JmsMessage) camelMessage;
			answer = jmsMessage.getJmsMessage();
		}
		if (answer == null) {
			if (exchange.getException() != null) {
				answer = createJmsMessage(new MyCamelRemoteException(exchange.getException()), 
					session, exchange.getContext());				
			}
			else {
				answer = createJmsMessage(camelMessage.getBody(), session, exchange.getContext());
			}
			
			appendJmsProperties(answer, exchange, camelMessage);
		}
		return answer;
	}
}

I have not looked into what you've done with FAULTs. This might serve as a workable solution as well. 
davsclaus:1225936140:2008-11-06T09:49:00.243+0000:1225936140:2008-11-06T09:49:00.243+0000:I am letting go of this one currently. 

The camel-jms stuff should be improved in 2.x. But in the short run we are focusing on getting the internal API refactored in 2.0.
belmore:1237528932:2009-03-20T14:02:12.916+0000:1237531922:2009-03-20T14:52:02.999+0000:I was looking over the Camel 2.0 source and it looked like this problem has still not been addressed. My company would REALLY like to see a solution to this problem incorporated into Camel. We'd be more than happy to create a  patch if we could get it incorporated into the Camel codebase.

In the spirit of that, my camel-fixes project is attached. It provides a workaround to this problem. We've been using this for quite some time and have not run into any problems with it. To use the fix, on the server side, your endpoints should use MyJmsComponent instead of JmsComponent. On the client side, use template.send with an inout exchange pattern. Check if the returned exchange contains an exception and if it does, throw it. I can provide a detailed example if anyone needs it.

It's written for Camel 1.4 at the moment. It's more complicated and contains more classes/code than it would have to if it wasn't a separate library. For instance,  in  order to ""inject"" a custom version of JmsBinding (MyJmsBinding), I had to create MyJmsComponent so it would create instances of MyJmsEndpoint and MyJmsQueueEndpoint which in turn create instances of MyJmsBinding. A little ugly, but since Camel doesn't use Spring for dependency injection and didn't see another way.


davsclaus:1237530873:2009-03-20T14:34:33.967+0000:1237530873:2009-03-20T14:34:33.967+0000:Bruce, good timing. I have just worked on other parts on camel-jms for the 2.0 release.

Was planning to look into this afterwards. We have been busy with other core improvements and cleanup for the 2.0.
So that is why we have not addressed your feature yet.
davsclaus:1237784594:2009-03-23T13:03:14.025+0000:1237784594:2009-03-23T13:03:14.025+0000:trunk: 757395.

See new option *transferException* on the Camel JMS wiki page.

See also {{org.apache.camel.component.jms.JmsTransferExceptionTest}} for an unit test.
davsclaus:1258775874:2009-11-21T11:57:54.339+0000:1258775874:2009-11-21T11:57:54.339+0000:Closing all 2.0M2 tickets"
0,CAMEL-584,Bug,Minor,1.4.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-06-06 11:33:22+00:00,2008-07-06 06:29:28+00:00,"This unit test cases infinitive loop



Caused by: java.lang.StackOverflowError
	at java.util.HashMap$HashIterator.<init>(HashMap.java:822)
	at java.util.HashMap$EntryIterator.<init>(HashMap.java:881)
	at java.util.HashMap$EntryIterator.<init>(HashMap.java:881)
	at java.util.HashMap.newEntryIterator(HashMap.java:895)
	at java.util.HashMap$EntrySet.iterator(HashMap.java:988)
	at java.util.AbstractMap.toString(AbstractMap.java:584)
	at java.lang.String.valueOf(String.java:2615)
	at java.lang.StringBuilder.append(StringBuilder.java:116)
	at org.apache.camel.component.bean.BeanWithPropertiesAndHeadersAndBodyInjectionTest$MyBean.toString(BeanWithPropertiesAndHeadersAndBodyInjectionTest.java:91)
	at java.lang.String.valueOf(String.java:2615)
	at java.lang.StringBuffer.append(StringBuffer.java:220)
	at java.util.AbstractMap.toString(AbstractMap.java:598)
	at java.lang.String.valueOf(String.java:2615)
	at java.lang.StringBuilder.append(StringBuilder.java:116)
	at org.apache.camel.component.bean.BeanWithPropertiesAndHeadersAndBodyInjectionTest$MyBean.toString(BeanWithPropertiesAndHeadersAndBodyInjectionTest.java:91)
	at java.lang.String.valueOf(String.java:2615)","davsclaus:1212724064:2008-06-06T11:47:44.517+0000:1212724064:2008-06-06T11:47:44.517+0000:The bug is in BeanProcessor that adds the bean itself as a propery the the exchange

{code}
    public void process(Exchange exchange) throws Exception {
        if (LOG.isDebugEnabled()) {
            LOG.debug("">>>> invoking method for: "" + exchange);
        }

        Object bean = beanHolder.getBean();
        exchange.setProperty(""CamelBean"", bean);
{code}

And then when you do a toString() as the unit test does with the properties:

{code}
        public String toString() {
            return ""MyBean[foo: "" + foo + "" bar: "" + bar + "" body: "" + body + ""]"";
        }
{code}

And the properties is the foo argument, then you get circular dependency.


Why do Camel set the bean itself as a property? Is this used by end-users at all?
""CamelBean"" is not used anywhere else in the java code, so I do think its safe to delete the codeline but then end-users that this property existed isn't there anymore.

We could remedy this by setting the BeanHolder instead of the bean directly.
davsclaus:1212724577:2008-06-06T11:56:17.962+0000:1212724577:2008-06-06T11:56:17.962+0000:The fix is now:

Bean component sets a reference to the bean that is being invoked as a property on the Exchange. This property has change its key from ""CamelBean"" to ""org.apache.camel.bean.BeanHolder"" and the type is now a BeanHolder."
0,CAMEL-583,Bug,Major,"1.3.0, 1.4.0",1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-06-06 08:32:15+00:00,2008-07-06 06:29:28+00:00,"The unit test in camel-jaxb is failing DumpToXmlTest


However since there are no assertions its not failing the build.



2008-06-06 10:31:16,546 [mponent@15ee671] ERROR DeadLetterChannel              - Failed delivery for exchangeId: ID-claus-acer/1691-1212741073109/0-0. On delivery attempt: 3 caught: org.apache.camel.RuntimeCamelException: com.sun.xml.bind.v2
notationExceptions
XmlElementRef points to a non-existent class.
        this problem is related to the following location:
                at java.util.List org.apache.camel.converter.jaxb.MessageType.headers
                at org.apache.camel.converter.jaxb.MessageType

org.apache.camel.RuntimeCamelException: com.sun.xml.bind.v2.runtime.IllegalAnnotationsException: 1 counts of IllegalAnnotationExceptions
XmlElementRef points to a non-existent class.
        this problem is related to the following location:
                at java.util.List org.apache.camel.converter.jaxb.MessageType.headers
                at org.apache.camel.converter.jaxb.MessageType

        at org.apache.camel.converter.jaxb.FallbackTypeConverter.convertTo(FallbackTypeConverter.java:70)
        at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:71)
        at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:52)
        at org.apache.camel.processor.ConvertBodyProcessor.process(ConvertBodyProcessor.java:40)
        at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43)
        at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:146)
        at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:90)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:101)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:85)
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:39)
        at org.apache.camel.component.file.FileConsumer.pollFile(FileConsumer.java:128)
        at org.apache.camel.component.file.FileConsumer.pollFileOrDirectory(FileConsumer.java:77)
        at org.apache.camel.component.file.FileConsumer.pollFileOrDirectory(FileConsumer.java:84)
        at org.apache.camel.component.file.FileConsumer.poll(FileConsumer.java:57)
        at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:65)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:417)
        at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:280)
        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:135)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:65)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:142)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:166)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)
        at java.lang.Thread.run(Thread.java:595)
Caused by: com.sun.xml.bind.v2.runtime.IllegalAnnotationsException: 1 counts of IllegalAnnotationExceptions
XmlElementRef points to a non-existent class.
        this problem is related to the following location:
                at java.util.List org.apache.camel.converter.jaxb.MessageType.headers
                at org.apache.camel.converter.jaxb.MessageType

        at com.sun.xml.bind.v2.runtime.IllegalAnnotationsException$Builder.check(IllegalAnnotationsException.java:66)
        at com.sun.xml.bind.v2.runtime.JAXBContextImpl.getTypeInfoSet(JAXBContextImpl.java:422)
        at com.sun.xml.bind.v2.runtime.JAXBContextImpl.<init>(JAXBContextImpl.java:270)
        at com.sun.xml.bind.v2.ContextFactory.createContext(ContextFactory.java:103)
        at com.sun.xml.bind.v2.ContextFactory.createContext(ContextFactory.java:81)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:585)
        at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:211)
        at javax.xml.bind.ContextFinder.find(ContextFinder.java:372)
        at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:574)
        at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:522)
        at org.apache.camel.converter.jaxb.FallbackTypeConverter.createContext(FallbackTypeConverter.java:141)
        at org.apache.camel.converter.jaxb.FallbackTypeConverter.unmarshall(FallbackTypeConverter.java:84)
        at org.apache.camel.converter.jaxb.FallbackTypeConverter.convertTo(FallbackTypeConverter.java:61)
        ... 23 more","davsclaus:1212714831:2008-06-06T09:13:51.100+0000:1212714831:2008-06-06T09:13:51.100+0000:The problem is that in MessageType its defined to use an abstract class (= HeaderType) and this does not work

{code}
@XmlRootElement(name = ""message"")
@XmlAccessorType(value = XmlAccessType.FIELD)
public class MessageType {
    @XmlElementRef(type = HeaderType.class)
    private List<HeaderType> headers = new ArrayList<HeaderType>();
{code}

Changing to use a real class such as StringHeader does work
{code}
@XmlRootElement(name = ""message"")
@XmlAccessorType(value = XmlAccessType.FIELD)
public class MessageType {
    @XmlElementRef(type = StringHeader.class)
    private List<HeaderType> headers = new ArrayList<HeaderType>();
{code}

And the bar.xml and foo.xml files are not valid messsages as well, they need the outer <message> tag
davsclaus:1212715097:2008-06-06T09:18:17.472+0000:1212715097:2008-06-06T09:18:17.472+0000:We need JAXB experts to look into this.

My idea to remedy this is, either
- remove the header types and let all objects be specified as plain strings (PropertyType)
- do as the content, let it all be any elements and use lax = true
davsclaus:1212819868:2008-06-07T14:24:28.889+0000:1212819868:2008-06-07T14:24:28.889+0000:Added TODO in the code and fixed the unit test.

MessageType is work in progress."
0,CAMEL-582,Improvement,Trivial,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-06-06 07:02:49+00:00,2008-07-06 06:29:28+00:00,"William Tam, this one is for you 


The total processed time is not exposed to as a managed attribute. And it should be changed from double to long.","wtam@iona.com:1212757441:2008-06-06T21:04:01.609+0000:1212757441:2008-06-06T21:04:01.609+0000:Hi Claus,

Sure, I will submit a patch to expose TotalProcessed time as a managed attribute and change the type to long. 

We've made quite a few changes lately.  I think the current precision (millisecond) is not high enough.  We often get 0 value when a processor does not have a lot of work to do.  Think about when you add up 0's million times, you still get zero for total processed time.  :-)   How about going back to usec?  
davsclaus:1212819421:2008-06-07T14:17:01.343+0000:1212819421:2008-06-07T14:17:01.343+0000:William.

Okay for the usec, but maybe we should have a derived attribute for the millis as well? eg = read only attribute that displays the values in millis, so the end-user have the information also.
But the internal computation is done using the nano and displayed as usec stuff.
wtam@iona.com:1213006493:2008-06-09T18:14:53.708+0000:1213006493:2008-06-09T18:14:53.708+0000:My thought on this is that having usec attributes is good enough.  Having two attributes (usec and millis) for each managed attribute is probably too repetitive.  Users can always obtains millis from usec but not the other way around.   Also, the TotalProcessed time probably needs to be double since it holds much better value.

So, my suggestion is:
1) roll back to usec and the calculation like we had it before
2) expose TotalProcessed time as a managed attribute
3) keep TotalProcessed time as a double.


davsclaus:1213007179:2008-06-09T18:26:19.990+0000:1213007179:2008-06-09T18:26:19.990+0000:Ok good observations. But we should clearly state the value as micro seconds (1000 micro = 1 millis). Most metrics report is still in millis.
davsclaus:1213184170:2008-06-11T19:36:10.920+0000:1213184170:2008-06-11T19:36:10.920+0000:Patch to be provided by William, started progress.
wtam@iona.com:1213205543:2008-06-12T01:32:23.075+0000:1213205543:2008-06-12T01:32:23.075+0000:Here's another idea.  How about making the values in units of milliseconds but storing them in doubles?   This way, values less than one millisecond won't get truncated and we don't scarify the precisions.  Values reported are in milliseconds still.
wtam@iona.com:1213211805:2008-06-12T03:16:45.282+0000:1213211805:2008-06-12T03:16:45.282+0000:jconsole snapshot will look like this.  notice I also appended the ""Millis"" subfix in the processing time attributes.
wtam@iona.com:1213211868:2008-06-12T03:17:48.002+0000:1213211868:2008-06-12T03:17:48.002+0000:here is the patch.
wtam@iona.com:1213212035:2008-06-12T03:20:35.243+0000:1213212035:2008-06-12T03:20:35.243+0000:The patch also fixes a bug in reset() which does not reset minProcessingTime back to -1.  And, maxProcessingTime does not need to be -1.
davsclaus:1213214925:2008-06-12T04:08:45.600+0000:1213214925:2008-06-12T04:08:45.600+0000:William thanks a lot for contributing this patch and taking the time to do investigations and good observations."
0,CAMEL-581,Bug,Trivial,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-06-05 09:13:58+00:00,2008-07-06 06:29:24+00:00,"Only the producer cache is stopped and cleared



  // start and stop in camel template

    protected void doStart() throws Exception {
        producerCache.start();
    }

    protected void doStop() throws Exception {
        producerCache.stop();
    }


  // stop in producer cache
    protected void doStop() throws Exception {
        ServiceHelper.stopServices(producers.values());
        producers.clear();
    }",
0,CAMEL-580,Improvement,Minor,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-06-05 07:29:21+00:00,2008-07-06 06:29:23+00:00,"Currently vm resources loaded on the classpath is not refreshable during runtime.


Also camel-velocity outputs logging to velocity.log, this can be included as a camel-velocity category instead.","davsclaus:1212634528:2008-06-05T10:55:28.847+0000:1212634528:2008-06-05T10:55:28.847+0000:StringTemplate will as well benefit from the new contentCache option on the endpoint.
davsclaus:1212699539:2008-06-06T04:58:59.385+0000:1212699539:2008-06-06T04:58:59.385+0000:Improved the wiki documentation for velocity and stringtemplate as well."
0,CAMEL-579,New Feature,Minor,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,William Tam,0,0,2008-06-05 04:15:56+00:00,2008-07-06 06:30:56+00:00,Please review the attached patch,"davsclaus:1212617926:2008-06-05T06:18:46.519+0000:1212617926:2008-06-05T06:18:46.519+0000:Applied patch with thanks (great work William)
davsclaus:1215297056:2008-07-06T06:30:56.330+0000:1215297056:2008-07-06T06:30:56.330+0000:Closing 1.4 issues"
0,CAMEL-578,Improvement,Minor,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,1,2008-06-04 18:53:31+00:00,2008-06-06 06:01:59+00:00,"Add a timestamp for the last completed exchange on the Camel JMX PerfformanceCounter.


Its very nice to be able to see this information in the JMX console.
And maybe add a first processed timestamp as well.","wtam@iona.com:1212651462:2008-06-05T15:37:42.773+0000:1212651462:2008-06-05T15:37:42.773+0000:Please review the attached patch.
wtam@iona.com:1212651514:2008-06-05T15:38:34.050+0000:1212651514:2008-06-05T15:38:34.050+0000:Here is how it will look like.
hadrian:1212657545:2008-06-05T17:19:05.529+0000:1212657545:2008-06-05T17:19:05.529+0000:Excellent.  Thanks for the patch William!
davsclaus:1212665188:2008-06-05T19:26:28.089+0000:1212665188:2008-06-05T19:26:28.089+0000:William good work.

I was wondering if you could take a look at the timing. It uses nano seconds but I am wondering why we divide the delta with 1000 when its passed to the performance counter.
counter.completedExchange((System.nanoTime() - startTime) / 1000);

And could the mbeans description be changed from usec to nano sec, as not everyone knows what a usec is.
And should we change to use the more common millis instead?
wtam@iona.com:1212667140:2008-06-05T19:59:00.396+0000:1212667140:2008-06-05T19:59:00.396+0000:No idea why it displays usec other than making it look faster.  :-)


wtam@iona.com:1212667176:2008-06-05T19:59:36.187+0000:1212667176:2008-06-05T19:59:36.187+0000:A patch that displays performance counters in nanoseconds.
wtam@iona.com:1212667255:2008-06-05T20:00:55.269+0000:1212667255:2008-06-05T20:00:55.269+0000:jconsole screenshot that shows perf counters in nanoseconds.
davsclaus:1212696478:2008-06-06T04:07:58.358+0000:1212696478:2008-06-06T04:07:58.358+0000:William. 

At first glance the nano second timing value doesn't give me good indication if the elapsed time is fast or not - we are so used to milli seconds.
Can you create a patch that uses millis instead?

And I do think the text in the jconsole should display the unit of the timing 

MinProcessingTime [millis] 
MeanProcessingTime [millis] 
MaxProcessingTime [millis] 
wtam@iona.com:1212697916:2008-06-06T04:31:56.436+0000:1212697916:2008-06-06T04:31:56.436+0000:Here is a patch to change back to usec precision.
wtam@iona.com:1212698134:2008-06-06T04:35:34.796+0000:1212698134:2008-06-06T04:35:34.796+0000:Hi Claus,

Sure.  Most users probably more familiar with usec, too.  JConsole does not show attribute description which is a bit of a bummer.
davsclaus:1212699719:2008-06-06T05:01:59.618+0000:1212699719:2008-06-06T05:01:59.618+0000:William. I would have used System.currentTimeMillis instead. Isn't this better?

And I would write millis instead of usec as millis is the term used in Camel and most places.
wtam@iona.com:1212700706:2008-06-06T05:18:26.980+0000:1212700706:2008-06-06T05:18:26.980+0000:new patch that uses System.currentTimeMillis() to get time and fixes the incorrect unit of usec.
wtam@iona.com:1212700818:2008-06-06T05:20:18.299+0000:1212700818:2008-06-06T05:20:18.299+0000:i think i attached a wrong file.  here it is again.
davsclaus:1212703319:2008-06-06T06:01:59.254+0000:1212703319:2008-06-06T06:01:59.254+0000:William. Thanks for taking this up and providing patches and screenshots. Feel free to continue your contributions."
0,CAMEL-577,Improvement,Major,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Unassigned,Freeman Yue Fang,0,4,2008-06-04 08:43:00+00:00,2008-07-11 04:21:45+00:00,"in method of 
protected void find(Test test, String packageName, ClassLoader loader) 
it try to load class  from directory or jar, it works for standalone mode.
But if the classloader of the method is osgi bundle class loader, it will fail since the getResource(packgename) return neither directory nor jar
for example, package name is org/apache/camel/convert, then what returned is /org/apache/camel/convert, so both loadImplementationsInDirectory and loadImplementationsInJar doesn't work in this case","davsclaus:1212574546:2008-06-04T18:15:46.094+0000:1212574546:2008-06-04T18:15:46.094+0000:Could be related to he webstart issue as well.
davsclaus:1212575177:2008-06-04T18:26:17.700+0000:1212575177:2008-06-04T18:26:17.700+0000:I dont suppose that just removing the leading / would resolve the issue?

Freeman, can you provide a patch to fix it or any more hint/helps? Or attaching a small sample project that illustrates the bug/problem in Camel.
davsclaus:1212616841:2008-06-05T06:00:41.562+0000:1212616841:2008-06-05T06:00:41.562+0000:More or less the same issue - osgi does not work out-of-the-box
ffang:1212715482:2008-06-06T09:24:42.725+0000:1212715482:2008-06-06T09:24:42.725+0000:Hi Claus,
Sure, I will try to provide a patch to resovle it.

Cheers

Freeman
davsclaus:1212716910:2008-06-06T09:48:30.775+0000:1212716910:2008-06-06T09:48:30.775+0000:Cheers Freeman, as you are on top of the ServiceMix and thus works with an OSGi kernel where you can test it for real.

And hopefully it fixes some of the related issues as well.
ffang:1213165399:2008-06-11T14:23:19.412+0000:1213165399:2008-06-11T14:23:19.412+0000:Hi

Just a very quick glimpse. I gotta do some work for the client so cant peek to much.

Isn't there a stable OSGI pendency for felix that can be used instead of 1.1.0-SNAPSHOT or whatever it was?

And are we sure its the spring osgi bundle classpath loader that is used all the time?

Med venlig hilsen
 
Claus Ibsen
ffang:1213165624:2008-06-11T14:27:04.680+0000:1213165624:2008-06-11T14:27:04.680+0000:re upload the patch
use 1.0.1 instead of 1.1-SNAPSHOT in the pom
also avoid hardcode classloader name,  if the classloader has getBundle method , then it's an osgi bundle classloader
davsclaus:1213177842:2008-06-11T17:50:42.336+0000:1213177842:2008-06-11T17:50:42.336+0000:Freeman, why are you returning early if its a spring delegating bundle loader?

{code}
+    	if (loader.getClass().getName().equals(""org.springframework.osgi.util.BundleDelegatingClassLoader"")) {
+    		
+    		return;
+    	}
{code}

Is it because its loaded using bundles before, if so could you not return just after the loading from bundle, or move the check into that code, so its nearly the bundle stuff.

At least I think there should be some comments in the code why we return only for this osgi classloader.

ffang:1213205410:2008-06-12T01:30:10.994+0000:1213205410:2008-06-12T01:30:10.994+0000:Hi Claus,
You are correct
This code 
+      if (loader.getClass().getName().equals(""org.springframework.osgi.util.BundleDelegatingClassLoader"")) {
+    		
+    		return;
+    	}

shouldn't be in the patch at all. I forget to remove it after the change to avoid using hardcode classloader name

I will re upload a new patch soon, so for it

Freeman


ffang:1213206522:2008-06-12T01:48:42.631+0000:1213206522:2008-06-12T01:48:42.631+0000:new patch uploaded
Thanks 
davsclaus:1213219465:2008-06-12T05:24:25.837+0000:1213219465:2008-06-12T05:24:25.837+0000:Thanks a lot for the patch. I have applied it with a few adjustments regarding debug/trace logging.
davsclaus:1213219514:2008-06-12T05:25:14.566+0000:1213219514:2008-06-12T05:25:14.566+0000:Leaving open until it is verified that it works in an osgi environment. Freeman are you able to try it out?
ffang:1213220425:2008-06-12T05:40:25.484+0000:1213220425:2008-06-12T05:40:25.484+0000:Hi Claus,

Yes, I have tried it with ServiceMix 4.0 which is osgi container and it works well.

Thanks 

Freeman
davsclaus:1213226042:2008-06-12T07:14:02.946+0000:1213226042:2008-06-12T07:14:02.946+0000:Freeman, I dont suppose I could ask you to try again with TRACE level debugging in org.apache.camel.util.ResolverUtil.

I would like to see if the trace logging is useable in situations to resolve problems. Especially of the osgi logging is useable, eg. the logging of the bundle toString() itself - does it provide a good toString() implementation or do we need to log: bundleId, symbolName, and whatever can be relevant.

If you could paste the logging output here would be super great.
ffang:1213230115:2008-06-12T08:21:55.129+0000:1213230115:2008-06-12T08:21:55.129+0000:sure, paste some log

16:10:58,355 | TRACE | pool-5-thread-1  | ResolverUtil                     | g.apache.camel.util.ResolverUtil  356 | Searching in bundle:org.apache.cxf.cxf-bundle [47]
16:10:58,365 | TRACE | pool-5-thread-1  | ResolverUtil                     | g.apache.camel.util.ResolverUtil  356 | Searching in bundle:org.springframework.bundle.spring.tx [48]
16:10:58,367 | TRACE | pool-5-thread-1  | ResolverUtil                     | g.apache.camel.util.ResolverUtil  356 | Searching in bundle:org.apache.camel.camel-core [49]
16:10:58,368 | TRACE | pool-5-thread-1  | ResolverUtil                     | g.apache.camel.util.ResolverUtil  456 | Testing for class org.apache.camel.converter.CamelConverter$1 matches criteria [annotated with @Converter]
16:10:58,369 | TRACE | pool-5-thread-1  | ResolverUtil
davsclaus:1213237795:2008-06-12T10:29:55.849+0000:1213237795:2008-06-12T10:29:55.849+0000:Thanks Freeman, looks okay that the bundle can be identified from the log.
gnodet:1213603001:2008-06-16T15:56:41.132+0000:1213603001:2008-06-16T15:56:41.132+0000:With the current version, there is a strong dependency from camel-core to OSGi: i.e. camel can not run without the OSGi classes in the classpath.
See the following exception: 

Caused by: java.lang.NoClassDefFoundError: org/osgi/framework/Bundle
        at org.apache.camel.spring.RouteBuilderFinder.<init>(RouteBuilderFinder.java:41)
        at org.apache.camel.spring.CamelContextFactoryBean.findRouteBuiders(CamelContextFactoryBean.java:404)
        at org.apache.camel.spring.CamelContextFactoryBean.afterPropertiesSet(CamelContextFactoryBean.java:189)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1288)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1257)
        ... 41 more
gnodet:1213603982:2008-06-16T16:13:02.182+0000:1213603982:2008-06-16T16:13:02.182+0000:Sending        camel-core/src/main/java/org/apache/camel/util/ResolverUtil.java
Transmitting file data .
Committed revision 668216.
davsclaus:1213604217:2008-06-16T16:16:57.830+0000:1213604217:2008-06-16T16:16:57.830+0000:Guillaume, thanks for reporting this.

What would be a good strategy to resolve this?

A quick idea is having a new OsgiResolverUtil class that ResolverUtil could resort to if it should load in bundle?
Since Camel detects if it should try bundle without having hard dependecy this is doable:
{code}
            Method mth = loader.getClass().getMethod(""getBundle"", new Class[] {});
            if (mth != null) {
                // it's osgi bundle class loader, so we need to load implementation in bundles
                if (LOG.isDebugEnabled()) {
                    LOG.debug(""Loading from osgi buindle using classloader: "" + loader);
                }
                loadImplementationsInBundle(test, packageName, loader, mth);
                return;
            }
{code}

The loadImplementationsInBundle could be in the new OsgiResolverUtil so its only loaded if using OSGi bundles. And thus the class loading issue should not happend.
And we could catch the NoClassDefFoundError and output a user firendly message that org.osgi.core should be an dependency.

And how do we configure it to be optional in the camel-core pom.xml? Currently it is:
{code}
    <dependency>
      <groupId>org.apache.felix</groupId>
      <artifactId>org.osgi.core</artifactId>
      <version>${felix-osgi-version}</version>
    </dependency>
{code}

Could we add 
<optional>true</optional>

BTW: The activation stuff is now also a hard dependency - i haven't seen this in pom.xml
davsclaus:1213604583:2008-06-16T16:23:03.429+0000:1213604583:2008-06-16T16:23:03.429+0000:Ah you got it sorted by a inner class, smart move ;) Kinda like the OsgiResolverUtil.
avatah:1214794299:2008-06-30T10:51:39.881+0000:1214794299:2008-06-30T10:51:39.881+0000:In my apllication's bundle (the one with camel-context) I created dependency to org.apache.camel.converter package, and not to other two (stax and jaxp, because I don't use them). With this configuration I get some errors in log, such as:
12:43:42,484 DEBUG [.camel.ObjRepComponent@11773e4] org.apache.camel.util.ResolverUtil        - Searching for annotations of org.apache.camel.Converter in packages: [org.apache.camel.converter]
12:43:42,484 DEBUG [.camel.ObjRepComponent@11773e4] org.apache.camel.util.ResolverUtil        - Loading from osgi buindle using classloader: BundleDelegatingClassLoader for [Dialog orders (com.comarch.p7samples.dialorder)]
12:43:42,578 DEBUG [.camel.ObjRepComponent@11773e4] org.apache.camel.util.ResolverUtil        - Could not find class 'org/apache/camel/converter/jaxp/StaxConverter.class' in classloader: BundleDelegatingClassLoader for [Dialog orders (com.comarch.p7samples.dialorder)]. Reason: java.lang.ClassNotFoundException: org.apache.camel.converter.jaxp.StaxConverter not found from bundle [com.comarch.p7samples.dialorder]
java.lang.ClassNotFoundException: org.apache.camel.converter.jaxp.StaxConverter not found from bundle [com.comarch.p7samples.dialorder]
	at org.springframework.osgi.util.BundleDelegatingClassLoader.findClass(BundleDelegatingClassLoader.java:103)
	at org.springframework.osgi.util.BundleDelegatingClassLoader.loadClass(BundleDelegatingClassLoader.java:156)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:251)
	at org.apache.camel.util.ResolverUtil.addIfMatching(ResolverUtil.java:477)
	at org.apache.camel.util.ResolverUtil.loadImplementationsInBundle(ResolverUtil.java:357)
	at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:293)
	at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:277)
	at org.apache.camel.util.ResolverUtil.findAnnotated(ResolverUtil.java:253)
	at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:57)
	at org.apache.camel.impl.converter.DefaultTypeConverter.checkLoaded(DefaultTypeConverter.java:218)
	at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:64)
	at org.apache.camel.util.CamelContextHelper.convertTo(CamelContextHelper.java:85)
	at org.apache.camel.component.bean.RegistryBean.getProcessor(RegistryBean.java:77)
	at org.apache.camel.component.bean.BeanProcessor.getProcessor(BeanProcessor.java:135)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:76)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:146)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:90)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:101)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:85)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:52)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:59)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:75)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:146)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:39)
	at com.comarch.p7.objectrepository.camel.ObjRepConsumer.poll(ObjRepConsumer.java:35)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:65)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
	at java.lang.Thread.run(Thread.java:619)
Caused by: java.lang.ClassNotFoundException: org.apache.camel.converter.jaxp.StaxConverter
	at java.lang.ClassLoader.findClass(ClassLoader.java:358)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:306)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:251)
	at org.eclipse.osgi.framework.internal.core.BundleLoader.findClassInternal(BundleLoader.java:429)
	at org.eclipse.osgi.framework.internal.core.BundleLoader.findClass(BundleLoader.java:369)
	at org.eclipse.osgi.framework.internal.core.BundleLoader.findClass(BundleLoader.java:357)
	at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass(DefaultClassLoader.java:83)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:251)
	at org.eclipse.osgi.framework.internal.core.BundleLoader.loadClass(BundleLoader.java:289)
	at org.eclipse.osgi.framework.internal.core.BundleHost.loadClass(BundleHost.java:227)
	at org.eclipse.osgi.framework.internal.core.AbstractBundle.loadClass(AbstractBundle.java:1269)
	at org.springframework.osgi.util.BundleDelegatingClassLoader.findClass(BundleDelegatingClassLoader.java:99)
	... 39 more
12:43:42,593 DEBUG [.camel.ObjRepComponent@11773e4] org.apache.camel.util.ResolverUtil        - Could not find class 'org/apache/camel/converter/jaxp/DomConverter.class' in classloader: BundleDelegatingClassLoader for [Dialog orders (com.comarch.p7samples.dialorder)]. Reason: java.lang.ClassNotFoundException: org.apache.camel.converter.jaxp.DomConverter not found from bundle [com.comarch.p7samples.dialorder]

These logs have DEBUG state, but also I receive one ERROR state log:

12:43:42,812 ERROR [.camel.ObjRepComponent@11773e4] org.apache.camel.util.ResolverUtil        - Could not search jar file '\org\apache\camel\converter' for classes matching criteria: annotated with @Converter due to an IOException: \org\apache\camel\converter (System nie może odnaleźć określonej ścieżki)
java.io.FileNotFoundException: \org\apache\camel\converter (System nie może odnaleźć określonej ścieżki)
	at java.io.FileInputStream.open(Native Method)
	at java.io.FileInputStream.<init>(FileInputStream.java:106)
	at org.apache.camel.util.ResolverUtil.loadImplementationsInJar(ResolverUtil.java:439)
	at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:343)
	at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:277)
	at org.apache.camel.util.ResolverUtil.findAnnotated(ResolverUtil.java:253)
	at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:57)
	at org.apache.camel.impl.converter.DefaultTypeConverter.checkLoaded(DefaultTypeConverter.java:218)
	at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:64)
	at org.apache.camel.util.CamelContextHelper.convertTo(CamelContextHelper.java:85)
	at org.apache.camel.component.bean.RegistryBean.getProcessor(RegistryBean.java:77)
	at org.apache.camel.component.bean.BeanProcessor.getProcessor(BeanProcessor.java:135)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:76)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:146)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:90)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:101)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:85)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:52)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:59)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:75)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:146)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:39)
	at com.comarch.p7.objectrepository.camel.ObjRepConsumer.poll(ObjRepConsumer.java:35)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:65)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
	at java.lang.Thread.run(Thread.java:619)

Except of these logs everything is working fine. 
avatah:1214795959:2008-06-30T11:19:19.256+0000:1214795959:2008-06-30T11:19:19.256+0000:Also without dependency to org.apache.camel.converter package everything works fine, but there are even more error reports. Probably class loaders are checked in wrong order.
davsclaus:1214901225:2008-07-01T16:33:45.341+0000:1214901225:2008-07-01T16:33:45.341+0000:Woljciech.

Do you mind creating a new ticket for your issue and attach a sample project that demonstrates the problem?
Please note what container and versions you are using and how to reproduce the problem.

Then we will be in a better position to address this for Camel 1.5 "
0,CAMEL-576,Improvement,Major,"1.2.0, 1.3.0",1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,Willem Jiang,0,0,2008-06-04 06:54:28+00:00,2008-06-05 09:30:18+00:00,"You can get the InputStream object from camel message's getBody() method,
 in this way we can leverage the camel's converter framework to convert the message object to what we want.",njiang:1212534126:2008-06-04T07:02:06.864+0000:1212534126:2008-06-04T07:02:06.864+0000:The patch committed reversion is 663010.
0,CAMEL-575,New Feature,Minor,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,William Tam,0,0,2008-06-04 06:48:35+00:00,2008-06-05 09:30:25+00:00,Please review the attached patch.,"njiang:1212538376:2008-06-04T08:12:56.480+0000:1212538376:2008-06-04T08:12:56.480+0000:Patch applied with thanks to William.
The committed revision is 663026.
wtam@iona.com:1212559860:2008-06-04T14:11:00.312+0000:1212559860:2008-06-04T14:11:00.312+0000:Thanks a lot!

"
0,CAMEL-574,Bug,Major,1.3.0,None,"
None
",Closed,Fixed,1.4.0,Willem Jiang,Willem Jiang,0,0,2008-06-04 01:42:58+00:00,2008-06-05 09:29:54+00:00,"When I added the loan broker example CAMEL-556, I found there is no performance improvement when using the parallelly mulitcast.
After digging into to code, I found we should create the enough thread for the parallel processing.","njiang:1212518287:2008-06-04T02:38:07.658+0000:1212518287:2008-06-04T02:38:07.658+0000:http://svn.apache.org/viewvc?rev=662940&view=rev
The patch is in the trunk now."
0,CAMEL-573,Improvement,Major,None,1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,Christian Schneider,0,0,2008-06-03 23:01:51+00:00,2008-06-18 05:11:00+00:00,"The following classes from impl are only used in builder. They should be moved there.



NoRouteBuilder
PredicateSupport
BinaryPredicateSupport



The last dependency from impl to builder is in PredicateSupport. The method matches uses the static method PredicateBuilder.evaluateValuePredicate(value). The implementation of this method does not depend on anything so I would move it to util.ObjectHelper. 


I have added a patch with alle these modifications. According to my structure 101 I see only improvements in the dependecies. The cycle between impl an builder vanishes. I think there is almost no risk in doing this modification.","cschneider:1212505682:2008-06-03T23:08:02.104+0000:1212505682:2008-06-03T23:08:02.104+0000:The last dependency was in ExpressionSupport not in PredicateSupport. Sorry for the typo.
davsclaus:1212524671:2008-06-04T04:24:31.384+0000:1212524671:2008-06-04T04:24:31.384+0000:Christian could you re add the patch with the ASF license granted. (ie apache icon next to the attached file).

JIRA has an issue that you can not do this when you create the ticket. You have to do it in 2 steps
1. Create the ticket
2. Attach the patch file with the ASF license granted.

Otherwise a really great patch that does remove the tangle. Keep up the great discoveries and good work you are doing. It is coming along nice and steady.
njiang:1212536333:2008-06-04T07:38:53.734+0000:1212536333:2008-06-04T07:38:53.734+0000:Patch applied with thanks to Christian.
The committed revision is 663018.
cschneider:1212618930:2008-06-05T06:35:30.267+0000:1212618930:2008-06-05T06:35:30.267+0000:I think NoRouteBuilder is now in builder and in impl. Could you please delete the obsolete class in impl? 
davsclaus:1212619439:2008-06-05T06:43:59.874+0000:1212619439:2008-06-05T06:43:59.874+0000:Deleting       camel-core\src\main\java\org\apache\camel\impl\NoRouteBuilder.java

Committed revision 663471."
0,CAMEL-572,Bug,Major,None,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Freeman Yue Fang,0,0,2008-06-03 11:19:53+00:00,2008-07-06 06:30:56+00:00,"it is
try {
        ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();
        if (contextClassLoader != null) 

{
            in = contextClassLoader.getResourceAsStream(name);
        }

 ----  if (in != null) {  -----//here is incorrect, should be see if  in==null then get chance to use another classloader to load the stream
+++ if (in == null) 

{ +++
            in = ObjectHelper.class.getClassLoader().getResourceAsStream(name);
        }

        } catch (Exception e)

{
        	System.out.println(""Could not find class: "" + name + "". Reason: "" + e);
        }","davsclaus:1212488997:2008-06-03T18:29:57.944+0000:1212488997:2008-06-03T18:29:57.944+0000:Freeman, thanks a lot for all the patches and findings you have submitted recently. Great work and good bug reports. Keep it up and  ;)
davsclaus:1215297056:2008-07-06T06:30:56.302+0000:1215297056:2008-07-06T06:30:56.302+0000:Closing 1.4 issues"
0,CAMEL-571,Improvement,Major,None,1.4.0,"
None
",Closed,Won't Fix,1.4.0,Unassigned,Freeman Yue Fang,0,0,2008-06-03 08:57:14+00:00,2008-07-11 04:21:45+00:00,"camel-core bundle doesn't export the META-INF, so if we use camel-core in osgi container, we can encounter exception like
org.apache.camel.NoSuchLanguageException: No language could be found for: xpath
at org.apache.camel.impl.DefaultLanguageResolver.noSpecificLanguageFound(DefaultLanguageResolver.java:72)


since the language resovler depend on the language class name property in the META-INF folder","ffang:1212463316:2008-06-03T11:21:56.684+0000:1212463316:2008-06-03T11:21:56.684+0000:actually this issue is caused by CAMEL-572, it's not bundle package export issue
so won't fix this issue"
0,CAMEL-570,Improvement,Major,1.3.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Claus Ibsen,1,0,2008-06-03 03:56:48+00:00,2008-10-23 04:37:11+00:00,"The FTP Component currently does not support an after completion operation such as:



delete
move
of the processed file as the File Component does.



ServiceMix FTP Component has such feature.


See forum:
http://www.nabble.com/No-way-to-remove-FTP-SFTP-files--td17612896s22882.html","davsclaus:1212702291:2008-06-06T05:44:51.896+0000:1212702291:2008-06-06T05:44:51.896+0000:Drew is working on this. See the user forum.
drewmca:1214588174:2008-06-28T01:36:14.338+0000:1214588174:2008-06-28T01:36:14.338+0000:Changed the FTPConsumer and the SFTPConsumer to add an ""autoDelete"" property that will delete files once processed. A couple of notes:
1. The change includes an update to RemoteFileConfiguration, to provide the ""autoDelete"" property.
2. The code is based on how the fileConsumer works; namely, it handles the read in an async block rather than the way that the files are handled in the current versions of the consumers.
3. I believe I incorporated a recent change to the 1.4 stream related to error processing; files before weren't getting read if there was an error. I think this was actually a problem in the FileConsumer.
4. Using autodelete bypasses the timestamp check. No need to timestamp check if you're just going to delete everything you read.

So far these changes are working on our project. We use SFTP to pull files down into a local directory, then a file consumer to read them in from there. This gives us the ability to create backups of what was read, something that the FTP/SFTP consumers don't currently allow.

I've said this before and I'll say it again; this would all be a lot easier if there were just one VFS component....
davsclaus:1214999875:2008-07-02T19:57:55.272+0000:1214999875:2008-07-02T19:57:55.272+0000:Will work on this after Camel 1.4.0 has been released.

There is also a few other tickets for FTP and File related issues that should be a major target for Camel 1.5 to improve these two important components so Camel works even better with FTP and files.

Beware of commons FTP potential problem with listing files on AIX servers. We did see this problem with 1.4.1 today at work.
davsclaus:1217059318:2008-07-26T16:01:58.853+0000:1217059318:2008-07-26T16:01:58.853+0000:ServiceMix has a delete option only:
http://servicemix.apache.org/servicemix-ftp.html

I think we will stick with the delete option for now and let the move go. If anyone want a move option then please create a new issue and vote.
davsclaus:1217061443:2008-07-26T16:37:23.221+0000:1217061443:2008-07-26T16:37:23.221+0000:Added the deleteFile option.

Committed revision 680011.
davsclaus:1224707831:2008-10-23T04:37:11.787+0000:1224707831:2008-10-23T04:37:11.787+0000:Closing 1.5 issues"
0,CAMEL-569,Improvement,Major,None,1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,Freeman Yue Fang,0,0,2008-06-02 02:01:03+00:00,2008-06-05 09:29:42+00:00,"CxfMessage has method setMessage(), but this methold isn't defined in the Message interface, which CxfMessage implement.
So when different kind of message copy between differnet kind of component, the object what set by setMessage() for CxfMessage will lost since the copyFrom() method only see the method defined in Message, so the header, body could be copied but the message lost
we should figure out a way to support the message variable in CxfMessage also get copied","njiang:1212436847:2008-06-03T04:00:47.313+0000:1212436847:2008-06-03T04:00:47.313+0000:Patch applied with thanks to Freeman.
ffang:1212455684:2008-06-03T09:14:44.647+0000:1212455684:2008-06-03T09:14:44.647+0000:http://svn.apache.org/viewvc?rev=662348&view=rev"
0,CAMEL-568,Bug,Major,None,1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,Freeman Yue Fang,0,0,2008-06-01 15:04:33+00:00,2008-06-05 09:29:31+00:00,"add code as below         
       BindingOperationInfo bop = exchange.get(BindingOperationInfo.class);


        if (bop != null && bop.getOperationInfo().isOneWay()) 

{
            cxfExchange.setPattern(ExchangePattern.InOnly);
        }

 else 

{
            cxfExchange.setPattern(ExchangePattern.InOut);
        }","ffang:1212455642:2008-06-03T09:14:02.940+0000:1212455642:2008-06-03T09:14:02.940+0000:http://svn.apache.org/viewvc?rev=662237&view=rev
njiang:1212456128:2008-06-03T09:22:08.303+0000:1212456128:2008-06-03T09:22:08.303+0000:The patch is in the trunk as Freeman pointed."
0,CAMEL-567,Bug,Minor,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-06-01 09:34:58+00:00,2008-06-05 09:46:22+00:00,"When creating a new camel route project using maven archetype there is no dependeny on camel-core. This should be added.


    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-core</artifactId>
      <version>${camel-version}</version>
    </dependency>",davsclaus:1212284648:2008-06-01T09:44:08.428+0000:1212284648:2008-06-01T09:44:08.428+0000:Completed: At revision: 662188
