,Issue Key,Type,Priority,Affects Version/s,Component/s,Labels,Status,Resolution,Fix Version/s,Assignee,Reporter,Votes,Watchers,Created,Updated,Description,Comments
0,CAMEL-9925,Improvement,Major,"2.17.0, 2.18.0","2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.17.1, 2.18.0",Dhiraj Sureshkumar Bokde,Dhiraj Sureshkumar Bokde,0,1,2016-04-29 02:19:37+00:00,2016-04-29 06:08:33+00:00,"Jetty8 has been outdated for a while now, so the component must be updated to use the new Jetty9 client API to be supported in the future.","dhirajsb:1461881312:2016-04-29T06:08:32.979+0000:1461881312:2016-04-29T06:08:32.979+0000:Resolved with commits to master and camel-2.17.x branches.
Still needs a fix for critical issue CAMEL-9926 in Jetty9 java client."
0,CAMEL-9924,Improvement,Minor,None,,"
None
",Resolved,Won't Fix,None,Claus Ibsen,Claus Ibsen,0,2,2016-04-28 10:28:31+00:00,2016-05-29 06:39:43+00:00,"See CAMEL-9916


If people restart manually using stop/start then Camel does not guarantee it can startup again. The stop is for a hard shutdown. Ideally you should use suspend/resume. Or if in some app server then restart there, eg where its a full restart of the deployed unit.


But we could consider keeping custom added components in stop so when you call start again they are still there.


For components that has been default created then Camel can create them again.",
0,CAMEL-9923,Improvement,Major,2.18.0,Future,"
None
",Resolved,Not A Problem,Future,Grzegorz Grzybek,Claus Ibsen,0,2,2016-04-28 09:45:42+00:00,2016-04-28 09:50:45+00:00,"The parser should resolve the xsd from the camel-blueprint JAR bundle instead of online access.


You can see WARNs like these on Camel 2.17.0 installation on karaf 4.0.4



2016-04-28 11:38:40,935 | ERROR | FelixStartLevel  | BlueprintContainerImpl           | 13 - org.apache.aries.blueprint.core - 1.5.0 | Unable to start blueprint container for bundle mycamel.xml/0.0.0
org.osgi.service.blueprint.container.ComponentDefinitionException: Unable to validate xml
	at org.apache.aries.blueprint.parser.Parser.validate(Parser.java:349)[13:org.apache.aries.blueprint.core:1.5.0]
	at org.apache.aries.blueprint.parser.Parser.validate(Parser.java:336)[13:org.apache.aries.blueprint.core:1.5.0]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:336)[13:org.apache.aries.blueprint.core:1.5.0]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:273)[13:org.apache.aries.blueprint.core:1.5.0]
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:294)[13:org.apache.aries.blueprint.core:1.5.0]
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:263)[13:org.apache.aries.blueprint.core:1.5.0]
	at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:253)[13:org.apache.aries.blueprint.core:1.5.0]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:500)[22:org.apache.aries.util:1.1.1]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:433)[22:org.apache.aries.util:1.1.1]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:725)[22:org.apache.aries.util:1.1.1]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:463)[22:org.apache.aries.util:1.1.1]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:422)[22:org.apache.aries.util:1.1.1]
	at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1179)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.util.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:731)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:486)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4541)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2172)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1371)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:308)[org.apache.felix.framework-5.4.0.jar:]
	at java.lang.Thread.run(Thread.java:745)[:1.8.0_31]
Caused by: org.xml.sax.SAXParseException: cvc-complex-type.2.4.a: Invalid content was found starting with element 'hystrix'. One of '{""http://camel.apache.org/schema/blueprint"":from, ""http://camel.apache.org/schema/blueprint"":onException, ""http://camel.apache.org/schema/blueprint"":when, ""http://camel.apache.org/schema/blueprint"":onCompletion, ""http://camel.apache.org/schema/blueprint"":intercept, ""http://camel.apache.org/schema/blueprint"":interceptFrom, ""http://camel.apache.org/schema/blueprint"":interceptSendToEndpoint, ""http://camel.apache.org/schema/blueprint"":to, ""http://camel.apache.org/schema/blueprint"":toD, ""http://camel.apache.org/schema/blueprint"":route, ""http://camel.apache.org/schema/blueprint"":aop, ""http://camel.apache.org/schema/blueprint"":aggregate, ""http://camel.apache.org/schema/blueprint"":bean, ""http://camel.apache.org/schema/blueprint"":doCatch, ""http://camel.apache.org/schema/blueprint"":choice, ""http://camel.apache.org/schema/blueprint"":otherwise, ""http://camel.apache.org/schema/blueprint"":convertBodyTo, ""http://camel.apache.org/schema/blueprint"":delay, ""http://camel.apache.org/schema/blueprint"":dynamicRouter, ""http://camel.apache.org/schema/blueprint"":enrich, ""http://camel.apache.org/schema/blueprint"":filter, ""http://camel.apache.org/schema/blueprint"":doFinally, ""http://camel.apache.org/schema/blueprint"":idempotentConsumer, ""http://camel.apache.org/schema/blueprint"":inOnly, ""http://camel.apache.org/schema/blueprint"":inOut, ""http://camel.apache.org/schema/blueprint"":loadBalance, ""http://camel.apache.org/schema/blueprint"":log, ""http://camel.apache.org/schema/blueprint"":loop, ""http://camel.apache.org/schema/blueprint"":marshal, ""http://camel.apache.org/schema/blueprint"":multicast, ""http://camel.apache.org/schema/blueprint"":pipeline, ""http://camel.apache.org/schema/blueprint"":policy, ""http://camel.apache.org/schema/blueprint"":pollEnrich, ""http://camel.apache.org/schema/blueprint"":process, ""http://camel.apache.org/schema/blueprint"":recipientList, ""http://camel.apache.org/schema/blueprint"":removeHeader, ""http://camel.apache.org/schema/blueprint"":removeHeaders, ""http://camel.apache.org/schema/blueprint"":removeProperties, ""http://camel.apache.org/schema/blueprint"":removeProperty, ""http://camel.apache.org/schema/blueprint"":resequence, ""http://camel.apache.org/schema/blueprint"":rollback, ""http://camel.apache.org/schema/blueprint"":routingSlip, ""http://camel.apache.org/schema/blueprint"":sample, ""http://camel.apache.org/schema/blueprint"":script, ""http://camel.apache.org/schema/blueprint"":setBody, ""http://camel.apache.org/schema/blueprint"":setExchangePattern, ""http://camel.apache.org/schema/blueprint"":setFaultBody, ""http://camel.apache.org/schema/blueprint"":setHeader, ""http://camel.apache.org/schema/blueprint"":setOutHeader, ""http://camel.apache.org/schema/blueprint"":setProperty, ""http://camel.apache.org/schema/blueprint"":sort, ""http://camel.apache.org/schema/blueprint"":split, ""http://camel.apache.org/schema/blueprint"":stop, ""http://camel.apache.org/schema/blueprint"":threads, ""http://camel.apache.org/schema/blueprint"":throttle, ""http://camel.apache.org/schema/blueprint"":throwException, ""http://camel.apache.org/schema/blueprint"":transacted, ""http://camel.apache.org/schema/blueprint"":transform, ""http://camel.apache.org/schema/blueprint"":doTry, ""http://camel.apache.org/schema/blueprint"":unmarshal, ""http://camel.apache.org/schema/blueprint"":validate, ""http://camel.apache.org/schema/blueprint"":whenSkipSendToEndpoint, ""http://camel.apache.org/schema/blueprint"":wireTap, ""http://camel.apache.org/schema/blueprint"":restBinding}' is expected.
	at org.apache.xerces.util.ErrorHandlerWrapper.createSAXParseException(Unknown Source)[:]
	at org.apache.xerces.util.ErrorHandlerWrapper.error(Unknown Source)[:]
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)[:]
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)[:]
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)[:]
	at org.apache.xerces.impl.xs.XMLSchemaValidator$XSIErrorReporter.reportError(Unknown Source)[:]
	at org.apache.xerces.impl.xs.XMLSchemaValidator.reportSchemaError(Unknown Source)[:]
	at org.apache.xerces.impl.xs.XMLSchemaValidator.handleStartElement(Unknown Source)[:]
	at org.apache.xerces.impl.xs.XMLSchemaValidator.startElement(Unknown Source)[:]
	at org.apache.xerces.jaxp.validation.DOMValidatorHelper.beginNode(Unknown Source)[:]
	at org.apache.xerces.jaxp.validation.DOMValidatorHelper.validate(Unknown Source)[:]
	at org.apache.xerces.jaxp.validation.DOMValidatorHelper.validate(Unknown Source)[:]
	at org.apache.xerces.jaxp.validation.ValidatorImpl.validate(Unknown Source)[:]
	at javax.xml.validation.Validator.validate(Unknown Source)[:2.5.0]
	at org.apache.aries.blueprint.parser.Parser.validate(Parser.java:346)[13:org.apache.aries.blueprint.core:1.5.0]
	... 19 more","davsclaus:1461808009:2016-04-28T09:46:49.740+0000:1461808009:2016-04-28T09:46:49.740+0000:Doh it was a dodgy mycamel.xml leftover in the deploy folder that was testing hystrix from Camel 2.18. 

Darn you karaf, I want a clean way to ""reset"" you ;)
ggrzybek:1461808245:2016-04-28T09:50:45.371+0000:1461808245:2016-04-28T09:50:45.371+0000:[~davsclaus] we should either stay with blueprint-core:1.4.4 or upgrade to 1.6.1 (see ARIES-1503)"
0,CAMEL-9922,Bug,Major,2.17.0,,"
None
",Resolved,Invalid,None,Unassigned,Alexandre Cartapanis,0,2,2016-04-28 09:16:08+00:00,2016-04-28 10:40:13+00:00,"On karaf 4.x plateform, with camel 2.17.0 and activemq 5.13.2 features, installs feature activemq-camel and then installs activemq-broker-noweb. The broker fails to start with error java.lang.ClassNotFoundException: org.apache.xbean.spring.context.v2.XBeanNamespaceHandler not found by org.apache.activemq.activemq-osgi.
This is not happening with camel 2.16.3
This is not happening either if activemq-camel is not installed.","acartapanis:1461806308:2016-04-28T09:18:28.168+0000:1461806308:2016-04-28T09:18:28.168+0000:The complete stack :

{noformat}
2016-04-28 11:13:48,457 | ERROR | ctivemq.server]) | configadmin                      | 7 - org.apache.felix.configadmin - 1.8.8 | [org.osgi.service.cm.ManagedServiceFactory, id=170, bundle=96/mvn:org.apache.activemq/activemq-osgi/5.13.2]: Updating configuration org.apache.activemq.server.45b6e092-14bf-4c6a-bb0e-0574f812ac52 caused a problem: Cannot start the broker
org.osgi.service.cm.ConfigurationException: null : Cannot start the broker
	at org.apache.activemq.osgi.ActiveMQServiceFactory.updated(ActiveMQServiceFactory.java:120)[96:org.apache.activemq.activemq-osgi:5.13.2]
	at org.apache.felix.cm.impl.helper.ManagedServiceFactoryTracker.updated(ManagedServiceFactoryTracker.java:159)[7:org.apache.felix.configadmin:1.8.8]
	at org.apache.felix.cm.impl.helper.ManagedServiceFactoryTracker.provideConfiguration(ManagedServiceFactoryTracker.java:93)[7:org.apache.felix.configadmin:1.8.8]
	at org.apache.felix.cm.impl.ConfigurationManager$ManagedServiceFactoryUpdate.provide(ConfigurationManager.java:1602)[7:org.apache.felix.configadmin:1.8.8]
	at org.apache.felix.cm.impl.ConfigurationManager$ManagedServiceFactoryUpdate.run(ConfigurationManager.java:1545)[7:org.apache.felix.configadmin:1.8.8]
	at org.apache.felix.cm.impl.UpdateThread.run0(UpdateThread.java:143)[7:org.apache.felix.configadmin:1.8.8]
	at org.apache.felix.cm.impl.UpdateThread.run(UpdateThread.java:110)[7:org.apache.felix.configadmin:1.8.8]
	at java.lang.Thread.run(Thread.java:745)[:1.8.0_92]
Caused by: org.springframework.beans.factory.BeanDefinitionStoreException: Unexpected exception parsing XML document from OSGi resource[file:/home/acs/softs/apache-karaf-4.0.5/etc/activemq.xml|bnd.id=96|bnd.sym=org.apache.activemq.activemq-osgi]; nested exception is org.springframework.beans.FatalBeanException: NamespaceHandler class [org.apache.xbean.spring.context.v2.XBeanNamespaceHandler] for namespace [http://activemq.apache.org/schema/core] not found; nested exception is java.lang.ClassNotFoundException: org.apache.xbean.spring.context.v2.XBeanNamespaceHandler not found from bundle [org.apache.activemq.activemq-osgi]
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:413)[117:org.apache.servicemix.bundles.spring-beans:3.2.14.RELEASE_1]
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:335)[117:org.apache.servicemix.bundles.spring-beans:3.2.14.RELEASE_1]
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:303)[117:org.apache.servicemix.bundles.spring-beans:3.2.14.RELEASE_1]
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:174)[117:org.apache.servicemix.bundles.spring-beans:3.2.14.RELEASE_1]
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:209)[117:org.apache.servicemix.bundles.spring-beans:3.2.14.RELEASE_1]
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:180)[117:org.apache.servicemix.bundles.spring-beans:3.2.14.RELEASE_1]
	at org.springframework.osgi.context.support.OsgiBundleXmlApplicationContext.loadBeanDefinitions(OsgiBundleXmlApplicationContext.java:164)[145:org.springframework.osgi.core:1.2.1]
	at org.springframework.osgi.context.support.OsgiBundleXmlApplicationContext.loadBeanDefinitions(OsgiBundleXmlApplicationContext.java:136)[145:org.springframework.osgi.core:1.2.1]
	at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:130)[120:org.apache.servicemix.bundles.spring-context:3.2.14.RELEASE_1]
	at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:539)[120:org.apache.servicemix.bundles.spring-context:3.2.14.RELEASE_1]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:451)[120:org.apache.servicemix.bundles.spring-context:3.2.14.RELEASE_1]
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.access$301(AbstractDelegatedExecutionApplicationContext.java:69)[145:org.springframework.osgi.core:1.2.1]
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$1.run(AbstractDelegatedExecutionApplicationContext.java:186)[145:org.springframework.osgi.core:1.2.1]
	at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85)[145:org.springframework.osgi.core:1.2.1]
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.normalRefresh(AbstractDelegatedExecutionApplicationContext.java:182)[145:org.springframework.osgi.core:1.2.1]
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$NoDependenciesWaitRefreshExecutor.refresh(AbstractDelegatedExecutionApplicationContext.java:89)[145:org.springframework.osgi.core:1.2.1]
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.refresh(AbstractDelegatedExecutionApplicationContext.java:175)[145:org.springframework.osgi.core:1.2.1]
	at org.apache.activemq.osgi.ActiveMQServiceFactory.updated(ActiveMQServiceFactory.java:102)[96:org.apache.activemq.activemq-osgi:5.13.2]
	... 7 more
Caused by: org.springframework.beans.FatalBeanException: NamespaceHandler class [org.apache.xbean.spring.context.v2.XBeanNamespaceHandler] for namespace [http://activemq.apache.org/schema/core] not found; nested exception is java.lang.ClassNotFoundException: org.apache.xbean.spring.context.v2.XBeanNamespaceHandler not found from bundle [org.apache.activemq.activemq-osgi]
	at org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver.resolve(DefaultNamespaceHandlerResolver.java:135)[117:org.apache.servicemix.bundles.spring-beans:3.2.14.RELEASE_1]
	at org.springframework.osgi.context.support.DelegatedNamespaceHandlerResolver.resolve(DelegatedNamespaceHandlerResolver.java:56)[145:org.springframework.osgi.core:1.2.1]
	at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1427)[117:org.apache.servicemix.bundles.spring-beans:3.2.14.RELEASE_1]
	at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1422)[117:org.apache.servicemix.bundles.spring-beans:3.2.14.RELEASE_1]
	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:187)[117:org.apache.servicemix.bundles.spring-beans:3.2.14.RELEASE_1]
	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.doRegisterBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:147)[117:org.apache.servicemix.bundles.spring-beans:3.2.14.RELEASE_1]
	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:101)[117:org.apache.servicemix.bundles.spring-beans:3.2.14.RELEASE_1]
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:495)[117:org.apache.servicemix.bundles.spring-beans:3.2.14.RELEASE_1]
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:391)[117:org.apache.servicemix.bundles.spring-beans:3.2.14.RELEASE_1]
	... 24 more
Caused by: java.lang.ClassNotFoundException: org.apache.xbean.spring.context.v2.XBeanNamespaceHandler not found from bundle [org.apache.activemq.activemq-osgi]
	at org.springframework.osgi.util.BundleDelegatingClassLoader.findClass(BundleDelegatingClassLoader.java:103)[145:org.springframework.osgi.core:1.2.1]
	at org.springframework.osgi.util.BundleDelegatingClassLoader.loadClass(BundleDelegatingClassLoader.java:156)[145:org.springframework.osgi.core:1.2.1]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)[:1.8.0_92]
	at org.springframework.util.ClassUtils.forName(ClassUtils.java:265)[126:org.apache.servicemix.bundles.spring-core:3.2.14.RELEASE_1]
	at org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver.resolve(DefaultNamespaceHandlerResolver.java:124)[117:org.apache.servicemix.bundles.spring-beans:3.2.14.RELEASE_1]
	... 32 more
Caused by: java.lang.ClassNotFoundException: org.apache.xbean.spring.context.v2.XBeanNamespaceHandler not found by org.apache.activemq.activemq-osgi [96]
	at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1574)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.BundleWiringImpl.access$400(BundleWiringImpl.java:79)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:2018)[org.apache.felix.framework-5.4.0.jar:]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)[:1.8.0_92]
	at org.apache.felix.framework.Felix.loadBundleClass(Felix.java:1925)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.BundleImpl.loadClass(BundleImpl.java:978)[org.apache.felix.framework-5.4.0.jar:]
	at org.springframework.osgi.util.BundleDelegatingClassLoader.findClass(BundleDelegatingClassLoader.java:99)[145:org.springframework.osgi.core:1.2.1]
	... 36 more
{noformat}
davsclaus:1461806730:2016-04-28T09:25:30.702+0000:1461806730:2016-04-28T09:25:30.702+0000:Report this at Apache ActiveMQ
acartapanis:1461807119:2016-04-28T09:31:59.262+0000:1461807119:2016-04-28T09:31:59.262+0000:This is not happening with camel 2.16.3, is it not a dependency problem with camel 2.17.0 ?
acartapanis:1461807397:2016-04-28T09:36:37.842+0000:1461807397:2016-04-28T09:36:37.842+0000:https://issues.apache.org/jira/browse/AMQ-6268
davsclaus:1461811213:2016-04-28T10:40:13.281+0000:1461811213:2016-04-28T10:40:13.281+0000:Its the activemq-osig bundle that has problems. There is another AMQ ticket about this."
0,CAMEL-9921,Bug,Minor,"2.15.6, 2.17.0, 2.18.0","2.16.4, 2.17.2, 2.18.0","
None
",Resolved,Fixed,"2.16.4, 2.17.2, 2.18.0",Claus Ibsen,Tomohisa Igarashi,0,5,2016-04-28 06:32:11+00:00,2016-05-09 12:20:51+00:00,"The configuration variables defined in transformation.xml is not resolved to the value on karaf. Attached reproducer CAMEL-9921.tgz shows this behavior using Pax Exam, camel-2.18-SNAPSHOT and karaf-4.0.5.


Steps to reproduce



Unpack CAMEL-9921.tgz
Run 'mvn clean package'
PaxExamTest fails with following error, which shows the variable mapping doesn't work in karaf while it succeeds in CamelBlueprintTest

test(org.apache.camel.component.dozer.PaxExamTest)  Time elapsed: 15.878 sec  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[ACME-SALES]> but was:<[${CUST_ID}]>
    at org.apache.camel.component.dozer.PaxExamTest.test(PaxExamTest.java:89)","davsclaus:1461798388:2016-04-28T07:06:28.014+0000:1461798388:2016-04-28T07:06:28.014+0000:Camel 2.15.x is EOL.
davsclaus:1461798513:2016-04-28T07:08:33.912+0000:1461798513:2016-04-28T07:08:33.912+0000:Try with Camel 2.16.x, 2.17.x or 2.18.x.

Karaf 2.x is no longer supported either from 2.18 onwards.
igarashitm:1461799073:2016-04-28T07:17:53.038+0000:1461799073:2016-04-28T07:17:53.038+0000:Same outcome with camel-2.17.0
davsclaus:1461799185:2016-04-28T07:19:45.687+0000:1461799185:2016-04-28T07:19:45.687+0000:Try with karaf 4.x and Camel 2.17
davsclaus:1461799662:2016-04-28T07:27:42.661+0000:1461799662:2016-04-28T07:27:42.661+0000:And what exactly has that felix gogo import, is it a camel component or some of your own bundles/features or from fuse? 
igarashitm:1461799817:2016-04-28T07:30:17.224+0000:1461799817:2016-04-28T07:30:17.224+0000:It looks the camel-karaf-commands requires org.apache.felix.gogo.commands
{code}
Error executing command: Can't install feature xml-to-json/0.0.0: 	
Could not start bundle mvn:org.apache.camel.karaf/camel-karaf-commands/2.18-SNAPSHOT in feature(s) camel-core-2.18-SNAPSHOT: Unresolved constraint in bundle org.apache.camel.karaf.camel-karaf-commands [61]: Unable to resolve 61.0: missing requirement [61.0] osgi.wiring.package; (&(osgi.wiring.package=org.apache.felix.gogo.commands)(version>=0.16.0)(!(version>=1.0.0)))
{code}
davsclaus:1461799968:2016-04-28T07:32:48.359+0000:1461799968:2016-04-28T07:32:48.359+0000:Yes Camel 2.18 requires Karaf 4 (or 3.x but 4.x is the main target).
igarashitm:1461800882:2016-04-28T07:48:02.795+0000:1461800882:2016-04-28T07:48:02.795+0000:Tried camel-2.17.0&karaf-container-4.0.5, same outcome.
davsclaus:1461807136:2016-04-28T09:32:16.898+0000:1461807136:2016-04-28T09:32:16.898+0000:Works fine with karaf 4.0.4 and camel 2.17.0
{code}
karaf@root()> camel:route-list
 Context        Route          Status              Total #       Failed #     Inflight #   Uptime
 -------        -----          ------              -------       --------     ----------   ------
 camel-1        route1         Started                   0              0              0   51.470 seconds
karaf@root()> camel:route-show route1
<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
<route customId=""false"" id=""route1"" xmlns=""http://camel.apache.org/schema/spring"">
    <from uri=""file:/tmp/inbox?fileName=abc-order.xml""/>
    <setHeader headerName=""approval"" id=""setHeader1"">
        <constant>AUTO</constant>
    </setHeader>
    <to uri=""ref:xml2json"" id=""to1""/>
    <to uri=""file:/tmp/outbox?fileName=xyz-order.json"" id=""to2""/>
</route>
{code}

karaf@root()> info
Karaf
  Karaf version               4.0.4
igarashitm:1461807411:2016-04-28T09:36:51.748+0000:1461807411:2016-04-28T09:36:51.748+0000:That's weird, did you really see ""origin"":""Web"" in the /tmp/outbox/xyz-order.json?
davsclaus:1461807753:2016-04-28T09:42:33.428+0000:1461807753:2016-04-28T09:42:33.428+0000:Create a small unit test on current community code that reproduces the issue.
Do not report commercial companies software problems here.
davsclaus:1461807822:2016-04-28T09:43:42.921+0000:1461807822:2016-04-28T09:43:42.921+0000:You report a problem with feature install that works fine. Make an unit test with current code that tests the variable stuff. Then we can use that to reproduce the issue on Apache Camel source code.
igarashitm:1461808429:2016-04-28T09:53:49.876+0000:1461808429:2016-04-28T09:53:49.876+0000:camel-2.17.0, karaf-4.0.5 and the xml-to-json example are all opensource. And it doesn't reproduce in unit test.
davsclaus:1461811170:2016-04-28T10:39:30.822+0000:1461811170:2016-04-28T10:39:30.822+0000:Tomohisa, will work on an unit test we can include in camel-dozer as test. And then a smaller example (separated from fuseide) that we can use to track down the osgi issue.

Mind that dozer is not OSGi friendly so it may be that this functionailty is not supported/working on OSGi.
igarashitm:1462121311:2016-05-02T00:48:31.410+0000:1462121311:2016-05-02T00:48:31.410+0000:Tried camel-test-blueprint, but it doesn't reproduce the problem. I'll try pax exam for next.
https://github.com/igarashitm/camel/commit/8defd3f99efcb2277d4c8f36ea38fad6d33bd3ab
igarashitm:1462140656:2016-05-02T06:10:56.635+0000:1462140656:2016-05-02T06:10:56.635+0000:A reproducer using Pax Exam.
davsclaus:1462409371:2016-05-05T08:49:31.593+0000:1462409371:2016-05-05T08:49:31.593+0000:So its OSGi not able to load some expression factory for el

    public static ExpressionFactory newInstance(Properties properties) {
        return (ExpressionFactory)FactoryFinder.find(""javax.el.ExpressionFactory"", ""com.sun.el.ExpressionFactoryImpl"", properties);
    }

davsclaus:1462413536:2016-05-05T09:58:56.155+0000:1462413536:2016-05-05T09:58:56.155+0000:This was tricky to get resolved on OSGi as we need to load the glashfish EL that dozer is using. But now it prints

{code}
2016-05-05 11:57:55,574 | INFO  | #8 - timer://foo | route10                          | 55 - org.apache.camel.camel-core - 2.18.0.SNAPSHOT | Before: <?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
<ABCOrder>
    <header>
        <status>GOLD</status>
    </header>
</ABCOrder>

2016-05-05 11:57:55,622 | INFO  | #8 - timer://foo | route10                          | 55 - org.apache.camel.camel-core - 2.18.0.SNAPSHOT | After: org.apache.camel.component.dozer.example.xyz.XYZOrder@2ab3ae9c for customer: ACME-SALES
{code}

when running in karaf. Notice the variable has been replaced to ACME-SALES
tdiesler:1462764407:2016-05-09T11:26:47.567+0000:1462764407:2016-05-09T11:26:47.567+0000:The fix for this is may not be valid for other runtime environments (e.g. wildfly). It makes assumptions on the TCCL and a (non-existent) value of sysprop ""javax.el.ExpressionFactory"".


githubbot:1462764522:2016-05-09T11:28:42.426+0000:1462764522:2016-05-09T11:28:42.426+0000:GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/980

    [CAMEL-9921] Use default EL init with fallback to Glassfish impl

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-9921

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/980.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #980
    
----
commit 4fec9449afb067903ea6dfb6b2978c7a40c92b04
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2016-05-09T11:28:00Z

    [CAMEL-9921] Use default EL init with fallback to Glassfish impl

----

githubbot:1462765472:2016-05-09T11:44:32.151+0000:1462765472:2016-05-09T11:44:32.151+0000:Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/980

githubbot:1462767176:2016-05-09T12:12:56.517+0000:1462767176:2016-05-09T12:12:56.517+0000:GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/981

    [CAMEL-9921] Use Glassfish EL when available with fallback to default

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-9921

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/981.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #981
    
----
commit 250de646dcbac60506a5921a24dabf36c3379503
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2016-05-09T11:28:00Z

    [CAMEL-9921] Use Glassfish EL when available with fallback to default

----

githubbot:1462767651:2016-05-09T12:20:51.100+0000:1462767651:2016-05-09T12:20:51.100+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/981
"
0,CAMEL-9920,Bug,Major,2.17.0,"2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.17.1, 2.18.0",Quinn Stevenson,Quinn Stevenson,0,2,2016-04-27 18:57:22+00:00,2016-04-28 15:16:16+00:00,The MLLP receiver logs and error when a SocketTimeoutException is encountered while waiting for a connection.  It will not successfully accept connections after that.,"githubbot:1461755581:2016-04-27T19:13:01.387+0000:1461755581:2016-04-27T19:13:01.387+0000:GitHub user hqstevenson opened a pull request:

    https://github.com/apache/camel/pull/966

    CAMEL-9920 - Handle SocketTimeoutException on accept

    Handle the SocketTimeoutException in the accept loop.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/hqstevenson/camel CAMEL-9920

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/966.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #966
    
----
commit 6668ae1b3ffad3c6d20562616c9c814e2b3ffc7c
Author: Quinn Stevenson <quinn@pronoia-solutions.com>
Date:   2016-04-27T19:11:23Z

    CAMEL-9920 - Handle SocketTimeoutException on accept

----

githubbot:1461827776:2016-04-28T15:16:16.448+0000:1461827776:2016-04-28T15:16:16.448+0000:Github user hqstevenson closed the pull request at:

    https://github.com/apache/camel/pull/966
"
0,CAMEL-9919,Improvement,Major,2.18.0,2.18.0,"
None
",Resolved,Fixed,2.18.0,Dhiraj Sureshkumar Bokde,Claus Ibsen,0,2,2016-04-27 18:29:09+00:00,2016-05-02 18:13:23+00:00,"We should switch to a better http client that unlike jetty is actually maintainable.


Maybe okhttp or something.","davsclaus:1461972696:2016-04-30T07:31:36.251+0000:1461972696:2016-04-30T07:31:36.251+0000:Dhiraj updatde to jetty 9. Its not the best client but well lets just go with that.
dhirajsb:1462184003:2016-05-02T18:13:23.315+0000:1462184003:2016-05-02T18:13:23.315+0000:Just had a wild idea, wouldn't it be nice if there was an SLF4J like wrapper for HTTP client libraries? "
0,CAMEL-9918,Bug,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Antonin Stefanutti,Antonin Stefanutti,0,1,2016-04-27 14:49:58+00:00,2016-04-27 15:19:41+00:00,No Desc,
0,CAMEL-9917,Bug,Minor,2.17.0,2.18.0,"
None
",Resolved,Fixed,2.18.0,Antonin Stefanutti,Antonin Stefanutti,0,1,2016-04-27 14:37:24+00:00,2016-04-27 14:42:25+00:00,No Desc,
0,CAMEL-9916,New Feature,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Catalina-Alina Dobrica,3,5,2016-04-27 08:58:01+00:00,2016-05-13 22:47:11+00:00,"SJMS component is currently not friendly for XML route usage because:



You need a component instance which has been ""activated"" - has had a connection factory set.
On route restart, the component cannot be reused because the underlying pool is closed and not recreated","githubbot:1461719333:2016-04-27T09:08:53.501+0000:1461719333:2016-04-27T09:08:53.501+0000:GitHub user near-ethic opened a pull request:

    https://github.com/apache/camel/pull/965

    CAMEL-9916 Allow configuration of connectionFactory& co in SjmsEndpoint

    Allow sjms endpoints to be used without requiring prior initialization of the component with a connection factory to make this endpoint xml friendly. The new endpoint usage is also friendly to context restart

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/near-ethic/camel CAMEL-9916

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/965.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #965
    
----
commit 64cff850a6ad50e806a68601ecbd6c811ce53554
Author: near-ethic <dark.catherine@gmail.com>
Date:   2016-04-25T10:25:12Z

    Allow sjms endpoints to be used without requiring prior initialization of the component with a connection factory to make this endpoint xml friendly. The new endpoint usage is also friendly to context restart

----

davsclaus:1461800051:2016-04-28T07:34:11.141+0000:1461800051:2016-04-28T07:34:11.141+0000:Can you explain more about

> On route restart, the component cannot be reused because the underlying pool is closed and not recreated

Restarting a route should not restart component/pool etc. Or how do you restart the route exactly?
near.ethiC:1461804341:2016-04-28T08:45:41.458+0000:1461804341:2016-04-28T08:45:41.458+0000:What I actually should have said is ""on context restart"".
If you stop only the routes and restart them, the pool is not closed, but in the use-case where I needed the feature, the entire context is restarted (by stop then start) when you want to restart a route, which causes the component to restart and it's pool to be closed.
davsclaus:1461804515:2016-04-28T08:48:35.459+0000:1461804515:2016-04-28T08:48:35.459+0000:How do you setup the connection pool? Ideally you need to setup an init/destroy method so its lifecycle is properly handled

There is a little example how for ActiveMQ
http://camel.apache.org/activemq
davsclaus:1461807424:2016-04-28T09:37:04.303+0000:1461807424:2016-04-28T09:37:04.303+0000:This is not correct way to restart Camel. Doing a stop shutdown Camel and you are not guaranteed that it can start again. See the javadoc.
You can suspend/resume a context if you want to not let it do routing anymore.
near.ethiC:1461807475:2016-04-28T09:37:55.690+0000:1461807475:2016-04-28T09:37:55.690+0000:I don't set up the connection pool - it is currently handled in SJMS, in the component's doStart and doStop methods. What I propose is doing it in the endpoint's doStart and doStop, as I suggest the ConnectionFactory should belong to the endpoint instead of the component. Keeping, of course, the backward compatibility.
Here's a simple use-case of the restart issue (which is not restricted to XML usage):
{code}
/**
Using a basic use-case of SJMS component + ActiveMQConnectionFactory, context cannot be restarted
**/
@Test
public void useCase() throws Exception {
SimpleRegistry registry = new SimpleRegistry();
ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(""vm://broker?broker.persistent=false&broker.useJmx=false"");
registry.put(""activemq"", connectionFactory);
DefaultCamelContext context = new DefaultCamelContext(registry);
//adding a connection factory to a SJMS component instance, as per the current usage of this component
SjmsComponent sjmsComponent = new SjmsComponent();
sjmsComponent.setConnectionFactory(connectionFactory);
context.addComponent(""sjms"", sjmsComponent);
//with no added complexity in the route
RouteBuilder routeBuilder = new RouteBuilder(context) {
@Override
public void configure() throws Exception {
from(""sjms:queue:test"").log(""$
{body}
"");
}
};
context.addRoutes(routeBuilder);
//when the context starts, SjmsComponent.doStart creates a ConnectionFactoryResource with an underlying GenericObjectPool<Connection>, even if the pool size is 1 (default = this use-case) and fills the pool
context.start();
//when the context starts, SjmsComponent.doStop drains the pool
context.stop();
//FAIL - the context cannot start again because of an NPE in SjmsConsumer when trying to borrowConnection from the ConnectionFactoryResource
context.start();
context.stop();
}{code}
davsclaus:1461810047:2016-04-28T10:20:47.621+0000:1461810047:2016-04-28T10:20:47.621+0000:Ah okay so when you restart then the custom component you added manually has been cleared, and therefore you need to add it back again.

{code}
        // restart
        context.stop();

        // must add our custom component back again
        context.addComponent(""sjms"", sjmsComponent);

        context.start();
{code}

davsclaus:1461810914:2016-04-28T10:35:14.661+0000:1461810914:2016-04-28T10:35:14.661+0000:I logged a ticket about keeping the custom added components: CAMEL-9924
near.ethiC:1461811517:2016-04-28T10:45:17.455+0000:1461811517:2016-04-28T10:45:17.455+0000:Yes, precisely. This is also an issue when multiple context are created with the same registry => when one of the contexts stops, the pool on the component is closed and the other contexts can no longer get a connection (java.lang.IllegalStateException: Pool not open)
near.ethiC:1461813096:2016-04-28T11:11:36.105+0000:1461813096:2016-04-28T11:11:36.105+0000:Although this would solve a single-context use-case, it's not the full solution for me. My original use-case is one where multiple contexts share the same registry which won't be fixed by keeping custom added components because when one of the contexts stops, the pool on the component is closed and the other contexts can no longer get a connection (java.lang.IllegalStateException: Pool not open)
davsclaus:1461814445:2016-04-28T11:34:05.912+0000:1461814445:2016-04-28T11:34:05.912+0000:You need to configure a custom ConnectionResource to share the pool across multiple camel contexts. And then also this fix that do not close the pool when using a custom connection resource, as then you are responsible for its lifecycle.
https://github.com/apache/camel/blob/master/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/SjmsComponent.java#L119
near.ethiC:1461814754:2016-04-28T11:39:14.086+0000:1461814754:2016-04-28T11:39:14.086+0000:Yes, this fix was added in my patch, but the ConnectionResource was handled on a per endpoint level
near.ethiC:1461818268:2016-04-28T12:37:48.780+0000:1461818268:2016-04-28T12:37:48.780+0000:This fix is needed but it doesn't fix the bigger part of this ticket: it does not add the feature of nodev/XML sjms (so that the SjmsComponent instance is not needed beforehand and required to be activated outside the route with a ConnectionFactory). Also, I need the connection factory on the endpoint level because in a setup of multiple camel contexts sharing the same registry I am restricted to using a single server or creating a new instance of sjms component with a different name for each server, and {code}sjms connection setup with options + sjms:queue:test, sjms2 setup with options + sjms2:queue:test, ... {code} is not nodev friendly, while {code}sjms:queue:test[?options]{code} with the connection configuration behind the scenes is much easier to use. 

Also, the idea is not that I want to share a pool across multiple camel contexts, it is that I don't want to, but _I am forced to share it_ when I am restricted to using the same registry for multiple contexts.
antoine.dessaigne:1462926910:2016-05-11T08:35:10.240+0000:1462926910:2016-05-11T08:35:10.240+0000:Hi Claus,

Right now, in the {{sjms}} component, the connection factory is configured in the component and not in the endpoint. It has several drawbacks :
* You cannot simply use {{from(""sjms:..."")}} in a route, you need to configure the component for the connection
* You cannot have 2 {{sjms}} endpoint in a single context, you need to declare it with another name
With this pull-request, you can still configure the connection at the component level but also at the endpoint

Also, there was a mechanism that automatically creates a connection pool (named {{ConnectionFactoryResource}}). In order to be consistent, this pull-request now automatically closes the pool on shutdown in order to properly release resources.

Antoine

githubbot:1462928939:2016-05-11T09:08:59.401+0000:1462928939:2016-05-11T09:08:59.401+0000:Github user near-ethic closed the pull request at:

    https://github.com/apache/camel/pull/965

near.ethiC:1462929230:2016-05-11T09:13:50.080+0000:1462929230:2016-05-11T09:13:50.080+0000:Hello,
I closed the previous pull request because of rebase issues, but opened https://github.com/apache/camel/pull/982 instead.
Catalina
davsclaus:1463103422:2016-05-13T09:37:02.974+0000:1463103422:2016-05-13T09:37:02.974+0000:Thanks for the PR.
near.ethiC:1463150831:2016-05-13T22:47:11.227+0000:1463150831:2016-05-13T22:47:11.227+0000:Thank you for merging this.
Godspeed"
0,CAMEL-9915,Improvement,Major,None,"2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.17.1, 2.18.0",Claus Ibsen,Antoine DESSAIGNE,1,4,2016-04-26 15:10:33+00:00,2016-04-26 17:26:52+00:00,The tarfile data format is very handy but unfortunatly it's not possible to use it in the <marshal> and <unmarshal> tags.,"antoine.dessaigne:1461655074:2016-04-26T15:17:54.023+0000:1461655074:2016-04-26T15:17:54.023+0000:There's a pull request for it in here : https://github.com/apache/camel/pull/960
davsclaus:1461662452:2016-04-26T17:20:52.687+0000:1461662452:2016-04-26T17:20:52.687+0000:Thanks for the PR
githubbot:1461662458:2016-04-26T17:20:58.976+0000:1461662458:2016-04-26T17:20:58.976+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/960

antoine.dessaigne:1461662812:2016-04-26T17:26:52.917+0000:1461662812:2016-04-26T17:26:52.917+0000:Hi Claus,

No problem. Thank you for accepting it so quickly."
0,CAMEL-9914,New Feature,Major,None,,"
None
",Resolved,Incomplete,None,Unassigned,John D. Ament,0,3,2016-04-26 11:01:38+00:00,2019-08-06 06:05:35+00:00,Add the ability to automatically bind all query params in the REST DSL.,"davsclaus:1488518457:2017-03-03T13:20:57.683+0000:1488518457:2017-03-03T13:20:57.683+0000:Can you tell more what you mean by this, and maybe provide an example?"
0,CAMEL-9913,Task,Major,"2.16.3, 2.17.0","2.16.4, 2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.16.4, 2.17.1, 2.18.0",Andrea Cosentino,Andrea Cosentino,0,1,2016-04-26 07:16:34+00:00,2016-04-26 07:43:42+00:00,"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-2510


We need to take care of this.


The groupId has changed now is org.apache-extras.beanshell",
0,CAMEL-9912,Bug,Minor,"2.15.5, 2.16.3, 2.17.0",,"
None
",Resolved,Invalid,None,Grzegorz Grzybek,Allen Bagwell,0,2,2016-04-25 23:44:55+00:00,2016-04-26 05:37:31+00:00,"I am experiencing an issue with the listed release versions of Camel where if I include Saxon Enterprise Edition as a maven dependency it somehow causes a schema validation error within Camel itself before any of my tests run. (The mere act of including it as a dependency appears to auto-magically use it in place of standard javax.xml implementation.)


Reproducing the bug requires no more than a simple blueprint file with a CamelContext of .from(""direct:start"").to(""mock:finish"") and include a version of Saxon Enterprise that has been run through bnd to make it OSGi friendly.


I didn't have this issue in Camel 2.12.0


Stacktrace follows...


INFO  25-Apr-2016 16:26:21.119, [main], CamelBlueprintHelper - Using Blueprint XML file: /home/afbagwe/workspaces/osgi/cattle/target/test-classes/cattle-test-blueprint.xml
Apr 25, 2016 4:26:21 PM org.ops4j.pax.swissbox.tinybundles.core.metadata.RawBuilder run
INFO: Copy thread finished.
INFO  25-Apr-2016 16:26:21.211, [main], Activator - Camel activator starting
INFO  25-Apr-2016 16:26:21.255, [main], Activator - Camel activator started
INFO  25-Apr-2016 16:26:21.653, [Blueprint Extender: 1], BlueprintContainerImpl - Bundle CattleProcessorTest/1.0.0 is waiting for namespace handlers http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0, http://camel.apache.org/schema/blueprint
ERROR 25-Apr-2016 16:26:22.205, [Blueprint Extender: 3], BlueprintContainerImpl - Unable to start blueprint container for bundle org.apache.aries.blueprint.cm/1.0.6
org.xml.sax.SAXParseException: The schema is invalid
	at com.saxonica.ee.jaxp.SchemaFactoryImpl.toSAXException(SchemaFactoryImpl.java:407) ~[saxon-ee-9.6.0.8.jar:?]
	at com.saxonica.ee.jaxp.SchemaFactoryImpl.newSchema(SchemaFactoryImpl.java:292) ~[saxon-ee-9.6.0.8.jar:?]
	at org.apache.aries.blueprint.namespace.NamespaceHandlerRegistryImpl.createSchema(NamespaceHandlerRegistryImpl.java:347) ~[org.apache.aries.blueprint.core-1.4.4.jar:1.4.4]
	at org.apache.aries.blueprint.namespace.NamespaceHandlerRegistryImpl.getSchema(NamespaceHandlerRegistryImpl.java:261) ~[org.apache.aries.blueprint.core-1.4.4.jar:1.4.4]
	at org.apache.aries.blueprint.namespace.NamespaceHandlerRegistryImpl.access$300(NamespaceHandlerRegistryImpl.java:75) ~[org.apache.aries.blueprint.core-1.4.4.jar:1.4.4]
	at org.apache.aries.blueprint.namespace.NamespaceHandlerRegistryImpl$NamespaceHandlerSetImpl.getSchema(NamespaceHandlerRegistryImpl.java:557) ~[org.apache.aries.blueprint.core-1.4.4.jar:1.4.4]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:321) [org.apache.aries.blueprint.core-1.4.4.jar:1.4.4]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:269) [org.apache.aries.blueprint.core-1.4.4.jar:1.4.4]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_74]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_74]
	at org.apache.aries.blueprint.container.ExecutorServiceWrapper.run(ExecutorServiceWrapper.java:106) [org.apache.aries.blueprint.core-1.4.4.jar:1.4.4]
	at org.apache.aries.blueprint.utils.threading.impl.DiscardableRunnable.run(DiscardableRunnable.java:48) [org.apache.aries.blueprint.core-1.4.4.jar:1.4.4]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_74]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_74]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_74]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_74]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_74]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_74]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_74]
Caused by: net.sf.saxon.type.SchemaException: The schema is invalid
	at com.saxonica.ee.schema.SchemaCompiler.compile(SchemaCompiler.java:501) ~[saxon-ee-9.6.0.8.jar:?]
	at com.saxonica.ee.schema.SchemaCompiler.validate(SchemaCompiler.java:530) ~[saxon-ee-9.6.0.8.jar:?]
	at com.saxonica.config.EnterpriseConfiguration.addSchemaSource(EnterpriseConfiguration.java:501) ~[saxon-ee-9.6.0.8.jar:?]
	at com.saxonica.ee.jaxp.SchemaFactoryImpl.newSchema(SchemaFactoryImpl.java:289) ~[saxon-ee-9.6.0.8.jar:?]
	... 17 more
INFO  25-Apr-2016 16:26:22.279, [Blueprint Extender: 3], BlueprintContainerImpl - Bundle CattleProcessorTest/1.0.0 is waiting for namespace handlers http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0
INFO  25-Apr-2016 16:26:51.737, [main], CattleProcessorTest - ********************************************************************************
INFO  25-Apr-2016 16:26:51.738, [main], CattleProcessorTest - Testing: fakeTest(tech.app.mp.cattle.CattleProcessorTest)
INFO  25-Apr-2016 16:26:51.738, [main], CattleProcessorTest - ********************************************************************************
WARN  25-Apr-2016 16:27:21.742, [main], CamelBlueprintHelper - Test bundle headers: Bundle-ManifestVersion=2, Bundle-Name=System Bundle, Bundle-SymbolicName=org.apache.felix.connect, Bundle-Vendor=Apache Software Foundation, Bundle-Version=0.0.0
WARN  25-Apr-2016 16:27:21.743, [main], CamelBlueprintHelper - ServiceReference: [org.osgi.service.cm.ConfigurationListener, org.apache.felix.fileinstall.ArtifactListener, org.apache.felix.fileinstall.ArtifactInstaller], bundle: org.apache.felix.fileinstall [31], symbolicName: org.apache.felix.fileinstall
WARN  25-Apr-2016 16:27:21.743, [main], CamelBlueprintHelper - ServiceReference: [org.apache.camel.spi.ComponentResolver], bundle: org.apache.camel.camel-core [3], symbolicName: org.apache.camel.camel-core
WARN  25-Apr-2016 16:27:21.744, [main], CamelBlueprintHelper - ServiceReference: [org.apache.aries.blueprint.services.ParserService], bundle: org.apache.aries.blueprint.core [18], symbolicName: org.apache.aries.blueprint.core
WARN  25-Apr-2016 16:27:21.744, [main], CamelBlueprintHelper - ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint.core [18], symbolicName: org.apache.aries.blueprint.core
WARN  25-Apr-2016 16:27:21.744, [main], CamelBlueprintHelper - ServiceReference: [org.apache.camel.spi.LanguageResolver], bundle: org.apache.camel.camel-core [3], symbolicName: org.apache.camel.camel-core
WARN  25-Apr-2016 16:27:21.744, [main], CamelBlueprintHelper - ServiceReference: [org.osgi.service.url.URLStreamHandlerService], bundle: org.apache.felix.fileinstall [31], symbolicName: org.apache.felix.fileinstall
WARN  25-Apr-2016 16:27:21.744, [main], CamelBlueprintHelper - ServiceReference: [org.apache.felix.cm.PersistenceManager], bundle: org.apache.felix.configadmin [17], symbolicName: org.apache.felix.configadmin
WARN  25-Apr-2016 16:27:21.745, [main], CamelBlueprintHelper - ServiceReference: [org.osgi.service.startlevel.StartLevel], bundle: org.apache.felix.connect [0], symbolicName: org.apache.felix.connect
WARN  25-Apr-2016 16:27:21.745, [main], CamelBlueprintHelper - ServiceReference: [org.osgi.service.blueprint.container.BlueprintContainer], bundle: org.apache.aries.blueprint.core [18], symbolicName: org.apache.aries.blueprint.core
WARN  25-Apr-2016 16:27:21.745, [main], CamelBlueprintHelper - ServiceReference: [org.osgi.service.cm.ManagedServiceFactory], bundle: org.apache.felix.fileinstall [31], symbolicName: org.apache.felix.fileinstall
WARN  25-Apr-2016 16:27:21.745, [main], CamelBlueprintHelper - ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint.core [18], symbolicName: org.apache.aries.blueprint.core
WARN  25-Apr-2016 16:27:21.746, [main], CamelBlueprintHelper - ServiceReference: [org.apache.camel.spi.TypeConverterLoader], bundle: org.apache.camel.camel-core [3], symbolicName: org.apache.camel.camel-core
WARN  25-Apr-2016 16:27:21.750, [main], CamelBlueprintHelper - ServiceReference: [org.apache.aries.proxy.ProxyManager], bundle: org.apache.aries.proxy.impl [15], symbolicName: org.apache.aries.proxy.impl
WARN  25-Apr-2016 16:27:21.750, [main], CamelBlueprintHelper - ServiceReference: [org.osgi.framework.hooks.bundle.EventHook], bundle: org.apache.aries.blueprint.core [18], symbolicName: org.apache.aries.blueprint.core
WARN  25-Apr-2016 16:27:21.750, [main], CamelBlueprintHelper - ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.camel.camel-blueprint [7], symbolicName: org.apache.camel.camel-blueprint
WARN  25-Apr-2016 16:27:21.751, [main], CamelBlueprintHelper - ServiceReference: [org.apache.aries.blueprint.services.BlueprintExtenderService], bundle: org.apache.aries.blueprint.core [18], symbolicName: org.apache.aries.blueprint.core
WARN  25-Apr-2016 16:27:21.751, [main], CamelBlueprintHelper - ServiceReference: [org.apache.camel.spi.DataFormatResolver], bundle: org.apache.camel.camel-core [3], symbolicName: org.apache.camel.camel-core
WARN  25-Apr-2016 16:27:21.751, [main], CamelBlueprintHelper - ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint.core [18], symbolicName: org.apache.aries.blueprint.core
WARN  25-Apr-2016 16:27:21.751, [main], CamelBlueprintHelper - ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint.core [18], symbolicName: org.apache.aries.blueprint.core
WARN  25-Apr-2016 16:27:21.751, [main], CamelBlueprintHelper - ServiceReference: [org.osgi.service.blueprint.container.BlueprintContainer], bundle: org.apache.camel.camel-blueprint [7], symbolicName: org.apache.camel.camel-blueprint
WARN  25-Apr-2016 16:27:21.752, [main], CamelBlueprintHelper - ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint.core [18], symbolicName: org.apache.aries.blueprint.core
WARN  25-Apr-2016 16:27:21.752, [main], CamelBlueprintHelper - ServiceReference: [org.osgi.service.cm.ConfigurationAdmin], bundle: org.apache.felix.configadmin [17], symbolicName: org.apache.felix.configadmin
WARN  25-Apr-2016 16:27:21.752, [main], CamelBlueprintHelper - ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint.core [18], symbolicName: org.apache.aries.blueprint.core
WARN  25-Apr-2016 16:27:21.752, [main], CamelBlueprintHelper - ServiceReference: [org.osgi.service.packageadmin.PackageAdmin], bundle: org.apache.felix.connect [0], symbolicName: org.apache.felix.connect
WARN  25-Apr-2016 16:27:21.752, [main], CamelBlueprintHelper - ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint.core [18], symbolicName: org.apache.aries.blueprint.core
WARN  25-Apr-2016 16:27:21.752, [main], CamelBlueprintHelper - ServiceReference: [org.apache.aries.quiesce.participant.QuiesceParticipant], bundle: org.apache.aries.blueprint.core [18], symbolicName: org.apache.aries.blueprint.core
INFO  25-Apr-2016 16:27:21.753, [main], CattleProcessorTest - ********************************************************************************
INFO  25-Apr-2016 16:27:21.753, [main], CattleProcessorTest - Testing done: fakeTest(tech.app.mp.cattle.CattleProcessorTest)
INFO  25-Apr-2016 16:27:21.755, [main], CattleProcessorTest - Took: 1 minute (60658 millis)
INFO  25-Apr-2016 16:27:21.755, [main], CattleProcessorTest - ********************************************************************************
INFO  25-Apr-2016 16:27:21.772, [main], BlueprintExtender - Destroying BlueprintContainer for bundle org.apache.aries.blueprint.cm/1.0.6
INFO  25-Apr-2016 16:27:21.786, [main], BlueprintExtender - Destroying BlueprintContainer for bundle CattleProcessorTest/1.0.0
INFO  25-Apr-2016 16:27:21.787, [main], BlueprintExtender - Destroying BlueprintContainer for bundle org.apache.aries.blueprint.core/1.4.4
INFO  25-Apr-2016 16:27:21.789, [main], BlueprintExtender - Destroying BlueprintContainer for bundle org.apache.camel.camel-blueprint/2.17.0
INFO  25-Apr-2016 16:27:21.801, [main], Activator - Camel activator stopping
INFO  25-Apr-2016 16:27:21.801, [main], Activator - Camel activator stopped
INFO  25-Apr-2016 16:27:21.802, [main], CamelBlueprintHelper - Deleting work directory target/bundles/1461626781122
Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 61.338 sec <<< FAILURE! - in tech.app.mp.cattle.CattleProcessorTest
fakeTest(tech.app.mp.cattle.CattleProcessorTest)  Time elapsed: 60.716 sec  <<< ERROR!
java.lang.RuntimeException: Gave up waiting for service (objectClass=org.apache.camel.CamelContext)


Results :


Tests in error: 
  CattleProcessorTest>CamelBlueprintTestSupport.setUp:233->CamelTestSupport.setUp:239->CamelTestSupport.doSetUp:271->CamelBlueprintTestSupport.createCamelContext:478 » Runtime


Tests run: 1, Failures: 0, Errors: 1, Skipped: 0","davsclaus:1461620251:2016-04-26T05:37:31.919+0000:1461620251:2016-04-26T05:37:31.919+0000:Please use the user forum / user mailing list to get help first

Also we do not support Saxon Enterprise version. You would need to contact that vendor to make their product OSGi friendly."
0,CAMEL-9911,Bug,Major,2.17.0,"2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.17.1, 2.18.0",John D. Ament,John D. Ament,0,3,2016-04-25 17:18:05+00:00,2016-04-28 23:59:35+00:00,"The usage of rest binding mode is confusing/doesn't work consistently.


If you look at the field definition:



    @XmlAttribute @Metadata(defaultValue = ""auto"")
    private RestBindingMode bindingMode;




You would expect that the default value is ""auto"" but in fact there is no default when running.


You need to explicitly set it in configuration, like this:



restConfiguration()
                .component(""jetty"")
                .port(9097)
                .bindingMode(RestBindingMode.auto)
        ;","davsclaus:1461624926:2016-04-26T06:55:26.324+0000:1461624926:2016-04-26T06:55:26.324+0000:Ah yeah we should ""null"" be defaulted to be ""auto"". You are welcome to work on a patch / PR.
johndament:1461693698:2016-04-27T02:01:38.107+0000:1461693698:2016-04-27T02:01:38.107+0000:I'm assuming you'll take care of merging into 2.18?

I also can't find the source for http://camel.apache.org/rest-dsl.html as I'd like to update the default binding mode.
githubbot:1461693826:2016-04-27T02:03:46.975+0000:1461693826:2016-04-27T02:03:46.975+0000:GitHub user johnament opened a pull request:

    https://github.com/apache/camel/pull/964

    CAMEL-9911 Match the default defined in metadata to POJO based instan…

    …tiation.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/johnament/camel camel-2.17.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/964.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #964
    
----
commit e3062dff4a1f4cdbc4ed647aef99bc00c6e76557
Author: John D. Ament <johndament@apache.org>
Date:   2016-04-27T02:02:53Z

    CAMEL-9911 Match the default defined in metadata to POJO based instantiation.

----

davsclaus:1461709447:2016-04-27T06:24:07.402+0000:1461709447:2016-04-27T06:24:07.402+0000:The default has essentially been off. So we are setting that as the default. Changing to auto will break behavior for existing users.
davsclaus:1461709506:2016-04-27T06:25:06.472+0000:1461709506:2016-04-27T06:25:06.472+0000:And off is also the default mode in the rest-dsl docs at
http://camel.apache.org/rest-dsl
githubbot:1461859175:2016-04-28T23:59:35.159+0000:1461859175:2016-04-28T23:59:35.159+0000:Github user johnament closed the pull request at:

    https://github.com/apache/camel/pull/964
"
0,CAMEL-9910,Improvement,Minor,2.17.0,None,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,John D. Ament,0,1,2016-04-25 17:15:10+00:00,2016-09-15 15:02:52+00:00,"It would be useful if camel rest supported automatic discovery of rest components based on classpath.  Currently if I only declare a dependency on jetty, i need to register it via rest component.


If I fail to, I get an error Cannot find RestConsumerFactory in Registry or as a Component to use but ideally camel should figure out which component I want.",
0,CAMEL-9909,Improvement,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Andrea Cosentino,Andrea Cosentino,0,1,2016-04-25 09:21:44+00:00,2016-04-27 07:36:36+00:00,Currently there are some Load Balancing Policies not supported in our component: http://docs.datastax.com/en/drivers/java/3.0/com/datastax/driver/core/policies/LoadBalancingPolicy.html,
0,CAMEL-9908,Task,Major,2.18.0,None,"
None
",Resolved,Fixed,None,Claus Ibsen,Claus Ibsen,0,1,2016-04-25 09:16:24+00:00,2016-04-27 18:30:05+00:00,"We should remove camel-jetty8 and change the other components that use jetty8 to use jetty9 such as some still use jetty8 for testing.


eg do a ""git grep jetty8"" to see where its in use.","davsclaus:1461665371:2016-04-26T18:09:31.009+0000:1461665371:2016-04-26T18:09:31.009+0000:migrated camel-ahc-ws to use jetty 9 for testing. The outstanding is the WSS test that uses SSL.
davsclaus:1461711807:2016-04-27T07:03:27.737+0000:1461711807:2016-04-27T07:03:27.737+0000:camel-salesforce and camel-spring-ws are using jetty 8, which needs to be migrated to jetty 9. The latter is only using it for testing.
davsclaus:1461753005:2016-04-27T18:30:05.532+0000:1461753005:2016-04-27T18:30:05.532+0000:I created a ticket about salesforce. I hurt too much to try to upgrade as jetty is a pain in the ass to maintain. As a http client we should try to switch to something that is easier to use and maintain."
0,CAMEL-9907,New Feature,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Andrea Cosentino,Andrea Cosentino,0,1,2016-04-24 08:22:55+00:00,2016-04-24 09:06:17+00:00,No Desc,
0,CAMEL-9906,Bug,Major,2.17.0,"2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.17.1, 2.18.0",Claus Ibsen,Claus Ibsen,0,1,2016-04-23 06:07:08+00:00,2016-04-23 06:53:34+00:00,"See nabble
http://camel.465427.n5.nabble.com/2-17-0-NULLs-are-not-allowed-with-named-parameter-in-SQL-component-tp5781552.html",
0,CAMEL-9905,Improvement,Minor,2.17.0,"2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.17.1, 2.18.0",Claus Ibsen,Claus Ibsen,0,1,2016-04-22 18:54:58+00:00,2016-04-22 18:59:33+00:00,"See nabble
http://camel.465427.n5.nabble.com/TarAggregationStrategy-tmp-directory-is-full-tp5781302.html


It may leave dead files in the tmp folder which are not cleaned up. We should delete temporary files when no longer needed. And allow to configure the temporary directory in use.",
0,CAMEL-9904,Improvement,Minor,None,"2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.17.1, 2.18.0",Antonin Stefanutti,Antonin Stefanutti,0,1,2016-04-22 14:18:58+00:00,2016-04-25 09:43:53+00:00,"Camel CDI automatically deploys a Camel context to avoid user having to explicitly declare one.


However, if the user mis-configures her/his application so that there is no route nor any other active components configured (like consumers), that leads to having an empty Camel context started.


Besides, some runtimes automatically deploy the Camel CDI extension even in the case the user does not intent to use it, which leads to having an empty Camel context started.


In both cases, the Camel CDI extension could rely on an heuristic (no routes, no consumers, ...) to avoid deploying that empty Camel context.",
0,CAMEL-9903,Bug,Major,2.17.0,"2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.17.1, 2.18.0",Claus Ibsen,Terral Guillaume,0,3,2016-04-22 13:29:04+00:00,2016-04-22 19:07:40+00:00,"According to the documentation (Here) we can customize the jmx domain name.


When the domain name is different from org.apache.camel all the dumpRouteStatsAsXml are empty and does not work anymore.


After some investigation it is because the MBean operation does not take into account the runtime domain name and only use ""org.apache.camel"" (here) 


I've done a unit test to reproduce and tried to do a fix,","davsclaus:1461305448:2016-04-22T14:10:48.887+0000:1461305448:2016-04-22T14:10:48.887+0000:Thanks we love contributions
http://camel.apache.org/contributing

You would need to find ""org.apache.camel:"" used in jmx names, and then replace that with the domain name configured on the management strategy.

githubbot:1461307954:2016-04-22T14:52:34.429+0000:1461307954:2016-04-22T14:52:34.429+0000:GitHub user guillaumeterral opened a pull request:

    https://github.com/apache/camel/pull/956

    CAMEL-9903 Fix jmx operations when jmx domain is custom + test

    I retrieve the jmx domain from the management agent where it has been customized using JVM property or ManagementAgent bean according to http://camel.apache.org/camel-jmx.html 
    
    This domain is then used in all the calls made to retrieve statistics
    
    Unit Test has been added to test those operations with a custom jmx domain name

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/guillaumeterral/camel CAMEL-9903

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/956.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #956
    
----
commit c77eafe539be8b05ab1b5fe1c7ce7fb44a7ad754
Author: Guillaume Terral <guillaumeterral@github.com>
Date:   2016-04-22T14:35:28Z

    CAMEL-9903 Fix jmx operations when jmx domain is custom + test

----

gterral:1461307980:2016-04-22T14:53:00.004+0000:1461307980:2016-04-22T14:53:00.004+0000:Pull Request is available here: https://github.com/apache/camel/pull/956
davsclaus:1461323258:2016-04-22T19:07:38.082+0000:1461323258:2016-04-22T19:07:38.082+0000:Thanks for the PR
githubbot:1461323260:2016-04-22T19:07:40.852+0000:1461323260:2016-04-22T19:07:40.852+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/956
"
0,CAMEL-9902,Task,Minor,None,"2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.17.1, 2.18.0",Luca Burgazzoli,Luca Burgazzoli,0,1,2016-04-22 13:11:25+00:00,2016-04-22 13:53:50+00:00,No Desc,
0,CAMEL-9901,Improvement,Minor,None,,"
None
",Resolved,Not A Problem,None,Claus Ibsen,Kevin Anthony Earls,0,2,2016-04-22 08:52:09+00:00,2016-04-23 05:39:02+00:00,"If you specify placeholder-prefix and placeholder-suffix in a blueprint property-placeholder, properties are overridden correctly in beans, but not in routes.  For example, if you apply the changes below to https://github.com/apache/camel/blob/master/components/camel-test-blueprint/src/test/resources/org/apache/camel/test/blueprint/configadmin-loadfileoverride.xml and run ConfigAdminLoadConfigurationFileAndOverrideTest it will fail because it can't substitute for ""[destination]"".  If you leave the uris in the route set to ""destination"" the test will pass.


  <!-- blueprint property placeholders, that will use etc/stuff.cfg as the properties file -->



<cm:property-placeholder persistent-id=""stuff"" update-strategy=""reload"">
+  <cm:property-placeholder persistent-id=""stuff"" update-strategy=""reload"" placeholder-prefix=""["" placeholder-suffix=""]"">
     <cm:default-properties>
       <cm:property name=""greeting"" value=""Hello"" />
       <cm:property name=""echo"" value=""Hey"" />
@@ -34,8 +34,8 @@



   <!-- a bean that uses a blueprint property placeholder -->
   <bean id=""myCoolBean"" class=""org.apache.camel.test.blueprint.MyCoolBean"">



<property name=""say"" value=""${greeting}""/>
<property name=""echo"" value=""${echo}""/>
+    <property name=""say"" value=""[greeting]""/>
+    <property name=""echo"" value=""[echo]""/>
   </bean>



   <camelContext xmlns=""http://camel.apache.org/schema/blueprint"">
@@ -43,9 +43,9 @@
     <route>
       <from uri=""direct:start""/>
       <bean ref=""myCoolBean"" method=""saySomething""/>



<to uri=""destination""/>
+      <to uri=""[destination]""/>
       <bean ref=""myCoolBean"" method=""echoSomething""/>
<to uri=""destination""/>","davsclaus:1461287477:2016-04-22T09:11:17.263+0000:1461287477:2016-04-22T09:11:17.263+0000:You must use Camel's syntax for properties inside <camelContext> eg {{ }} style, not [ ] style."
0,CAMEL-9900,Improvement,Major,None,"2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.17.1, 2.18.0",Jonathan Anstey,Jonathan Anstey,0,2,2016-04-21 21:01:28+00:00,2016-04-24 21:37:55+00:00,"CAMEL-7667 included a fix for the DMLC used in JMS consumers to stop quickly if the CameContext is already shutting down. This helps avoid spring-jms getting into a bad state with a null sharedConnection which has a telling stack like:



2014-08-07 10:33:42,975 [sonnel.records]] ERROR ultJmsMessageListenerContainer - Could not refresh JMS Connection for destination 'personnel.records' - retrying in 5000 ms. Cause: null
java.lang.NullPointerException
	at org.springframework.jms.listener.AbstractJmsListeningContainer.refreshSharedConnection(AbstractJmsListeningContainer.java:392)
	at org.springframework.jms.listener.DefaultMessageListenerContainer.refreshConnectionUntilSuccessful(DefaultMessageListenerContainer.java:885)
	at org.springframework.jms.listener.DefaultMessageListenerContainer.recoverAfterListenerSetupFailure(DefaultMessageListenerContainer.java:861)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:1012)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:744)




This can also occur in the DMLC used for request-reply messaging. We should provide an option for this to be enabled because usually this is not an issue and you don't mind waiting for a while for replies to come in.","davsclaus:1461277992:2016-04-22T06:33:12.641+0000:1461277992:2016-04-22T06:33:12.641+0000:Remember to add the option to wiki
http://camel.apache.org/jms"
0,CAMEL-9899,Improvement,Major,2.17.0,"2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.17.1, 2.18.0",Claus Ibsen,Claus Ibsen,0,1,2016-04-21 20:45:28+00:00,2016-04-22 10:40:16+00:00,"// a worker pool for running tasks such as stopping consumers which should not use the event loop
    // thread from rx-java but use our own thread to process such tasks",
0,CAMEL-9898,Bug,Minor,2.17.0,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Lefteris Tsallas,0,2,2016-04-21 10:17:07+00:00,2016-04-21 19:42:29+00:00,"Add this unit test in org.apache.camel.builder.SimpleBuilderTest to reproduce the issue. Only fails when the regex contains }



public  void testRegexAllWithPlaceHolders() {
        exchange.getIn().setHeader(""activateUrl"", ""http://some/rest/api/(id)/activate"");
        assertEquals(""http://some/rest/api/12/activate"",SimpleBuilder.simple(""${header.activateUrl.replaceAll(\""\\(id\\)\"",\""12\"")}"").evaluate(exchange,String.class));

        //passes when contains { only
        exchange.getIn().setHeader(""activateUrl"", ""http://some/rest/api/{id/activate"");
        assertEquals(""http://some/rest/api/12/activate"",SimpleBuilder.simple(""${header.activateUrl.replaceAll(\""\\{id\"",\""12\"")}"").evaluate(exchange,String.class));


        String replaced  = ""http://some/rest/api/{id}/activate"".replaceAll(""\\{id\\}"",""12"");
        assertEquals( ""http://some/rest/api/12/activate"", replaced);
        /// But throws throws NullPointerException when regexALl inside a simple expression
        exchange.getIn().setHeader(""activateUrl"", ""http://some/rest/api/{id}/activate"");
        assertEquals(""http://some/rest/api/12/activate"",SimpleBuilder.simple(""${header.activateUrl.replaceAll(\""\\{id\\}\"",\""12\"")}"").evaluate(exchange,String.class));
    }","davsclaus:1461216419:2016-04-21T13:26:59.123+0000:1461216419:2016-04-21T13:26:59.123+0000:You can use groovy or mvel to call such methods.
davsclaus:1461216466:2016-04-21T13:27:46.162+0000:1461216466:2016-04-21T13:27:46.162+0000:The simple parser sounds like is not detecting the closing } is in the quote and thus not the paired close } for the command itself.
ltsall:1461217215:2016-04-21T13:40:15.438+0000:1461217215:2016-04-21T13:40:15.438+0000:Sure there are alternatives, but I thought It would be good to report it. I always prefer the simple language, when it's possible.
davsclaus:1461236070:2016-04-21T18:54:30.797+0000:1461236070:2016-04-21T18:54:30.797+0000:We can improve the parser to support escaping curly-bracket-end so its not mistakenly taken as a function end marker."
0,CAMEL-9897,Improvement,Minor,2.17.0,2.18.0,"

xslt

",Resolved,Fixed,2.18.0,Claus Ibsen,Hubertus Willuhn,0,3,2016-04-21 10:01:51+00:00,2016-05-26 17:12:22+00:00,"While using the XSLT component of Camel i came across this post in Nabble:


http://camel.465427.n5.nabble.com/Make-xslt-component-not-to-validate-dtd-s-or-use-local-copy-td5727789.html#a5728034


I am using XML files that looks like:



<!DOCTYPE E20 SYSTEM  ""myapp.dtd""><E20>
	<E20.001>
		<REC.ID>A00008:20:018046</REC.ID>
	</E20.001>
<COMP VAR=""A"">&lt;&lt;m&eacute;talliques&gt;&gt; &lt;s&eacute;dimentation&gt; pargravi</COMP>
...




so it would be nice to have a EntityResolver for my DTD and the entities.


At the moment i can only specify a custom URIResolver bean (which works great, by the way).
(see ""uriResolver""-option documentation http://camel.apache.org/xslt.html)


Is it possible to add an simliar option to the XSLT component to achieve this?


I am using Camel 2.17.0 and Saxon 9.5.1.","davsclaus:1461368831:2016-04-23T07:47:11.894+0000:1461368831:2016-04-23T07:47:11.894+0000:Yeah contributions is welcome
githubbot:1464248617:2016-05-26T15:43:37.862+0000:1464248617:2016-05-26T15:43:37.862+0000:GitHub user snurmine opened a pull request:

    https://github.com/apache/camel/pull/999

    CAMEL-9897: Add an Option to the XSLT Component to support custom EntityResolver

    Added option as described in the ticket.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/snurmine/camel CAMEL-9897

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/999.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #999
    
----
commit 83f84ba61c9909c45b8102ad06e090024009fb2f
Author: Sami Nurminen <snurmine@gmail.com>
Date:   2016-05-26T15:13:07Z

    CAMEL-9897: Add an Option to the XSLT Component to support custom EntityResolver

----

githubbot:1464253844:2016-05-26T17:10:44.913+0000:1464253844:2016-05-26T17:10:44.913+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/999
"
0,CAMEL-9896,Bug,Minor,2.15.6,"2.16.4, 2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.16.4, 2.17.1, 2.18.0",Claus Ibsen,Nikhil Kumar,0,3,2016-04-21 08:31:38+00:00,2016-04-23 09:04:46+00:00,"When a DeadLetterChannel is used as context scoped error handling strategy with FailureProcessor set and a route scoped error handling strategy is defined to continue routing in case of certain exception classes, then it is observed that even in case of exceptions which belong to exceptions defined in OnException clause, the dead letter's failure processor is still triggered. 


A test case to simulate this behaviour is pasted. 
http://pastebin.com/raw/cfQhsJj0 - contains test case.
http://pastebin.com/raw/K6wZc9Yh - test output","guru.gv:1461289930:2016-04-22T09:52:10.821+0000:1461289930:2016-04-22T09:52:10.821+0000:+1 I am facing this issue too, what is the expected behaviour? 
Would there be a work around? 
davsclaus:1461370118:2016-04-23T08:08:38.743+0000:1461370118:2016-04-23T08:08:38.743+0000:Thanks for reporting. I have reproduced the issue and work on a fix
davsclaus:1461373486:2016-04-23T09:04:46.250+0000:1461373486:2016-04-23T09:04:46.250+0000:Thanks for reporting and the test"
0,CAMEL-9895,Improvement,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Moulliard Charles,Moulliard Charles,0,1,2016-04-21 06:55:23+00:00,2016-04-21 15:04:56+00:00,"Setup a by default password to access the spring boot ssh server in order to simplify the access to the SSH server as it is not so easy to get the random generated password



Parameter to be added within the application.yml file
shell.auth.simple.user.password: password",
0,CAMEL-9894,Bug,Critical,2.17.0,,"
None
",Resolved,Invalid,None,Claus Ibsen,Arun,0,2,2016-04-20 15:02:58+00:00,2016-04-22 10:40:16+00:00,"I am using camel-rx to observe some messages from Active MQ. After I complete the subscription I am getting onCompleted() event also. But If I look in Active MQ console, I can still see the consumer live. 
I feel Is it an issue with camel. How to release this connection once subscription is over?


Code :


ReactiveCamel rx = new ReactiveCamel(camel);


			Observable<Message> observable1 = rx.toObservable(""activemq:queue:Output Queue - 01?selector=JMSCorrelationID%3D'""+ uuid + ""' AND eventType%3D'cust_msg'"");


			observable1.first().subscribe(new Subscriber<Message>() {


// methods here


}","davsclaus:1461216363:2016-04-21T13:26:03.464+0000:1461216363:2016-04-21T13:26:03.464+0000:Use the mailing list / user forum to get help
arunkabraham:1461221324:2016-04-21T14:48:44.219+0000:1461221324:2016-04-21T14:48:44.219+0000:But Ideally it should release the connection. Right? Is it an issue with Camel or is it supposed to behave like that?

I mean if onCompleted() is getting called the consumer should release the connection. but it is not getting released 
davsclaus:1461222728:2016-04-21T15:12:08.042+0000:1461222728:2016-04-21T15:12:08.042+0000:Please do not reopen tickets.

Things are to be discussed on the user forum / mailing list first. We cannot have people open 10000s of issue tracker at their will.
arunkabraham:1461222963:2016-04-21T15:16:03.439+0000:1461222963:2016-04-21T15:16:03.439+0000:OK. Got it
arunkabraham:1461292816:2016-04-22T10:40:16.421+0000:1461292816:2016-04-22T10:40:16.421+0000:Fixed this issue"
0,CAMEL-9893,Bug,Major,2.17.0,,"
None
",Resolved,Invalid,None,Claus Ibsen,Mujahed Syed,0,2,2016-04-20 14:59:51+00:00,2016-04-23 07:49:47+00:00,"Hi Team,


I am trying to create Jetty configuration with SSL. Here is my configuration:



    @Bean(name = ""jetty"")
    public JettyHttpComponent jetty(CamelContext camelContext){
        JettyHttpComponent jettyComponent = camelContext.getComponent(""jetty"", JettyHttpComponent.class);
        jettyComponent.setSslContextParameters(sslContextParameters());
        return jettyComponent;
    }

  @Bean(name = ""sslContextParameters"")
    public SSLContextParameters sslContextParameters(){
        KeyStoreParameters ksp = new KeyStoreParameters();
        ksp.setResource(KEYSTORE);
        ksp.setPassword(KEYSTORE_PASSWORD);

        KeyManagersParameters kmp = new KeyManagersParameters();
        kmp.setKeyPassword(KEYSTORE_PASSWORD);
        kmp.setKeyStore(ksp);

        TrustManagersParameters tmp = new TrustManagersParameters();
        tmp.setKeyStore(ksp);

        SSLContextParameters sslContextParameters = new SSLContextParameters();
        sslContextParameters.setKeyManagers(kmp);
        sslContextParameters.setTrustManagers(tmp);

        return sslContextParameters;
    }





If I load this configuration I get exception stating that:


Caused by: java.lang.ClassCastException: org.apache.camel.util.spring.SSLContextParametersFactoryBean$$EnhancerBySpringCGLIB$$57d06d22 cannot be cast to org.apache.camel.util.jsse.SSLContextParameters
	at com.xxx.config.DevConfiguration$$EnhancerBySpringCGLIB$$1bb53ad4.sslContextParameters(<generated>)
	at com.xxx.config.DevConfiguration.jetty(DevConfiguration.java:45)
	at com.xxx.config.DevConfiguration$$EnhancerBySpringCGLIB$$1bb53ad4.CGLIB$jetty$0(<generated>)
	at com.xxx.config.DevConfiguration$$EnhancerBySpringCGLIB$$1bb53ad4$$FastClassBySpringCGLIB$$a8257ab2.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:355)
	at com.xxxx.config.DevConfiguration$$EnhancerBySpringCGLIB$$1bb53ad4.jetty(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162)
	... 62 more


This looks like a bug to me, because the class JettyHttpComponent has a setter setSslContextParameters(SSLContextParameters sslContextParameters) the parameter is of type org.apache.camel.util.jsse.SSLContextParameters and when we package and run this it expects a parameter of type org.apache.camel.util.spring.SSLContextParametersFactoryBean I have attached complete log file.
Please let me know if you can point me to some direction.


Thank you,
Mujahed","davsclaus:1461368952:2016-04-23T07:49:12.919+0000:1461368952:2016-04-23T07:49:12.919+0000:Try with

{code}
 public JettyHttpComponent jetty(CamelContext camelContext, SSLContextParameters parameters){
..
{code}

so Spring can inject the bean.
davsclaus:1461368987:2016-04-23T07:49:47.853+0000:1461368987:2016-04-23T07:49:47.853+0000:And please use the user forum / user mailing list to get help first."
0,CAMEL-9892,Improvement,Major,2.17.0,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Bob Gaudaen,0,3,2016-04-20 14:22:31+00:00,2016-04-22 07:09:37+00:00,Will provide pull request.,"githubbot:1461133954:2016-04-20T14:32:34.680+0000:1461133954:2016-04-20T14:32:34.680+0000:GitHub user bgaudaen opened a pull request:

    https://github.com/apache/camel/pull/951

    CAMEL-9892 Wrapped completionPredicate

    And renamed camel endpoints for readability

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/bgaudaen/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/951.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #951
    
----
commit eeffd20c775369e9f6ea3f07220260ebdf5945c1
Author: Bob Gaudaen <bob.gaudaen@gmail.com>
Date:   2016-04-19T11:40:46Z

    CAMEL-9881 Fixed completionPredicate method definition for scala DSL and added a simple unit test

commit eb15068f47ed790f78c61307818c9aaa3c8d153f
Author: Bob Gaudaen <bob.gaudaen@gmail.com>
Date:   2016-04-20T11:59:36Z

    Merge remote-tracking branch 'upstream/master'

commit bf538f98034dfaf30282bfa1d00c8f3a28e0febb
Author: Bob Gaudaen <bob.gaudaen@gmail.com>
Date:   2016-04-20T14:24:21Z

    CAMEL-9892 Renamed endpoints for readability

commit 99e3110aff021802bbd4a43763a95a6328e39505
Author: Bob Gaudaen <bob.gaudaen@gmail.com>
Date:   2016-04-20T14:27:33Z

    CAMEL-9892 wrapped completionPredicate and added Unit Test

----

davsclaus:1461222215:2016-04-21T15:03:35.082+0000:1461222215:2016-04-21T15:03:35.082+0000:Thanks
githubbot:1461280177:2016-04-22T07:09:37.755+0000:1461280177:2016-04-22T07:09:37.755+0000:Github user bgaudaen closed the pull request at:

    https://github.com/apache/camel/pull/951
"
0,CAMEL-9891,Bug,Minor,None,"2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.17.1, 2.18.0",Luca Burgazzoli,Luca Burgazzoli,0,1,2016-04-20 12:47:48+00:00,2016-04-20 15:37:46+00:00,"Please see the discussion here: http://camel.465427.n5.nabble.com/Spring-Boot-and-Camel-2-17-HangupSupport-Removed-td5781339.html#a5781417


Workaround:



set camel.springboot.main-run-controller to false
manually run ApplicationController ctx.getBean(CamelSpringBootApplicationController.class).run()",
0,CAMEL-9890,Bug,Major,2.18.0,2.18.0,"
None
",Resolved,Fixed,2.18.0,Andrea Cosentino,Andrea Cosentino,0,1,2016-04-20 11:16:30+00:00,2016-04-20 13:03:54+00:00,I guess it's time to switch to Jetty 9.,
0,CAMEL-9889,Improvement,Major,None,2.18.0,"
None
",Resolved,Not A Problem,2.18.0,Claus Ibsen,Claus Ibsen,0,1,2016-04-20 07:38:26+00:00,2016-04-20 07:45:55+00:00,So the component can at runtime leverage information from the 3rd party component. For example camel-hystrix to tie into hystrix to grab health and metrics data in the JMX processor mbean.,davsclaus:1461109555:2016-04-20T07:45:55.736+0000:1461109555:2016-04-20T07:45:55.736+0000:Ah doh we can already do this by just adding the jmx annotations. Then it does a mixin of the default options plus the new stuff.
0,CAMEL-9888,New Feature,Minor,None,None,"
None
",Resolved,Fixed,2.18.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2016-04-19 17:55:31+00:00,2016-05-24 11:59:47+00:00,No Desc,
0,CAMEL-9887,Bug,Major,2.17.0,"2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.17.1, 2.18.0",Claus Ibsen,Jerry Williamson,0,1,2016-04-19 16:02:22+00:00,2016-04-24 13:49:47+00:00,"In 2.17.0, if a Splitter is configured with shareUnitOfWork=true, then its AggregationStrategy is now wrapped by a ShareUnitOfWorkAggregationStrategy. This causes the following code from MulticastProcessor.doDone() to fail to invoke onCompletion when the configured strategy implements CompletionAwareAggregationStrategy.



if (strategy instanceof CompletionAwareAggregationStrategy) {
    ((CompletionAwareAggregationStrategy) strategy).onCompletion(subExchange);
}




It appears the change was a part of CAMEL-9573.


I haven't completely analyzed the shared unit of work changes but one possible approach to fix this would be to have the ShareUnitOfWorkAggregationStrategy implement CompletionAwareAggregationStrategy and then have its onCompletionMethod delegate to the wrapped strategy iff it also implements CompletionAwareAggregationStrategy.",
0,CAMEL-9886,New Feature,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2016-04-19 15:50:48+00:00,2016-04-27 15:19:48+00:00,No Desc,
0,CAMEL-9885,Improvement,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Andrea Cosentino,Andrea Cosentino,0,1,2016-04-19 15:28:32+00:00,2016-04-20 06:09:39+00:00,No Desc,
0,CAMEL-9884,New Feature,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2016-04-19 14:50:24+00:00,2016-05-17 15:17:25+00:00,Ehcache has released version 3.0 of their cache solution (http://www.ehcache.org/) so it may be worth having a new camel-ehcache component and deprecate the old camel-cache component.,lb:1462857565:2016-05-10T13:19:25.394+0000:1462857565:2016-05-10T13:19:25.394+0000:First cut done: https://github.com/apache/camel/commit/9a473f3980f679b62a22fc6a191b54164ad38001
0,CAMEL-9883,New Feature,Minor,None,"2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.17.1, 2.18.0",Luca Burgazzoli,Luca Burgazzoli,1,2,2016-04-19 14:28:07+00:00,2016-04-26 13:02:05+00:00,"It may be useful to have a spring-cache based idempotent repository to ease the configuration of idempotent repository in spring xml based projects.


i.e. 



<?xml version=""1.0"" encoding=""UTF-8""?>
<beans xmlns=""http://www.springframework.org/schema/beans""
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
       xsi:schemaLocation=""
     http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans.xsd
     http://camel.apache.org/schema/spring
     http://camel.apache.org/schema/spring/camel-spring.xsd"">

  <bean id=""cacheManager"" class=""org.infinispan.spring.provider.SpringRemoteCacheManagerFactoryBean"">
    <property
        name=""configurationProperties"">
      <props>
        <prop key=""infinispan.client.hotrod.server_list"">127.0.0.1:11222</prop>
        <prop key=""infinispan.client.hotrod.force_return_values"">true</prop>
      </props>
    </property>
  </bean>

  <bean id=""repo"" class=""org.apache.camel-spring.SpringCacheIdempotentRepository"">
    <constructor-arg ref=""cacheManager""/>
    <constructor-arg value=""idempotent""/>
  </bean>

  <camelContext xmlns=""http://camel.apache.org/schema/spring"">
    <route id=""infinispan-remote"">
      <from uri=""direct:start"" />
      <idempotentConsumer messageIdRepositoryRef=""repo"" skipDuplicate=""true"">
        <header>MessageId</header>
        <to uri=""log:camel?level=INFO&amp;showAll=true&amp;multiline=true"" />
      </idempotentConsumer>
    </route>
  </camelContext>

</beans>",
0,CAMEL-9882,New Feature,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Antonin Stefanutti,Antonin Stefanutti,0,1,2016-04-19 12:45:50+00:00,2016-04-28 14:34:24+00:00,"So that user can use their existing Camel XML files with CDI or use Camel XML for configuring their Camel contexts.


For example, given the following Camel XML:



<camelContext id=""test"" errorHandlerRef=""error-handler""
              xmlns=""http://camel.apache.org/schema/spring"">

    <errorHandler id=""error-handler""
                  type=""LoggingErrorHandler""
                  logName=""error""
                  level=""WARN""/>

    <route>
        <from uri=""direct:inbound""/>
        <choice>
            <when>
                <simple>${body} contains 'exception'</simple>
                <throwException ref=""failure""/>
            </when>
            <otherwise>
                <transform>
                    <simple>Response to ${body}</simple>
                </transform>
                <to uri=""mock:outbound""/>
            </otherwise>
        </choice>
    </route>

</camelContext>




And following bean:



@Named
@Produces
Exception failure = new CamelException(""failure message!"");




The Camel XML elements with an id attributes (errorHandler in the example) get deployed as CDI beans and vice-versa the ref attributes can refer to CDI beans (@Named(""failure"") in the example).


The current proposition is to expose an annotation that the developer can use on any CDI bean to declare the Camel XML files to import in her/his Camel CDI application, e.g.:



@ImportResource(""imported-context.xml"")
class MyCamelCdiBean {
}",
0,CAMEL-9881,Bug,Major,2.17.0,"2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.17.1, 2.18.0",Claus Ibsen,Bob Gaudaen,0,3,2016-04-19 11:38:15+00:00,2016-04-20 14:35:40+00:00,"Due to the method declaration of completionPredicate in org.apache.camel.scala.dsl.SAggregateDefinition makes it impossible to use a completion predicate.
Method should be declared as:



def completionPredicate(filter: Exchange => Any) = {




Pull request to follow.","githubbot:1461037819:2016-04-19T11:50:19.272+0000:1461037819:2016-04-19T11:50:19.272+0000:GitHub user bgaudaen opened a pull request:

    https://github.com/apache/camel/pull/950

    CAMEL-9881 Fixed completionPredicate method definition

    Fixed completionPredicate method definition
    Added a simple unit test

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/bgaudaen/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/950.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #950
    
----
commit eeffd20c775369e9f6ea3f07220260ebdf5945c1
Author: Bob Gaudaen <bob.gaudaen@gmail.com>
Date:   2016-04-19T11:40:46Z

    CAMEL-9881 Fixed completionPredicate method definition for scala DSL and added a simple unit test

----

davsclaus:1461058742:2016-04-19T17:39:02.690+0000:1461058742:2016-04-19T17:39:02.690+0000:Thanks for the PR.

You are welcome to improved and fix more on the camel-scala DSL
githubbot:1461110264:2016-04-20T07:57:44.417+0000:1461110264:2016-04-20T07:57:44.417+0000:Github user bgaudaen closed the pull request at:

    https://github.com/apache/camel/pull/950
"
0,CAMEL-9880,Improvement,Major,2.18.0,2.18.0,"
None
",Resolved,Fixed,2.18.0,Stephan Siano,Stephan Siano,1,1,2016-04-18 14:38:22+00:00,2016-07-27 08:45:31+00:00,"The attachment support in Camel 2.x is essentuially a Map<String,DataHandler>. However real life attachments have headers in addition to the message body (which is essentially represented by the DataHandler) 


Remark: the DataHandler has support for the Content-Type (which is one of the headers) but has no way to contain the others.


CAMEL-9868 is about a new overall attachment handling on Camel 3.0.


This issue is about having attachment headers in Camel 2.x in a way that is compatible to previous version.


I have attached POCs for three approaches how that could be implemented (neither implementation is complete, it only has header support for attachments in camel-cxf and camel-mail to show the differences between the approaches):


Option 1: Create an Attachment interface that supports headers and a header map. Furthermore a DefaultAttachment implementation is provided that extends DataHandler and implements Attachment. As these AttachmentImpl objects are also DataHandlers they can be put into the attachment map in the Message implementations (and they are capable of transporting attachments).
Pros:



the Message interface and the DefaultMessage implementation are not changed.
The headers are kept with the attachment (so if an attachment is removed the headers also go away)
Cons:
The way this data is transported is not very transparent (ugly instanceof operations and type casts all over the coding (including tests))



Option 2: Define a specifically named header (of type Map<String, Map<String,String>> that contains the content of all attachment headers. The access to this header is done via new methods of the MessageHelper class.
Pros: 



No change in the Message interface and DefaultMessage implementation.
No new interface
Cons:
Access via headers very complex -> MessageHelper method calls are spread all over the code (including tests).
Headers can get inconsistent with attachments (if an attachment is removed the corresponding headers are not automatically removed, if a new attachment with the old name is added, the headers from the old attachment will pop up).



Option 3: Create an Attachment interface (as in Option 1). The DefaultAttachment implementation does not implement DataHandler. Therefore additional methods in the Message interface and DefaultMessage are needed. The map in the DefaultMessage implementation needs to be changed in type, the access methods to the original map grant a modifiable view on the underlying Map<String, Attachment> (so mixed access with the old and the new methods works (the old methods do not grant header access)).
Pros:



Clean way of implementation, no instanceof calls and type casts necessary, no use of MessageHelper all over the code.
The headers are kept with the attachments(no inconsistencies)
Cons:
(Compatible) extension of Message interface (implementors that do not extend the DefaultMessage class need to be extended (the RichMessage in camel-scala)).
Changes in DefaultMessage may have some risk of introducing new bugs",
0,CAMEL-9879,New Feature,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,1,2016-04-18 14:37:25+00:00,2016-04-22 19:15:38+00:00,"The CB load balancer do not offer a fallback and will just reject if the state is open.


We should try to have a CB that can configure options for fallback, and be integrated with hystrix, so if you add camel-hystrix on the classpath it uses hystrix.


Then its using the real Netflix OSS stuff that are so popular.","davsclaus:1461048262:2016-04-19T14:44:22.813+0000:1461048262:2016-04-19T14:44:22.813+0000:Got the hystrix implemented, the missing bits are

- cache key requires to setup some thread request stuff with lifecycle we need to tie to the exchange (same problem in the component, as its wrong now)
- allow to stream its stats as json on an endpoint jax-rs/jmx etc so turbine and hystrix dashboard can gather the data.
davsclaus:1461048279:2016-04-19T14:44:39.925+0000:1461048279:2016-04-19T14:44:39.925+0000:Started a doc page here
https://cwiki.apache.org/confluence/display/CAMEL/Hystrix+EIP
davsclaus:1461058176:2016-04-19T17:29:36.777+0000:1461058176:2016-04-19T17:29:36.777+0000:I took out the cache option as it seems a bit complicated and over the top. The request context must be set correct on the threads before the hystrix command and cleared again when exchange is done. And then the cache dies with it, so its only concurrent exchanges that has the same cache key that will use the cached value. 
davsclaus:1461133064:2016-04-20T14:17:44.196+0000:1461133064:2016-04-20T14:17:44.196+0000:Hystrix dashboard monitoring the camel-example-hystrix client that uses the Camel hystrix EIP to call a service1 and use service2 as fallback.

I just started service1 again after both services was down, and the CB was open to circuit the request, and now when service1 was online again it started called the service and the circuit goes back to being closed."
0,CAMEL-9878,Improvement,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,3,2016-04-18 13:48:12+00:00,2016-06-21 09:47:59+00:00,"A command that can show you details about the top-N inflight exchanges per routes.


Some kind of table that output the top oldest inflight grouped by route.



exchange   route    duration    node 
--------------------------------
a
b
c
d
e
f




You can use route-list and context-list and see the inflight counter, but you cannot yet see more fine grained details.","davsclaus:1460958576:2016-04-18T13:49:36.199+0000:1460958576:2016-04-18T13:49:36.199+0000:Something a like:

{code}
camel:inflight --top=10
{code}

And if you want a specific route(s) you can use filter or something
{code}
camel:inflight --top=10 --filter=route1
{code}

We could then have top with a default value of 10 or something.

davsclaus:1460958604:2016-04-18T13:50:04.238+0000:1460958604:2016-04-18T13:50:04.238+0000:You can grab all the details from the inflight repository using its browse method.
zregvart:1465639685:2016-06-11T18:08:05.067+0000:1465639685:2016-06-11T18:08:05.067+0000:Isn't this already implemented in CAMEL-8223?
There is no mention of the {{camel:context-inflight}} command in the [{{OSGI-INF/bundle.info}}|https://github.com/apache/camel/blob/master/platforms/karaf/commands/src/main/resources/OSGI-INF/bundle.info] but it's implemented in [{{org.apache.camel.karaf.commands.ContextInflight}}|https://github.com/apache/camel/blob/master/platforms/karaf/commands/src/main/java/org/apache/camel/karaf/commands/ContextInflight.java] and registered in [{{OSGI-INF/blueprint/camel-commands.xml}}|https://github.com/apache/camel/blob/master/platforms/karaf/commands/src/main/resources/OSGI-INF/blueprint/camel-commands.xml#L72].
davsclaus:1465693014:2016-06-12T08:56:54.846+0000:1465693014:2016-06-12T08:56:54.846+0000:Yeah but that is for the entire camel context, you may want to see the top X for each route, hence it should be improved on the existing command, or a new command named route-inflight. Or the existing command renamed as inflight?
zregvart:1465824660:2016-06-13T21:31:00.125+0000:1465824660:2016-06-13T21:31:00.125+0000:I'm guessing that one would use *inflight* command for troubleshooting or monitoring and that at the start one would like to see an overview of top exchanges for all routes and all contexts and then drill down into specific contexts and routes by filtering.

So rename the existing command to *inflight*, make the context _name_ argument optional and introduce a _route_ argument to filter by context and/or route. Would that work? Or would you prefer to keep the context _name_ required?
githubbot:1466240615:2016-06-18T17:03:35.917+0000:1466240615:2016-06-18T17:03:35.917+0000:GitHub user zregvart opened a pull request:

    https://github.com/apache/camel/pull/1046

    CAMEL-9878 camel-commands - Add command to show top N inflight exchan…

    …ges per routes
    
    Added new argument (`route`) to `context-inflight` command. Client can
    use the `route` argument to specify the route which inflight exchanges
    should be displayed.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/zregvart/camel CAMEL-9878

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1046.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1046
    
----
commit b5cc32ecc666cb2006436cfad37e0b75de0d2fa3
Author: Zoran Regvart <zregvart+github@gmail.com>
Date:   2016-06-18T16:53:22Z

    CAMEL-9878 camel-commands - Add command to show top N inflight exchanges per routes
    
    Added new argument (`route`) to `context-inflight` command. Client can
    use the `route` argument to specify the route which inflight exchanges
    should be displayed.

----

githubbot:1466473679:2016-06-21T09:47:59.893+0000:1466473679:2016-06-21T09:47:59.893+0000:Github user zregvart closed the pull request at:

    https://github.com/apache/camel/pull/1046
"
0,CAMEL-9877,Improvement,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,1,2016-04-18 13:40:41+00:00,2016-04-24 09:07:46+00:00,"We have a browse that limits per context



	browse(int limit, boolean sortByLongestDuration)
A read-only browser of the InflightRepository.InflightExchanges that are currently inflight.




But we need one that limits per route, eg



	browse(String routeId, int limit, boolean sortByLongestDuration)
A read-only browser of the InflightRepository.InflightExchanges that are currently inflight on that given route.",
0,CAMEL-9876,Bug,Major,2.17.0,,"
None
",Resolved,Invalid,None,Claus Ibsen,Oliver Holzmann,0,2,2016-04-18 09:41:27+00:00,2016-04-24 15:44:13+00:00,"With version 2.17.0 error handling is not triggering route specific error handler any more.


I changed org.apache.camel.processor.SplitSubUnitOfWorkTest and defined the global error handler as route specific and amended the global error handler:



      public void configure() throws Exception {
        // START SNIPPET: e1
        errorHandler(deadLetterChannel(""mock:log"").useOriginalMessage()
            .maximumRedeliveries(3).redeliveryDelay(0));

        from(""direct:start"")
            .errorHandler(
                deadLetterChannel(""mock:dead"").useOriginalMessage()
                    .maximumRedeliveries(3).redeliveryDelay(0)).to(""mock:a"")
            .split(body().tokenize("","")).shareUnitOfWork().to(""mock:b"")
            .to(""direct:line"").end().to(""mock:result"");

        from(""direct:line"").inheritErrorHandler(true).to(""log:line"")
            .process(new MyProcessor()).to(""mock:line"");
        // END SNIPPET: e1
      }




The expectation is, that this shouldn't change the test results. 


But testError fails because mock:dead is not triggered any more.","OHolzma:1460943799:2016-04-18T09:43:19.146+0000:1460943799:2016-04-18T09:43:19.146+0000:Is this problem related to CAMEL-9444 ?
OHolzma:1460953996:2016-04-18T12:33:16.120+0000:1460953996:2016-04-18T12:33:16.120+0000:Also {{inheritErrorHandler(true)}} on splitter doesn't solve the issue.
davsclaus:1461483852:2016-04-24T15:44:12.962+0000:1461483852:2016-04-24T15:44:12.962+0000:The direct:line route uses the global error handler. You need to either inlined the direct route in the splitter, or configure the direct route to not use error handler.

Those other tests should ideally have configured the direct route to not use any error handler so its controller by the splitter.

{code}
                from(""direct:start"")
                    .errorHandler(deadLetterChannel(""mock:dead"").useOriginalMessage()
                        .maximumRedeliveries(3).redeliveryDelay(0))
                    .to(""mock:a"")
                    // share unit of work in the splitter, which tells Camel to propagate failures from
                    // processing the splitted messages back to the result of the splitter, which allows
                    // it to act as a combined unit of work
                    .split(body().tokenize("","")).shareUnitOfWork()
                        .to(""mock:b"")
                        .to(""direct:line"")
                    .end()
                    .to(""mock:result"");

                from(""direct:line"").errorHandler(noErrorHandler())
                    .to(""log:line"")
                    .process(new MyProcessor())
                    .to(""mock:line"");
{code}"
0,CAMEL-9845,Improvement,Major,2.16.2,"2.16.4, 2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.16.4, 2.17.1, 2.18.0",Claus Ibsen,Claus Ibsen,0,1,2016-04-09 07:19:05+00:00,2016-04-09 07:25:00+00:00,"See nabble
http://camel.465427.n5.nabble.com/Camel-Hive-Issue-tp5780522.html


We should check for not already closed before closing.",
0,CAMEL-9844,Improvement,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Tristan Hill,0,2,2016-04-08 17:42:35+00:00,2016-04-14 12:21:38+00:00,"Further to http://mail-archives.apache.org/mod_mbox/camel-dev/201604.mbox/ajax/%3C570645AC.2020206%40saticed.me.uk%3E


To support a aws-sqs://queueNameOrArn[?options] style connection uri","tristanh:1460108578:2016-04-08T17:42:58.280+0000:1460108578:2016-04-08T17:42:58.280+0000:I'm working on a patch
davsclaus:1460239769:2016-04-10T06:09:29.155+0000:1460239769:2016-04-10T06:09:29.155+0000:Tristian that sounds good.
tristanh:1460524673:2016-04-13T13:17:53.511+0000:1460524673:2016-04-13T13:17:53.511+0000:Initial patch
tristanh:1460601121:2016-04-14T10:32:01.667+0000:1460601121:2016-04-14T10:32:01.667+0000:refresh patch to have correct coding style
tristanh:1460605375:2016-04-14T11:42:55.636+0000:1460605375:2016-04-14T11:42:55.636+0000:Patch to also support arn for s3 & sqs for consistency
davsclaus:1460607698:2016-04-14T12:21:38.341+0000:1460607698:2016-04-14T12:21:38.341+0000:Thanks for the patch"
0,CAMEL-9843,Improvement,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,1,2016-04-08 16:03:53+00:00,2016-04-09 06:41:51+00:00,So you can use it directly in a splitter eip in streaming mode and read data on the fly.,
0,CAMEL-9842,Improvement,Minor,None,"2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.17.1, 2.18.0",Claus Ibsen,James Netherton,0,2,2016-04-08 15:32:38+00:00,2016-04-09 05:48:27+00:00,"Currently interface UndertowHost registerHandler and unregisterHandler methods only allow implementing classes to get a handle on the UndertowEndpoint HTTP URI path. 


It'd be useful to be able to get at some of the other configuration options. E.g to help with this: https://github.com/wildfly-extras/wildfly-camel/issues/1165","githubbot:1460101634:2016-04-08T15:47:14.663+0000:1460101634:2016-04-08T15:47:14.663+0000:GitHub user jamesnetherton opened a pull request:

    https://github.com/apache/camel/pull/937

    [CAMEL-9842] Expose additional endpoint configuration options to Unde…

    …rtowHost handler methods
    
    https://issues.apache.org/jira/browse/CAMEL-9842

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jamesnetherton/camel CAMEL-9842

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/937.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #937
    
----
commit ee48449d473b47ae0a2e6b8027e23fef75ee92fe
Author: James Netherton <jamesnetherton@gmail.com>
Date:   2016-04-08T15:33:52Z

    [CAMEL-9842] Expose additional endpoint configuration options to UndertowHost handler methods

----

githubbot:1460152077:2016-04-09T05:47:57.219+0000:1460152077:2016-04-09T05:47:57.219+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/937
"
0,CAMEL-9841,Bug,Minor,2.17.0,"2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.17.1, 2.18.0",Claus Ibsen,Stephan Siano,0,2,2016-04-08 13:31:42+00:00,2016-04-09 05:56:59+00:00,"If an MIME-Multipart message is unmarshalled into a Camel Message with attachments and the attachment parts do not have a file name defined, the MIME-Multipart data format will throw a NullPointerException (because the file name is used as the key for the map where the DataHandler is stored in the Camel Message).


The provided patch checks whether there is a file name defined on the data handler. If this is not the case the Content-ID header of the attachment is used, if that is also not defined a unique id is generated for the key.


See the two attached MIME-Multipart documents used in the unit tests for details.",davsclaus:1460152619:2016-04-09T05:56:59.131+0000:1460152619:2016-04-09T05:56:59.131+0000:Thanks for the patch
0,CAMEL-9840,Bug,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2016-04-08 08:44:29+00:00,2016-04-08 14:52:05+00:00,See http://camel.465427.n5.nabble.com/infinispan-Idempotent-and-RemoteCacheManager-td5780600.html#a5780723,
0,CAMEL-9839,Bug,Blocker,2.16.0,,"
None
",Closed,Invalid,None,Claus Ibsen,Rahul Taneja,0,2,2016-04-08 07:15:57+00:00,2016-04-08 09:03:40+00:00,"I am having this issue in my apache camel code which I have tried to resolve from every angle, but I could not resolve it.


1) I have two route as below, First route is as below:


public class XXXRoute1 extends RouteBuilder {
    public void configure() 

{
        String endpointUri = ""cxf:/XXX;
        String logEndpoint = ""log:"" + XXX() + ""?level=DEBUG"";
        from(endpointUri)
                .to(logEndpoint).to(ROUTE2.ENDPOINT_URI)
                .to(logEndpoint);
    }


Second Route:(In second route , I am catching some exception through onException)


public class Route2 extends RouteBuilder {
 public void configure() throws  Exception{
        String integrationEndpoint = ""xxx.integration"";
onException(RuntimeException.class).handled(true).onWhen(exceptionMessage().contains(""Invalid"")).bean(translator, ""translateSomeError(${property.XXX})"").end();


from(ENDPOINT_URI)
.
.
. so on


Now , In my case, the object which I am populating through onException


public SomeObjectResponse translateSomeError(Object someObject) throws  Exception{


        SomeObjectResponse someObjectResponse = new SomeObjectResponse();
someObjectResponse.setError(""someError"");


        return someObjectResponse ;
}


However, In SOAP UI while testing I am getting an emplty SOAP envelop


<soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"">
   <soap:Body/>
</soap:Envelope>


I am using cxf component in apache camel. Thanks in advance for looking into this issue.


The above response comes,I have tried the following things doTry, onException, Different properties of exchange set, even try catch block in java has been tried but same response.","davsclaus:1460072052:2016-04-08T07:34:12.260+0000:1460072052:2016-04-08T07:34:12.260+0000:Please use the user mailing list / user forum to get help.
Rahul.Taneja:1460074049:2016-04-08T08:07:29.359+0000:1460074049:2016-04-08T08:07:29.359+0000:Hi Claus,
 I have already done that, Have sent an email to user list and created a post on nabble forum too. Below is the link.
http://camel.465427.n5.nabble.com/OnException-Not-returning-a-custom-Response-td5780706.html

This is a blocker to me. I have read all the online docs and even camel in action but none was of any respite. Even I handled the exception in try catch in java but that too gave a blank response. 

Looks like, when I set onException(SomeException.class).handled(true) , it removes the exception from exchange but some flag is remained unset due to which the response I am returning doesnt return that object. 

Also, I have tried dotTry also, but none of them has helped so far.

Thanks for reaching.

Hope to see it resolved soon.

Regards,
Rahul
Rahul.Taneja:1460074359:2016-04-08T08:12:39.089+0000:1460074359:2016-04-08T08:12:39.089+0000:This bug have been already shared on the user list and nabble form, have not got any response. I have tried anything as specified in the docs. And its a blocker to me. 


davsclaus:1460077420:2016-04-08T09:03:40.323+0000:1460077420:2016-04-08T09:03:40.323+0000:This community is volunteer based on help and support that happens on the user forum / mailing list. 

If you want faster help you can reach out to companies
http://camel.apache.org/commercial-camel-offerings.html
"
0,CAMEL-9838,Improvement,Major,None,"2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.17.1, 2.18.0",Jonathan Anstey,Jonathan Anstey,0,2,2016-04-07 19:02:39+00:00,2016-04-08 05:32:24+00:00,We have endsWith available via PredicateBuilder in the Java DSL. Would be nice to have this in simple so it could be used in XML DSL as well.,"janstey:1460028582:2016-04-07T19:29:42.848+0000:1460028582:2016-04-07T19:29:42.848+0000:https://github.com/apache/camel/commit/ff085260d530e7bc5b23c124acdca8094739ee7d
davsclaus:1460064730:2016-04-08T05:32:10.698+0000:1460064730:2016-04-08T05:32:10.698+0000:Jon can you add the new operation to the operators table at
http://camel.apache.org/simple

Also I noticed it misses the starts with operator. And maybe some others, so could you double check?"
0,CAMEL-9837,Task,Trivial,2.17.0,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Thomas Cunningham,0,3,2016-04-07 15:49:47+00:00,2016-04-08 05:33:02+00:00,"As of 2.17, it appears that ""The Mail component now requires to configure to, cc, and bcc using lower case keys, eg to=foo@bar.com, instead of To=foo@bar.com as previously."".    The Mail component documentation still refers to these keys in upper case form :


http://camel.apache.org/mail.html","davidkarlsen:1460021931:2016-04-07T17:38:51.937+0000:1460021931:2016-04-07T17:38:51.937+0000:I've fixed it on the wiki: https://cwiki.apache.org/confluence/display/CAMEL/Mail - should appear on the static site in a few hours. The issue can be closed.
davsclaus:1460064782:2016-04-08T05:33:02.867+0000:1460064782:2016-04-08T05:33:02.867+0000:Thanks Tom and David"
0,CAMEL-9836,Wish,Minor,2.17.0,"2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.17.1, 2.18.0",Claus Ibsen,Jose Luis Pedrosa,0,3,2016-04-07 15:19:13+00:00,2016-04-28 12:10:23+00:00,"Currently the camel-mongodb-gridfs component (which is not available in this Jira) when a file is cretated does not return back the Id (_id) of the file created, it only returns  the filename



String metaData = exchange.getIn().getHeader(GridFsEndpoint.GRIDFS_METADATA, String.class);
            DBObject dbObject = (DBObject) JSON.parse(metaData);
            gfsFile.setMetaData(dbObject);
            gfsFile.save();
            exchange.getIn().setHeader(Exchange.FILE_NAME_PRODUCED, gfsFile.getFilename());




mongodb api has the method getid: http://api.mongodb.org/java/current/com/mongodb/gridfs/GridFSFile.html#getId--


So i'd like to ask to:
a) create a header field (maybe GridFsEndpoint.GRIDFS_FILE_ID_PRODUCED)
b) Add the header after the creation



String metaData = exchange.getIn().getHeader(GridFsEndpoint.GRIDFS_METADATA, String.class);
            DBObject dbObject = (DBObject) JSON.parse(metaData);
            gfsFile.setMetaData(dbObject);
            gfsFile.save();
            exchange.getIn().setHeader(Exchange.FILE_NAME_PRODUCED, gfsFile.getFilename());
            exchange.getIn().setHeader(GridFsEndpoint.GRIDFS_FILE_ID_PRODUCED, gfsFile.getId());




Of course I can create a PR myself, but I think the administrative work would be more? Up to you guys.","davsclaus:1460428605:2016-04-12T10:36:45.467+0000:1460428605:2016-04-12T10:36:45.467+0000:Jose sounds good, you are welcome to do a PR / patch
jlpedrosa:1461801745:2016-04-28T08:02:25.566+0000:1461801745:2016-04-28T08:02:25.566+0000:[~cibsen@e-ma.net]  is there any chance I can summit this on time so it's ready for 2.17.1? It should not take me a long time.. it's very simple, 2 lines of code with no risk..
davsclaus:1461801793:2016-04-28T08:03:13.115+0000:1461801793:2016-04-28T08:03:13.115+0000:Yeah sure, if you can do a PR later today so the source is ready for tomorrow/weekend that would be lovely.
githubbot:1461811405:2016-04-28T10:43:25.653+0000:1461811405:2016-04-28T10:43:25.653+0000:GitHub user jlpedrosa opened a pull request:

    https://github.com/apache/camel/pull/967

    Add the _id of the file just persisted to the context

    Hi,
    
    this PR relates to: https://issues.apache.org/jira/browse/CAMEL-9836

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jlpedrosa/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/967.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #967
    
----
commit 999495ac9aae0abaa82892bf147a8be406960f8f
Author: Joseluis Pedrosa <joseluis.pedrosa@elephanttalk.com>
Date:   2016-04-28T10:41:45Z

    Add the _id of the file just persisted to the context

----

jlpedrosa:1461811442:2016-04-28T10:44:02.878+0000:1461811442:2016-04-28T10:44:02.878+0000:Hi Claus,

Thanks, there you have: https://github.com/apache/camel/pull/967

davsclaus:1461812106:2016-04-28T10:55:06.728+0000:1461812106:2016-04-28T10:55:06.728+0000:Thanks for the PR
githubbot:1461816550:2016-04-28T12:09:10.494+0000:1461816550:2016-04-28T12:09:10.494+0000:Github user jlpedrosa closed the pull request at:

    https://github.com/apache/camel/pull/967

jlpedrosa:1461816623:2016-04-28T12:10:23.234+0000:1461816623:2016-04-28T12:10:23.234+0000:Pull request closed, thanks!"
0,CAMEL-9835,Wish,Minor,2.17.0,"2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.17.1, 2.18.0",Andrea Cosentino,Jose Luis Pedrosa,0,1,2016-04-07 13:46:09+00:00,2016-04-11 12:27:29+00:00,"Kafka supports that one consumer is subcriber to multple topics. In their api when you start the consumer you MUST provide an Array of topics.


If we look in /java/org/apache/camel/component/kafka/KafkaConsumer.java
Currently this is the piece of code that starts the subscriber:



LOG.debug(""Subscribing {} to topic {}"", threadId, topicName);
consumer.subscribe(Arrays.asList(topicName));




just simply allowing the comma separated topic syntax and replacing one line of code (and the documentation) it would be working.



LOG.debug(""Subscribing {} to topic {}"", threadId, topicName);
consumer.subscribe(Arrays.asList(topicName.split("","")));




Despite the same could be achieved by adding more consumers (rotues) this causes a significant amount of load (because of the commits) to kafka, so this really helps to improve performance. 


the topic has been already marked as mandatory, so that should keep the nullpointer safe.


@UriParam @Metadata(required = ""true"")
private String topic;


thanks!",jlpedrosa:1460348849:2016-04-11T12:27:29.916+0000:1460348849:2016-04-11T12:27:29.916+0000:Thanks! 
0,CAMEL-9834,Bug,Major,None,"2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.17.1, 2.18.0",Luca Burgazzoli,Luca Burgazzoli,0,1,2016-04-07 12:09:41+00:00,2016-04-27 10:49:48+00:00,No Desc,
0,CAMEL-9833,Improvement,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Andrea Cosentino,Claus Ibsen,0,1,2016-04-07 09:24:11+00:00,2016-04-08 13:40:45+00:00,"Like the mapMailMessage option in camel-mail, we should have an option to turn off the auto mapping from http request to camel message body / headers.


You may want to turn this off if you do proxy routes where you just want to route the request to another endpoint without the need to access the body/headers during routing.","davsclaus:1459992432:2016-04-07T09:27:12.064+0000:1459992432:2016-04-07T09:27:12.064+0000:We should likely add two options so you can map the headers and not the body, eg if you want to do CBR based on HTTP headers.

mapHttpMessageBody=true|false
mapHttpMessageHeaders=true|false

Then they can be true by default as today.

Then in org.apache.camel.http.common.DefaultHttpBinding#readRequest we should not force loading the message body and headers if they are false."
0,CAMEL-9832,Improvement,Minor,None,,"
None
",Resolved,Duplicate,None,Andrea Cosentino,Andrea Cosentino,0,1,2016-04-07 09:23:17+00:00,2016-04-07 09:30:18+00:00,"There are situations where we don't need to convert a Message in HTTP headers and body, but simply route the message as is. For example when we are on route like jetty ---> jetty.


It can be useful to add an option that skip the mapping to HTTP Message.",
0,CAMEL-9831,Improvement,Minor,None,2.18.0,"
None
",Resolved,Not A Problem,2.18.0,Andrea Cosentino,Andrea Cosentino,0,1,2016-04-07 09:18:25+00:00,2016-08-02 12:56:41+00:00,"There is case when we need to set for example http.nonProxyHosts property. The only way to set this on HttpClient is to use System Properties, but actually we instead read the proxy Properties from camelContext.


We can add an option useSystemProperties, that make possible to use System Properties as fallback.","acosentino:1470113793:2016-08-02T12:56:33.330+0000:1470113793:2016-08-02T12:56:33.330+0000:Since camel 2.8.0 proxyHost and proxyPort are renamed into proxyAuthHost and proxyAuthPort, so no need to use proxyHost and proxyPort.. They exists on the endpoint only because they come from httpCommonEndpoint."
0,CAMEL-9830,Improvement,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,1,2016-04-07 08:15:00+00:00,2017-05-19 09:20:51+00:00,"This helps avoid those circular event issues you can get from spring.
See CAMEL-9789",
0,CAMEL-9829,Improvement,Minor,2.17.0,,"
None
",Resolved,Duplicate,None,Claus Ibsen,Niels Ull Harremoes,0,2,2016-04-07 08:07:38+00:00,2016-04-07 08:19:26+00:00,"I am trying to declare an endpoint like this in my spring context:



    <cxf:cxfEndpoint  
         xmlns:cxf=""http://camel.apache.org/schema/cxf""
         id=""myEndpoint"" address=""${myUrl}""/>




I want to use it in a route like this: .to(""cxf:bean:myEndpoint?dataFormat=PAYLOAD"")


I am not using rs, but the cxf NamespaceHandler has a dependency CxfRsClientFactoryBeanDefinitionParser which again has a dependency on org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean so I get a java.lang.NoClassDefFoundError.


I found a workaround - not using the cxf namespace and declaring a bean of class org.apache.camel.component.cxf.CxfSpringEndpoint.
But the error was a bit hard to diagnose.


Could the NamespaceHandler lazy-load the xxxBeanDefinitionParser instances so that the class CxfRsClientFactoryBeanDefinitionParser doesn't get loaded if I don't have a cxf:rsClient tag?",davsclaus:1459988359:2016-04-07T08:19:19.009+0000:1459988359:2016-04-07T08:19:19.009+0000:camel-cxf is need to be splitted up into several components. There is a ticket about that already.
0,CAMEL-9828,Bug,Major,2.17.0,"2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.17.1, 2.18.0",Claus Ibsen,Tim Dudgeon,0,2,2016-04-07 08:06:36+00:00,2016-04-07 10:34:05+00:00,"See http://camel.465427.n5.nabble.com/swagger-injects-empty-headers-in-2-17-0-td5780620.html
key part copied below.


I have routes built using REST DSL, and this includes swagger definitions.
With 2.1.6.2 all was good.
On switching to 2.17.0 I find that having a swagger query parameter definition causes a header property to be defined as an empty string even when there is no query parameter defined.
As an example, the REST DSL snippet looks like this:


.post(""/

{notebookid}

/e"").description(""Description ..."")
.bindingMode(RestBindingMode.json).produces(""application/json"")
.outType(Foo.class)
.param().name(""notebookid"").type(path).description(""Notebook ID"").dataType(""long"").endParam()


.param().name(""parent"").type(query).description(""The parent"").dataType(""long"").required(false).endParam()
.route()
.process((Exchange exch) -> {
    Long parent = exch.getIn().getHeader(""parent"", Long.class);
    ...
})
.endRest()


""parent"" is an optional query param.
With 2.16.2 there was no ""parent"" header.
With 2.17.0 a ""parent"" header is magically added with the value being the empty string, which causes the TypeConversion to Long to blow up. 


If I remove the swagger params then it works OK again.",davsclaus:1459996445:2016-04-07T10:34:05.351+0000:1459996445:2016-04-07T10:34:05.351+0000:Thanks for reporting
0,CAMEL-9827,Test,Major,2.17.0,"2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.17.1, 2.18.0",Claus Ibsen,Claus Ibsen,0,1,2016-04-07 05:48:37+00:00,2016-04-07 07:40:25+00:00,The tests outputs some errors in the mongo console and causes the thread to deadlock and die after the surefire test plugin timeout.,"davsclaus:1459979416:2016-04-07T05:50:16.458+0000:1459979416:2016-04-07T05:50:16.458+0000:Not sure if some of the dependency upgrades for mongodb driver and embedded mongo could have caused this? But unfotunately the mongo output is not capture as exceptions or something so the unit test would fail properly. You need to manually inspect the output to detect some of these problems.
davsclaus:1459984139:2016-04-07T07:08:59.558+0000:1459984139:2016-04-07T07:08:59.558+0000:It looks like the embedded mongodb upgrade from 1.50.1 to 1.50.2 causes this trouble. There is no less errors printed in the mongosb console when using that older version.

But thee is this NPE during stopping
{code}
[mongod output] Exception in thread ""Camel (camel-89) thread #68 - mongodb://myDb"" java.lang.NullPointerException
	at com.mongodb.DBCursor.hasNext(DBCursor.java:156)
	at org.apache.camel.component.mongodb.MongoDbTailingProcess.doRun(MongoDbTailingProcess.java:144)
	at org.apache.camel.component.mongodb.MongoDbTailingProcess.run(MongoDbTailingProcess.java:99)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
{code}

I suspect its the cursor close hack that break out the doRun loop. 

It seems the tryNext or try with a timeout is not so easy to get working. 
davsclaus:1459986025:2016-04-07T07:40:25.321+0000:1459986025:2016-04-07T07:40:25.321+0000:Okay the downgraded fixed most of them. That NPE is because of that stop hack."
0,CAMEL-9826,Improvement,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Arno Noordover,Claus Ibsen,0,3,2016-04-06 18:01:55+00:00,2016-05-29 11:29:00+00:00,"There is this endless while loop
https://github.com/apache/camel/blob/master/components/camel-mongodb/src/main/java/org/apache/camel/component/mongodb/MongoDbTailingProcess.java#L132


This should be using a CountDownLatch to await for the stop to complete so there is no endless while loop.","raulvk:1459940756:2016-04-06T19:05:56.741+0000:1459940784:2016-04-06T19:06:24.753+0000:Quick question. Have you seen this actually happening?
* The keepRunning flag is volatile.
* The cursor is closed by the shutdown thread, therefore the call to `cursor.hasNext()` in the while guard should unblock and either give an opportunity for the guard to evaluate the new value of keepRunning (false) or throw an exception (thus escaping the loop), unless there's a bug in the MongoDB driver and `cursor.hasNext()` never returns even when another thread has closed the cursor.

davsclaus:1459979237:2016-04-07T05:47:17.496+0000:1459979237:2016-04-07T05:47:17.496+0000:You got a CPU that is spiking in the while loop keep running at that line 132
{code}
""main"" #1 prio=5 os_prio=31 tid=0x00007fa3a2003000 nid=0x1703 runnable [0x0000700000218000]
   java.lang.Thread.State: RUNNABLE
	at org.apache.camel.component.mongodb.MongoDbTailingProcess.stop(MongoDbTailingProcess.java:132)
	at org.apache.camel.component.mongodb.MongoDbTailableCursorConsumer.doStop(MongoDbTailableCursorConsumer.java:41)
	at org.apache.camel.support.ServiceSupport.stop(ServiceSupport.java:102)
	at org.apache.camel.util.ServiceHelper.stopService(ServiceHelper.java:142)
	at org.apache.camel.impl.DefaultShutdownStrategy.shutdownNow(DefaultShutdownStrategy.java:381)
	at org.apache.camel.impl.DefaultShutdownStrategy.shutdownRoutesNow(DefaultShutdownStrategy.java:355)
	at org.apache.camel.impl.DefaultShutdownStrategy.doShutdown(DefaultShutdownStrategy.java:238)
	at org.apache.camel.impl.DefaultShutdownStrategy.shutdownForced(DefaultShutdownStrategy.java:146)
	at org.apache.camel.impl.DefaultCamelContext.doStop(DefaultCamelContext.java:3066)
	- locked <0x0000000795e68a70> (a org.apache.camel.spring.SpringCamelContext)
{code}

Using the concurrent / thread apis with the latch and whatnot is a much better approach to signal between threads and safely wait.
No other of the Camel components uses a endless while loop in their code.
githubbot:1464490126:2016-05-29T10:48:46.973+0000:1464490126:2016-05-29T10:48:46.973+0000:GitHub user anoordover opened a pull request:

    https://github.com/apache/camel/pull/1003

    CAMEL-9826: used CountDownLatch to wait for stop

    CAMEL-9826: Removed while loop and introduced CountDownLatch to wait for stop

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/anoordover/camel CAMEL-9826

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1003.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1003
    
----
commit 1552d093786156ccb43eb488a120fb854021f986
Author: Arno Noordover <anoordover@users.noreply.github.com>
Date:   2016-05-29T10:47:05Z

    CAMEL-9826: used CountDownLatch to wait for stop

----

githubbot:1464492519:2016-05-29T11:28:39.588+0000:1464492519:2016-05-29T11:28:39.588+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1003
"
0,CAMEL-9825,Task,Major,None,"2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.17.1, 2.18.0",Claus Ibsen,Thomas Diesler,0,2,2016-04-06 09:14:26+00:00,2016-04-07 08:47:15+00:00,No Desc,"githubbot:1459912120:2016-04-06T11:08:40.196+0000:1459912120:2016-04-06T11:08:40.196+0000:GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/931

    [CAMEL-9825] Exclude CDI generated proxies from context tracker

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-9825

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/931.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #931
    
----
commit be2883ae9242efd957047326c8dca46aa5d89004
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2016-04-06T10:31:35Z

    [CAMEL-9825] Exclude CDI generated proxies from context tracker

----

githubbot:1459988994:2016-04-07T08:29:54.642+0000:1459988994:2016-04-07T08:29:54.642+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/931
"
0,CAMEL-9824,Improvement,Minor,2.17.0,,"
None
",Resolved,Won't Fix,None,Andrea Cosentino,Fabian Chanton,0,3,2016-04-06 08:14:50+00:00,2016-11-25 10:19:27+00:00,"This problem is similar to CAMEL-9815


For a project we have to declare a queue without a name. The server then auto-generates a random name and passes it back.


If we do not specify a queue name, RabbitMQEndpoint defines a random name for us. This however is not allowed on the server.


I locally tried a fix for RabbitMQDeclareSupport, where instead of using 



        channel.queueDeclare(queue, endpoint.isDurable(), false, endpoint.isAutoDelete(), arguments);
        channel.queueBind(queue, exchange, emptyIfNull(routingKey));




i declare the queue like this:



      DeclareOk declareOk = channel.queueDeclare();
      endpoint.setQueue(declareOk.getQueue());




This has some drawbacks, as it completely ignores endpoint.isDurable(), endpoint.isAutoDelete() etc. and even the routing key is ignored.


I don't know how to best add a possibility to declare server named queues.","githubbot:1461647620:2016-04-26T13:13:40.566+0000:1461647620:2016-04-26T13:13:40.566+0000:GitHub user FabianChanton opened a pull request:

    https://github.com/apache/camel/pull/959

    CAMEL-9824 Add URI parameter to declare server named queues

    As described in CAMEL-9824 We need a possibility to declare server named queues. 
    
    To achieve this I would like to add a new URI parameter ""serverNamedQueue"".
    
    If this parameter is set, the queue is declared via 
    `channel.queueDeclare();`
     instead of 
    `channel.queueDeclare(queue, endpoint.isDurable(), false, endpoint.isAutoDelete(), arguments);`
    
    The drawback of this solution is that several other options (isDurable etc) are ignored. If someone has a different idea on how to solve this I am more than happy to hear it!

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/FabianChanton/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/959.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #959
    
----
commit f822e750e19a5c703945ad4d7d1a21ff8ae4ef00
Author: Fabian Chanton <fabian.chanton@misurio.ch>
Date:   2016-04-26T13:06:51Z

    CAMEL-9824 Add URI parameter to declare server named queues

----

acosentino:1477434462:2016-10-26T06:27:42.021+0000:1477434462:2016-10-26T06:27:42.021+0000:Hello [~fabian.chanton@gmx.ch], sorry we really missed this PR? Can you rebase with the latest master?

I assigned the issue to myself.

Thanks! 
fabian.chanton@gmx.ch:1477434960:2016-10-26T06:36:00.267+0000:1477434960:2016-10-26T06:36:00.267+0000:Hi
The specifications in our project have changed and the server no longer generates the name for the queue (now we have to name it in a unique way ourselves).
So this is no longer an issue for us. Do you think this would still be a good addition to the component? I'm not quite sure because of the drawbacks mentioned above.
acosentino:1477435204:2016-10-26T06:40:04.091+0000:1477435204:2016-10-26T06:40:04.091+0000:Looking at the drawbacks we can have some problem in adding this feature. So if this is not a problem for you anymore we can close the issue.

Thanks for the feedback and sorry for the late response.
githubbot:1480040367:2016-11-25T10:19:27.479+0000:1480040367:2016-11-25T10:19:27.479+0000:Github user FabianChanton closed the pull request at:

    https://github.com/apache/camel/pull/959
"
0,CAMEL-9823,New Feature,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Andrea Cosentino,Andrea Cosentino,0,2,2016-04-06 08:11:13+00:00,2016-04-29 08:54:00+00:00,"I guess we can take advantage from consumer groups feature in camel-kafka.


http://www.confluent.io/blog/tutorial-getting-started-with-the-new-apache-kafka-0.9-consumer-client","anbumani.balusamy:1461624025:2016-04-26T06:40:25.531+0000:1461624025:2016-04-26T06:40:25.531+0000:[~ancosen],
I would like to contribute to add this features. Kindly let me know if it's not already started.

Thanks!
Anbu
acosentino:1461624268:2016-04-26T06:44:28.079+0000:1461624268:2016-04-26T06:44:28.079+0000:Hi [~anbumani.balusamy],

No. It's not already started, you're welcome to contribute :-)

I'll review your contribution :-)

Thanks.
anbumani.balusamy:1461841381:2016-04-28T19:03:01.531+0000:1461841381:2016-04-28T19:03:01.531+0000:Hi [~ancosen],

Please find the attachment. Kindly review and let me know your comments/suggestions.

Thanks!
Anbu
acosentino:1461881531:2016-04-29T06:12:11.660+0000:1461881531:2016-04-29T06:12:11.660+0000:Hi [~anbumani.balusamy],

I'm reviewing the code.

It seems you're not using the ConsumerLoop that is used in Kafka Consumer Groups.

{code}
public static void main(String[] args) { 
  int numConsumers = 3;
  String groupId = ""consumer-tutorial-group""
  List<String> topics = Arrays.asList(""consumer-tutorial"");
  ExecutorService executor = Executors.newFixedThreadPool(numConsumers);

  final List<ConsumerLoop> consumers = new ArrayList<>();
  for (int i = 0; i < numConsumers; i++) {
    ConsumerLoop consumer = new ConsumerLoop(i, groupId, topics);
    consumers.add(consumer);
    executor.submit(consumer);
  }

  Runtime.getRuntime().addShutdownHook(new Thread() {
    @Override
    public void run() {
      for (ConsumerLoop consumer : consumers) {
        consumer.shutdown();
      } 
      executor.shutdown();
      try {
        executor.awaitTermination(5000, TimeUnit.MILLISECONDS);
      } catch (InterruptedException e) {
        e.printStackTrace;
      }
    }
  });
}
{code}
acosentino:1461881567:2016-04-29T06:12:47.295+0000:1461881567:2016-04-29T06:12:47.295+0000:Above there is a little example from here: http://www.confluent.io/blog/tutorial-getting-started-with-the-new-apache-kafka-0.9-consumer-client
anbumani.balusamy:1461886613:2016-04-29T07:36:53.036+0000:1461886613:2016-04-29T07:36:53.036+0000:[~ancosen],

  We are already using consumerLoop logic in dostart(). please find the code. 

 @Override
    protected void doStart() throws Exception {
        super.doStart();
        LOG.info(""Starting Kafka consumer"");
        executor = endpoint.createExecutor();
        for (int i = 0; i < endpoint.getConsumersCount(); i++) {
            executor.submit(new KafkaFetchRecords(endpoint.getTopic(), i + """", getProps()));
        }
    }

Thanks!
Anbu
acosentino:1461886820:2016-04-29T07:40:20.292+0000:1461886820:2016-04-29T07:40:20.292+0000:Oh yes! My mistake! Sorry :-)

I will merge your patch in the morning :-) Many thanks for your contributions! Keep 'em comin!
acosentino:1461891229:2016-04-29T08:53:49.498+0000:1461891229:2016-04-29T08:53:49.498+0000:Merged.

Please next time run an 

{code}
> mvn -Psourcecheck
{code}

and fix the checkstyle error. 

Thanks :-)"
0,CAMEL-9822,Improvement,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Antonin Stefanutti,Claus Ibsen,0,1,2016-04-06 07:51:27+00:00,2016-04-28 10:27:59+00:00,Wonder if we should upgrade to 1.6 for the upcoming Camel 2.18 release.,
0,CAMEL-9821,Bug,Major,None,"2.16.3, 2.17.1, 3.0.0","
None
",Resolved,Fixed,"2.16.3, 2.17.1, 3.0.0",Freeman Yue Fang,Freeman Yue Fang,0,2,2016-04-06 02:29:21+00:00,2016-04-13 02:02:18+00:00,"In case when use MESSAGE|RAW dataFormat, which means don't read the underlying InputStream so that can't determine the MEP(Message Exchange Pattern) from the incoming message, so that need specify the mep explicitly","davidkarlsen:1460453636:2016-04-12T17:33:56.918+0000:1460453636:2016-04-12T17:33:56.918+0000:Could https://issues.apache.org/jira/browse/CAMEL-9574 be fixed along this one?
ffang:1460483983:2016-04-13T01:59:43.522+0000:1460483983:2016-04-13T01:59:43.522+0000:Yes, I believe so.

Cheers

Freeman"
0,CAMEL-9820,Bug,Major,2.16.1,None,"
None
",Resolved,Fixed,"2.16.4, 2.17.1, 2.18.0",Andrea Cosentino,Harini Vaidhyanathan,0,1,2016-04-05 20:42:04+00:00,2016-04-06 10:09:13+00:00,"For the feature I am building, I need to use SFTP to fetch files to process. When it comes to large files, I want to be able to pick up a file for processing only when its been completely written. In order to achieve this, I tried the following combination suggesting the file age should be 10 minutes or more.


readLock=changed
readLockMinAge=10m 


This did not work as expected and kept picking up the files in the next poll as soon as the write has started. I found the following while debugging.


In class SftpChangedExclusiveReadLockStrategy,  


long startTime = (new Date()).getTime();  ==> returns time in milliseconds as long
newLastModified = f.getAttrs().getMTime();  ==> returns time in seconds as int casted to long.


Hence when the following check is made, the comparison becomes to be between newLastModified which is in seconds and newOlderThan in milliseconds hence never quite honoring the readLockMinAge specified.


(minAge != 0 && newLastModified < newOlderThan)


It looks like there should be 
newLastModified = f.getAttrs().getMTime() * 1000; 
to convert this to milliseconds.",
0,CAMEL-9819,Bug,Minor,2.17.0,"2.17.1, 2.18.0","

test

",Resolved,Fixed,"2.17.1, 2.18.0",Andrea Cosentino,David Gordon,0,3,2016-04-05 18:04:56+00:00,2016-04-06 06:53:19+00:00,"When performing a clean build after a fresh clone of camel, the camel-jetty8 component fails to compile due to a missing org.apache.httpcomponents.httpclient dependency.


The camel-jetty8 component relies on camel-jetty9 tests:



<configuration>
  <target>
    <copy todir=""target/generated/src/test/java"">
      <fileset dir=""../camel-jetty9/src/test/java"" />
    </copy>
  </target>
</configuration>




My attempted build failed at HttpBridgeBigFormPostRouteTest.java","githubbot:1459852545:2016-04-05T18:35:45.834+0000:1459852545:2016-04-05T18:35:45.834+0000:GitHub user davgordo opened a pull request:

    https://github.com/apache/camel/pull/930

    CAMEL-9819: add httpclient to camel-jetty9 test dependencies

    The camel-jetty8 component fails to compile for me because of a problem with a missing dependency, described here: [CAMEL-9819](https://issues.apache.org/jira/browse/CAMEL-9819)

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/davgordo/camel CAMEL-9819

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/930.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #930
    
----
commit 0437f7db6be6e259962185069e75313b2b54748b
Author: David Gordon <davgordo@redhat.com>
Date:   2016-04-05T18:28:36Z

    CAMEL-9819: add httpclient from org.apache.httpcomponents to test dependencies for camel-jetty9

----

acosentino:1459853189:2016-04-05T18:46:29.374+0000:1459853189:2016-04-05T18:46:29.374+0000:Thanks, my mistake.

I forget to add the dependency on jetty8 too.

Many thanks :-)
githubbot:1459853325:2016-04-05T18:48:45.546+0000:1459853325:2016-04-05T18:48:45.546+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/930

acosentino:1459853502:2016-04-05T18:51:42.333+0000:1459853502:2016-04-05T18:51:42.333+0000:[~aphelio], many thanks! :-)

Fixed!
aphelio:1459853585:2016-04-05T18:53:05.838+0000:1459853585:2016-04-05T18:53:05.838+0000:My pleasure. It's an honor to contribute to Camel for the first time! :)))
acosentino:1459896799:2016-04-06T06:53:19.805+0000:1459896799:2016-04-06T06:53:19.805+0000:We love contributions :-)"
0,CAMEL-9818,Improvement,Minor,2.17.0,"2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.17.1, 2.18.0",Andrea Cosentino,Jose Luis Pedrosa,0,3,2016-04-05 11:07:55+00:00,2016-04-11 12:28:18+00:00,"Kafka consumer adds properties that belong to the 0.8.X driver version, generating warning when startign the consumer.


example log:



14:45:33,840 WARN  [org.apache.kafka.clients.consumer.ConsumerConfig] (ServerService Thread Pool -- 76) The configuration sasl.kerberos.ticket.renew.window.factor = 0.8 was supplied but isn't a known config.
14:45:33,841 WARN  [org.apache.kafka.clients.consumer.ConsumerConfig] (ServerService Thread Pool -- 76) The configuration sasl.kerberos.kinit.cmd = /usr/bin/kinit was supplied but isn't a known config.
14:45:33,841 WARN  [org.apache.kafka.clients.consumer.ConsumerConfig] (ServerService Thread Pool -- 76) The configuration sasl.kerberos.ticket.renew.jitter = 0.05 was supplied but isn't a known config.
14:45:33,841 WARN  [org.apache.kafka.clients.consumer.ConsumerConfig] (ServerService Thread Pool -- 76) The configuration ssl.keystore.type = JKS was supplied but isn't a known config.
14:45:33,841 WARN  [org.apache.kafka.clients.consumer.ConsumerConfig] (ServerService Thread Pool -- 76) The configuration ssl.trustmanager.algorithm = PKIX was supplied but isn't a known config.
14:45:33,841 WARN  [org.apache.kafka.clients.consumer.ConsumerConfig] (ServerService Thread Pool -- 76) The configuration sasl.kerberos.min.time.before.relogin = 60000 was supplied but isn't a known config.
14:45:33,841 WARN  [org.apache.kafka.clients.consumer.ConsumerConfig] (ServerService Thread Pool -- 76) The configuration ssl.protocol = TLS was supplied but isn't a known config.
14:45:33,841 WARN  [org.apache.kafka.clients.consumer.ConsumerConfig] (ServerService Thread Pool -- 76) The configuration ssl.enabled.protocols = TLSv1.2,TLSv1.1,TLSv1 was supplied but isn't a known config.
14:45:33,841 WARN  [org.apache.kafka.clients.consumer.ConsumerConfig] (ServerService Thread Pool -- 76) The configuration ssl.truststore.type = JKS was supplied but isn't a known config.
14:45:33,841 WARN  [org.apache.kafka.clients.consumer.ConsumerConfig] (ServerService Thread Pool -- 76) The configuration ssl.keymanager.algorithm = SunX509 was supplied but isn't a known config.




Thanks!","anbumani.balusamy:1459838880:2016-04-05T14:48:00.434+0000:1459838880:2016-04-05T14:48:00.434+0000:[~ancosen]/[~jlpedrosa]

All the Properties which are emitted in log as Warning message are related to Kafka version 0.9. Security features were added starting from Kafka 0.9 version only. Please refer this link for http://kafka.apache.org/documentation.html#security more info

Thanks!
Anbu
acosentino:1459839269:2016-04-05T14:54:29.598+0000:1459839269:2016-04-05T14:54:29.598+0000:Do you mean the Kafka cluster used for testing and logging these messages is older than 0.9?
jlpedrosa:1459842453:2016-04-05T15:47:33.562+0000:1459842543:2016-04-05T15:49:03.460+0000:for the record, 
a) This message is produced in the client side, (version 0.9.0.1)
b) The server side version iskafka_2.11-0.9.0.0


anbumani.balusamy:1459922032:2016-04-06T13:53:52.153+0000:1459922032:2016-04-06T13:53:52.153+0000:[~ancosen]

I am referring the Kafka consumer/producer properties. Properties (Keys like sasl.kerberos.kinit.cmd) which are logged as WARN messgaes are  kafka 0.9 version property and not legacy one (0.8.X driver version)
acosentino:1460090823:2016-04-08T12:47:03.588+0000:1460090823:2016-04-08T12:47:03.588+0000:There are 3 properties that are deprecated. I'll remove it.

The others, that are producing the Warnings are all from version 0.9.x as [~anbumani.balusamy] commented.

Need further investigations. Maybe it is something from Apache Kafka project.
jlpedrosa:1460348898:2016-04-11T12:28:18.543+0000:1460348898:2016-04-11T12:28:18.543+0000:Thanks! [~ancosen]"
0,CAMEL-9817,New Feature,Minor,None,,"
None
",Resolved,Duplicate,None,Unassigned,Fabrizio Spataro,0,2,2016-04-05 10:10:49+00:00,2016-05-24 08:50:51+00:00,"Hello, 


It would be useful to limit the creation of swagger api (eg in production need not be present)


according to this post: http://camel.465427.n5.nabble.com/Limit-swagger-API-tp5778791p5778799.html","davsclaus:1459826188:2016-04-05T11:16:28.947+0000:1459826188:2016-04-05T11:16:28.947+0000:Its already possible. Set apiDocs=false on the ones to hide
fabryprog:1464051051:2016-05-24T08:50:51.397+0000:1464051051:2016-05-24T08:50:51.397+0000:Hello,

can i have an example to apiDocs=false?

Thkx"
0,CAMEL-9816,Improvement,Major,2.17.0,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,1,2016-04-05 09:43:42+00:00,2016-04-05 11:21:20+00:00,Calling the cache method will cache the IN message. But if we have an OUT we should cache that instead.,
0,CAMEL-9815,Improvement,Minor,2.17.0,"2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.17.1, 2.18.0",Claus Ibsen,Fabian Chanton,0,3,2016-04-05 07:46:22+00:00,2016-04-06 05:25:56+00:00,"Certain servers require to declare a queue on an existing exchange (e.g. the standard exchange without a name).
These servers don't allow to re declare these existing exchanges.


In this case it would be helpful to have an option similar to the skipQueueDeclare option.","githubbot:1459819684:2016-04-05T09:28:04.522+0000:1459819684:2016-04-05T09:28:04.522+0000:GitHub user FabianChanton opened a pull request:

    https://github.com/apache/camel/pull/928

    CAMEL-9815 Add URI parameter to skip declaration of exchange

    As described in [CAMEL-9815](https://issues.apache.org/jira/browse/CAMEL-9815) it could be helpful to skip the declaration of the exchange (because it exists already). I propose this could be done via an URI parameter ""skipExchangeDeclare"", similar to ""skipQueueDeclare""

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/FabianChanton/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/928.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #928
    
----
commit eb85ef59e79a43111da9cf373524a37f64167047
Author: Fabian Chanton <fabian.chanton@misurio.ch>
Date:   2016-04-05T09:21:06Z

    CAMEL-9815 Add URI parameter to skip declaration of exchange

----

githubbot:1459891548:2016-04-06T05:25:48.241+0000:1459891548:2016-04-06T05:25:48.241+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/928

davsclaus:1459891556:2016-04-06T05:25:56.760+0000:1459891556:2016-04-06T05:25:56.760+0000:Thanks for the PR"
0,CAMEL-9814,New Feature,Major,None,Future,"
None
",Resolved,Won't Fix,Future,Unassigned,Matt Pavlovich,0,1,2016-04-04 19:59:11+00:00,2022-09-02 09:17:43+00:00,"It would be really handy to have a top-level configuration that Contexts and Routes can inherit a set of default values.


This would allow developers to reduce the complexity and verboseness of routes as well as allow administrators to set defaults for an environment.


Types of settings:


Tracing: on/off
Jmx Enabled, mbean port, URL, etc
DefaultShutdownStrategy timeout
etc.",
0,CAMEL-9813,Bug,Major,2.17.0,2.19.0,"
None
",Resolved,Fixed,2.19.0,Unassigned,Jose Luis Pedrosa,0,2,2016-04-04 18:25:00+00:00,2016-10-28 09:13:14+00:00,"Hi All


i've been investigaten after I found the same issue as described in the email chain (http://camel.465427.n5.nabble.com/Zookeeper-Route-Policy-not-respected-on-route-with-sftp-consumer-td5771610.html)


The issue lies in the fact that ZookeeperRoutePolicy (ZRP from now on) waits to check if that node is master after the first message have been recived (which causes exception in the logs, and of course attempts to process messages).


What it does is simply throw an exception if we are not master... which stops the route, sounds like we should not even the start the route in the first place if we are not master. 


I've been playing around, trying to implement the first check in the onStart or onInit, the problem is that ZRP depends on a internal route injected on the policy, I guess that is why the original developer did it in ExchangeBegin instead of in start or onInit, to overcome the issue.



   private class ElectoralMonitorRoute extends RouteBuilder {
...
...
            from(zep).id(""election-route-"" + candidateName).sort(body(), comparator).process(new Processor() {
                @Override
                public void process(Exchange e) throws Exception {
                    @SuppressWarnings(""unchecked"")
                    List<String> candidates = e.getIn().getMandatoryBody(List.class);
                    // we cannot use the binary search here and the candidates a not sorted in the normal way
                    /**
                     * check if the item at this location starts with this nodes
                     * candidate name
                     */
                    int location = findCandidateLocationInCandidatesList(candidates, candidateName); 
                    if (location != -1) {
                        // set the nodes
                        masterNode.set(location <= enabledCount);
                        LOG.debug(""This node is number '{}' on the candidate list, election is configured for the top '{}'. this node will be {}"",
                                new Object[]{location, enabledCount, masterNode.get() ? ""enabled"" : ""disabled""}
                        );
                    }
                    electionComplete.countDown();

                    notifyElectionWatchers();
                }




which makes a route dependant on another to start, which is hard to solve in a clean way.


Also i found that for some routes (my case) it also does not start them automatically because they are stopped and not suspended:



  public static boolean resumeService(Object service) throws Exception {
        if (service instanceof SuspendableService) {
            SuspendableService ss = (SuspendableService) service;
            if (ss.isSuspended()) {
                LOG.debug(""Resuming service {}"", service);
                ss.resume();
                return true;
            } else {
                return false;
            }
        } else {
            startService(service);
            return true;
        }
    }","jlpedrosa:1459825998:2016-04-05T11:13:18.471+0000:1459825998:2016-04-05T11:13:18.471+0000:Hi
I've been reviewing this in detail, I think this implementation is broken by design.

A route to start correctly depends on another route that is created by the first route (the option chosen by the original developer of wait to the first message to trigger the failure does not seem good enough to my point of view). I'm working on a RoutePolicy implemented usign curator on top of zookeeper, seems simple, if it works fine, I'll suply the code.
[~davsclaus] any feedback?

jlpedrosa:1459849964:2016-04-05T17:52:44.194+0000:1459849964:2016-04-05T17:52:44.194+0000:Hi, 
I've been made a working implementation using curator. It would need a litlte bit of javadoc and maybe polish, but functional without loosing messages. 


davsclaus:1459891063:2016-04-06T05:17:43.501+0000:1459891063:2016-04-06T05:17:43.501+0000:Jose sounds good about Curator. There is an existing ticket about that CAMEL-6924
jlpedrosa:1460096789:2016-04-08T14:26:29.492+0000:1460096789:2016-04-08T14:26:29.492+0000:I'll review that issue, my implementation only covers RoutePolicy, not Consumer or producer.

Is it good enough to start a new component? camel-curator? or should we use zookpeer name and use curator on top?

JL
davsclaus:1460152196:2016-04-09T05:49:56.200+0000:1460152196:2016-04-09T05:49:56.200+0000:Yeah use curator on top of zookeeper. curator is for using zk easier.
davsclaus:1473123431:2016-09-06T08:57:11.405+0000:1473123431:2016-09-06T08:57:11.405+0000:I think [~lb] fixed this yesterday.
lb:1473125358:2016-09-06T09:29:18.202+0000:1473125358:2016-09-06T09:29:18.202+0000:Not yet for zookeeper, should work on this before eow"
0,CAMEL-9812,Bug,Major,2.17.0,"2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.17.1, 2.18.0",Andrea Cosentino,Jose Luis Pedrosa,0,3,2016-04-04 13:00:56+00:00,2016-04-05 11:19:48+00:00,"After shutting down a camel context, there are still threads running kafka consumers. 


In the logs after the shutdown I can see:



14:45:57,455 INFO  [org.apache.camel.spring.SpringCamelContext] (ServerService Thread Pool -- 81) Apache Camel 2.17.0 (CamelContext: ucms-camel-ctx) uptime 25.047 seconds
14:45:57,455 INFO  [org.apache.camel.spring.SpringCamelContext] (ServerService Thread Pool -- 81) Apache Camel 2.17.0 (CamelContext: ucms-camel-ctx) is shutdown in 0.856 seconds
14:45:57,494 INFO  [org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean] (ServerService Thread Pool -- 81) Closing JPA EntityManagerFactory for persistence unit 'default'
14:45:57,652 INFO  [org.jboss.as.server.deployment] (MSC service thread 1-3) WFLYSRV0028: Stopped deployment ucms-wildfly-container-3.0.1-SNAPSHOT.war (runtime-name: ucms-wildfly-container-3.0.1-SNAPSHOT.war) in 1098ms
14:45:57,906 INFO  [org.jboss.as.repository] (DeploymentScanner-threads - 2) WFLYDR0002: Content removed from location /opt/wildfly/standalone/data/content/20/13979a02e4b4ec178461d06c2de59fbf424215/content
14:45:57,916 INFO  [org.jboss.as.server] (DeploymentScanner-threads - 2) WFLYSRV0009: Undeployed ""ucms-wildfly-container-3.0.1-SNAPSHOT.war"" (runtime-name: ""ucms-wildfly-container-3.0.1-SNAPSHOT.war"")
14:46:24,972 INFO  [org.apache.kafka.clients.consumer.internals.AbstractCoordinator] (Camel (ucms-camel-ctx) thread #0 - KafkaTopic[ucmsControlTopic]) Marking the coordinator 2147483647 dead.
14:46:26,467 INFO  [org.apache.kafka.clients.consumer.internals.AbstractCoordinator] (Camel (ucms-camel-ctx) thread #2 - KafkaTopic[TOPIC1]) Marking the coordinator 2147483647 dead.




So in theory the context is stopped, but I can see threads running with the polling of the sockets of kafka consumers (see attached immage).


This deployed in an application server (wilfly in my case), causes a lot of issues, because apps get deployed and undeployed without stopping the  JVM, but threads from previous deployments are left there.


Please also bear in mind that kafka (9.0.1) throws warning messages due to the fact that un expected config items are thrown to the kafka consumer properties.



14:45:33,840 WARN  [org.apache.kafka.clients.consumer.ConsumerConfig] (ServerService Thread Pool -- 76) The configuration sasl.kerberos.ticket.renew.window.factor = 0.8 was supplied but isn't a known config.
14:45:33,841 WARN  [org.apache.kafka.clients.consumer.ConsumerConfig] (ServerService Thread Pool -- 76) The configuration sasl.kerberos.kinit.cmd = /usr/bin/kinit was supplied but isn't a known config.
14:45:33,841 WARN  [org.apache.kafka.clients.consumer.ConsumerConfig] (ServerService Thread Pool -- 76) The configuration sasl.kerberos.ticket.renew.jitter = 0.05 was supplied but isn't a known config.
14:45:33,841 WARN  [org.apache.kafka.clients.consumer.ConsumerConfig] (ServerService Thread Pool -- 76) The configuration ssl.keystore.type = JKS was supplied but isn't a known config.
14:45:33,841 WARN  [org.apache.kafka.clients.consumer.ConsumerConfig] (ServerService Thread Pool -- 76) The configuration ssl.trustmanager.algorithm = PKIX was supplied but isn't a known config.
14:45:33,841 WARN  [org.apache.kafka.clients.consumer.ConsumerConfig] (ServerService Thread Pool -- 76) The configuration sasl.kerberos.min.time.before.relogin = 60000 was supplied but isn't a known config.
14:45:33,841 WARN  [org.apache.kafka.clients.consumer.ConsumerConfig] (ServerService Thread Pool -- 76) The configuration ssl.protocol = TLS was supplied but isn't a known config.
14:45:33,841 WARN  [org.apache.kafka.clients.consumer.ConsumerConfig] (ServerService Thread Pool -- 76) The configuration ssl.enabled.protocols = TLSv1.2,TLSv1.1,TLSv1 was supplied but isn't a known config.
14:45:33,841 WARN  [org.apache.kafka.clients.consumer.ConsumerConfig] (ServerService Thread Pool -- 76) The configuration ssl.truststore.type = JKS was supplied but isn't a known config.
14:45:33,841 WARN  [org.apache.kafka.clients.consumer.ConsumerConfig] (ServerService Thread Pool -- 76) The configuration ssl.keymanager.algorithm = SunX509 was supplied but isn't a known config.




Thanks!","davsclaus:1459749387:2016-04-04T13:56:27.882+0000:1459749387:2016-04-04T13:56:27.882+0000:Thanks for reporting. Sound like the consumer need to call some stop/shutdown on kafka somewhere if its not already doing that, or missing something.
acosentino:1459749504:2016-04-04T13:58:24.430+0000:1459749504:2016-04-04T13:58:24.430+0000:I will take a look :-)
acosentino:1459819395:2016-04-05T09:23:15.864+0000:1459819439:2016-04-05T09:23:59.792+0000:It seems we weren't closing the consumer. Now it should be ok.

I guess we should take a look to Consumer Group to make possible the use of multiple consumers on the same topics.

Also we need to review the kafka properties, but I guess this should be in another JIRA
jlpedrosa:1459821775:2016-04-05T10:02:55.887+0000:1459821775:2016-04-05T10:02:55.887+0000:Do you want me to open the other ticket?
acosentino:1459823054:2016-04-05T10:24:14.422+0000:1459823054:2016-04-05T10:24:14.422+0000:Yes, please :-) This way we can trace better.
jlpedrosa:1459825693:2016-04-05T11:08:13.969+0000:1459825693:2016-04-05T11:08:13.969+0000:done, https://issues.apache.org/jira/browse/CAMEL-9818
acosentino:1459826388:2016-04-05T11:19:48.186+0000:1459826388:2016-04-05T11:19:48.186+0000:Thanks :-)"
0,CAMEL-9811,Improvement,Major,None,"2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.17.1, 2.18.0",Antonin Stefanutti,Antonin Stefanutti,0,1,2016-04-04 12:04:08+00:00,2017-03-03 11:01:35+00:00,No Desc,
0,CAMEL-9810,Task,Major,None,,"
None
",Resolved,Fixed,None,Claus Ibsen,Claus Ibsen,0,2,2016-04-04 11:57:58+00:00,2016-04-14 12:32:36+00:00,"To not forget about this
http://camel.465427.n5.nabble.com/Cleanup-remote-branches-tp5780146.html",
0,CAMEL-9809,Bug,Major,2.14.4,,"
None
",Resolved,Invalid,None,Claus Ibsen,Rhushikesh Ganesh Apte,0,2,2016-04-04 11:36:38+00:00,2016-04-04 11:52:52+00:00,I am trying to use proxy setting in my apche camel context. Now for few of my internal network http endpoints I want to exclude these proxy settings but I am not able to.,davsclaus:1459741972:2016-04-04T11:52:52.016+0000:1459741972:2016-04-04T11:52:52.016+0000:Use the user mailing list or user forum to get help with Camel
0,CAMEL-9808,Improvement,Major,None,"2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.17.1, 2.18.0",Claus Ibsen,Thomas Küstermann,0,3,2016-04-04 11:01:55+00:00,2016-04-05 05:49:52+00:00,"JSch uses multiple requests to pull files from / push files to a SFTP server. The number of bulk requests can be configured via ChannelSftp#setBulkRequests(int). The API documentation states that increasing this value may slightly improve file transfer speed at the cost of memory usage.


The configuration option should be made available in Camel.


Background


I came across an issue with a specific SFTP server product. I tracked this issue down to the way bulk requests are sent to the SFTP server. To cut a long story short (details here) setting the number of bulk requests to 1 solves the problem, so it would be nice to have this option available via Camel.","githubbot:1459739714:2016-04-04T11:15:14.000+0000:1459739714:2016-04-04T11:15:14.000+0000:GitHub user thokuest opened a pull request:

    https://github.com/apache/camel/pull/927

    CAMEL-9808: SFTP: Enable configuration of bulk requests

    This pull request makes it possible to configure the number of bulk requests issued by JSch. Increasing the number of bulk requests may slightly improve transfer speed at the cost of memory usage.
    
    Usage:
    
        sftp://nosuchhost/workingdir?bulkRequests=64&...
    
    See [CAMEL-9808](https://issues.apache.org/jira/browse/CAMEL-9808) for details.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/thokuest/camel CAMEL-9808

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/927.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #927
    
----
commit f563517ddbc8b3569b98deafaad8936b129140b3
Author: Thomas Küstermann <thokuest@outlook.com>
Date:   2016-04-04T10:24:30Z

    Merge remote-tracking branch 'refs/remotes/apache/master'

commit 1e19ed04a93bc904a64974bbd2e536379f667003
Author: Thomas Küstermann <thokuest@outlook.com>
Date:   2016-04-04T11:05:36Z

    CAMEL-9808: Enable configuration of bulk requests

----

davsclaus:1459744741:2016-04-04T12:39:01.159+0000:1459744741:2016-04-04T12:39:01.159+0000:Thanks I put some comments in the PR as there is some code formatting changes needed.

You can read about building with checkstyle here
http://camel.apache.org/building
davsclaus:1459748916:2016-04-04T13:48:36.895+0000:1459748916:2016-04-04T13:48:36.895+0000:Thanks for the PR
githubbot:1459749995:2016-04-04T14:06:35.331+0000:1459749995:2016-04-04T14:06:35.331+0000:Github user thokuest closed the pull request at:

    https://github.com/apache/camel/pull/927

thokuest:1459764109:2016-04-04T18:01:49.113+0000:1459764109:2016-04-04T18:01:49.113+0000:Is there any documentation that requires ti be updated and I am allowed to contribute to?
davsclaus:1459806592:2016-04-05T05:49:52.995+0000:1459806592:2016-04-05T05:49:52.995+0000:See here how to be able to edit the docs
http://camel.apache.org/how-do-i-edit-the-website.html

I have updated the wiki page with the new option"
0,CAMEL-9807,Bug,Major,2.16.2,"2.16.4, 2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.16.4, 2.17.1, 2.18.0",Claus Ibsen,Joerg Heinicke,0,2,2016-04-04 10:30:25+00:00,2016-04-04 12:35:08+00:00,"Hi,
by chance we found a problem that can create a security risk. The scenario is a CXF WS consumer endpoint configured without WSDL and right after that a step, e.g. a setHeader that uses an XPath to access the CXF payload. When you now create a http GET request on the endpoint (normally it should be POST) then the error No type converter available to convert from type: org.apache.camel.component.cxf.converter.CachedCxfPayload to the required type: javax.xml.transform.sax.SAXSource with value org.apache.camel.component.cxf.converter.CachedCxfPayload@45812dad
is thrown.
First of all it is surprising that CXF accepts the request. Second a type conversion like that is possible. The reason for this error message is within the type converter coding. The converter returns a null object for the not existing payload of the GET request but this is interpreted as there is no type converter available. One could say that this is just a bad error message but more over the type converter is now kind of black-listed internally. That means the next calls being correct or wrong will not look for a type converter but return immedeately the above error. That means the endpoint is blocked until the scenario is restarted. This seems to be more efficient than a DOS attack (but of course one has to have access rights). I provide a simple patch that raises a runtime exception in the CXF type converter when there is no payload. I am not 100% sure whether this is the best way to fix it. Maybe GET requests should be blocked already in CXF. I also could imagine that somethin like that is also possible in other components. 
We use Camel 2.16.2 and I tested it in CXF 2.16.3 and it is not fixed.",davsclaus:1459744508:2016-04-04T12:35:08.746+0000:1459744508:2016-04-04T12:35:08.746+0000:Thanks for reporting and the patch. I modified it a bit and added a 2nd test that does a bit more testing.
0,CAMEL-9806,Task,Minor,None,"2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.17.1, 2.18.0",Andrea Cosentino,Andrea Cosentino,0,1,2016-04-04 10:15:54+00:00,2016-04-04 12:06:24+00:00,The IronMQ bundle has been released. We can add the Karaf feature for this component.,
0,CAMEL-9805,Bug,Major,2.17.0,"2.16.4, 2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.16.4, 2.17.1, 2.18.0",Andrea Cosentino,Thomas Bender,0,3,2016-04-04 06:24:11+00:00,2016-04-28 08:15:57+00:00,"When using the options outputHeader and outputType=SelectOne the body of the Exchange is not copied from in to out when the select returns no data..


Probably root is line 175-185 of SqlProducer.java that is missing an else for the above mentioned case.



if (data != null) { // <--- Missing the else
// for noop=true we still want to enrich with the row count header
  if (getEndpoint().isNoop()) {
    exchange.getOut().setBody(exchange.getIn().getBody());
  } else if (getEndpoint().getOutputHeader() != null) {
    exchange.getOut().setBody(exchange.getIn().getBody());
    exchange.getOut().setHeader(getEndpoint().getOutputHeader(), data);
  } else {
    exchange.getOut().setBody(data); 
  }
  exchange.getOut().setHeader(SqlConstants.SQL_ROW_COUNT, 1);
}




following could be added (untested)



else { // if data == null
if (getEndpoint().isNoop()) {
                                        exchange.getOut().setBody(exchange.getIn().getBody());
                                    } else if (getEndpoint().getOutputHeader() != null) {
                                        exchange.getOut().setBody(exchange.getIn().getBody());
                                    }
 exchange.getOut().setHeader(SqlConstants.SQL_ROW_COUNT, 0);
}","Thomas.Bender@flatironssolutions.com:1459722361:2016-04-04T06:26:01.525+0000:1459722361:2016-04-04T06:26:01.525+0000:Attached a testcase.
davsclaus:1461798766:2016-04-28T07:12:46.550+0000:1461798766:2016-04-28T07:12:46.550+0000:Andrea do you have time to work on this today so we can get this fixed in the upcoming 2.17.1 release?
acosentino:1461798873:2016-04-28T07:14:33.929+0000:1461798873:2016-04-28T07:14:33.929+0000:Yes, sorry I forget about this issue.
acosentino:1461802557:2016-04-28T08:15:57.107+0000:1461802557:2016-04-28T08:15:57.107+0000:Resolved.

[~Thomas.Bender@flatironssolutions.com], sorry for the delay. Thanks for spotting this and for the test case too."
0,CAMEL-9804,Bug,Major,2.17.0,,"
None
",Resolved,Invalid,None,Claus Ibsen,martin scharm,0,2,2016-04-03 15:27:00+00:00,2016-04-04 06:09:32+00:00,"I tried to implement a simple XMPP bot, but reading and responding to the same XMPP chat seems to fail: The bot sends the message to itself.


The endpoint is created like the following:



String
userA = ""bot"",
userB = ""human"",
server = ""SERVER"",
port = ""5222"",
passwordA = ""secret"";

final String chatEndpoint =
      String.format(""xmpp://%s@%s:%s/%s@%s?password=%s"",
              userA, server, port,
              userB, server, passwordA);




which produces an endpoint such as xmpp://bot@SERVER:5222/human@SERVER?password=secret, so the bot authenticates with SERVER and it will talk to human@SERVER.


The bot is able to read from XMPP and dump the messages to std::out:



from(chatEndpoint)
.to(""stream:out"");




And the bot is able to send XMPP messages:



from(""timer://foo?fixedRate=true&period=1000"")
.setBody(constant(""test""))
.to(chatEndpoint); 




So far, I'm really impressed 


However, simply responding the human's message fails:



from(chatEndpoint)
.to(chatEndpoint);




My XMPP server (prosody) shows me, that the bot sends the messages to itself:



debug   Received[c2s]: <message id='g0x1L-5' type='chat' to='bot@SERVER' from='bot@SERVER/Camel'>




But I have no idea why.. Am I doing something wrong?
I tried adding &participant=human@SERVER to the chatEndpoint which doesn't solve the issue. I also tried to create two separate chat endpoints with different resource names, but that didn't work either.","davsclaus:1459721372:2016-04-04T06:09:32.528+0000:1459721372:2016-04-04T06:09:32.528+0000:Please use the user mailing list / user forum to get help / ask questions first
http://camel.apache.org/mailing-lists.html
http://camel.apache.org/discussion-forums.html"
0,CAMEL-9803,Improvement,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Andrea Cosentino,Andrea Cosentino,0,1,2016-04-03 09:55:46+00:00,2016-04-03 10:21:44+00:00,Jnats is mature now and java_nats is deprecated. So I think it is time to switch to the newer client.,acosentino:1459650104:2016-04-03T10:21:44.358+0000:1459650104:2016-04-03T10:21:44.358+0000:Switched. For the moment we will use the jnats jar wrapped in the camel-nats feature. I will create the bundle in the next release of the SMX bundles
0,CAMEL-9802,Improvement,Major,None,Future,"

maven

",Resolved,Won't Fix,Future,Greg A.,Claus Ibsen,0,2,2016-04-03 09:52:59+00:00,2017-02-13 12:38:57+00:00,"We should make the Camel examples not use a parent, but use Camel BOM instead, to make them standalone.","aphelio:1460031243:2016-04-07T20:14:03.125+0000:1460031243:2016-04-07T20:14:03.125+0000:I like this idea, because I think small, individually deployable examples not only makes the examples easier to experiment with, but it also sort of fits in with the spirit of microservices. I'm willing to help out with this, but I'd like to bounce some thoughts around first before getting too far into refactoring.

- Introducing the a BOM component to the individual example POMs eliminates some concerns that are currently handled at the parent (or grandparent) POM level, but just that change alone would not allow us to break away from the hierarchy altogether, right?
- I'm interpreting the scope of this issue to be not only introducing the BOM in the example POM, but also any additional refactoring that would eliminate the need for POM inheritance altogether. Am I making the scope too big, or can we generally agree on that interpretation?
- For any remaining configurations that are inherited from the parent or grandparent, I think my approach would be to push them down into the individual example POMs, essentially as-is. Am I oversimplifying? 
- I believe this would end up resulting in a fair amount of repetitive XML across example modules, but given the goals of this enhancement, is that an acceptable thing?
davsclaus:1460064583:2016-04-08T05:29:43.860+0000:1460064583:2016-04-08T05:29:43.860+0000:The example should import the Camel BOM as a dependencyManagement.

Something like wildfly-camel does here
https://github.com/wildfly-extras/wildfly-camel/blob/master/pom.xml#L169

And then the example should not have a parent, so they are standalone.
That should actually be around the same amount of xml

- remove parent
- add dependency management for Camel BOM

davsclaus:1460152148:2016-04-09T05:49:08.484+0000:1460152148:2016-04-09T05:49:08.484+0000:I have modified the archetypes to import BOM, so take a look at the camel-archetype-java etc for an example
davsclaus:1461812511:2016-04-28T11:01:51.756+0000:1461812511:2016-04-28T11:01:51.756+0000:Greg how is it going?"
0,CAMEL-9801,Improvement,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,1,2016-04-03 09:52:12+00:00,2016-04-08 06:34:02+00:00,We should import the Camel BOM (camel-parent) in the archetypes.,
0,CAMEL-9800,New Feature,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Gregor Zurowski,Gregor Zurowski,0,2,2016-04-02 19:39:56+00:00,2017-03-05 17:37:16+00:00,"Create a new Camel example showing how work with Spring Boot, Camel REST DSL and Swagger.","davsclaus:1488516169:2017-03-03T12:42:49.114+0000:1488516169:2017-03-03T12:42:49.114+0000:Contributions is welcome

camel-example-swagger-spring-boot

Take a look at the other examples and do it using spring boot
gzurowski:1488706096:2017-03-05T17:28:16.010+0000:1488706096:2017-03-05T17:28:16.010+0000:I have added the new example, it is available here: https://github.com/apache/camel/tree/master/examples/camel-example-spring-boot-rest-swagger"
0,CAMEL-9799,New Feature,Major,None,None,"
None
",Resolved,Fixed,2.20.0,Claus Ibsen,Andreas Gebhardt,2,5,2016-04-02 15:05:45+00:00,2017-10-07 08:59:50+00:00,"> Von: Gnanaguru S
> An: ★ dev@camel.apache.org
>
> Subject: [DISCUSS] - Thoughts on Apache Camel 2.18 and towards 3.0
>
> [...]
> 7.  JSON validator. XML XSD validation is nice and straight forward, but it
> will be great if we have something similar for JSON as well. like
> to:json-validator:classpath/response.json
> [...]","davsclaus:1460163443:2016-04-09T08:57:23.782+0000:1460163443:2016-04-09T08:57:23.782+0000:There is a json schema validator module here
https://github.com/jayway/rest-assured/tree/master/modules/json-schema-validator

The rest assured test library is pretty awesome from jawyay
agebhar1:1460258356:2016-04-10T11:19:16.757+0000:1460258356:2016-04-10T11:19:16.757+0000:Hi Claus,

I didn't knew this library but from the given examples I will play around with 'REST Assured'. Under the hood they rely on the (reference) Java implementation of https://github.com/fge/json-schema-validator. Where Francis Galiegue is also one of the authors of 'JSON Schema' http://json-schema.org/. The definition has draft status at v4 (https://tools.ietf.org/html/draft-zyp-json-schema-04) and there is a current discussion towards v5 https://github.com/json-schema/json-schema/issues/167. Another implementation in Java is mentioned on the `Implementation` part on JSON Schemas official web site, https://github.com/everit-org/json-schema.

Should the component support both versions as asked on the `dev` channel http://camel.465427.n5.nabble.com/DISCUSS-Thoughts-on-Apache-Camel-2-18-and-towards-3-0-tp5779549p5780376.html or rely on the (reference) implementation of `fge/json-schema-validator` - what do you think?

Best Andreas

PS: another draft for JSON content validation exists: https://datatracker.ietf.org/doc/draft-newton-json-content-rules/
davsclaus:1460428931:2016-04-12T10:42:11.044+0000:1460428931:2016-04-12T10:42:11.044+0000:Good question.

It seems the latter is the most active developed and maybe what we should try
https://github.com/everit-org/json-schema

What do you think?
agebhar1:1460633224:2016-04-14T19:27:04.987+0000:1460633224:2016-04-14T19:27:04.987+0000:I agree, https://github.com/everit-org/json-schema is at most active developed. If I'm not wrong the failure/validation report seems friendlier than that of https://github.com/fge/json-schema-validator.

The implementation from everit-org is absolutely fine with me. However, I will do some prototyping with both implementations in case of capabilities for configuration. If it's done I'll post the github link.

Is it OK for you?
davsclaus:1460669616:2016-04-15T05:33:36.273+0000:1460669616:2016-04-15T05:33:36.273+0000:Andreas, yes that is a good plan
agebhar1:1460891669:2016-04-17T19:14:29.164+0000:1460892151:2016-04-17T19:22:31.225+0000:Hi Claus,

a short intermediate status on comparison of both Java based JSON schema validators. This https://github.com/agebhar1/json-schema-validator-battle is the repository. It's a Maven based multi-module Java project. A module for each JSON schema validator, because of there dependencies and one for schema and example resources.

*Dependencies*

{code:title=com.github.fge:json-schema-validator:jar:2.2.6}
 +- com.github.fge:json-schema-validator:jar:2.2.6:compile
    +- com.google.code.findbugs:jsr305:jar:3.0.0:compile
    +- joda-time:joda-time:jar:2.3:compile
    +- com.googlecode.libphonenumber:libphonenumber:jar:6.2:compile
    +- com.github.fge:json-schema-core:jar:1.2.5:compile
    |  +- com.github.fge:uri-template:jar:0.9:compile
    |  |  +- com.github.fge:msg-simple:jar:1.1:compile
    |  |  |  \- com.github.fge:btf:jar:1.2:compile
    |  |  \- com.google.guava:guava:jar:16.0.1:compile
    |  +- com.github.fge:jackson-coreutils:jar:1.8:compile
    |  |  \- com.fasterxml.jackson.core:jackson-databind:jar:2.2.3:compile
    |  |     +- com.fasterxml.jackson.core:jackson-annotations:jar:2.2.3:compile
    |  |     \- com.fasterxml.jackson.core:jackson-core:jar:2.2.3:compile
    |  \- org.mozilla:rhino:jar:1.7R4:compile
    +- javax.mail:mailapi:jar:1.4.3:compile
    |  \- javax.activation:activation:jar:1.1:compile
    \- net.sf.jopt-simple:jopt-simple:jar:4.6:compile
{code}

{code:title=org.everit.json:org.everit.json.schema:jar:1.2.0}
 +- org.everit.json:org.everit.json.schema:jar:1.2.0:compile
    +- org.json:json:jar:20160212:compile
    +- com.google.guava:guava:jar:19.0:compile
    \- commons-validator:commons-validator:jar:1.5.0:compile
       +- commons-beanutils:commons-beanutils:jar:1.9.2:compile
       +- commons-digester:commons-digester:jar:1.8.1:compile
       +- commons-logging:commons-logging:jar:1.2:compile
       \- commons-collections:commons-collections:jar:3.2.2:compile
{code}

The needed dependencies for `fge/json-schema-validator` are much more than that of `everit-org/json-schema`. But `fge/json-schema-validator` depends on the popular Jackson library which might cause some problems if another version is already on the classpath. Both depends on Google's `guava` in which `everit-org/json-schema` makes use of current version 19 whereas `fge/json-schema-validator` on 16.0.1.

*Failure Reports*

Schema:
{code}
{
  ""$schema"" : ""http://json-schema.org/draft-04/schema"",
  ""type"": ""object"",
  ""required"": [
    ""a""
  ],
  ""properties"": {
    ""a"": {
      ""type"": ""string""
    },
    ""b"": {
      ""type"": ""number""
    },
    ""c"": {
      ""type"": ""boolean"" 
    }
  }
}
{code}
Failing Example:

{code}
{
 ""a"": ""foo"",
 ""b"": ""1"",
 ""c"": false
}
{code}

{code:title=everit-org/json-schema}
#/b: expected type: Number, found: String
{code}

{code:title=fge/json-schema-validator}
{
  ""level"": ""error"",
  ""schema"": {
    ""loadingURI"": ""#"",
    ""pointer"": ""/properties/b""
  },
  ""instance"": {
    ""pointer"": ""/b""
  },
  ""domain"": ""validation"",
  ""keyword"": ""type"",
  ""message"": ""instance type (string) does not match any allowed primitive type (allowed: [\""integer\"",\""number\""])"",
  ""found"": ""string"",
  ""expected"": [
    ""integer"",
    ""number""
  ]
}
{code}

So I must revise my statement on failure/error reporting - `fge/json-schema-validator` is obviously more precise. 

Hopefully in the next week I would add more sophisticated examples, maybe based on tests from `fge/json-schema-validator` and/or `everit-org/json-schema`. JSON schema also supports modular style through referencing (sub) schemas. Both implementations provide support which need some investigations. 

What did you think?
erosb:1470644731:2016-08-08T16:25:31.315+0000:1470644770:2016-08-08T16:26:10.326+0000:Hello [~cibsen@e-ma.net] , [~agebhar1] , 

I'm the author of everit-org/json-schema. I found this issue some weeks ago.
Recently I improved the error reporting facilities of the schema library, and I'm going to release the new version this week. Please have a look at the [updated docs|https://github.com/everit-org/json-schema#json-report-of-the-failures] and open a github issue if you need any further improvements regarding validation failure reports.

Thanks.
agebhar1:1470723524:2016-08-09T14:18:44.175+0000:1470723524:2016-08-09T14:18:44.175+0000:Hi [~erosb], cc [~davsclaus],

I'm very sorry but the current project at work either eats up most of my free time or I'm to tired. I hope it'll be better next time. I'll have a look definitely.

Best,
Andreas
pontus.ullgren:1481632946:2016-12-13T20:42:26.408+0000:1481632946:2016-12-13T20:42:26.408+0000:Would it make more sense to add this feature into the existing validation[1] component or should we have JSON validation as a separate component ? 

[~agebhar1] Are you working on this task at the moment or is it up for grabs ?


davsclaus:1481859711:2016-12-16T11:41:51.244+0000:1481859711:2016-12-16T11:41:51.244+0000:The existing validator in camel-bean-validator is using java bean validation. So I think a new component is the best.
pontus.ullgren:1481864691:2016-12-16T13:04:51.573+0000:1481864691:2016-12-16T13:04:51.573+0000:I was thinking on the camel-validation component that currently only does validation for XML based on a few different schema types. 
http://camel.apache.org/validation.html

But it might still be a better idea to do the json as a separate component. 

agebhar1:1482023057:2016-12-18T09:04:17.201+0000:1482023057:2016-12-18T09:04:17.201+0000:As Claus already sad a new component is (currently) the best. Unfortunately I was really to optimistic in case of my free time this year but during vacation from Christmas to New Year's Eve I will hopefully have a look.
pontus.ullgren:1482061483:2016-12-18T19:44:43.507+0000:1482061483:2016-12-18T19:44:43.507+0000:OK thanks for replying. 
Let me know if you need a hand I will have hours to put into this task at the beginning of next year if need be.
pontus.ullgren:1505459138:2017-09-15T15:05:38.504+0000:1505459172:2017-09-15T15:06:12.726+0000:Started to look into this issue again. And started implementing a component based on everit. However since Everit now does it's distribution mainly using jitpack and does not seem to publish on maven central anymore this would require a extra repository entry in the pom.xml. Would this be a problem if/when a PR is created to the Camel project ?

Link as reference
https://github.com/everit-org/json-schema#maven-installation
davsclaus:1505698986:2017-09-18T09:43:06.290+0000:1505698986:2017-09-18T09:43:06.290+0000:We do prefer maven central and try to avoid 3rd party maven repositories as they are more unreliable and causes more problem with building.

However it seems jitpack is a general purpose maven repo, and not a single company own repo so that seems okay in my eyes.
agebhar1:1506221599:2017-09-24T10:53:19.090+0000:1506221599:2017-09-24T10:53:19.090+0000:Thanks [~pontus.ullgren] for taking over this issue. Honestly, I had not consecutive time :(  
pontus.ullgren:1506733702:2017-09-30T09:08:22.467+0000:1506733702:2017-09-30T09:08:22.467+0000:Created https://github.com/apache/camel/pull/1986 comments are welcome.
davsclaus:1507333828:2017-10-07T07:50:28.798+0000:1507333828:2017-10-07T07:50:28.798+0000:Okay merging this and polishing it a bit.

The OSGi bundle of everit has a little problem: https://github.com/everit-org/json-schema/issues/110
davsclaus:1507335869:2017-10-07T08:24:29.929+0000:1507335869:2017-10-07T08:24:29.929+0000:I am renaming the component as it was a bit confusing with the maven artifact id vs the camel component name, and also the package name etc.
davsclaus:1507337990:2017-10-07T08:59:50.380+0000:1507337990:2017-10-07T08:59:50.380+0000:Thanks for the contribution"
0,CAMEL-9798,Improvement,Major,2.17.0,"2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.17.1, 2.18.0",Antonin Stefanutti,Claus Ibsen,0,2,2016-04-02 11:15:35+00:00,2016-04-04 12:32:48+00:00,"We should be able to inject a default producer template using



    @Inject
    private ProducerTemplate template;




Currently that does not work and you get an error (see below)


But if you setup a default endpoint with @Uri it works



    @Inject @Uri(""file:target/inbox"")
    private ProducerTemplate template;




The error you get



org.jboss.weld.exceptions.DeploymentException: WELD-001408: Unsatisfied dependencies for type ProducerTemplate with qualifiers @Default
  at injection point [BackedAnnotatedField] @Inject private camelinaction.FirstTest.template
  at camelinaction.FirstTest.template(FirstTest.java:0)
WELD-001475: The following beans match by type, but none have matching qualifiers:
  - Producer Method [ProducerTemplate] with qualifiers [@Excluded @Any] declared as [[UnbackedAnnotatedMethod] @Produces @Excluded private static org.apache.camel.cdi.CdiCamelFactory.producerTemplate(InjectionPoint, @Any Instance<CamelContext>, CdiCamelExtension)],
  - Producer Method [ProducerTemplate] with qualifiers [@Excluded @Any] declared as [[UnbackedAnnotatedMethod] @Produces @Excluded private static org.apache.camel.cdi.CdiCamelFactory.producerTemplate(InjectionPoint, @Any Instance<CamelContext>, CdiCamelExtension)]


	at org.jboss.weld.bootstrap.Validator.validateInjectionPointForDeploymentProblems(Validator.java:359)
	at org.jboss.weld.bootstrap.Validator.validateInjectionPoint(Validator.java:281)
	at org.jboss.weld.bootstrap.Validator.validateGeneralBean(Validator.java:134)
	at org.jboss.weld.bootstrap.Validator.validateRIBean(Validator.java:155)
	at org.jboss.weld.bootstrap.Validator.validateBean(Validator.java:518)
	at org.jboss.weld.bootstrap.ConcurrentValidator$1.doWork(ConcurrentValidator.java:68)
	at org.jboss.weld.bootstrap.ConcurrentValidator$1.doWork(ConcurrentValidator.java:66)
	at org.jboss.weld.executor.IterativeWorkerTaskFactory$1.call(IterativeWorkerTaskFactory.java:63)
	at org.jboss.weld.executor.IterativeWorkerTaskFactory$1.call(IterativeWorkerTaskFactory.java:56)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)




The same thing for ConsumerTemplate which should also be injectable.","davsclaus:1459566960:2016-04-02T11:16:00.760+0000:1459566960:2016-04-02T11:16:00.760+0000:There is an example here
https://github.com/camelinaction/camelinaction2/tree/master/chapter9/firsttest-cdi
davsclaus:1459567002:2016-04-02T11:16:42.522+0000:1459567002:2016-04-02T11:16:42.522+0000:Also I wonder if we can get rid of those INFO logs?
{code}
2016-04-02 13:13:29,663 [main           ] INFO  Event                          - WELD-000411: Observer method [BackedAnnotatedMethod] private org.apache.camel.cdi.CdiCamelExtension.processAnnotatedType(@Observes ProcessAnnotatedType<?>) receives events for all annotated types. Consider restricting events using @WithAnnotations or a generic type with bounds.
2016-04-02 13:13:29,672 [main           ] INFO  Event                          - WELD-000411: Observer method [BackedAnnotatedMethod] private org.apache.camel.cdi.CdiCamelExtension.processAnnotatedType(@Observes ProcessAnnotatedType<?>) receives events for all annotated types. Consider restricting events using @WithAnnotations or a generic type with bounds.
{code}
antonin.stefanutti:1459744368:2016-04-04T12:32:48.612+0000:1459744368:2016-04-04T12:32:48.612+0000:[~davsclaus] I've just fixed it (that was in my todo list for a long time :)).

For the INFO messages, unfortunately the only way to get rid of it is to drop support for CDI 1.0 (I spare you the details). For the time being, I'd be inclined to keep support for it as quite some users are still stuck with that version.

That being said, I've logged [WELD-2130|https://issues.jboss.org/browse/WELD-2130] to see what can be done at the Weld level.
"
0,CAMEL-9797,Test,Major,2.18.0,2.18.0,"
None
",Resolved,Fixed,2.18.0,Andrea Cosentino,Claus Ibsen,0,2,2016-04-02 06:29:12+00:00,2016-04-02 09:14:31+00:00,"It was upgraded to 2.2.1 and then the tests starts to fail with some weird errors



Tests in error:
  ElasticsearchBulkTest>ElasticsearchBaseTest.cleanupOnce:44 » Verify Inconsiste...
  ElasticsearchClusterIndexTest>ElasticsearchClusterBaseTest.cleanUpOnce:53 » Verify
  ElasticsearchGetSearchDeleteExistsUpdateTest>ElasticsearchBaseTest.cleanupOnce:44 » Verify
  ElasticsearchIndexTest>ElasticsearchBaseTest.cleanupOnce:44 » Verify Inconsist...

Tests run: 4, Failures: 0, Errors: 4, Skipped: 0","davsclaus:1459549765:2016-04-02T06:29:25.105+0000:1459549765:2016-04-02T06:29:25.105+0000:Such as
{code}
org.apache.camel.component.elasticsearch.ElasticsearchIndexTest  Time elapsed: 0.332 sec  <<< ERROR!
java.lang.VerifyError:
Inconsistent stackmap frames at branch target 32
Exception Details:
  Location:
    org/elasticsearch/common/lucene/Lucene.asSequentialAccessBits(ILorg/apache/lucene/search/Scorer;)Lorg/apache/lucene/util/Bits; @32: new
  Reason:
    Type 'org/apache/lucene/search/Scorer' (current frame, locals[3]) is not assignable to 'org/apache/lucene/search/DocIdSetIterator' (stack map, locals[3])
  Current Frame:
    bci: @24
    flags: { }
    locals: { integer, 'org/apache/lucene/search/Scorer', 'org/apache/lucene/search/TwoPhaseIterator', 'org/apache/lucene/search/Scorer' }
    stack: { }
  Stackmap Frame:
    bci: @32
    flags: { }
    locals: { integer, 'org/apache/lucene/search/Scorer', 'org/apache/lucene/search/TwoPhaseIterator', 'org/apache/lucene/search/DocIdSetIterator' }
    stack: { }
  Bytecode:
    0x0000000: 2bc7 000c bb00 cf59 1ab7 00d0 b02b b600
    0x0000010: d14d 2cc7 0008 2b4e a700 082c b600 d24e
    0x0000020: bb00 d359 1a2d 2cb7 00d4 b0
  Stackmap Table:
    same_frame(@13)
    append_frame(@27,Object[#490])
    append_frame(@32,Object[#491])
{code}
acosentino:1459550025:2016-04-02T06:33:45.477+0000:1459550025:2016-04-02T06:33:45.477+0000:Locally everything was working fine after the upgrade. I will take a look.
acosentino:1459559671:2016-04-02T09:14:31.267+0000:1459559671:2016-04-02T09:14:31.267+0000:The problem was related to the upgrade of Lucene to 5.5.0.

ES 2.2.1 is still base on Lucene 5.4.1.

Now everything is ok and Camel-Lucene works in OSGi too."
0,CAMEL-9796,Improvement,Minor,"2.16.2, 2.17.0","2.16.3, 2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.16.3, 2.17.1, 2.18.0",Claus Ibsen,Flavel Heyman,0,2,2016-04-01 18:44:02+00:00,2016-04-02 08:14:42+00:00,"When setting "".access"" either ""internal"" or as ""false"" it still appears in Swagger-UI/doesn't modify the JSON to ""paramAccess"":""internal""



rest(baseUrl).get(""/{customerId}"")
  //--------Swagger Documentation--------
                    .param().name(""customerId"").access(""internal"").type(RestParamType.body).description(""The customer ID number."").required(true).dataType(""string"").endParam();




JSON Generated:



parameters: [{
  name: ""customerId"",
  in: ""path"",
  description: ""The customer ID number."",
  required: true,
  type: ""string""
},...]","davsclaus:1459552064:2016-04-02T07:07:44.870+0000:1459552064:2016-04-02T07:07:44.870+0000:access is an old parameter from 1.x. Its not in use in 2.0 spec.
davsclaus:1459556082:2016-04-02T08:14:42.116+0000:1459556082:2016-04-02T08:14:42.116+0000:The option is deprecated and no longer in use from 2.18 onwards.

Do not use it"
0,CAMEL-9765,Improvement,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Raúl Kripalani,Raúl Kripalani,0,2,2016-03-25 23:56:47+00:00,2016-03-31 06:00:48+00:00,"Given that Direct-VM is designed to send messages across Camel Contexts, hence crossing boundaries across services, it is useful to provide the capability to control header and property propagation.","raulvk:1459335959:2016-03-30T19:05:59.524+0000:1459335959:2016-03-30T19:05:59.524+0000:First commit to to use JDK8 lambdas ;-)
davsclaus:1459375233:2016-03-31T06:00:33.917+0000:1459375233:2016-03-31T06:00:33.917+0000:Remember to update the wiki docs
http://camel.apache.org/direct-vm"
0,CAMEL-9764,Task,Major,None,None,"
None
",Resolved,Fixed,2.18.0,Raúl Kripalani,Raúl Kripalani,0,2,2016-03-25 23:54:16+00:00,2016-04-01 04:57:25+00:00,See http://camel.465427.n5.nabble.com/Usage-of-Lambdas-in-our-Maven-build-jdk8-lambdas-branch-tp5779737.html.,"raulvk:1459335995:2016-03-30T19:06:35.890+0000:1459336195:2016-03-30T19:09:55.221+0000:Upgraded to maven-bundle-plugin 3.0.1.

Modules now use packaging = jar, instead of bundle.

We no longer use the maven-bundle-plugin:bundle goal, but the 'manifest' goal. The goal generates the OSGi MANIFEST.MF and we package it into the JAR though configuration of maven-jar-plugin.

This makes our build compatible with any other plugin that expects a JAR packaging type or that does not support extended packaging types.


davsclaus:1459383025:2016-03-31T08:10:25.484+0000:1459383025:2016-03-31T08:10:25.484+0000:Install camel-ftp fails with
{code}
2016-03-31 10:08:37,230 | ERROR | nsole user karaf | ShellUtil                        | 44 - org.apache.karaf.shell.core - 4.0.4 | Exception caught while executing command
org.apache.karaf.features.internal.util.MultiException: Error
	at org.apache.karaf.features.internal.download.impl.MavenDownloadManager$MavenDownloader.<init>(MavenDownloadManager.java:84)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.download.impl.MavenDownloadManager.createDownloader(MavenDownloadManager.java:72)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.region.Subsystem.downloadBundles(Subsystem.java:363)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.region.Subsystem.downloadBundles(Subsystem.java:360)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.region.SubsystemResolver.resolve(SubsystemResolver.java:187)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:263)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1089)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl$1.call(FeaturesServiceImpl.java:985)[9:org.apache.karaf.features.core:4.0.4]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)[:1.8.0_31]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)[:1.8.0_31]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)[:1.8.0_31]
	at java.lang.Thread.run(Thread.java:745)[:1.8.0_31]
Caused by: java.lang.Exception: Unable to create resource for bundle mvn:org.apache.camel/camel-ftp/2.18-SNAPSHOT
	at org.apache.karaf.features.internal.region.Subsystem.createResource(Subsystem.java:601)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.region.Subsystem$1.downloaded(Subsystem.java:381)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.download.impl.MavenDownloadManager$MavenDownloader$1.operationComplete(MavenDownloadManager.java:133)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.download.impl.MavenDownloadManager$MavenDownloader$1.operationComplete(MavenDownloadManager.java:127)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.download.impl.DefaultFuture.notifyListener(DefaultFuture.java:344)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.download.impl.DefaultFuture.notifyListeners(DefaultFuture.java:329)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.download.impl.DefaultFuture.setValue(DefaultFuture.java:255)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.download.impl.AbstractDownloadTask.setFile(AbstractDownloadTask.java:61)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.download.impl.AbstractRetryableDownloadTask.run(AbstractRetryableDownloadTask.java:59)[9:org.apache.karaf.features.core:4.0.4]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)[:1.8.0_31]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)[:1.8.0_31]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)[:1.8.0_31]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)[:1.8.0_31]
	... 3 more
Caused by: org.osgi.framework.BundleException: Unable to build resource for mvn:org.apache.camel/camel-ftp/2.18-SNAPSHOT: Duplicate import: org.apache.camel.component.file.strategy
	at org.apache.karaf.features.internal.resolver.ResourceBuilder.build(ResourceBuilder.java:80)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.resolver.ResourceBuilder.build(ResourceBuilder.java:69)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.region.Subsystem.createResource(Subsystem.java:599)[9:org.apache.karaf.features.core:4.0.4]
	... 15 more
Caused by: org.osgi.framework.BundleException: Duplicate import: org.apache.camel.component.file.strategy
	at org.apache.karaf.features.internal.resolver.ResourceBuilder.normalizeImportClauses(ResourceBuilder.java:325)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.resolver.ResourceBuilder.doBuild(ResourceBuilder.java:170)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.resolver.ResourceBuilder.build(ResourceBuilder.java:78)[9:org.apache.karaf.features.core:4.0.4]
	... 17 more

karaf@root()>
{code}

Using a plain karaf 4.0.4 and 
{code}
feature:repo-add camel 2.18-SNAPSHOT
feature:install camel
feature:install camel-ftp
{code}

This error is likely something to do with camel-ftp extends the file component from camel-core, and may import some packages from camel-core, and somehow the bundle plugin create duplicates or something.
davsclaus:1459383056:2016-03-31T08:10:56.639+0000:1459383056:2016-03-31T08:10:56.639+0000:And similar problem for camel-mvel
{code}
2016-03-31 10:10:36,543 | ERROR | nsole user karaf | ShellUtil                        | 44 - org.apache.karaf.shell.core - 4.0.4 | Exception caught while executing command
org.apache.karaf.features.internal.util.MultiException: Error
	at org.apache.karaf.features.internal.download.impl.MavenDownloadManager$MavenDownloader.<init>(MavenDownloadManager.java:84)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.download.impl.MavenDownloadManager.createDownloader(MavenDownloadManager.java:72)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.region.Subsystem.downloadBundles(Subsystem.java:363)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.region.Subsystem.downloadBundles(Subsystem.java:360)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.region.SubsystemResolver.resolve(SubsystemResolver.java:187)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:263)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1089)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl$1.call(FeaturesServiceImpl.java:985)[9:org.apache.karaf.features.core:4.0.4]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)[:1.8.0_31]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)[:1.8.0_31]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)[:1.8.0_31]
	at java.lang.Thread.run(Thread.java:745)[:1.8.0_31]
Caused by: java.lang.Exception: Unable to create resource for bundle mvn:org.apache.camel/camel-mvel/2.18-SNAPSHOT
	at org.apache.karaf.features.internal.region.Subsystem.createResource(Subsystem.java:601)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.region.Subsystem$1.downloaded(Subsystem.java:381)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.download.impl.MavenDownloadManager$MavenDownloader$1.operationComplete(MavenDownloadManager.java:133)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.download.impl.MavenDownloadManager$MavenDownloader$1.operationComplete(MavenDownloadManager.java:127)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.download.impl.DefaultFuture.notifyListener(DefaultFuture.java:344)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.download.impl.DefaultFuture.notifyListeners(DefaultFuture.java:329)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.download.impl.DefaultFuture.setValue(DefaultFuture.java:255)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.download.impl.AbstractDownloadTask.setFile(AbstractDownloadTask.java:61)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.download.impl.AbstractRetryableDownloadTask.run(AbstractRetryableDownloadTask.java:59)[9:org.apache.karaf.features.core:4.0.4]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)[:1.8.0_31]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)[:1.8.0_31]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)[:1.8.0_31]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)[:1.8.0_31]
	... 3 more
Caused by: org.osgi.framework.BundleException: Unable to build resource for mvn:org.apache.camel/camel-mvel/2.18-SNAPSHOT: Duplicate import: org.apache.camel.spi
	at org.apache.karaf.features.internal.resolver.ResourceBuilder.build(ResourceBuilder.java:80)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.resolver.ResourceBuilder.build(ResourceBuilder.java:69)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.region.Subsystem.createResource(Subsystem.java:599)[9:org.apache.karaf.features.core:4.0.4]
	... 15 more
Caused by: org.osgi.framework.BundleException: Duplicate import: org.apache.camel.spi
	at org.apache.karaf.features.internal.resolver.ResourceBuilder.normalizeImportClauses(ResourceBuilder.java:325)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.resolver.ResourceBuilder.doBuild(ResourceBuilder.java:170)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.resolver.ResourceBuilder.build(ResourceBuilder.java:78)[9:org.apache.karaf.features.core:4.0.4]
	... 17 more
{code}
davsclaus:1459383079:2016-03-31T08:11:19.437+0000:1459383079:2016-03-31T08:11:19.437+0000:And camel-ognl
{code}
2016-03-31 10:11:00,479 | ERROR | nsole user karaf | ShellUtil                        | 44 - org.apache.karaf.shell.core - 4.0.4 | Exception caught while executing command
org.apache.karaf.features.internal.util.MultiException: Error
	at org.apache.karaf.features.internal.download.impl.MavenDownloadManager$MavenDownloader.<init>(MavenDownloadManager.java:84)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.download.impl.MavenDownloadManager.createDownloader(MavenDownloadManager.java:72)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.region.Subsystem.downloadBundles(Subsystem.java:363)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.region.Subsystem.downloadBundles(Subsystem.java:360)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.region.SubsystemResolver.resolve(SubsystemResolver.java:187)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:263)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1089)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl$1.call(FeaturesServiceImpl.java:985)[9:org.apache.karaf.features.core:4.0.4]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)[:1.8.0_31]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)[:1.8.0_31]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)[:1.8.0_31]
	at java.lang.Thread.run(Thread.java:745)[:1.8.0_31]
Caused by: java.lang.Exception: Unable to create resource for bundle mvn:org.apache.camel/camel-ognl/2.18-SNAPSHOT
	at org.apache.karaf.features.internal.region.Subsystem.createResource(Subsystem.java:601)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.region.Subsystem$1.downloaded(Subsystem.java:381)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.download.impl.MavenDownloadManager$MavenDownloader$1.operationComplete(MavenDownloadManager.java:133)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.download.impl.MavenDownloadManager$MavenDownloader$1.operationComplete(MavenDownloadManager.java:127)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.download.impl.DefaultFuture.notifyListener(DefaultFuture.java:344)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.download.impl.DefaultFuture.notifyListeners(DefaultFuture.java:329)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.download.impl.DefaultFuture.setValue(DefaultFuture.java:255)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.download.impl.AbstractDownloadTask.setFile(AbstractDownloadTask.java:61)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.download.impl.AbstractRetryableDownloadTask.run(AbstractRetryableDownloadTask.java:59)[9:org.apache.karaf.features.core:4.0.4]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)[:1.8.0_31]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)[:1.8.0_31]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)[:1.8.0_31]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)[:1.8.0_31]
	... 3 more
Caused by: org.osgi.framework.BundleException: Unable to build resource for mvn:org.apache.camel/camel-ognl/2.18-SNAPSHOT: Duplicate import: org.apache.camel.spi
	at org.apache.karaf.features.internal.resolver.ResourceBuilder.build(ResourceBuilder.java:80)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.resolver.ResourceBuilder.build(ResourceBuilder.java:69)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.region.Subsystem.createResource(Subsystem.java:599)[9:org.apache.karaf.features.core:4.0.4]
	... 15 more
Caused by: org.osgi.framework.BundleException: Duplicate import: org.apache.camel.spi
	at org.apache.karaf.features.internal.resolver.ResourceBuilder.normalizeImportClauses(ResourceBuilder.java:325)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.resolver.ResourceBuilder.doBuild(ResourceBuilder.java:170)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.resolver.ResourceBuilder.build(ResourceBuilder.java:78)[9:org.apache.karaf.features.core:4.0.4]
	... 17 more
{code}
davsclaus:1459383103:2016-03-31T08:11:43.897+0000:1459383103:2016-03-31T08:11:43.897+0000:And then the WARN logs when building pom modules

I see this little WARN when its building camel-parent

[INFO] --- maven-bundle-plugin:3.0.1:manifest (bundle-manifest) @
camel-parent ---
[WARNING] Ignoring project type pom - supportedProjectTypes = [jar, bundle]

We should filter out packaging=pom if possible so the bundle plugin do
not run on these.

raulvk:1459412158:2016-03-31T16:15:58.340+0000:1459416177:2016-03-31T17:22:57.256+0000:Fixed camel-ognl and camel-ftp. I wonder why those tests didn't fail at first with a full execution of run-tests.sh.

With regards to the WARNINGs, there's little we can do. Newer versions of the maven-bundle-plugin print out that WARN without an option to turn them off. They even acknowledge in code comments that the plugin can be used in POM project types (does it makes a sense to print out a warning when it's a valid use case?).

https://github.com/apache/felix/blob/ac5ec40ee40ec92dc8124e22afa855ab2c4a850f/tools/maven-bundle-plugin/src/main/java/org/apache/felix/bundleplugin/BundlePlugin.java#L271-L277

An alternative would be to never inherit the plugin execution, and to declare it individually in all pom.xml of JAR types only. This is unmanageable and no one wants that.

BTW - if we are focusing on warnings that don't affect the build, the unused imports are more important (produced by fixed block OSGi imports inherited from the parent pom.xml).

Cheers,
Raúl.
davsclaus:1459417561:2016-03-31T17:46:01.392+0000:1459417561:2016-03-31T17:46:01.392+0000:Yeah I think we are almost done.

The maven archetypes likely need some adjustments too
raulvk:1459417919:2016-03-31T17:51:59.519+0000:1459417919:2016-03-31T17:51:59.519+0000:Good point. Is this something you can take care of? I'm not familiar with the archetypes.
davsclaus:1459457845:2016-04-01T04:57:25.110+0000:1459457845:2016-04-01T04:57:25.110+0000:Yeah sure I logged a ticket to track that"
0,CAMEL-9763,Improvement,Major,2.16.2,,"
None
",Resolved,Duplicate,None,Claus Ibsen,Aaron Whiteside,0,2,2016-03-25 22:54:30+00:00,2016-03-26 05:45:57+00:00,"onCompletion() removes all evidence of why an exchange failed. This makes it impossible to use the routing DSL/XML's onCompletion processing for error conditions where one needs to know the cause of the error.


OnCompletionSynchronizationAfterConsumer::onFailure() and 
OnCompletionProcessor::doProcess() remove Exchange.EXCEPTION_CAUGHT with comments to say this is to allow the exchange to be processed successfully..


I compare this to the behavior of the onException()'s CatchProcessor::process() where Exchange.EXCEPTION_CAUGHT is not removed before being passed on to the child (processor) for handling.


Further this behavior is not documented on the wiki.


I would propose that onCompletion() maintain the fault/cause of the error just like the onException() construct does.


I can understand why it removes other things that may cause issues, but not quite the Exchange.EXCEPTION_CAUGHT.",davsclaus:1458942357:2016-03-26T05:45:57.437+0000:1458942357:2016-03-26T05:45:57.437+0000:See CAMEL-9504
0,CAMEL-9762,Improvement,Major,2.16.2,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Antoine DESSAIGNE,0,3,2016-03-25 16:18:23+00:00,2016-03-26 05:48:11+00:00,"The SecureSocketProtocolsParameters and the CipherSuitesParameters have a strange API. If you want to set the list you have to do a getXXX() and then call addAll(mylist)


I would be nice if those class can have setters.","githubbot:1458894158:2016-03-25T16:22:38.309+0000:1458894158:2016-03-25T16:22:38.309+0000:GitHub user adessaigne opened a pull request:

    https://github.com/apache/camel/pull/919

    CAMEL-9762 - Add setters on CipherSuitesParameters and SecureSocketProtocolsParameters

    Add setters on `CipherSuitesParameters` and `SecureSocketProtocolsParameters`
    
    Side note : `SSLContextParametersTest` has lots of reformat, sorry about that

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/adessaigne/camel CAMEL-9762

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/919.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #919
    
----
commit d00a39a0d8d18fac01c5bb4f0817f98372a91e72
Author: Antoine DESSAIGNE <antoine.dessaigne@gmail.com>
Date:   2016-03-25T16:18:53Z

    CAMEL-9762 - Add setters on CipherSuitesParameters and SecureSocketProtocolsParameters

----

githubbot:1458895915:2016-03-25T16:51:55.520+0000:1458895915:2016-03-25T16:51:55.520+0000:Github user adessaigne closed the pull request at:

    https://github.com/apache/camel/pull/919

davsclaus:1458942491:2016-03-26T05:48:11.456+0000:1458942491:2016-03-26T05:48:11.456+0000:Thanks for the PR"
0,CAMEL-9761,Improvement,Major,None,"2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.17.1, 2.18.0",Claus Ibsen,Claus Ibsen,0,1,2016-03-25 15:05:15+00:00,2016-03-26 06:41:34+00:00,"Today they are hardcoded for the api-doc, but you can customize for the rest services. We should let api-doc use the same cors headers as the services.


Also we should make api-docs CORS enabled if you enable CORS on the REST services so its done in the same place.


Today you need to turn on both.",
0,CAMEL-9760,Task,Minor,2.16.2,"2.16.3, 2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.16.3, 2.17.1, 2.18.0",Claus Ibsen,Aurelien Pupier,0,2,2016-03-25 14:51:55+00:00,2016-06-03 11:23:19+00:00,"I think that there is an error for Google drive ""syntax"".


on https://github.com/apache/camel/blob/master/components/camel-google-drive/src/main/java/org/apache/camel/component/google/drive/GoogleDriveEndpoint.java


the syntax described is ""google:drive:apiName/methodName"" although the scheme is ""google-drive"" and on the documentation http://camel.apache.org/googledrive.html , it is stated that the URI format is ""google-drive://endpoint-prefix/endpoint?[options]""


I'm not sure about what should be the real values","aurelien.pupier:1458890381:2016-03-25T15:19:41.898+0000:1458890381:2016-03-25T15:19:41.898+0000:thinking about it a little more, I think that the cocrect value for syntax is google-drive:apiName/methodName

but do we need the // in the documentation? google-drive://endpoint-prefix/endpoint?[options]
davsclaus:1458942952:2016-03-26T05:55:52.423+0000:1458942952:2016-03-26T05:55:52.423+0000:using // is optional"
0,CAMEL-9759,New Feature,Major,None,None,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,3,2,2016-03-25 14:47:32+00:00,2016-03-31 11:48:48+00:00,So we can track service calls using zipkin.,"davsclaus:1459215435:2016-03-29T09:37:15.056+0000:1459215435:2016-03-29T09:37:15.056+0000:Got something working now, with 2 services
- cat
- dog

And then a Camel route that routes from cat -> dog in the same JVM. Though your services may be scattered in a distributed system.

See screenshot

davsclaus:1459314025:2016-03-30T13:00:25.462+0000:1459314025:2016-03-30T13:00:25.462+0000:We got an implementation now. 

And there is a small example in camel-example-zipkin.

And some docs here
http://camel.apache.org/camel-zipkin

andrew.harmel.law:1459396128:2016-03-31T11:48:48.155+0000:1459396128:2016-03-31T11:48:48.155+0000:Excellent! Thanks all. 

_(heads off to upgrade current project to camel 2.18.0...)_"
0,CAMEL-9758,Task,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,1,2016-03-25 13:30:33+00:00,2016-04-03 09:00:28+00:00,"From Camel 2.15 onwards there was additional meta-data release per component



camelComponent.properties
camelDataFormat.properties
camelLanguage.properties
camelModel.properties



Though we have all that in one module now in camel-catalog.


So we dont need to do these fine grained files to be released
http://search.maven.org/#search%7Cgav%7C1%7Cg%3A%22org.apache.camel%22%20AND%20a%3A%22camel-core%22",
0,CAMEL-9757,Task,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,1,2016-03-25 07:10:04+00:00,2016-03-25 07:11:40+00:00,Depreacte this old module.,
0,CAMEL-9756,Wish,Minor,2.16.0,,"
None
",Resolved,Invalid,None,Unassigned,Dye357,0,2,2016-03-24 21:40:03+00:00,2016-03-25 07:22:35+00:00,"Scenario:


I would like to manipulate a file on the exchange with groovy.


However:


ScriptProcessor.java states:



A processor which executes the script as an expression and does not change the message body. * In this case GroovyExpression is instantiated and an Object is returned but the returned object is ignored by obvious design.



In order to successfully manipulate a file on the exchange using groovy the only way I have found is to explicitly declare the uri: language:groovy:file:/<pathToScript> in a <to> block. This leverages the languageProducer.java class which assigns the returned object from GroovyExpression.java as the body on the Exchange.


My question(s) are:
1. Why does Script Processor intentionally not assign the result from GroovyExpression.java to the body?
2. What is the best way in Camel to evaluate a groovy script and assign what is returned from the groovy script to the body on the exchange (In my case a java.io.File Object)?
3. Why does ProcessorDefintion.java not expose Language?


My objection using the URI I provided above is that I am programatically generating my camel XML and embedding groovy script with multiple lines in a URI is somewhat fragile & loading the groovyscript from a file is not practical for my use case. 


Thanks!!","davsclaus:1458861170:2016-03-25T07:12:50.071+0000:1458861170:2016-03-25T07:12:50.071+0000:Use the mailing list to ask such questions
davsclaus:1458861755:2016-03-25T07:22:35.519+0000:1458861755:2016-03-25T07:22:35.519+0000:You can use the language component
http://camel.apache.org/language

And call your groovy script and set that as response on the body.

Or do a message transformation and call groovy there
http://camel.apache.org/message-translator.html"
0,CAMEL-9755,Improvement,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Kevin Telford,0,2,2016-03-24 17:22:13+00:00,2016-03-25 07:19:31+00:00,"I think the Camel IRC component should allow for identifying a user w/the servers nickserv (https://meta.wikimedia.org/wiki/IRC/Instructions#Register_your_nickname.2C_identify.2C_and_enforce).  Attached is a patch to allow that to happen for the IrcConsumer.   The same action could be applied to the IrcProducer if the IrcConfiguration was available in that class.


Part of what I did was also to put a Thread.sleep() before the identification.  I did this because when connecting to some servers (ex irc.anonops.com:6697) I found I needed to pause for a few moments while the server completed the connection and displayed a bunch of banner info.  Having an additional param to pause before joining channels may be worth implementing as well, however I tried not to do too much customization since I'm not that familiar with the component code.","kevintelford:1458811382:2016-03-24T17:23:02.191+0000:1458811382:2016-03-24T17:23:02.191+0000:patch for nickserv identification
davsclaus:1458861571:2016-03-25T07:19:31.690+0000:1458861571:2016-03-25T07:19:31.690+0000:Thanks for the patch."
0,CAMEL-9754,Task,Minor,None,,"
None
",Resolved,Won't Fix,None,Unassigned,Quinn Stevenson,0,2,2016-03-24 16:28:36+00:00,2019-07-31 09:23:22+00:00,"Currently, the v2.3.7 of the maven-bundle-plugin is used to generate the OSGi Manifests for the Camel libraries.  The project cannot upgrade to a later version of the maven-bundle-plugin because the newer versions break the build.


The bnd-maven-plugin is maintained by the same group that maintains the BND libraries (which both plugins use internally) expedites updates to the plugin when the underlying libraries change.  Also, the bnd-maven-plugin uses the same BND configuration file format as BND, which eliminates the complex mapping from XML to BND configuration that the maven-bundle-plugin has to deal with.


The goals are:



change from the maven-bundle-plugin to the bnd-maven-plugin
upgrade the OSGi version
upgrade the default OSGi dependencies in the parent POM","hqstevenson:1459770955:2016-04-04T19:55:55.032+0000:1459770955:2016-04-04T19:55:55.032+0000:I've worked through the basics for this, and it looks very promising.

I'm waiting for version 3.2.0 of the bnd-maven-plugin because I need the -snapshot=SNAPSHOT functionality to replicated what is currently done by the maven-bundle-plugin.
davsclaus:1470791527:2016-08-10T09:12:07.589+0000:1470791527:2016-08-10T09:12:07.589+0000:We have upgraded to latest bundle-plugin and I think we should keep this as-is for now as that is how historically we have always built as OSGi bundles.

"
0,CAMEL-9753,Improvement,Major,None,3.0.0,"
None
",Resolved,Fixed,3.0.0,Claus Ibsen,Luca Burgazzoli,0,2,2016-03-24 14:11:23+00:00,2019-07-25 14:02:41+00:00,See http://camel.465427.n5.nabble.com/Improve-endpoint-configuration-td5779566.html,"lb:1489105341:2017-03-10T08:22:21.645+0000:1489127270:2017-03-10T14:27:50.118+0000:We may also borrow some concepts from spring i.e.:
- an annotation to define which configurations are targeting an endpoint/component
{code:java}
  @ComponentConfiguration
  @ComponentConfiguration(MyComponentConfiguration.class)
  @ComponentConfigurations

  @EndpointConfiguration
  @EndpointConfiguration(MyComponentConfiguration.class)
  @EndpointConfigurations
{code}

We me also add a concept of Validation like to validate options dependencies (i.e. mutual exclusive properties)
davsclaus:1564034374:2019-07-25T13:59:34.786+0000:1564034374:2019-07-25T13:59:34.786+0000:The Camel Main allows to configure endpoint uris and components with more functionality via the property binder support.
davsclaus:1564034561:2019-07-25T14:02:41.511+0000:1564034561:2019-07-25T14:02:41.511+0000:Lets see if we got today is not sufficient"
0,CAMEL-9752,Improvement,Minor,2.16.2,"2.16.3, 2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.16.3, 2.17.1, 2.18.0",Andrea Cosentino,Hans Orbaan,0,3,2016-03-24 08:51:36+00:00,2016-03-24 10:30:53+00:00,"When any file:// or ftp:// consumer has a quartz2 schedule it can start throwing exceptions because too many worker-threads are busy at the same time (FileNotFoundException).
Both workers can find the same files during filling the maxMessagesPerPoll, or during processing of those files. This happens when the route can not process all files before the next trigger happens.


example (every minute):
from(file:///mnt/sl-nl/bij/outbox/?sortBy=ignoreCase:file:name&filter=#fileFilter&recursive=false&move=processed&moveFailed=failed&scheduler.cron=0+0/1+0-23+?+*+1,2,3,4,5,6,7&scheduler=quartz2&scheduler.triggerId=nl_bij-export-to-archive-276)
to(file:///data/work/sl/work-archive/work/276/)


Attached you can find a stacktrace that would happen very often if worker1 processes and moves files that worker2 would also like to start processing.
This does not happen when using scheduler=spring or when using delay=1m.


The only way I have found to make sure a file or ftp component does not use multiple threads while consuming very large batches is to annotate the QuartzScheduledPollConsumerJob class with @DisallowConcurrentExecution.
I am not familiar enough with the Camelcode to say what side effects it has and if this would prevent any quartz job in camel to now be single threaded, even if the user does not want it to be.
But to me it looks like an oversight when moving from quartz to quartz2. A file or ftp consumer should be single threaded while retrieving.","davsclaus:1458784933:2016-03-24T10:02:13.099+0000:1458784933:2016-03-24T10:02:13.099+0000:Andrea can you apply the patch to those branches.

Thanks Hans for the patch.
acosentino:1458785393:2016-03-24T10:09:53.794+0000:1458785393:2016-03-24T10:09:53.794+0000:[~davsclaus], yes :-)"
0,CAMEL-9751,New Feature,Minor,None,2.22.0,"
None
",Resolved,Fixed,2.22.0,Claus Ibsen,Tim Dudgeon,1,5,2016-03-24 08:14:26+00:00,2018-06-18 08:31:57+00:00,"Swagger Java component does not currently allow security requirements to be specified. Would be useful to be able to do so.
But as security is usually applied at the container level its not clear what the best approach would be.","davsclaus:1458778739:2016-03-24T08:18:59.224+0000:1458778739:2016-03-24T08:18:59.224+0000:This is only about documenting the security requirements. How they are actually enforced/implemented is depending on which http component you use and how its to be configured or other means of security from 3rd party, such as api gateways like http://www.apiman.io/
santa.85@gmail.com:1502017103:2017-08-06T18:58:23.553+0000:1502017103:2017-08-06T18:58:23.553+0000:Agree with [~tdudgeon], it would be nice to have the option to specify the security requirements as defined in https://swagger.io/specification/#securitySchemeObject
Swagger-UI 3+ does not allow to override headers easily anymore, and relies solely on these specs in the swagger.json to build the UI accordingly.
githubbot:1529199608:2018-06-17T09:40:08.142+0000:1529199608:2018-06-17T09:40:08.142+0000:davsclaus opened a new pull request #2380: CAMEL-9751: Allow to configure swagger security requirements in generated swagger api docs in rest-dsl.
URL: https://github.com/apache/camel/pull/2380
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529199608:2018-06-17T09:40:08.830+0000:1529199608:2018-06-17T09:40:08.830+0000:GitHub user davsclaus opened a pull request:

    https://github.com/apache/camel/pull/2380

    CAMEL-9751: Allow to configure swagger security requirements in generated swagger api docs in rest-dsl.

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apache/camel swagger-security

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2380.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2380
    
----
commit 490b50366bd81345767d04e95d7b01e83b637387
Author: Claus Ibsen <claus.ibsen@...>
Date:   2018-06-16T10:31:32Z

    CAMEL-9751: Allow to configure swagger security requirements in generated swagger api docs in rest-dsl.

commit 14b0aa59147326576c222b3c73bee43ba0f2ed74
Author: Claus Ibsen <claus.ibsen@...>
Date:   2018-06-16T12:42:24Z

    CAMEL-9751: Allow to configure swagger security requirements in generated swagger api docs in rest-dsl.

commit 1e711d20a9bff5aedf624e303ff948e421d7e9dc
Author: Claus Ibsen <claus.ibsen@...>
Date:   2018-06-17T08:33:16Z

    CAMEL-9751: Allow to configure swagger security requirements in generated swagger api docs in rest-dsl.

commit 57142664acc06cffce684c9962b88c3cb919b652
Author: Claus Ibsen <claus.ibsen@...>
Date:   2018-06-17T08:52:05Z

    CAMEL-9751: Allow to configure swagger security requirements in generated swagger api docs in rest-dsl.

----

githubbot:1529281878:2018-06-18T08:31:18.043+0000:1529281878:2018-06-18T08:31:18.043+0000:davsclaus closed pull request #2380: CAMEL-9751: Allow to configure swagger security requirements in generated swagger api docs in rest-dsl.
URL: https://github.com/apache/camel/pull/2380
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529281878:2018-06-18T08:31:18.939+0000:1529281878:2018-06-18T08:31:18.939+0000:Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/2380
"
0,CAMEL-9750,Task,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Luca Burgazzoli,Luca Burgazzoli,0,2,2016-03-24 06:56:58+00:00,2016-03-24 10:02:28+00:00,No Desc,"githubbot:1458774470:2016-03-24T07:07:50.743+0000:1458774470:2016-03-24T07:07:50.743+0000:GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/914

    CAMEL-9750 : Tests should not log on stdout by default

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel CAMEL-9750

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/914.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #914
    
----
commit 44c426f36b19b98bbc9cb3164bdf8a35264d0c26
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-03-24T07:05:34Z

    CAMEL-9750 : Tests should not log on stdout by default

----

githubbot:1458784911:2016-03-24T10:01:51.673+0000:1458784911:2016-03-24T10:01:51.673+0000:Github user lburgazzoli closed the pull request at:

    https://github.com/apache/camel/pull/914
"
0,CAMEL-9749,Bug,Major,2.16.2,2.16.3,"
None
",Resolved,Fixed,2.16.3,Claus Ibsen,Xilai Dai,0,2,2016-03-24 05:50:30+00:00,2016-04-02 09:21:42+00:00,"There is error exception when trying to install camel-amqp feature install karaf OSGi container with command: feature:install camel-amqp



13:45:39,884 | ERROR | nsole user karaf | he.karaf.shell.support.ShellUtil  149 | 52 - org.apache.karaf.shell.core - 4.0.4 | Exception caught while executing command
org.osgi.service.resolver.ResolutionException: Unable to resolve root: missing requirement [root] osgi.identity; osgi.identity=camel-amqp; type=karaf.feature; version=""[2.16.2,2.16.2]""; filter:=""(&(osgi.identity=camel-amqp)(type=karaf.feature)(version>=2.16.2)(version<=2.16.2))"" [caused by: Unable to resolve camel-amqp/2.16.2: missing requirement [camel-amqp/2.16.2] osgi.identity; osgi.identity=org.apache.camel.camel-amqp; type=osgi.bundle; version=""[2.16.2,2.16.2]""; resolution:=mandatory [caused by: Unable to resolve org.apache.camel.camel-amqp/2.16.2: missing requirement [org.apache.camel.camel-amqp/2.16.2] osgi.wiring.package; filter:=""(&(osgi.wiring.package=org.apache.qpid.amqp_1_0.jms.impl)(version>=0.20.0)(!(version>=1.0.0)))""]]




the camel-amqp 2.16.2 bundle introduce a new qpid-amqp-1-0-client-jms dependency, it should be also added into camel-amqp feature definition.


Fix proposal (tested):



<bundle>wrap:mvn:org.apache.qpid/qpid-amqp-1-0-client-jms/0.28$Bundle-SymbolicName=qpid-amqp-1-0-client-jms&amp;Bundle-Version=0.28&amp;Export-Package=org.apache.qpid.amqp_1_0.jms.*;version=0.28</bundle>","davsclaus:1458786332:2016-03-24T10:25:32.634+0000:1458786332:2016-03-24T10:25:32.634+0000:Can you provide the fix as a patch or PR?
xldai:1459126468:2016-03-28T08:54:28.671+0000:1459126468:2016-03-28T08:54:28.671+0000:Seems the dependencies is changed in the latest 2.16.x camel-amqp component pom.xml 
{code}
 -      <artifactId>qpid-amqp-1-0-client-jms</artifactId>
-      <version>${qpid-version}</version>
+      <artifactId>qpid-jms-client</artifactId>
+      <version>${qpid-jms-client-version}</version>
{code}

The qpid-amqp-1-0-client-jms is replaced with qpid-jms-client. in this case, my fix is not useful anymore.
davsclaus:1459560102:2016-04-02T09:21:42.078+0000:1459560102:2016-04-02T09:21:42.078+0000:Just test with snapshot and you can install camel-amqp now"
0,CAMEL-9748,New Feature,Minor,None,None,"
None
",Resolved,Fixed,2.19.0,Andrea Cosentino,Andrea Cosentino,0,3,2016-03-23 09:46:09+00:00,2016-12-17 12:37:48+00:00,We can create a new big component related to Openstack by using http://www.openstack4j.com/,"jbouska:1471824933:2016-08-22T08:15:33.660+0000:1471824933:2016-08-22T08:15:33.660+0000:Hi, I will work on this component as my diploma thesis.
acosentino:1471825072:2016-08-22T08:17:52.517+0000:1471825072:2016-08-22T08:17:52.517+0000:Nice :-)

Let me know if you need some help.

We are waiting for your contribution :-)
jbouska:1473237679:2016-09-07T16:41:19.294+0000:1473237679:2016-09-07T16:41:19.294+0000:[~ancosen] I am thinking about a structure of the uri in component configuration. Because OpenStack is very complex system and there are very much use cases. This can leads to confusions in component settings.

OpenStack is divided to services and each service is divided to subsystems. Each subsystem can perform several operations.

I am considering 3 solutions:

1) *openstack:https://uri?service=nova&subsystem=flavours&operation=create*
configuration of new flavour would be send in exchange body (_FlavourConfiguration.class_)
cons: 
- it would be created very much operation options, each would be valid only for exactly one service/subsystem setting
- there would be needed Configuration.class for each subsystems which could be very much

2) something inspired by google-drive component:
*openstack://nova/https://uri?subsystem=flavours&operation=create*

This solution is better than previous because here we could use only the options which are suitable for certain service. The other cons are remaining. It also needs to parse componet uri to 'service' and 'uri' part. I do not like this solution at all.

3) Divide openstack component to smaller components.
For Example:
*openstack-nova:uri?[options]
openstack-neutron:uri?[options]*
etc.

This solution will solve all cons listed above because in each component will be only options needed by appropritate service.
Because OpenStack is also composed from various projects I think this solution is the best.

What are you thinking about this? Do you have any other solution?
acosentino:1473293575:2016-09-08T08:12:55.817+0000:1473293575:2016-09-08T08:12:55.817+0000:[~jbouska], I think the third solution would be the best.

You can see an example of this kind of component in camel-aws. 

This solution is good also because we can avoid having long URIs. So in my opinion the third option is the best one.

If you need help just let me know.
jbouska:1474525154:2016-09-22T14:19:14.018+0000:1474525154:2016-09-22T14:19:14.018+0000:[~ancosen] I am still hesitating about structure. Recently I look at [jclouds component](http://camel.apache.org/jclouds.html) URI structure. It looks also good. 
Do you prefer to create separate component for every OpenStack project as is suggested in previous comment or create one component and specify service in URI like in jclouds?

We can combine static and dynamic approach to avoid long URIs. So you can set static parameters in URI or se /change parameters dynamic by headers.
acosentino:1474525725:2016-09-22T14:28:45.718+0000:1474525725:2016-09-22T14:28:45.718+0000:[~jbouska] In my opinion the jclouds approach is a good solution too. I usually prefer separating the components because it's simpler maintaining the codebase in the time and for documentation purpose too.

You're free to choose your approach :-)
jbouska:1475816534:2016-10-07T13:02:14.392+0000:1475816534:2016-10-07T13:02:14.392+0000:[~ancosen] I have done POC (only for nova/flavors) and I will be very pleased if you could look on my code and tell me whether you are OK with my approach. I want to avoid rewriting the whole component. Thanks.

https://github.com/bouskaJ/camel/tree/camel-openstack_POC/components/camel-openstack
acosentino:1475816975:2016-10-07T13:09:35.870+0000:1475816975:2016-10-07T13:09:35.870+0000:Looks good to me. The approach is really good.

How do you think to test the whole component? 
jbouska:1478158334:2016-11-03T15:32:14.609+0000:1478158334:2016-11-03T15:32:14.609+0000:[~ancosen] About testing - Mocking. I mock openstack client and all classes (from openstack4j library) which my component uses. So I can test that the data are sent to library in correct way.
But I have another question. I tried to avoid forcing users to use openstack4j API. The reason is retaining the possibility of changing the library in the future. I created my own API and before I send data to library I have to map my API (camel openstack) to API of the library (openstack4j) and vice versa. But it brings me a lot of troubles with mapping these APIs. 
Today I have seen that for example camel-facebook component uses facebook4j API without any mapping.
Do you think that solving all these problems with mapping is worth it?
acosentino:1478214120:2016-11-04T07:02:00.746+0000:1478214120:2016-11-04T07:02:00.746+0000:[~jbouska], in my opinion you've to use the Openstack4j API directly. That way whenever there will be a breaking change in a new release you'll just need to align that particular upgrade/misalignment. Implement a mapping between your API and the one for Openstack4j is just another layer and a waste of work in my opinion.
jbouska:1481280227:2016-12-09T18:43:47.962+0000:1481280227:2016-12-09T18:43:47.962+0000:[~ancosen] Can you take a look at this https://github.com/bouskaJ/camel/tree/camel-openstack/components/camel-openstack ? What do you think? Is it good enough to create pull request?

BTW The last build of my component removes a lot of lines from [components/readme.adoc](https://github.com/bouskaJ/camel/commit/4dd7d0921e0bae2681bfc14c78eefb1a77e883b4#diff-99bea1343fbf3c0a3112c29fe5a623d3) and [ docs/user-manual/en/SUMMARY.md ](https://github.com/bouskaJ/camel/commit/4dd7d0921e0bae2681bfc14c78eefb1a77e883b4#diff-bab86958dade63d90bfb2db93aa0eed3) is it supposed or is it a bug? 
acosentino:1481326868:2016-12-10T07:41:08.451+0000:1481326868:2016-12-10T07:41:08.451+0000:In my opinion you can open a PR and you can continue improving the code in the time.

For the removed I'm not sure. Did you rebuild the tooling before doing a full rebuild?
githubbot:1481424736:2016-12-11T10:52:16.570+0000:1481424736:2016-12-11T10:52:16.570+0000:GitHub user bouskaJ opened a pull request:

    https://github.com/apache/camel/pull/1341

    Camel openstack

    New component to work with openstack. 
    This pull request is related to [CAMEL-9748](https://issues.apache.org/jira/browse/CAMEL-9748)

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/bouskaJ/camel camel-openstack

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1341.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1341
    
----
commit df60b8977dfba12b4360dd4fc298730b02f0c9cc
Author: Jan Bouska <jbouska@redhat.com>
Date:   2016-11-18T18:08:30Z

    camel-openstack nova

commit cca1cbbe79875349c08416c523173106e47ef6ca
Author: Jan Bouska <jbouska@redhat.com>
Date:   2016-11-18T18:10:26Z

    camel-openstack glance

commit bc05e4db9a5d69ee6001f95f98475700cdc96ab2
Author: Jan Bouska <jbouska@redhat.com>
Date:   2016-11-18T18:13:10Z

    camel-component cinder

commit 601b675d020dfce0286371efa4600c21f8b29289
Author: Jan Bouska <jbouska@redhat.com>
Date:   2016-11-18T18:15:01Z

    camel-openstack swift

commit 64d8eccf47e269d74848cad99dede9bce4d13fda
Author: Jan Bouska <jbouska@redhat.com>
Date:   2016-11-18T18:22:50Z

    camel-openstack neutron

commit c5687ad5aff1d9a68b502b7654b60673f699c2a4
Author: Jan Bouska <jbouska@redhat.com>
Date:   2016-11-27T12:36:27Z

    camel-openstack docs

commit e388640d33600a20e2e29ec666cf63ac83c6318f
Author: Jan Bouska <jbouska@redhat.com>
Date:   2016-12-03T19:25:07Z

    camel-openstack keystone

commit 1fcc9fc7e8cc349aa4b0bca930fd68bd48aa747d
Author: Jan Bouska <jbouska@redhat.com>
Date:   2016-12-07T19:37:43Z

    add config and apiVersion option

commit 22143b543f82566c1884f1ff6780578ca9e51b7b
Author: Jan Bouska <jbouska@redhat.com>
Date:   2016-12-03T18:30:36Z

    camel-openstack bug fix
    
    - bug fix
    - rebuild spring-boot starters
    - update doc

----

jbouska:1481425113:2016-12-11T10:58:33.166+0000:1481425405:2016-12-11T11:03:25.967+0000:Yes, I did rebuild also tooling.

One useful thing to know about camel-openstack is that the keystone component may not run correctly on some OpenStack instances. It is due to bug in Openstack4j. I have reported it: 
https://github.com/ContainX/openstack4j/issues/902 , https://github.com/ContainX/openstack4j/issues/899
githubbot:1481949468:2016-12-17T12:37:48.514+0000:1481949468:2016-12-17T12:37:48.514+0000:Github user bouskaJ closed the pull request at:

    https://github.com/apache/camel/pull/1341
"
0,CAMEL-9747,Task,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,1,2016-03-23 08:41:27+00:00,2016-03-23 10:42:44+00:00,"We should upgrade the pom.xml to be java 1.8. 
Also do this for the maven archetypes in tooling.",davsclaus:1458698975:2016-03-23T10:09:35.077+0000:1458698975:2016-03-23T10:09:35.077+0000:There is a bunch of small code changes needed to make the source compile as 1.8
0,CAMEL-9746,Sub-task,Major,None,None,"
None
",Resolved,Fixed,2.18.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2016-03-22 16:24:22+00:00,2016-03-24 09:20:50+00:00,No Desc,
0,CAMEL-9745,Improvement,Major,2.16.2,"2.16.3, 2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.16.3, 2.17.1, 2.18.0",Claus Ibsen,Claus Ibsen,0,2,2016-03-22 16:12:23+00:00,2016-03-22 17:01:14+00:00,"When splitting and using an iterator the usually hasNext -> next is paired so if hasNext returns true, then next returns data. But there can be situations where this is tricky to determine up front, and therefore a hasNext may return true, and then next() return null if there was no data really. Then the splitter should just skip that null and continue.","sverker:1458637274:2016-03-22T17:01:14.325+0000:1458637274:2016-03-22T17:01:14.325+0000:For TarIterator I wrote a suggestion for a solution, but it depends on knowing the size of the file being spitted up and keeping track of how much is consumed. However, that is not always the case as the input may just be an input stream (originally in the tar case from a tape drive) so it falls back to the old logic so that case must be handled anyway. It might be preferable to just do as you suggest and skip if null is returned from next(), hence no need to keep track of the length of the data to be splitted. "
0,CAMEL-9744,New Feature,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Roberto Coral Azambuja,0,3,2016-03-22 14:31:28+00:00,2016-05-08 05:50:27+00:00,"Add possibility of use the date and time API types of Java 8 in the model objects. The objects should be generated from the property ""pattern"" of annotation ""DataField"" as occurs for the type date.","davsclaus:1462431436:2016-05-05T14:57:16.302+0000:1462431436:2016-05-05T14:57:16.302+0000:Contributions is welcome
anoordover:1462587844:2016-05-07T10:24:04.484+0000:1462587844:2016-05-07T10:24:04.484+0000:Added support for LocalDate, LocalDateTime and LocalTime
anoordover:1462588073:2016-05-07T10:27:53.489+0000:1462588073:2016-05-07T10:27:53.489+0000:I will provide another patch with CS corrections...
anoordover:1462588744:2016-05-07T10:39:04.976+0000:1462588744:2016-05-07T10:39:04.976+0000:As before but solve CS issues
anoordover:1462588800:2016-05-07T10:40:00.508+0000:1462588800:2016-05-07T10:40:00.508+0000:Added support for LocalDate, LocalDateTime and LocalTime and solved CS issues
davsclaus:1462657827:2016-05-08T05:50:27.122+0000:1462657827:2016-05-08T05:50:27.122+0000:Thanks for the patch."
0,CAMEL-9743,Improvement,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,1,2016-03-22 13:32:57+00:00,2016-04-03 09:14:40+00:00,"We do not need to ship slf4j and jasypt etc. But just the camel-xxx JARs.


Those were used to run the camel-jasypt tooling
http://camel.apache.org/jasypt


But people can download those jars themselves if they use this rare tools.",
0,CAMEL-9742,New Feature,Minor,None,None,"
None
",Resolved,Won't Fix,Future,Unassigned,Andrea Cosentino,0,1,2016-03-22 13:21:04+00:00,2022-09-02 09:17:29+00:00,Create an EVCache component by using the Netflix project: https://github.com/Netflix/EVCache,acosentino:1458694865:2016-03-23T09:01:05.485+0000:1458694865:2016-03-23T09:01:05.485+0000:Maybe it is better to wait for evcache-server to be open sourced.
0,CAMEL-9741,Bug,Major,2.16.2,"2.16.3, 2.17.1, 2.18.0","
None
",Closed,Not A Bug,"2.16.3, 2.17.1, 2.18.0",Tomas Rohovsky,courtin,0,3,2016-03-22 13:12:36+00:00,2016-03-31 20:19:16+00:00,"this code is ok and do the agregate :


 from(""direct:rlAggregate"")
                .process(new Processor() 

{ String   destinations = ""bean:throwingExceptionConsumerB, bean:consumerC"";}

 })
                .recipientList(header(""destinations""), "","").parallelProcessing().aggregationStrategy(agg);


an this one not :


 from(""direct:rlAggregate"")
                .process(new Processor() 

{ String   destinations = ""bean:consumerC, bean:throwingExceptionConsumerB"";}

 })
                .recipientList(header(""destinations""), "","").parallelProcessing().aggregationStrategy(agg);


it's throwing :


org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange


they should have the same results. And only the option stopOnException should allow to stop when an Exception rise.","davsclaus:1458625267:2016-03-22T13:41:07.797+0000:1458625267:2016-03-22T13:41:07.797+0000:Test with 2.17.0 you can find here
http://camel.465427.n5.nabble.com/VOTE-Release-Apache-Camel-2-17-0-Attempt-2-tp5779496.html
nuskhu:1458631334:2016-03-22T15:22:14.353+0000:1458631334:2016-03-22T15:22:14.353+0000:i test it and i have the same result with the 2.17.0
davsclaus:1458692423:2016-03-23T08:20:23.023+0000:1458692423:2016-03-23T08:20:23.023+0000:Can you attach your sample unit test to this jira?
nuskhu:1458819742:2016-03-24T19:42:22.857+0000:1458819742:2016-03-24T19:42:22.857+0000:i attach my unit test
davsclaus:1458825147:2016-03-24T21:12:27.525+0000:1458825147:2016-03-24T21:12:27.525+0000:Can you attach the file as .zip.
trohovsky:1458912477:2016-03-25T21:27:57.594+0000:1459212717:2016-03-29T08:51:57.911+0000:I couldn't open your archive, as Claus suggests zip would be better. 

I suppose that you aggregates to/returns newExchange in your AggregationStrategy. This means that the exchange which you returns from recipientLIst is the exchange retrieved form the last endpoint in recipientList, which is ""bean:throwingExceptionConsumerB"" in your second example (analogically, if you aggregated to/returned the oldExchange, then the exchange from the first ednpoint would be returned). And because the exchange from the last endpoint has an exception set, it is thrown. 

If you want to suppress the exception, you can do the following at the beginning of the aggregate method:

{code}
Exception exception = newExchange.getException();
if (exception != null) {
    return oldExchange;
}
{code}

however, I rather suggest proper handling of the exception by [an error handler|http://camel.apache.org/error-handler.html].
nuskhu:1459403944:2016-03-31T13:59:04.485+0000:1459403944:2016-03-31T13:59:04.485+0000:I attach my zip project. 
Thank your for your explanation, my aggregation strategy just concat the body of each exchange and doesn't manage the exception set in the exchange. I was thinking that no exception will be rise in the case of the last exchange have an exception set and if the stopOnException is put to false. I was thinking that you have to throw the exception by yourself in the aggregation strategy if you want it and i was thinking that stopOnException=true is used to this purpose.
thank you for your help and sorry for my mistake
trohovsky:1459426756:2016-03-31T20:19:16.305+0000:1459426756:2016-03-31T20:19:16.305+0000:I am closing the issue as this is not a bug."
0,CAMEL-9740,Improvement,Minor,None,"2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.17.1, 2.18.0",Luca Burgazzoli,Luca Burgazzoli,0,2,2016-03-22 13:01:58+00:00,2016-03-23 09:08:14+00:00,"Improve cache resources cleanup
Support hot-rod client configuration via properties
Support for default flags for embedded caches","githubbot:1458639183:2016-03-22T17:33:03.586+0000:1458639183:2016-03-22T17:33:03.586+0000:GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/913

    CAMEL-9740 : Improve camel-infinispan

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel CAMEL-9740

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/913.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #913
    
----
commit 4057c9cf6e48bcea8b2fa98357f5591123aa7788
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-03-11T09:48:26Z

    CAMEL-9740 : Improve camel-infinispan

----

githubbot:1458694926:2016-03-23T09:02:06.483+0000:1458694926:2016-03-23T09:02:06.483+0000:Github user lburgazzoli closed the pull request at:

    https://github.com/apache/camel/pull/913
"
0,CAMEL-9739,Bug,Major,2.16.2,"2.15.6, 2.16.3, 2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.15.6, 2.16.3, 2.17.1, 2.18.0",Andrea Cosentino,Thomas Papke,0,3,2016-03-22 11:31:25+00:00,2016-03-22 12:47:37+00:00,"The camel-mina2 consumer Exception handler (org.apache.camel.component.mina2.Mina2Consumer.ReceiveHandler.exceptionCaught(IoSession, Throwable)
Is an implementation of the Mina2 interface org.apache.mina.core.service.IoHandler. The Javadoc Mina2 documentation of exceptionCaught explicitly mention, that Mina2 will close the connection for all IOExceptions automatically. But camel-mina2 seems to close the connection for any kind of exception.


Current behavior: If an error occurs on the transport layer (e.g. secure TCP connection where the certificate was not trusted and a SSLException occure), I saw the following warning:



org.apache.camel.component.mina2.Mina2Consumer#exceptionCaught(376) - Closing session as an exception was thrown from MINA




And also an error from mina2:



org.apache.mina.filter.ssl.SslHandler#destroy(210) - Unexpected exception from SSLEngine.closeInbound().
"" javax.net.ssl.SSLException: Inbound closed before receiving peer's close_notify: possible truncation attack?




From a functional perspective, beside the annoying log entries, it looks like the SSL error details are sometime not send properly back to the client.


Current workaround: I don’t have one.


Suggested bugfix: Implement the Mina2Consumer exception handling similar to org.apache.mina.handler.stream.StreamIoHandler.exceptionCaught(IoSession, Throwable) and do not handle IoException and simply rethrow them. E.g.



if (cause instanceof IOException) {
	LOG.info(""IOException will be closed by Mina itself"")
	return;
}","davsclaus:1458619745:2016-03-22T12:09:05.504+0000:1458619745:2016-03-22T12:09:05.504+0000:And this as well. And then change the INFO logging to DEBUG so its not noisy.
acosentino:1458622046:2016-03-22T12:47:26.842+0000:1458622046:2016-03-22T12:47:26.842+0000:Done.

[~thopap] many thanks for the patch :-)"
0,CAMEL-9738,Bug,Major,2.16.2,"2.15.6, 2.16.3, 2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.15.6, 2.16.3, 2.17.1, 2.18.0",Andrea Cosentino,Thomas Papke,0,3,2016-03-22 10:55:20+00:00,2016-03-22 12:20:18+00:00,"The camel-mina2 consumer (org.apache.camel.component.mina2.Mina2Consumer.doStart()) internally start a Mina2 IoAcceptor (org.apache.mina.core.service.IoAcceptor), but the org.apache.camel.component.mina2.Mina2Consumer.doStop() do not invoke acceptor.dispose(true); to release the threadpool started by Mina2.


Current behavior: While stopping the web application, the threadpool started by Mina2 IoAcceptor will not be stopped, so we have several thread which do not properly shutdown.


Current workaround: I create custom CamelShutdownStrategy and collect all Mina2Consumer and invoke Mina2consumer.getAcceptor.dispose(true); OR as an alternative create a dedicated consumer and overwrite the stop method of the Mina2 consumer as seen here: https://github.com/oehf/ipf/commit/12fdde8df7ebbbb7cd9966aadeab3ea3bed8fe75


Suggested bugfix: In org.apache.camel.component.mina2.Mina2Consumer.doShutdown() call the IoAcceptor dispose(true) method after unbind from the address.","acosentino:1458617093:2016-03-22T11:24:53.801+0000:1458617093:2016-03-22T11:24:53.801+0000:Are you working on a patch? Thanks for spotting this :-)
thopap:1458619091:2016-03-22T11:58:11.782+0000:1458619091:2016-03-22T11:58:11.782+0000:I have attached a patch to this issue.
acosentino:1458619170:2016-03-22T11:59:30.327+0000:1458619170:2016-03-22T11:59:30.327+0000:Thank you, I'll review it and merge it.
davsclaus:1458619677:2016-03-22T12:07:57.156+0000:1458619677:2016-03-22T12:07:57.156+0000:Andrea can you backport this to all those active branches.
acosentino:1458619778:2016-03-22T12:09:38.792+0000:1458619778:2016-03-22T12:09:38.792+0000:Yes :-)
acosentino:1458620410:2016-03-22T12:20:10.953+0000:1458620410:2016-03-22T12:20:10.953+0000:Done.

[~thopap] many thanks for the patch :-)"
0,CAMEL-9737,New Feature,Major,None,None,"
None
",Resolved,Fixed,2.18.0,Luca Burgazzoli,Luca Burgazzoli,0,2,2016-03-22 09:19:56+00:00,2016-03-24 10:02:17+00:00,No Desc,"githubbot:1458609858:2016-03-22T09:24:18.040+0000:1458609858:2016-03-22T09:24:18.040+0000:GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/912

    CAMEL-9737 - Create camel component for ServiceNow

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel CAMEL-9737

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/912.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #912
    
----
commit 597bcc6fd5aef465d12d21da366847a162f90b54
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-03-22T09:21:59Z

    CAMEL-9737 - Create camel component for ServiceNow

----

githubbot:1458634937:2016-03-22T16:22:17.816+0000:1458634937:2016-03-22T16:22:17.816+0000:Github user lburgazzoli closed the pull request at:

    https://github.com/apache/camel/pull/912

githubbot:1458783184:2016-03-24T09:33:04.141+0000:1458783184:2016-03-24T09:33:04.141+0000:GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/916

    CAMEL-9737 : add an option to configure default resource to access

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel CAMEL-9737-fix

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/916.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #916
    
----
commit 8db5c3cc92822c9f95f68244a3581d38fe941c0a
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-03-24T09:32:15Z

    CAMEL-9737 : add an option to configure default resource to access

----

githubbot:1458784920:2016-03-24T10:02:00.096+0000:1458784920:2016-03-24T10:02:00.096+0000:Github user lburgazzoli closed the pull request at:

    https://github.com/apache/camel/pull/916
"
0,CAMEL-9736,Improvement,Minor,2.16.2,"2.17.1, 2.18.0","

content-type
indexing
solr

",Resolved,Fixed,"2.17.1, 2.18.0",Andrea Cosentino,Mansour Al Akeel,0,3,2016-03-22 00:04:16+00:00,2016-03-24 14:57:16+00:00,"Currently, there is no way to specify the content type. It's extracted automatically from the File in the body of the Message. This results in error when indexing a document. Setting Exchange.CONTENT_TYPE or Exchange.FILE_CONTENT_TYPE does not help. 
For example, neither of these would work, as the component ignores the header and reads the file type in SolrProducer:


   if (body instanceof File) {
            MimetypesFileTypeMap mimeTypesMap = new MimetypesFileTypeMap();
            String mimeType = mimeTypesMap.getContentType((File)body);
            ContentStreamUpdateRequest updateRequest = new
ContentStreamUpdateRequest(getRequestHandler());
            updateRequest.addFile((File) body, mimeType);


A simple solution could be to check if the Exchange.FILE_CONTENT_TYPE is set, before trying to extract if from mimeTypesMap.","davsclaus:1458692268:2016-03-23T08:17:48.948+0000:1458692268:2016-03-23T08:17:48.948+0000:Generally we favor using Exchange.CONTENT_TYPE to control this.


davsclaus:1458692313:2016-03-23T08:18:33.745+0000:1458692313:2016-03-23T08:18:33.745+0000:Andrea do you want to take a look, eg if that header is present then use that as content-type and then only if not, fallback and read the content type from the file as the code above does.
acosentino:1458692600:2016-03-23T08:23:20.178+0000:1458692600:2016-03-23T08:23:20.178+0000:Yes I do :-)
mansour:1458707254:2016-03-23T12:27:34.594+0000:1458707437:2016-03-23T12:30:37.446+0000:Claus,
You are right. It can be done in either Exchange.CONTENT_TYPE or Exchange.FILE_CONTENT_TYPE
The reason I proposed it, is because there are other cases where it is working properly. The only issue I faced is when file is in the body. 
Therefore, it made sense ""to me"" to use FILE_CONTENT_TYPE for only that case ! 
What if the body is SolrInputDocument, List of Files, or List of SolrInputDocument ?
I guess setting the request content-type (Exchange.CONTENT_TYPE), would be great. 


 https://github.com/apache/camel/blob/master/components/camel-solr/src/main/java/org/apache/camel/component/solr/SolrProducer.java#L102

"
0,CAMEL-9735,Improvement,Minor,"2.16.2, 2.17.0","2.16.3, 2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.16.3, 2.17.1, 2.18.0",Claus Ibsen,Sverker Abrahamsson,0,2,2016-03-21 22:59:51+00:00,2016-03-22 16:12:58+00:00,"After the change in https://issues.apache.org/jira/browse/CAMEL-9375 I started to get failures with the following stacktrace:



Caused by: java.lang.OutOfMemoryError: Java heap space
        at java.util.Arrays.copyOf(Arrays.java:3236)
        at java.io.ByteArrayOutputStream.grow(ByteArrayOutputStream.java:118)
        at java.io.ByteArrayOutputStream.ensureCapacity(ByteArrayOutputStream.java:93)
        at java.io.ByteArrayOutputStream.write(ByteArrayOutputStream.java:153)
        at org.apache.camel.converter.stream.CachedOutputStream.write(CachedOutputStream.java:104)
        at org.apache.camel.util.IOHelper.copy(IOHelper.java:199)
        at org.apache.camel.util.IOHelper.copy(IOHelper.java:169)
        at org.apache.camel.util.IOHelper.copyAndCloseInput(IOHelper.java:218)
        at org.apache.camel.util.IOHelper.copyAndCloseInput(IOHelper.java:214)
        at org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(StreamCacheConverter.java:82)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:497)
        at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:1243)
        at org.apache.camel.impl.converter.StaticMethodTypeConverter.convertTo(StaticMethodTypeConverter.java:59)
        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:293)
        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:168)
        at org.apache.camel.dataformat.tarfile.TarIterator.createNextMessage(TarIterator.java:121)
        at org.apache.camel.dataformat.tarfile.TarIterator.tryAdvanceToNext(TarIterator.java:100)
        at org.apache.camel.dataformat.tarfile.TarIterator.hasNext(TarIterator.java:78)
        at org.apache.camel.processor.Splitter$SplitterIterable$1.hasNext(Splitter.java:163)
        at org.apache.camel.processor.Splitter.updateNewExchange(Splitter.java:256)




I.e. using StreamCache makes the whole entry go into memory and since they in my usecase are several gigabytes it doesn't work very well. I realize that this might be caused since I don't set any StreamCachingStrategy on my context but reading the corresponding doc part I get the impression that the default settings should be that it will spool to disk after reading 128 kbyte.


However, I really don't want it to do that neither as that would 1) be a significant overhead to write gigabytes of data to a temp file and 2) I might not even have that much space where my temp directory is located. Instead the functionality that I want is that the tarfile entries are streamed and written directly to the destination files without any unnecessary caching in between.","davsclaus:1458597774:2016-03-22T06:02:54.624+0000:1458597774:2016-03-22T06:02:54.624+0000:The CAMEL-NNNN link is to this ticket. What ticket did you mean?

sverker:1458598100:2016-03-22T06:08:20.951+0000:1458598100:2016-03-22T06:08:20.951+0000:CAMEL-9375, which is where the link above points
davsclaus:1458600296:2016-03-22T06:44:56.149+0000:1458600296:2016-03-22T06:44:56.149+0000:Try test with the 2.17.0 RC at
http://camel.465427.n5.nabble.com/VOTE-Release-Apache-Camel-2-17-0-td5779375.html
sverker:1458617000:2016-03-22T11:23:20.087+0000:1458617000:2016-03-22T11:23:20.087+0000:I've tested now with this component from 2.17.x branch with the same result.
sverker:1458620473:2016-03-22T12:21:13.685+0000:1458620473:2016-03-22T12:21:13.685+0000:Ok, I'm starting to get the grip on this.

The issue with the fix in CAMEL-9375 is that a call to hasNext() will cause the inputstream to move to the next tar entry, hence the StreamCache was used to copy the data from InputStream at that point before the next hasNext() call. However, that doesn't work with entries in the tarfile that are bigger than can be kept in memory, hence that I get the OutOfMemoryError. Even if spooling of the StreamCache to temp file would work this is not an acceptable solution as I don't want to write and read unnecessary gigabytes of data to/from disk.

When I restore hasNext() to the previous logic (more or less) my use case work as well as all the unit tests. The reason is that hasNext() will not move on to the next entry in tarfile until all data from the current entry is consumed.

The problem is that this is not correct behaviour of hasNext() because it creates a race condition. When next() method has returned the last entry, hasNext() should return false but it will return true until the data of that entry has been consumed from the inputstream even though next call to next() will return null (although it should throw NoSuchElementException according to Iterator interface).

TarFileMultipleFilesSplitterTest doesn't catch that since the testfile is so small that the race condition doesn't appear.
sverker:1458620549:2016-03-22T12:22:29.046+0000:1458620549:2016-03-22T12:22:29.046+0000:The same race condition should happen also with ZipIterator, as I copied the logic from there when I made the tarfile component.
davsclaus:1458624008:2016-03-22T13:20:08.415+0000:1458624008:2016-03-22T13:20:08.415+0000:Yeah I have reverted CAMEL-9375 and polished the current code and made that unit test that should caught the old bug fail, but ignored until we have a better fix.
davsclaus:1458633687:2016-03-22T16:01:27.712+0000:1458633687:2016-03-22T16:01:27.712+0000:Thanks for the details. We are closing this ticket as the OOME is fixed again.

We need another ticket for the tar splitter may spit out 1 extra which becomes a null message. "
0,CAMEL-9734,Improvement,Minor,None,2.17.0,"

documentation

",Resolved,Fixed,2.17.0,Claus Ibsen,Anbumani Balusamy,0,2,2016-03-21 17:26:47+00:00,2016-03-22 06:04:39+00:00,Update Camel-Kafka Component Wiki page with Ver 2.17.0 changes,"anbumani.balusamy:1458552481:2016-03-21T17:28:01.409+0000:1458552481:2016-03-21T17:28:01.409+0000:Updating Wiki page now
anbumani.balusamy:1458556850:2016-03-21T18:40:50.619+0000:1458556850:2016-03-21T18:40:50.619+0000:[~davsclaus], I have updated the wiki page. Please review and let me know your comments

Thanks!
Anbu
davsclaus:1458597879:2016-03-22T06:04:39.144+0000:1458597879:2016-03-22T06:04:39.144+0000:Thanks look good"
0,CAMEL-9733,Wish,Minor,"2.16.2, 2.17.0",2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Jose Luis Pedrosa,0,4,2016-03-21 16:38:16+00:00,2016-05-28 06:56:29+00:00,"Hi
Currently springBatch accepts a parameter jobName in the url, which is evaluated during the creation of the endpoint.


This makes impossible to launch different jobs dinamically.The requested feature would be to make it message context based, in the headers with a parameter 
""jobNameHeader"", which would be evaluated per message. In a similar way as SQL and the columns value parameters.


If the project is interested and willing to incorporate it into the sources, I could offer me to code it.","trohovsky:1458571246:2016-03-21T22:40:46.506+0000:1458571337:2016-03-21T22:42:17.231+0000:Hi Jose,

IMO with introduction of a [dynamic to|http://camel.apache.org/message-endpoint.html#MessageEndpoint-DynamicTo] {{toD}} in Camel 2.16, the component specific headers for overriding URI's ""host"" part (like in camel-sql) lost their meaning. The advantage of {{toD}} is that caching of produces for reuse is provided OOTB.
davsclaus:1458600387:2016-03-22T06:46:27.592+0000:1458600387:2016-03-22T06:46:27.592+0000:Its a two way street. With a header we only have 1 endpoint and 1 producer. With toD you have more endpoints/producers.

A header can make sense in some case if the producer would be able to support it easily.
jlpedrosa:1458616247:2016-03-22T11:10:47.655+0000:1458616247:2016-03-22T11:10:47.655+0000:Hi Claus,Thomas

first of all, thanks for your fast answers. I was not aware of the toD component, that could help me indeed in this case. 
Let me explain my point of view on the subject: I think this is in the scenario where both options are good, toD and header field based:
I tend to think that there will be limited amount of different jobs in a given ctx ( I'd say < 10), then toD would noo create hell out of endpoints, and not a mess or a significant performance impact. (as just starting a job implies many queries, inserts, so choosign a camel endpoint is neglectible from volume of worj). On the other hand picking up a new Job, it's piece of cake:

{code:java}
 if (jobLauncher == null) {
            jobLauncher = resolveJobLauncher();
        }
        if (job == null && jobName != null) {
            job = CamelContextHelper.mandatoryLookup(getCamelContext(), jobName, Job.class);
        }
{code} 

So as the effort of having it header based is that low, it could make sense be able to run it dynamically, which be really good in scenarios with many jobs. Do you guys share my view?


davsclaus:1458692485:2016-03-23T08:21:25.615+0000:1458692485:2016-03-23T08:21:25.615+0000:Yeah Jose, you are welcome to provide a patch / PR with the header.
jlpedrosa:1461801813:2016-04-28T08:03:33.239+0000:1461801813:2016-04-28T08:03:33.239+0000:[~cibsen@e-ma.net]  is there any chance I can summit this on time so it's ready for 2.17.1? can you give me a deadline?

Rgds

JL
davsclaus:1461801929:2016-04-28T08:05:29.308+0000:1461801929:2016-04-28T08:05:29.308+0000:Same story as just commented on that other ticket
jlpedrosa:1461820037:2016-04-28T13:07:17.104+0000:1461820037:2016-04-28T13:07:17.104+0000:I got troubles with one small detail (it's almost ready), how can I write an URI without an path? I don't manage to make the URI parses to accept it:

{code:java}
from(""direct:start"").to(""spring-batch:mockJob"").to(""mock:test""); //original test line
from(""direct:dynamic"").to(""spring-batch:"").to(""mock:test""); //URL type with dynamic Job
{code}

I mean as the jobName is read during the exchange it is not passed to the URI, but it keeps on failing:
{noformat}
[From[direct:dynamic]] -> [To[spring-batch:?]... because of Failed to resolve endpoint: spring-batch:// due to: Expected authority at index 15:
{noformat}

is there any way to achieve a endpoint without path? I tried to annotate the uri definition.. but no luck...

{code:java}
@UriPath(defaultValue = ""dynamic"")
@Metadata(required = ""false"", defaultValue = ""dynamic"")
  private String jobName;
{code}
  
trohovsky:1461823230:2016-04-28T14:00:30.532+0000:1461823230:2016-04-28T14:00:30.532+0000:You still need to declare initial path of the endpoint. There isn't (and shouldn't exist) a way how to omit it
jlpedrosa:1461823393:2016-04-28T14:03:13.266+0000:1461823393:2016-04-28T14:03:13.266+0000:Ok, Then I'll use a keyword to allow the backwards compatible bheaviour, and the dynamic one, like jobName ""dynamic"".  


githubbot:1461824428:2016-04-28T14:20:28.401+0000:1461824428:2016-04-28T14:20:28.401+0000:GitHub user jlpedrosa opened a pull request:

    https://github.com/apache/camel/pull/968

    Added support for dynamic spring batch job invoication based on message header

    Pull request for issue: https://issues.apache.org/jira/browse/CAMEL-9733


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jlpedrosa/camel CAMEL-9733

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/968.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #968
    
----
commit d06d850cf0a6fe44790a8eda377f56a1514be1a6
Author: Joseluis Pedrosa <joseluis.pedrosa@elephanttalk.com>
Date:   2016-04-28T14:11:21Z

    patch to support dynamic job execution based on message headers for sprinbatch component
    https://issues.apache.org/jira/browse/CAMEL-9733

----

jlpedrosa:1461824479:2016-04-28T14:21:19.312+0000:1461824479:2016-04-28T14:21:19.312+0000:I've created the pull request,

https://github.com/apache/camel/pull/968

I've added some extra tests, and previous tests are passing. I hope it's enough. 

Thanks!
githubbot:1464317863:2016-05-27T10:57:43.766+0000:1464317863:2016-05-27T10:57:43.766+0000:Github user jlpedrosa closed the pull request at:

    https://github.com/apache/camel/pull/968

jlpedrosa:1464332032:2016-05-27T14:53:52.050+0000:1464332032:2016-05-27T14:53:52.050+0000:added new pull request about this: 
https://github.com/apache/camel/pull/1001

davsclaus:1464389789:2016-05-28T06:56:29.865+0000:1464389789:2016-05-28T06:56:29.865+0000:Thanks for the PR"
0,CAMEL-9732,Bug,Minor,2.16.2,"2.16.3, 2.17.0","
None
",Resolved,Fixed,"2.16.3, 2.17.0",Claus Ibsen,Claus Ibsen,0,1,2016-03-21 15:52:08+00:00,2016-03-21 16:01:24+00:00,"See nabble
http://camel.465427.n5.nabble.com/Re-Bug-in-RestSwaggerReader-appendModels-need-confirmation-td5779271.html",
0,CAMEL-9731,Bug,Minor,"2.15.5, 2.16.2",None,"
None
",Resolved,Fixed,"2.15.6, 2.16.3, 2.17.0",Andrea Cosentino,Andrea Cosentino,0,1,2016-03-21 12:58:20+00:00,2016-03-21 13:33:15+00:00,In OSGi the Sql script language doesn't seem to work.,
0,CAMEL-9730,Bug,Major,2.17.0,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Claus Ibsen,0,2,2016-03-21 12:28:59+00:00,2016-03-21 21:02:24+00:00,"You can get this stacktrace with a camel-jaxb in testing using camel-test-blueprint.



Caused by: org.apache.camel.TypeConverterLoaderException: Failed to load type converters because of: Cannot load type converters using OSGi bundle: 28
	at org.apache.camel.impl.osgi.Activator$BundleTypeConverterLoader.load(Activator.java:380)
	at org.apache.camel.core.osgi.OsgiTypeConverter.createRegistry(OsgiTypeConverter.java:219)
	at org.apache.camel.core.osgi.OsgiTypeConverter.getDelegate(OsgiTypeConverter.java:185)
	at org.apache.camel.core.osgi.OsgiTypeConverter.getStatistics(OsgiTypeConverter.java:160)
	at org.apache.camel.impl.DefaultCamelContext.forceLazyInitialization(DefaultCamelContext.java:3625)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:2977)
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:175)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2848)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2844)
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:2867)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:2844)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:2813)
	at org.apache.camel.blueprint.BlueprintCamelContext.start(BlueprintCamelContext.java:180)
	at org.apache.camel.test.blueprint.CamelBlueprintTestSupport.setUp(CamelBlueprintTestSupport.java:240)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:283)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:173)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:128)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
Caused by: java.lang.NullPointerException: null
	at org.apache.camel.converter.jaxb.FallbackTypeConverter.setCamelContext(FallbackTypeConverter.java:116)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.addFallbackTypeConverter(BaseTypeConverterRegistry.java:462)
	at org.apache.camel.impl.osgi.Activator$BundleTypeConverterLoader$Loader.load(Activator.java:471)
	at org.apache.camel.impl.osgi.Activator$BundleTypeConverterLoader.load(Activator.java:378)
	at org.apache.camel.core.osgi.OsgiTypeConverter.createRegistry(OsgiTypeConverter.java:219)
	at org.apache.camel.core.osgi.OsgiTypeConverter.getDelegate(OsgiTypeConverter.java:185)
	at org.apache.camel.core.osgi.OsgiTypeConverter.getStatistics(OsgiTypeConverter.java:160)
	at org.apache.camel.impl.DefaultCamelContext.forceLazyInitialization(DefaultCamelContext.java:3625)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:2977)
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:175)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2848)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2844)
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:2867)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:2844)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:2813)
	at org.apache.camel.blueprint.BlueprintCamelContext.start(BlueprintCamelContext.java:180)
	at org.apache.camel.test.blueprint.CamelBlueprintTestSupport.setUp(CamelBlueprintTestSupport.java:240)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:283)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:173)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:128)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)","rcazambuja:1458564823:2016-03-21T20:53:43.011+0000:1458565344:2016-03-21T21:02:24.097+0000:I believe that some commit related to this fix may have broken the build of class OsgiSpringCamelContext in camel-spring at camel-2.17.x branch.
[INFO] -------------------------------------------------------------
[ERROR] COMPILATION ERROR : 
[INFO] -------------------------------------------------------------
[ERROR] C:\git\camel\components\camel-spring\src\main\java\org\apache\camel\osgi\OsgiSpringCamelContext.java:[48,15] error: constructor OsgiTypeConverter in class OsgiTypeConverter cannot be applied to given types;
[INFO] 1 error
[INFO] -------------------------------------------------------------


I believe the patch attached can solve the problem."
0,CAMEL-9729,New Feature,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,1,2016-03-21 08:35:53+00:00,2016-06-26 11:55:58+00:00,"So you can use the catalog to query for eg 2.17.0 camel version when using catalog version 2.18.0 etc. 


This requires the catalog being able to download the older version of the catalog etc or somehow load the schema files from older versions. Or the other way around a newer version.","davsclaus:1466913358:2016-06-26T11:55:58.952+0000:1466913358:2016-06-26T11:55:58.952+0000:There is a camel-catalog-maven module that can download older versions, and API on CamelCatalog to switch versions."
0,CAMEL-9728,Bug,Major,None,None,"
None
",Resolved,Fixed,"2.15.6, 2.16.3, 2.17.1, 2.18.0",Freeman Yue Fang,Freeman Yue Fang,0,1,2016-03-21 08:20:19+00:00,2016-03-21 08:37:56+00:00,"In most case when camel-cxf endpoint use RAW|MESSAGE DataFormat, DefaultCxfBinding.getContentFromCxf just return InputStream already, however in some cases such as use cxf jms transport with byte[] jms type, as cxf message content stored in a StringReader,  this make DefaultCxfBinding.getContentFromCxf  return NULL",
0,CAMEL-9727,New Feature,Major,None,None,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,omar alles,0,2,2016-03-20 13:46:00+00:00,2016-04-10 06:16:31+00:00,"I've started a new component to interface with CM SMS API mantained by CM Telecom.using their java api to send sms messages.


Pull Request Link:
https://github.com/apache/camel/pull/911


PR submitted so you can consider to include it in your components catalogue. 


If i need to change anything, just let me know.


Best regards.


Some useful links:
[original camel-cm repository](https://github.com/oalles/camel-cm)
[CM Telecom](https://www.cmtelecom.com)
[CM Api](https://dashboard.onlinesmsgateway.com/docs)","omaralles:1459130645:2016-03-28T10:04:05.013+0000:1459130645:2016-03-28T10:04:05.013+0000:https://github.com/apache/camel/pull/920
Fixes CMComponent relying on dependency injection.

README.md is being updated as well, reflecting new component name. 
githubbot:1459204117:2016-03-29T06:28:37.215+0000:1459204117:2016-03-29T06:28:37.215+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/920
"
0,CAMEL-9726,Improvement,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Claus Ibsen,0,1,2016-03-20 10:21:07+00:00,2016-03-20 10:31:58+00:00,"We should allow to output in yaml also.


So you can do /api-doc/swagger.json and /api-doc/swagger.yaml. Or use the accept headers of the http request.",
0,CAMEL-9725,Task,Minor,None,,"
None
",Resolved,Won't Fix,None,Claus Ibsen,Claus Ibsen,0,1,2016-03-19 07:06:15+00:00,2016-03-19 08:07:58+00:00,"[WARNING] 
[WARNING] Some problems were encountered while building the effective model for org.apache.camel:camel-example-cdi-osgi:bundle:2.17-SNAPSHOT
[WARNING] 'dependencies.dependency.exclusions.exclusion.groupId' for org.apache.camel.karaf:camel-karaf-commands:jar with value '*' does not match a valid id pattern. @ line 153, column 20
[WARNING] 'dependencies.dependency.exclusions.exclusion.artifactId' for org.apache.camel.karaf:camel-karaf-commands:jar with value '*' does not match a valid id pattern. @ line 154, column 23
[WARNING] 'dependencies.dependency.exclusions.exclusion.groupId' for org.apache.camel.karaf:apache-camel:xml:features with value '*' does not match a valid id pattern. @ line 189, column 20
[WARNING] 'dependencies.dependency.exclusions.exclusion.artifactId' for org.apache.camel.karaf:apache-camel:xml:features with value '*' does not match a valid id pattern. @ line 190, column 23
[WARNING] 'dependencies.dependency.exclusions.exclusion.groupId' for org.apache.activemq:activemq-karaf:xml:features with value '*' does not match a valid id pattern. @ line 203, column 20
[WARNING] 'dependencies.dependency.exclusions.exclusion.artifactId' for org.apache.activemq:activemq-karaf:xml:features with value '*' does not match a valid id pattern. @ line 204, column 23","davsclaus:1458342391:2016-03-19T07:06:31.599+0000:1458342391:2016-03-19T07:06:31.599+0000:It should not use that exclude stuff with *
davsclaus:1458346070:2016-03-19T08:07:50.676+0000:1458346070:2016-03-19T08:07:50.676+0000:Ah its a maven 3.1.1 warning. Maven 3.3.x do not warn."
0,CAMEL-9724,Bug,Minor,2.16.2,2.16.3,"
None
",Resolved,Won't Fix,2.16.3,Claus Ibsen,Jose Luis Pedrosa,0,2,2016-03-17 14:23:55+00:00,2016-04-02 09:25:16+00:00,"Hi 


I see there's a missalingment between the features dependencies and the pom of the camel-kafka component that makes impossible to run a Producer in karaf. I can see that in the features.xml 



<bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.kafka-clients/${kafka-clients-bundle-version}</bundle>
    <bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.kafka_2.10/${kafka-bundle-version}</bundle>




It's trying to use 2.10 scala version, but in the pom.xml we point to 2.11 scala version



 <dependency>
      <groupId>org.apache.kafka</groupId>
      <artifactId>kafka_2.11</artifactId>
      <version>${kafka-version}</version>
      <exclusions>
        <exclusion>
          <groupId>org.slf4j</groupId>
          <artifactId>slf4j-simple</artifactId>
        </exclusion>
          <exclusion>
              <artifactId>scala-library</artifactId>
              <groupId>org.scala-lang</groupId>
          </exclusion>
      </exclusions>
    </dependency>




this causes some Class not found exceptions (funny some how) only in the producer, but the consumer is ok.



org.apache.camel.FailedToCreateProducerException: Failed to create Producer for endpoint: Endpoint[kafka://.........].
Reason: java.lang.ClassNotFoundException: kafka.serializer.DefaultEncoder





karaf@root()> bundle:list  | grep kaf
68 | Active |  50 | 2.16.2                                    | camel-kafka
70 | Active |  50 | 0.8.2.2_1                                 | Apache ServiceMix :: Bundles :: kafka-clients
71 | Active |  50 | 0.8.2.2_1                                 | Apache ServiceMix :: Bundles :: kafka_2.10




I see this is already fix in master... so this should not apply to 2.17.0","davsclaus:1458197338:2016-03-17T14:48:58.700+0000:1458197338:2016-03-17T14:48:58.700+0000:Can you do a patch / PR against the 2.16.x branch
jlpedrosa:1458199458:2016-03-17T15:24:18.835+0000:1458199458:2016-03-17T15:24:18.835+0000:Hi Claus

I'm still trying to find a solution for it, service mix repos does not have 2.11 version, so the solution is not that straight forward. Come back to you as soon as I found something.


jlpedrosa:1458548152:2016-03-21T16:15:52.864+0000:1458548152:2016-03-21T16:15:52.864+0000:Claus,

The only way I found was to manually edit the features.xml and inser manually the mvn dependcenies (direct and transieny) which doesn't sound like a good idea. Any sugestions?
davsclaus:1458548572:2016-03-21T16:22:52.695+0000:1458548572:2016-03-21T16:22:52.695+0000:The SMX bundles are here
http://repo2.maven.org/maven2/org/apache/servicemix/bundles/

And they are created and released as part of Apache ServiceMix which that team handles. 

But mind that from Camel 2.17 onwards we moved to use the pure Karaf Java Client (no more Scala = yay). So if possible I suggest to upgrade to Camel 2.17 if you can. Camel 2.17 is being released later this month.
davsclaus:1458548638:2016-03-21T16:23:58.202+0000:1458548638:2016-03-21T16:23:58.202+0000:And btw what changes did you do directly in the features.xml file. Can you paste that here in the JIRA. We can do a hack or whatever on 2.16.3 to make it work. Doesn't matter so much as 2.17 onwards is Java based only.
jlpedrosa:1458549044:2016-03-21T16:30:44.740+0000:1458549086:2016-03-21T16:31:26.942+0000:Hi Claus,

I'm watching your commits, and the fact that you created the 2.17.0. Yes I saw that 2.17 wont' have that issue: 
{quote}
I see this is already fix in master... so this should not apply to 2.17.0
{quote}

I already migrated to Wildfly as also the new driver in 2.17 (I tried by compiling the camel sources) was also getting this issue: https://issues.apache.org/jira/browse/KAFKA-3218 .After migrating to Jboss, all my problems went away.  I'm just asking for the good sake of contributing to this project (excelent in my opinion).

I dropped the features,xml, but I'll create it again and upload here, but as you said, it's a hack.

thanks for your time. 


davsclaus:1458692346:2016-03-23T08:19:06.697+0000:1458692346:2016-03-23T08:19:06.697+0000:Did you find your hack in the features.xml ? Would be good to get that fixed so we can do a 2.16.3 release
davsclaus:1459560316:2016-04-02T09:25:16.942+0000:1459560316:2016-04-02T09:25:16.942+0000:Yeah upgrade to 2.17 that is Java based, and there is no more scala version hell."
0,CAMEL-9723,Task,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Claus Ibsen,0,1,2016-03-17 13:45:10+00:00,2016-03-17 14:45:48+00:00,No Desc,
0,CAMEL-9722,Task,Major,None,None,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Thomas Diesler,0,2,2016-03-17 13:01:39+00:00,2016-03-18 09:20:43+00:00,"According to Importing Dependencies, it is possible to import the dependency management sections from multiple projects. The wildfly-camel project does this both with wildfly and camel dependencies.


Generally we'd like to use the camel defined dependencies, it is however often the case that there is a version skew for a give project - cxf for example. 


To avoid an incorrect mix of cxf versions, camel should not only define its top-level cxf deps but also the transitive dependencies that it expects to be using","githubbot:1458191012:2016-03-17T13:03:32.343+0000:1458191012:2016-03-17T13:03:32.343+0000:GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/908

    [CAMEL-9722] Explicitly define cxf transitive dependencies

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-9722

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/908.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #908
    
----
commit 375318d4fad79106b53b503829b4288ff51e8515
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2016-03-17T13:02:22Z

    [CAMEL-9722] Explicitly define cxf transitive dependencies

----

githubbot:1458264043:2016-03-18T09:20:43.629+0000:1458264043:2016-03-18T09:20:43.629+0000:Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/908
"
0,CAMEL-9721,Task,Major,2.16.2,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Jose Luis Pedrosa,0,2,2016-03-17 12:19:12+00:00,2016-03-17 13:21:25+00:00,"Hi all


the camel-spring-batch component does only depend on spring-batch (by pom.xml) but in the karaf features.xml it is said that it depends on camel-spring (which is not correct but in test).



 <feature name='camel-spring-batch' version='${project.version}' resolver='(obr)' start-level='50'>
    <bundle dependency='true'>mvn:org.apache.geronimo.specs/geronimo-jms_1.1_spec/${geronimo-jms-spec-version}</bundle>
    <bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-batch-core/${spring-batch-bundle-version}</bundle>
    <bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-batch-infrastructure/${spring-batch-bundle-version}</bundle>
    <feature version='${project.version}'>camel-spring</feature>
    <bundle>mvn:org.apache.camel/camel-spring-batch/${project.version}</bundle>
  </feature>




So this has a very downside, that drags the deprecated sprin-dm and impossible to run anythign on spring higher than 3.2. And the spring-batch version used by camel (2.16.2 needs spring-batch 3.0.4, that depends on spring 4, which is blocked by adding spring-camel), result, jar hell, and unable to read the XML Namespace errors. 


Good this is: removing the dependency of camel-spring and adding spring directly, solves the issue and can run spring-batch in any upper version correctly.


thanks!","davsclaus:1458190017:2016-03-17T12:46:57.063+0000:1458190017:2016-03-17T12:46:57.063+0000:See
http://camel.465427.n5.nabble.com/HEADS-UP-Camel-2-17-and-Apache-Karaf-changes-td5778952.html
jlpedrosa:1458191847:2016-03-17T13:17:27.027+0000:1458191847:2016-03-17T13:17:27.027+0000:Hi Claus

I've read your email, it sounds like the new version would not present the issue, anyway, if camel-spring-batch depends only on org.springbatch, that should be the dependency and not camel-spring. I think the pom.xml and features.xml should be aligned. As this project has many, many dependencies, the shorter the dependency chain the better. Does it make sense?
davsclaus:1458192085:2016-03-17T13:21:25.664+0000:1458192085:2016-03-17T13:21:25.664+0000:Please look at the current code on master branch
https://github.com/apache/camel/blob/master/platforms/karaf/features/src/main/resources/features.xml#L1468"
0,CAMEL-9720,Improvement,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Claus Ibsen,0,1,2016-03-17 09:08:36+00:00,2016-03-17 10:55:16+00:00,"When you run a spring boot app then it may terminate asap because the main thread is not keep running.


We should make this easy.


And that applies when you code this using the spring boot way with a application class with main.


eg along the lines using this hack for now



@SpringBootApplication
public class SampleCamelApplication {

    public static void main(String[] args) {
        ConfigurableApplicationContext ctx = new SpringApplicationBuilder().sources(SampleCamelApplication.class).run(args);

        // keep the JVM running as Camel uses only daemon threads in the sample
        CamelSpringBootApplicationController controller = ctx.getBean(CamelSpringBootApplicationController.class);
        controller.blockMainThread();
    }
}




We should be able to run that without the hack","davsclaus:1458183316:2016-03-17T10:55:16.525+0000:1458183316:2016-03-17T10:55:16.525+0000:You can now set

# we want the main thread to keep running
camel.springboot.main-run-controller = true"
0,CAMEL-9719,New Feature,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Claus Ibsen,0,1,2016-03-17 09:02:29+00:00,2016-03-17 10:55:32+00:00,"Make a spring-boot starter for Apache Camel so it follow the starter guidelines and feel like any of the other starters for end users.


Some details also here
https://github.com/spring-projects/spring-boot/pull/5426",
0,CAMEL-9718,Bug,Minor,2.16.2,2.16.3,"
None
",Resolved,Fixed,2.16.3,Claus Ibsen,Xilai Dai,0,3,2016-03-17 02:11:07+00:00,2016-03-17 06:50:56+00:00,"When trying to install the camel-kafka feature into karaf OSGi container, the com.101tec/zkclient/0.5 bundle can't be installed dur to it's wrong Import-Package section in the MANIFEST.



Caused by: java.lang.Exception: Unable to start bundle wrap:mvn:com.101tec/zkclient/0.5
	at org.apache.karaf.bundle.command.Install.execute(Install.java:98)[24:org.apache.karaf.bundle.core:4.0.4]
	... 11 more
Caused by: org.osgi.framework.BundleException: Unable to resolve com.101tec.zkclient [65](R 65.0): missing requirement [com.101tec.zkclient [65](R 65.0)] osgi.wiring.package; (osgi.wiring.package=org.apache.jute) Unresolved requirements: [[com.101tec.zkclient [65](R 65.0)] osgi.wiring.package; (osgi.wiring.package=org.apache.jute)]
	at org.apache.felix.framework.Felix.resolveBundleRevision(Felix.java:4111)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2117)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:998)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:984)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.karaf.bundle.command.Install.execute(Install.java:96)[24:org.apache.karaf.bundle.core:4.0.4]
	... 11 more




The package name: org.apache.jute and org.apache.zookeeper.proto should be removed from Import-Package, seems it's got fixed from zkclient project version 0.8.
https://github.com/sgroschupf/zkclient/commit/bbe5db97991ff10c2ba90338bc50a98eb24361fb


so this issue can be fixed by upgrade zkclient from 0.5 to 0.8 (as long as the 0.8 version is available from maven centre)","davsclaus:1458165239:2016-03-17T05:53:59.684+0000:1458165239:2016-03-17T05:53:59.684+0000:Can you provide a patch or PR for the 2.16.x branch?
githubbot:1458167657:2016-03-17T06:34:17.170+0000:1458167657:2016-03-17T06:34:17.170+0000:GitHub user xldai opened a pull request:

    https://github.com/apache/camel/pull/907

    fix CAMEL-9718 by upgrade zkclient to 0.8

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/xldai/camel patch-1

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/907.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #907
    
----
commit 47c9c416bd2487f704fa17710a8ea256a873d461
Author: Xilai Dai <xldai@talend.com>
Date:   2016-03-17T06:33:35Z

    fix CAMEL-9718 by upgrade zkclient to 0.8

----

githubbot:1458168570:2016-03-17T06:49:30.174+0000:1458168570:2016-03-17T06:49:30.174+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/907

davsclaus:1458168656:2016-03-17T06:50:56.506+0000:1458168656:2016-03-17T06:50:56.506+0000:Thanks for the PR"
0,CAMEL-9717,Task,Minor,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Thomas Diesler,0,2,2016-03-16 14:33:14+00:00,2016-03-17 11:04:07+00:00,No Desc,"githubbot:1458112113:2016-03-16T15:08:33.603+0000:1458112113:2016-03-16T15:08:33.603+0000:GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/906

    [CAMEL-9717] Define kafka version in dependency management

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-9717

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/906.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #906
    
----
commit 6eee827bef0b54953dc6a5c0b547243427fa21f3
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2016-03-16T14:34:31Z

    [CAMEL-9717] Define kafka version in dependency management

----

githubbot:1458183847:2016-03-17T11:04:07.933+0000:1458183847:2016-03-17T11:04:07.933+0000:Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/906
"
0,CAMEL-9716,New Feature,Minor,2.17.0,2.18.0,"
None
",Resolved,Fixed,2.18.0,Unassigned,Sebastian Rühl,0,3,2016-03-16 14:03:49+00:00,2017-02-27 09:55:57+00:00,"In some corner cases we should be able to re-consume a Kafka stream from the beginning on startup of the endpoint.
For this the Kafka-KafkaConsumer has a method



   public void seekToBeginning(TopicPartition... partitions) {




Sidenode
There are other methods to manipulate offsets but for this ticket we just look on the re-consume corner case.



Currently I have implemented this support in a branch here (https://github.com/sruehl/camel/tree/feature/kafka-seek-support) and have also written an jUnit test.
At this time this test still fails for unknown reasons.


I would be keen on some feedback on this feature and also would like to advance this branch to make it mergable.","sruehl:1458270498:2016-03-18T11:08:18.685+0000:1458270498:2016-03-18T11:08:18.685+0000:Update:
seekToBeginning needs proper setup so we do one poll to ensure this.
githubbot:1458270563:2016-03-18T11:09:23.406+0000:1458270563:2016-03-18T11:09:23.406+0000:GitHub user sruehl opened a pull request:

    https://github.com/apache/camel/pull/910

    Feature/kafka seek support

    [CAMEL-9716] Camel KafkaConsumer should be able to re-consume the Kafka stream.
    
    This pull request enables a seek to beginning on the camel consumer

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sruehl/camel feature/kafka-seek-support

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/910.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #910
    
----
commit 7850b59f20c47f787761937c00474d3f76175d5b
Author: Sebastian Rühl <sebastian.ruehl@senacor.com>
Date:   2016-03-16T13:51:56Z

    added seek support for kafka client

commit 5ef66d3126e7391d408c8510476208b41f42b017
Author: Sebastian Rühl <sebastian.ruehl@senacor.com>
Date:   2016-03-18T11:05:10Z

    Enable seekToBeginning by polling

----

sruehl:1458290422:2016-03-18T16:40:22.412+0000:1458290422:2016-03-18T16:40:22.412+0000:this patch is separated from the pull request as it integrates some advanced shutdown that needs review before it can be integrated into the PR. Also this one makes the jUnit test run proper.
githubbot:1458519322:2016-03-21T08:15:22.730+0000:1458519322:2016-03-21T08:15:22.730+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/910

davsclaus:1458519462:2016-03-21T08:17:42.081+0000:1458519462:2016-03-21T08:17:42.081+0000:The first PR has been merged. 

What is the idea with the wake up? Can you maybe tell a bit more about your patch?
sruehl:1458523245:2016-03-21T09:20:45.568+0000:1458523245:2016-03-21T09:20:45.568+0000:[~davsclaus] The problem is that the shutdown of the executor doesn't kill the thread properly. I tried to debug last friday why exactly the thread can't be interrupted but couldn't find it out yet. Because the thread gets never interrupted we never reached the (kafka)consumer.unsubscribe(). I suspected this was the reason we had such a long time waiting till we can resubscribe on kafka. In normal conditions this isn't a problem beside on a camel-restart where you have then a zombie thread (and unsubscribe gets never called). Because of the nature of the jUnit test I have written Im dependent on a proper shutdown of the thread to perform a unsubscribe.
If you read the javadoc of this kafka method you can see that this method is meant to ""interrupt"" a long running process. For me this whole looks like a swallowed Interrupted exception in combination with a loop that prevent the thread from terminating. I need to isolate this issue with an jUnit test and submit a kafka issue but till then the call of wakeup should help with this issue.

I found this issue (wakeup etc.) while I was working on the jUnit test so this is the reason I wrote a separate patch for it (Test requires prober shutdown and the issue this patch fixing is independent on this issue). 
sruehl:1458808397:2016-03-24T16:33:17.739+0000:1458808434:2016-03-24T16:33:54.331+0000:[https://issues.apache.org/jira/browse/KAFKA-3458] this issue might solve the problem described in the patch"
0,CAMEL-9685,New Feature,Minor,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Luca Burgazzoli,Luca Burgazzoli,0,2,2016-03-09 09:44:29+00:00,2016-03-11 12:23:41+00:00,No Desc,"lb:1457592191:2016-03-10T14:43:11.173+0000:1457592191:2016-03-10T14:43:11.173+0000:[~tristan.tarrant@gmail.com] I've added initial support for Infinispan's continuous query [here|https://github.com/lburgazzoli/apache-camel/commit/c2029a57e6b9c330fa421f047539cf00cf00a62e] would you be so kind to have look and report any improvement/error you may find ?
githubbot:1457665534:2016-03-11T11:05:34.190+0000:1457665534:2016-03-11T11:05:34.190+0000:GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/896

    CAMEL-9685 - camel-infinispan : support continuous query in consumer

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel CAMEL-9685

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/896.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #896
    
----
commit 5536e28b0b7268ad50c12a9c0e50ee45353c0ddf
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-03-10T14:39:34Z

    CAMEL-9685 - camel-infinispan : support continuous query in consumer

----

githubbot:1457670111:2016-03-11T12:21:51.358+0000:1457670111:2016-03-11T12:21:51.358+0000:Github user lburgazzoli closed the pull request at:

    https://github.com/apache/camel/pull/896
"
0,CAMEL-9684,Improvement,Minor,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Luca Burgazzoli,Luca Burgazzoli,0,2,2016-03-09 09:43:37+00:00,2016-03-10 11:55:29+00:00,No Desc,"githubbot:1457498848:2016-03-09T12:47:28.224+0000:1457498848:2016-03-09T12:47:28.224+0000:GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/891

    CAMEL-9684 - camel-infinispan : add support for setting query builder…

    … in InifispanConfiguration

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel CAMEL-9684

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/891.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #891
    
----
commit 2d6140d3723a75d7d2e4286589d194aadb19445a
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-03-09T11:35:36Z

    CAMEL-9684 - camel-infinispan : add support for setting query builder in InifispanConfiguration

----

githubbot:1457582075:2016-03-10T11:54:35.735+0000:1457582075:2016-03-10T11:54:35.735+0000:Github user lburgazzoli closed the pull request at:

    https://github.com/apache/camel/pull/891
"
0,CAMEL-9683,Improvement,Major,None,None,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,James Strachan,1,3,2016-03-08 17:53:35+00:00,2016-06-07 09:31:41+00:00,"when using kubernetes you can use Kubernetes Services to do the load balancing across endpoints
http://kubernetes.io/v1.1/docs/user-guide/services.html#services-in-kubernetes


sometimes folks want to do the discovery and load balancing on the client side. 


We've added a plugin to Ribbon to do this in the kubeflix project:
https://github.com/fabric8io/kubeflix


e.g. here https://github.com/fabric8io/kubeflix/blob/master/ribbon-discovery/src/main/java/io/fabric8/kubeflix/ribbon/KubernetesServerList.java#L66-L87


it might be nice to add something like that for Camel LoadBalancers for folks using Camel on Kubernetes who wish to use client side discovery and load balancing","davsclaus:1461632349:2016-04-26T08:59:09.118+0000:1461632349:2016-04-26T08:59:09.118+0000:We could also allow to specify to use a route/ingress to call the service. As otherwise the client can only call the service from within the cluster as the ip:port is cluster only.
davsclaus:1463962995:2016-05-23T08:23:15.215+0000:1463962995:2016-05-23T08:23:15.215+0000:There is a branch with the work at
https://github.com/apache/camel/tree/remoteServiceCall/

And currently an implementation for kubernetes and ribbon. We can then add implementations for other service registries such as etcd, consul, zookeeper, etc.
davsclaus:1464065201:2016-05-24T12:46:41.508+0000:1464065201:2016-05-24T12:46:41.508+0000:There is a new serviceCall EIP you can use to setup for various providers such as kubernetes, etc. And then call the service using various strategies such as client lookup, dns, env etc.
lb:1464072882:2016-05-24T14:54:42.222+0000:1464072882:2016-05-24T14:54:42.222+0000:[~davsclaus] would you mind if to get used to this new EIP I'll make an etcd and consul based registry ?
davsclaus:1464073122:2016-05-24T14:58:42.034+0000:1464073122:2016-05-24T14:58:42.034+0000:Yeah it would be great with impls for consul and etcd. Also based on this we may need to refine the current code, so sure go ahead. Nothing is set in stone.

"
0,CAMEL-9682,Improvement,Major,None,Future,"
None
",Resolved,Won't Fix,Future,Unassigned,James Strachan,0,1,2016-03-08 17:40:22+00:00,2022-09-02 09:16:12+00:00,"when making asynchronous InOut requests it'd be nice if methods could return Observable<T> so that we could use the RxJava async programming model to process async requests & responses.


e.g. kinda like how folks can use Retrofit for HTTP: http://joluet.github.io/blog/2014/07/07/rxjava-retrofit/



public interface MyThing {

@GET(""/session.json"")
Observable<LoginResponse> login();

@GET(""/user.json"")
Observable<UserState> getUserState();
}




to then let you use the normal composition / join / flatMap stuff in RxJava to compose multiple requests across different microservice invocations together with timeouts etc e.g. to compose the latest from 2 calls:



Observable.combineLatest(api.fetchUserProfile(), api.getUserState(),
(user, userStatus) -> new Pair<>(user, userStatus));




Where we'd replace the @GET annotation with a bean binding annotation and a URI parameter to switch to using ActiveMQ or Twitter or whatever",
0,CAMEL-9681,New Feature,Minor,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Luca Burgazzoli,Luca Burgazzoli,0,2,2016-03-08 14:16:28+00:00,2016-03-09 08:30:52+00:00,No Desc,"githubbot:1457419209:2016-03-08T14:40:09.049+0000:1457419209:2016-03-08T14:40:09.049+0000:GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/890

    CAMEL-9681 - Add an option to enable/disable cache creation

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel CAMEL-9681

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/890.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #890
    
----
commit ef4cc80b8b0afa2618a026ff1cffabd27769a826
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-03-08T14:39:31Z

    CAMEL-9681 - Add an option to enable/disable cache creation

----

githubbot:1457426505:2016-03-08T16:41:45.930+0000:1457426505:2016-03-08T16:41:45.930+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/890
"
0,CAMEL-9680,Bug,Major,2.16.2,"2.16.3, 2.17.0","
None
",Resolved,Fixed,"2.16.3, 2.17.0",Claus Ibsen,Jostein Gogstad,0,2,2016-03-08 14:11:04+00:00,2016-03-09 09:58:27+00:00,"As documented in the camel-spring-boot documentation, camel-spring-boot will delegate type conversion to Spring by default (see org.apache.camel.spring.boot.TypeConversionConfiguration). Whenever the body of a route changes to a List, Spring believes it can convert it and fails. See the supplied test.


The runs correctly if the SpringTypeConverter is removed.


StreamCachingTest.java
package com.example.bugs;

import org.apache.camel.CamelContext;
import org.apache.camel.EndpointInject;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.spring.boot.SpringTypeConverter;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Test;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.core.convert.ConversionService;
import org.springframework.core.convert.converter.Converter;
import org.springframework.core.convert.support.DefaultConversionService;

import java.io.File;
import java.io.FileInputStream;
import java.util.List;

import static java.util.Arrays.asList;

public class StreamCachingTest extends CamelTestSupport {

    public static final String URI_END_OF_ROUTE = ""mock:end_of_route"";

    @EndpointInject(uri = URI_END_OF_ROUTE)
    private MockEndpoint endOfRoute;

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                context.getTypeConverterRegistry().addFallbackTypeConverter(springTypeConverter(context, new ConversionService[]{new DefaultConversionService()}), true);

                from(""direct:foo"")
                    .streamCaching()
                    .bean(MyBean.class)
                    .to(URI_END_OF_ROUTE);
            }
        };
    }

    @Test
    public void stream_caching_with_spring() throws Exception {
        endOfRoute.expectedMessageCount(1);

        template.sendBody(""direct:foo"", new FileInputStream(new File(""src/main/resources/banner.txt"")));

        endOfRoute.assertIsSatisfied();

    }

    public static class MyBean {
        public List<Integer> someNumbers() {
            return asList(1, 2, 3);
        }
    }

    /**
     * Copied from org.apache.camel.spring.boot.TypeConversionConfiguration (they are package protected)
     **/
    @Bean
    SpringTypeConverter springTypeConverter(CamelContext camelContext, ConversionService[] conversionServices) {
        SpringTypeConverter springTypeConverter = new SpringTypeConverter(asList(conversionServices));
        camelContext.getTypeConverterRegistry().addFallbackTypeConverter(springTypeConverter, true);
        return springTypeConverter;
    }

    @ConditionalOnMissingBean
    @Bean
    ConversionService defaultCamelConversionService(ApplicationContext applicationContext) {
        DefaultConversionService service = new DefaultConversionService();
        for (Converter converter : applicationContext.getBeansOfType(Converter.class).values()) {
            service.addConverter(converter);
        }
        return service;
    }
}




Result:



org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[ID-CAW811-53239-1457446127171-0-2][Message: 1,2,3]
	at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1658)
	at org.apache.camel.util.ExchangeHelper.extractResultBody(ExchangeHelper.java:646)
	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:471)
	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:467)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:139)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:144)
	at no.avinor.agressointegration.StreamCachingTest.stream_caching_with_spring(StreamCachingTest.java:50)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:78)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:212)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:68)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:140)
Caused by: org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: org.apache.camel.StreamCache with value 1,2,3 due Failed to convert from type [java.util.Arrays$ArrayList<?>] to type [org.apache.camel.StreamCache] for value '[1, 2, 3]'; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type [java.util.Arrays$ArrayList<?>] to type [org.apache.camel.StreamCache]
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.createTypeConversionException(BaseTypeConverterRegistry.java:610)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:137)
	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:72)
	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:47)
	at org.apache.camel.impl.DefaultStreamCachingStrategy.cache(DefaultStreamCachingStrategy.java:189)
	at org.apache.camel.processor.CamelInternalProcessor$StreamCachingAdvice.before(CamelInternalProcessor.java:765)
	at org.apache.camel.processor.CamelInternalProcessor$StreamCachingAdvice.before(CamelInternalProcessor.java:744)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:138)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:121)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109)
	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:68)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:412)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:380)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:270)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:380)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:221)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:124)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:137)
	... 34 more
Caused by: org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.util.Arrays$ArrayList<?>] to type [org.apache.camel.StreamCache] for value '[1, 2, 3]'; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type [java.util.Arrays$ArrayList<?>] to type [org.apache.camel.StreamCache]
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:176)
	at org.apache.camel.spring.boot.SpringTypeConverter.convertTo(SpringTypeConverter.java:40)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:333)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:120)
	... 54 more
Caused by: org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type [java.util.Arrays$ArrayList<?>] to type [org.apache.camel.StreamCache]
	at org.springframework.core.convert.support.GenericConversionService.handleConverterNotFound(GenericConversionService.java:313)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:195)
	at org.springframework.core.convert.support.CollectionToObjectConverter.convert(CollectionToObjectConverter.java:64)
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:35)
	... 59 more","davsclaus:1457433640:2016-03-08T18:40:40.077+0000:1457433640:2016-03-08T18:40:40.077+0000:Yeah I start to wonder what the benefit for Camel would be with the spring type converter? Maybe we should disable it by default.
davsclaus:1457487205:2016-03-09T09:33:25.177+0000:1457487205:2016-03-09T09:33:25.177+0000:[~hekonsek] do you remember what value-add the spring type converters would give us? 
davsclaus:1457488198:2016-03-09T09:49:58.570+0000:1457488198:2016-03-09T09:49:58.570+0000:Okay its a bug in spring type converter where it returns true in the canConvert method, and then fail just right after calling convert. 

I am going to skip stream cache types.
davsclaus:1457488504:2016-03-09T09:55:04.838+0000:1457488504:2016-03-09T09:55:04.838+0000:You can turn off this type converter with setting in your app properties

camel.springboot.typeConversion=false
davsclaus:1457488707:2016-03-09T09:58:27.929+0000:1457488707:2016-03-09T09:58:27.929+0000:Thanks for reporting and the test.

I have fixed the type converter to not attempt converter camel stuff.

We can then consider turning off the bridge type converter all together by default if it causes more trouble.

Or if it really makes sense to have it enabled? I wonder what it brings to the table for Camel users?"
0,CAMEL-9679,New Feature,Minor,None,None,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Jarosław Strzelecki,0,3,2016-03-08 10:45:31+00:00,2016-03-14 14:53:58+00:00,Implement new Data Format using Hessian serialization.,"githubbot:1457405564:2016-03-08T10:52:44.305+0000:1457405564:2016-03-08T10:52:44.305+0000:GitHub user jarst opened a pull request:

    https://github.com/apache/camel/pull/889

    CAMEL-9679: Support for Hessian serialization

    [CAMEL-9679](https://issues.apache.org/jira/browse/CAMEL-9679) Adds new data format supporting Hessian serialization.


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jarst/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/889.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #889
    
----
commit 223842749065f51e7d550cfdcc7f567cb8c67e26
Author: Jaroslaw Strzelecki <jstrzelecki@pgs-soft.com>
Date:   2016-03-08T10:49:42Z

    CAMEL-9679: Support for Hessian serialization

----

githubbot:1457427571:2016-03-08T16:59:31.938+0000:1457427571:2016-03-08T16:59:31.938+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/889

davsclaus:1457433557:2016-03-08T18:39:17.382+0000:1457433557:2016-03-08T18:39:17.382+0000:Thanks for the PR.

Are you able to edit the wiki docs, then it would be good to add a page about this new data format at
http://camel.apache.org/data-format.html

How to edit:
http://camel.apache.org/how-do-i-edit-the-website.html
jareks:1457936600:2016-03-14T14:23:20.503+0000:1457936600:2016-03-14T14:23:20.503+0000:I've updated the wiki.

Thanks for accepting my very first PR :)

davsclaus:1457938438:2016-03-14T14:53:58.448+0000:1457938438:2016-03-14T14:53:58.448+0000:Thanks Jaroslaw

Looking forward to more contributions."
0,CAMEL-9678,Improvement,Minor,2.17.0,2.19.0,"
None
",Resolved,Fixed,2.19.0,Tomohisa Igarashi,Claus Ibsen,0,4,2016-03-08 08:44:06+00:00,2016-10-26 09:26:17+00:00,"When having 4 routes, using rest-dsl, the notice the start server logging on both start/shutdown.



2016-03-08 09:40:18,659 [rderMain.main()] INFO  UndertowRegistry               - Adding consumer to consumerRegistry: http://0.0.0.0:8080/orders/%7Bid%7D
2016-03-08 09:40:18,661 [rderMain.main()] INFO  UndertowEndpoint               - Starting server on port: 8080
2016-03-08 09:40:18,712 [rderMain.main()] INFO  xnio                           - XNIO version 3.3.4.Final
2016-03-08 09:40:18,729 [rderMain.main()] INFO  nio                            - XNIO NIO Implementation Version 3.3.4.Final
2016-03-08 09:40:18,833 [rderMain.main()] INFO  DefaultCamelContext            - Route: route1 started and consuming from: Endpoint[http://0.0.0.0:8080/orders/%7Bid%7D?httpMethodRestrict=GET]
2016-03-08 09:40:18,835 [rderMain.main()] INFO  UndertowRegistry               - Adding consumer to consumerRegistry: http://0.0.0.0:8080/orders
2016-03-08 09:40:18,835 [rderMain.main()] INFO  UndertowEndpoint               - Starting server on port: 8080
2016-03-08 09:40:18,842 [rderMain.main()] INFO  DefaultCamelContext            - Route: route2 started and consuming from: Endpoint[http://0.0.0.0:8080/orders?httpMethodRestrict=POST]
2016-03-08 09:40:18,844 [rderMain.main()] INFO  UndertowRegistry               - Adding consumer to consumerRegistry: http://0.0.0.0:8080/orders
2016-03-08 09:40:18,844 [rderMain.main()] INFO  UndertowEndpoint               - Starting server on port: 8080
2016-03-08 09:40:18,848 [rderMain.main()] INFO  DefaultCamelContext            - Route: route3 started and consuming from: Endpoint[http://0.0.0.0:8080/orders?httpMethodRestrict=PUT]
2016-03-08 09:40:18,849 [rderMain.main()] INFO  UndertowRegistry               - Adding consumer to consumerRegistry: http://0.0.0.0:8080/orders/%7Bid%7D
2016-03-08 09:40:18,849 [rderMain.main()] INFO  UndertowEndpoint               - Starting server on port: 8080
2016-03-08 09:40:18,854 [rderMain.main()] INFO  DefaultCamelContext            - Route: route4 started and consuming from: Endpoint[http://0.0.0.0:8080/orders/%7Bid%7D?httpMethodRestrict=DELETE]
2016-03-08 09:40:18,854 [rderMain.main()] INFO  DefaultCamelContext            - Total 4 routes, of which 4 are started.
2016-03-08 09:40:18,855 [rderMain.main()] INFO  DefaultCamelContext            - Apache Camel 2.17-SNAPSHOT (CamelContext: camel-1) started in 1.236 seconds
^C2016-03-08 09:40:58,098 [Thread-1       ] INFO  MainSupport$HangupInterceptor  - Received hang up - stopping the main instance.
2016-03-08 09:40:58,099 [Thread-1       ] INFO  DefaultCamelContext            - Apache Camel 2.17-SNAPSHOT (CamelContext: camel-1) is shutting down
2016-03-08 09:40:58,100 [Thread-1       ] INFO  DefaultShutdownStrategy        - Starting to graceful shutdown 4 routes (timeout 300 seconds)
2016-03-08 09:40:58,105 [ - ShutdownTask] INFO  UndertowEndpoint               - Starting server on port: 8080
2016-03-08 09:40:58,109 [ - ShutdownTask] INFO  DefaultShutdownStrategy        - Route: route4 shutdown complete, was consuming from: Endpoint[rest://delete:/orders:%7Bid%7D?componentName=undertow&routeId=route4]
2016-03-08 09:40:58,109 [ - ShutdownTask] INFO  UndertowEndpoint               - Starting server on port: 8080
2016-03-08 09:40:58,113 [ - ShutdownTask] INFO  DefaultShutdownStrategy        - Route: route3 shutdown complete, was consuming from: Endpoint[rest://put:/orders?componentName=undertow&inType=camelinaction.Order&routeId=route3]
2016-03-08 09:40:58,113 [ - ShutdownTask] INFO  UndertowEndpoint               - Starting server on port: 8080
2016-03-08 09:40:58,116 [ - ShutdownTask] INFO  DefaultShutdownStrategy        - Route: route2 shutdown complete, was consuming from: Endpoint[rest://post:/orders?componentName=undertow&inType=camelinaction.Order&routeId=route2]
2016-03-08 09:40:58,117 [ - ShutdownTask] INFO  DefaultShutdownStrategy        - Route: route1 shutdown complete, was consuming from: Endpoint[rest://get:/orders:%7Bid%7D?componentName=undertow&outType=camelinaction.Order&routeId=route1]
2016-03-08 09:40:58,117 [Thread-1       ] INFO  DefaultShutdownStrategy        - Graceful shutdown of 4 routes completed in 0 seconds
2016-03-08 09:40:58,123 [Thread-1       ] INFO  MainLifecycleStrategy          - CamelContext: camel-1 has been shutdown, triggering shutdown of the JVM.




We should make this better.


To reproduce run the example at
https://github.com/camelinaction/camelinaction2/tree/master/chapter10/undertow-rest-xml-json","igarashitm:1476860009:2016-10-19T14:53:29.305+0000:1476860009:2016-10-19T14:53:29.305+0000:Undertow server is always restarted when consumer is registered/unregistered, which causes that verbose log. I'll see if it's possible without server restart.
davsclaus:1477031889:2016-10-21T14:38:09.675+0000:1477031889:2016-10-21T14:38:09.675+0000:Thanks Tomohisa. I granted your user karma to self assign JIRA tickets, so you are welcome to assign this ticket if you get the time to work on it. And thanks for the recent PRs and activity in the community.
igarashitm:1477032369:2016-10-21T14:46:09.491+0000:1477032369:2016-10-21T14:46:09.491+0000:Thanks! it does help. I'll submit a PR for this one once I finish. It requires a little refactoring in camel-undertow.
githubbot:1477443475:2016-10-26T08:57:55.627+0000:1477443475:2016-10-26T08:57:55.627+0000:GitHub user igarashitm opened a pull request:

    https://github.com/apache/camel/pull/1224

    CAMEL-9678 camel-undertow - Keep restarting server when add/remove ro…

    …utes
    
    Refactored camel-undertow consumer to enable hot swapping individual handlers which correspond to each consumers without restarting undertow server.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igarashitm/camel CAMEL-9678

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1224.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1224
    
----
commit 320150c6c8d05a3ccfe879d30a47b191ab73c2f3
Author: Tomohisa Igarashi <tm.igarashi@gmail.com>
Date:   2016-10-26T08:17:13Z

    CAMEL-9678 camel-undertow - Keep restarting server when add/remove routes
    
    Refactored camel-undertow consumer to enable hot swapping individual handlers which correspond to each consumers without restarting undertow server.

----

acosentino:1477445021:2016-10-26T09:23:41.300+0000:1477445021:2016-10-26T09:23:41.300+0000:Thanks for the PR. Since this is a refactoring I guess we should release this only in the 2.19.0


githubbot:1477445177:2016-10-26T09:26:17.212+0000:1477445177:2016-10-26T09:26:17.212+0000:Github user igarashitm closed the pull request at:

    https://github.com/apache/camel/pull/1224
"
0,CAMEL-9677,Improvement,Minor,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Claus Ibsen,0,1,2016-03-08 08:02:13+00:00,2016-03-08 08:24:03+00:00,For example fallback type converters may want to have the camel context injected and then perform some logic in start/stop etc.,
0,CAMEL-9676,Improvement,Major,None,3.0.0,"
None
",Resolved,Fixed,3.0.0,Unassigned,Claus Ibsen,0,2,2016-03-08 07:53:02+00:00,2019-08-06 06:01:57+00:00,"There is a bunch of options you can configure on the camel context as properties. For example to limit length of log messages, and setting some cache size of producer templates etc.


Today its just key/value paris and you would need to hunt down what options we have in camel.


We should add a type safe configuration class for this, and expose it in the model in java and xml. Then its easier to spot and know what options there is.


Also we can then tie that into spring-boot that can use this to know which options you can configure which many tools such as Eclipse / IDEA has spring-boot support for already.


For example camel-jaxb has an option to turn on | off pretty print that its kinda hidden today. With this we would add that as an known option and its much easier to spot for Camel end users.",davsclaus:1565042512:2019-08-06T06:01:52.950+0000:1565042512:2019-08-06T06:01:52.950+0000:These have been exposed in camel-spring-boot and also in camel-main
0,CAMEL-9675,Improvement,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Claus Ibsen,0,1,2016-03-08 06:19:31+00:00,2016-03-11 08:05:51+00:00,"So instead of a hardcoded number, you can specify a predicate that allows to loop until its false.


See for example
http://camel.465427.n5.nabble.com/Polling-http-endpoints-tp5778533.html",
0,CAMEL-9674,Improvement,Major,2.12.3,,"
None
",Resolved,Won't Fix,None,Unassigned,Andrei Shakirin,0,2,2016-03-07 10:06:09+00:00,2016-04-26 10:20:39+00:00,"Hi,


Sorry for reporting issue for pretty old Camel version, just like to be sure that it is (or will be) fixed in newer versions.
Environment: activemq camel component is used in Karaf container and configured in Aries blueprint 
Issue: if configuration correct, activemq component works as a charm.
However if user forget to set jmsConfig with connection factory into ActiveMQComponent, the blueprint context hangs in ""Creating"" state and no any error message / exceptions are thrown. This make diagnostic of the problem very difficult.


The blueptrint configuration looks like:



   <reference id=""jmsConnectionFactory"" interface=""javax.jms.ConnectionFactory""/>

    <bean id=""jms"" class=""org.apache.camel.component.jms.JmsComponent"">
        <property name=""connectionFactory"" ref=""jmsConnectionFactory""/>
    </bean>

    <bean id=""jmsConfig"" class=""org.apache.camel.component.jms.JmsConfiguration"">
        <property name=""connectionFactory"" ref=""jmsConnectionFactory""/>
    </bean>

    <bean id=""activemq"" class=""org.apache.activemq.camel.component.ActiveMQComponent"">
        <property name=""configuration"" ref=""jmsConfig""/>
    </bean>




The jmsConnectionFactory is imported as OSGi service. 
To reproduce the problem it is enough to comment or remove <bean id=""activemq""  element. The blueprint context hangs without any error message.","davsclaus:1461576411:2016-04-25T17:26:51.150+0000:1461576411:2016-04-25T17:26:51.150+0000:Its how OSGi works. The service is looked up and will timeout after a while.


ashakirin:1461637239:2016-04-26T10:20:39.651+0000:1461637239:2016-04-26T10:20:39.651+0000:Hi Claus,

I still see two improvements:
a) Logging the problem. Currently users don't have any information about the problem at all.
b) Waiting for OSGi services normally brings blueprint context in ""GracePeriod"" state will be either timeouted (or resolved) after configured time. Currently component hangs in ""Creating"" state, that a bit confusing for me.

Regards,
Andrei."
0,CAMEL-9673,Bug,Minor,2.16.2,"2.16.3, 2.17.0","
None
",Resolved,Fixed,"2.16.3, 2.17.0",Claus Ibsen,Claus Ibsen,0,2,2016-03-07 07:53:31+00:00,2016-03-07 08:21:08+00:00,"If a message has fault flag, then a doFinally block is only executed the first processor. We should ensure the entire block is processed like we do if an exception was thrown. The same kind of logic should apply for fault.",
0,CAMEL-9672,Bug,Minor,2.16.2,"2.16.3, 2.17.0","
None
",Resolved,Fixed,"2.16.3, 2.17.0",Claus Ibsen,Stephan Siano,0,3,2016-03-07 06:55:12+00:00,2016-03-07 08:58:46+00:00,"If a statement like



interceptFrom().when(simple(""${header.foo} == 'bar'"")).to(""mock:intercepted"");




is available in a route builder with JMX enabled the startup will fail in Camel 2.16.2 (and the current 2.17-SNAPSHOT) with a ClassCastException in line 310 of DefaultManagementObjectStrategy.


The generated processor is a FilterProcessor, but the resulting definition is a WhenDefinition not a FilterDefinition.


The reason is that CAMEL-8992 introduced a too precise class check for this.


The attached patch relexes the class constraint on the definition.","siano:1457305420:2016-03-07T07:03:40.156+0000:1457305420:2016-03-07T07:03:40.156+0000:One more comment about the patch: It does not contain a unit test because I was unsure where that would go. For testing I edited an arbitrary test in camel-test by adding above line to the route builder and overloding the useJms() method (that it always returns true instead of false) but I rather guess this is not the real place where the unit test for this should go.
davsclaus:1457305907:2016-03-07T07:11:47.531+0000:1457305907:2016-03-07T07:11:47.531+0000:Thanks yeah JMX tests should go in the management directory. Maybe you can work on an unit test there as it would be great to have one to ensure this bug do not re-appear.
siano:1457307509:2016-03-07T07:38:29.333+0000:1457307509:2016-03-07T07:38:29.333+0000:The attached patch does also contain a test for the issue (and the fix is improved)
davsclaus:1457312326:2016-03-07T08:58:46.328+0000:1457312326:2016-03-07T08:58:46.328+0000:Thanks for the patch."
0,CAMEL-9671,Improvement,Minor,2.16.2,,"
None
",Resolved,Duplicate,None,Andrea Cosentino,Peter Keller,0,3,2016-03-05 16:13:22+00:00,2016-09-15 15:08:25+00:00,"Camel complains that different fields are ""not marked as ignorable"" and fails properly handling the event. Fields:



Type
Action
ID
Attributes
image
name



Camel route:



from(""docker://events?host=192.168.99.100&port=2376&secure=true&certPath=/path/to/.docker/machine/machines/default"")
    .process(new Processor() {
        @Override
        public void process(Exchange exchange) throws Exception {
             LOG.info(""body = {}"", exchange.getIn().getBody());
        }
    });




Error messages: 



[               pool-1-thread-1] DockerEventsConsumer           ERROR Error Consuming from Docker Events: Unrecognized field ""Type"" (class com.github.dockerjava.api.model.Event), not marked as ignorable (4 known properties: ""status"", ""id"", ""time"", ""from""])
 at [Source: com.github.dockerjava.jaxrs.util.WrappedResponseInputStream@7d534017; line: 1, column: 134] (through reference chain: com.github.dockerjava.api.model.Event[""Type""])
[               pool-1-thread-1] DockerEventsConsumer           ERROR Error Consuming from Docker Events: Unrecognized field ""Action"" (class com.github.dockerjava.api.model.Event), not marked as ignorable (4 known properties: ""status"", ""id"", ""time"", ""from""])
 at [Source: com.github.dockerjava.jaxrs.util.WrappedResponseInputStream@7d534017; line: 1, column: 155] (through reference chain: com.github.dockerjava.api.model.Event[""Action""])
[               pool-1-thread-1] DockerEventsConsumer           ERROR Error Consuming from Docker Events: Unrecognized field ""Actor"" (class com.github.dockerjava.api.model.Event), not marked as ignorable (4 known properties: ""status"", ""id"", ""time"", ""from""])
 at [Source: com.github.dockerjava.jaxrs.util.WrappedResponseInputStream@7d534017; line: 1, column: 173] (through reference chain: com.github.dockerjava.api.model.Event[""Actor""])
[               pool-1-thread-1] DockerEventsConsumer           ERROR Error Consuming from Docker Events: Unrecognized field ""ID"" (class com.github.dockerjava.api.model.Event), not marked as ignorable (4 known properties: ""status"", ""id"", ""time"", ""from""])
 at [Source: com.github.dockerjava.jaxrs.util.WrappedResponseInputStream@7d534017; line: 1, column: 179] (through reference chain: com.github.dockerjava.api.model.Event[""ID""])
[               pool-1-thread-1] DockerEventsConsumer           ERROR Error Consuming from Docker Events: Unrecognized field ""Attributes"" (class com.github.dockerjava.api.model.Event), not marked as ignorable (4 known properties: ""status"", ""id"", ""time"", ""from""])
 at [Source: com.github.dockerjava.jaxrs.util.WrappedResponseInputStream@7d534017; line: 1, column: 259] (through reference chain: com.github.dockerjava.api.model.Event[""Attributes""])
[               pool-1-thread-1] DockerEventsConsumer           ERROR Error Consuming from Docker Events: Unrecognized field ""image"" (class com.github.dockerjava.api.model.Event), not marked as ignorable (4 known properties: ""status"", ""id"", ""time"", ""from""])
 at [Source: com.github.dockerjava.jaxrs.util.WrappedResponseInputStream@7d534017; line: 1, column: 268] (through reference chain: com.github.dockerjava.api.model.Event[""image""])
[               pool-1-thread-1] DockerEventsConsumer           ERROR Error Consuming from Docker Events: Unrecognized field ""name"" (class com.github.dockerjava.api.model.Event), not marked as ignorable (4 known properties: ""status"", ""id"", ""time"", ""from""])
 at [Source: com.github.dockerjava.jaxrs.util.WrappedResponseInputStream@7d534017; line: 1, column: 301] (through reference chain: com.github.dockerjava.api.model.Event[""name""])","davsclaus:1457166697:2016-03-05T16:31:37.878+0000:1457166697:2016-03-05T16:31:37.878+0000:Its docker api changes since the component was created.
Peter Keller:1457264029:2016-03-06T19:33:49.560+0000:1457264029:2016-03-06T19:33:49.560+0000:camel-docker depends on docker-java v1.4.0.

docker-java support matrix according to https://github.com/docker-java/docker-java:
- docker-java v2.2.3 -> Docker Remote API v1.19
- docker-java v3.0.0-RC3 -> Docker Remote API v1.22
davsclaus:1458692749:2016-03-23T08:25:49.960+0000:1458692749:2016-03-23T08:25:49.960+0000:Andrea I wonder if you eventually can look into this for the 2.18 release.
acosentino:1458692964:2016-03-23T08:29:24.676+0000:1458692964:2016-03-23T08:29:24.676+0000:Yes, I will work on this. I guess there will be big changes.
davsclaus:1473923231:2016-09-15T15:07:11.193+0000:1473923272:2016-09-15T15:07:52.285+0000:There is another ticket about upgrading camel-docker to latest API so it supports docker 1.12 etc.

CAMEL-10307"
0,CAMEL-9670,Bug,Minor,"2.14.2, 2.15.5, 2.16.2","2.15.6, 2.16.3, 2.17.0","
None
",Resolved,Fixed,"2.15.6, 2.16.3, 2.17.0",Andrea Cosentino,Dirk Reske,0,2,2016-03-04 09:32:33+00:00,2016-03-04 10:44:34+00:00,"As result of CAMEL-8718 the connection will be closed on invalid credentials before throwing an exception.


But disconnecting the ftpclient will reset the reply string, so the exception message is null.
The attached patch will store the reply string before disconnecting.","acosentino:1457055927:2016-03-04T09:45:27.306+0000:1457055927:2016-03-04T09:45:27.306+0000:Hi [~dreske],

I guess you need to rebase your patch with the latest code from camel-2.16.x branch.

It would be better if you recreate your patch against the camel-ftp from master branch, then we will backport your fix on the other branches.

Thanks for your contributions! :-)
dreske:1457058614:2016-03-04T10:30:14.185+0000:1457059147:2016-03-04T10:39:07.612+0000:Yes, the patch was based on 2.14.4
I've updated it.
acosentino:1457059467:2016-03-04T10:44:27.189+0000:1457059467:2016-03-04T10:44:27.189+0000:Applied on master branch, camel-2.16.x branch and camel-2.15.x branch.

Thanks for the patch :-)"
0,CAMEL-9669,Improvement,Minor,2.16.2,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Jon McEwen,0,2,2016-03-03 16:40:52+00:00,2016-03-07 14:34:05+00:00,"In order for JAXB marshalled XML output to include a noNamespaceSchemaLocation reference, the JaxbDataFormat should allow the property ""jaxb.noNamespaceSchemaLocation"" to be set on the marshaller.  It is already possible to set ""jaxb.schemaLocation"" via the JaxbDataFormat and other properies, so this should be a straightforward addition.","jonmcewen:1457070765:2016-03-04T13:52:45.912+0000:1457070765:2016-03-04T13:52:45.912+0000:Pull request created: https://github.com/apache/camel/pull/887

jonmcewen:1457330725:2016-03-07T14:05:25.320+0000:1457330725:2016-03-07T14:05:25.320+0000:PR updated following review by davsclaus.  
davsclaus:1457332445:2016-03-07T14:34:05.064+0000:1457332445:2016-03-07T14:34:05.064+0000:Thanks for the PR"
0,CAMEL-9668,Bug,Minor,None,,"
None
",Resolved,Fixed,None,Luca Burgazzoli,Luca Burgazzoli,0,2,2016-03-03 16:32:54+00:00,2016-03-04 08:50:41+00:00,No Desc,"githubbot:1456994448:2016-03-03T16:40:48.330+0000:1456994448:2016-03-03T16:40:48.330+0000:GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/884

    CAMEL-9668 - Add lzf to DataFormatsDefinition

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel CAMEL-9668

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/884.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #884
    
----
commit 6a250904ecaf6ab1cfd595f6f537e293067d381c
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-03-03T16:39:45Z

    CAMEL-9668 - Add lzf to DataFormatsDefinition

----

githubbot:1457050580:2016-03-04T08:16:20.722+0000:1457050580:2016-03-04T08:16:20.722+0000:Github user lburgazzoli closed the pull request at:

    https://github.com/apache/camel/pull/884
"
0,CAMEL-9667,Bug,Major,2.17.0,,"
None
",Resolved,Not A Problem,None,Claus Ibsen,Martin Basovník,0,2,2016-03-03 15:28:27+00:00,2016-03-04 14:42:24+00:00,"Resequencer sometimes does not work with asynchronous producers, e.g. seda, jms, ... Either it should work or it should inform user about risky construction.","mbasovni:1456990974:2016-03-03T15:42:54.440+0000:1456991436:2016-03-03T15:50:36.543+0000:[Reproducer|https://github.com/basovnik/camel/blob/CAMEL-9667/camel-core/src/test/java/org/apache/camel/processor/resequencer/ResequencerAsyncProducerTest.java]:
{code}
git clone git@github.com:basovnik/camel.git
cd camel
git checkout CAMEL-9667
mvn -pl :camel-core -am clean test -DfailIfNoTests=false -Dtest=ResequencerAsyncProducerTest
{code}
davsclaus:1457073744:2016-03-04T14:42:24.274+0000:1457073744:2016-03-04T14:42:24.274+0000:Thanks for the test, but its not a bug
https://github.com/apache/camel/commit/df092872f124a9682ac15e65d3920021035cd7d9

The cut off the resequencer may mean due thread timing and when the batch is complete that the order can change from time to time.

It has nothing to do if using async processor or not."
0,CAMEL-9666,Bug,Minor,2.16.2,"2.16.3, 2.17.0","
None
",Resolved,Fixed,"2.16.3, 2.17.0",Claus Ibsen,Martin Basovník,0,3,2016-03-03 09:48:09+00:00,2016-03-05 08:26:28+00:00,"fault property should be copied in the following places:


https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/impl/DefaultExchange.java#L100
https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/impl/DefaultExchange.java#L107


Consequences:
DefaultExchange#isFault() does not work if exception property is not set.","mbasovni:1456970121:2016-03-03T09:55:21.188+0000:1456970121:2016-03-03T09:55:21.188+0000:I am working on fix.
githubbot:1456971663:2016-03-03T10:21:03.660+0000:1456971663:2016-03-03T10:21:03.660+0000:GitHub user basovnik opened a pull request:

    https://github.com/apache/camel/pull/882

    CAMEL-9666: Propagate 'fault' property to soft copy

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/basovnik/camel CAMEL-9666

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/882.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #882
    
----
commit dbd9c0c6bf0203a0ab6c82876f5ee936f479fcba
Author: Martin Basovnik <mbasovni@redhat.com>
Date:   2016-03-03T10:19:04Z

    CAMEL-9666: Propagate 'fault' property to soft copy

----

mbasovni:1456971674:2016-03-03T10:21:14.885+0000:1456971674:2016-03-03T10:21:14.885+0000:https://github.com/apache/camel/pull/882
davsclaus:1457051927:2016-03-04T08:38:47.763+0000:1457051927:2016-03-04T08:38:47.763+0000:Thanks for the PR
githubbot:1457137588:2016-03-05T08:26:28.939+0000:1457137588:2016-03-05T08:26:28.939+0000:Github user basovnik closed the pull request at:

    https://github.com/apache/camel/pull/882
"
0,CAMEL-9665,Bug,Major,2.16.1,"2.15.6, 2.16.3, 2.17.0","
None
",Resolved,Fixed,"2.15.6, 2.16.3, 2.17.0",Claus Ibsen,Thomas Günter,0,2,2016-03-02 15:06:59+00:00,2016-03-06 11:37:36+00:00,"WsEndpoint.connect(WsConsumer) should connect to the WebSocket server in case this is not already done. 


The test case (WsProducerConsumerTest.java) only works, since the producer is connecting first and the consumer is using the same connection. If no producer is used, then no connection is created and the consumer will not receive any messages.


Suggestion:



  void connect(final WsConsumer wsConsumer)
  {
    this.consumers.add(wsConsumer);

    if (this.websocket == null || !this.websocket.isOpen())
    {
      this.connect();
    }
  }",davsclaus:1457235456:2016-03-06T11:37:36.732+0000:1457235456:2016-03-06T11:37:36.732+0000:Thanks for reporting and the suggestion.
0,CAMEL-9664,Bug,Major,2.16.2,"2.16.3, 2.17.0","
None
",Resolved,Fixed,"2.16.3, 2.17.0",Claus Ibsen,Wouter Blancquaert,0,1,2016-03-02 15:05:07+00:00,2016-03-04 14:10:53+00:00,"We are trying to bind an incoming POST REST call with Content-Type application/x-www-form-urlencoded to an outgoing one. The incoming request body containing the url encoded form does not get transferred to the outgoing one. We investigated and saw there's a bug in 
DefaultRestletBinding.populateRestletRequestFromExchange:180 (2.16.2):


if (request.getMethod() == Method.GET || (request.getMethod() == Method.POST && mediaType == MediaType.APPLICATION_WWW_FORM)) {


The mediaType gets compared using ==. This is wrong. The condition always evaluates to false although the configured Content-Type within the header is ""application/x-www-form-urlencoded"" (or in our case ""application/x-www-form-urlencoded; charset=ISO-8859-1"").",
0,CAMEL-9663,Bug,Major,2.16.2,,"
None
",Resolved,Incomplete,None,Unassigned,Suresh Kumar,0,2,2016-03-02 14:41:23+00:00,2020-12-21 09:44:40+00:00,"We have multiple cxf endpoint in the same camel route. 


Following route causes the problem
  from(""cxfrs:server...."")
    .process(""prepareHeader"")
    .to(""cxfrs:client...."")


When CXF receives a request, It sets the header for a response class which is to be returned by rsserver. Same response class is passed to rsclient in the camel header. For our usecase we are substituting the rsclient response class. When rsclient invokes the cxf endpoint we could see cxf headers in the interceptor but the same headers are not there in camel headers.


I have debugged the cxf code and found the issue in the following code base
Class: CxfRsProducer
Method: invokeHttpClient
Line number: 222


invokeHttpClient method invokes cxfendpoint using cxf code base and converts into the user-defined-class which in turn drops the cxf headers. So CXF headers are not mapped to the camel header. When we remove the response-class in the camel header then invoke method from CxfRsProducer:210-line is invoked.","davsclaus:1489109252:2017-03-10T09:27:32.110+0000:1489109252:2017-03-10T09:27:32.110+0000:Do you have an unit test or sample project that reproduces this issue?
davsclaus:1608515080:2020-12-21T09:44:40.434+0000:1608515080:2020-12-21T09:44:40.434+0000:dropping old bugs on 2.x. "
0,CAMEL-9662,Task,Major,None,None,"
None
",Resolved,Fixed,2.17.0,Andrea Cosentino,Thomas Diesler,0,2,2016-03-02 12:58:26+00:00,2016-03-04 12:34:36+00:00,No Desc,"githubbot:1456894782:2016-03-02T12:59:42.671+0000:1456894782:2016-03-02T12:59:42.671+0000:GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/880

    [CAMEL-9662] Expose cxf-rt-transports-http through BOM

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-9662

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/880.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #880
    
----
commit 903ef8926c48a16d83af4a11af9cafe0779475cf
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2016-03-02T12:59:09Z

    [CAMEL-9662] Expose cxf-rt-transports-http through BOM

----

githubbot:1456908230:2016-03-02T16:43:50.876+0000:1456908230:2016-03-02T16:43:50.876+0000:Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/880
"
0,CAMEL-9661,New Feature,Minor,None,None,"
None
",Resolved,Fixed,2.17.0,Luca Burgazzoli,Luca Burgazzoli,0,4,2016-03-02 12:42:59+00:00,2016-03-04 08:50:25+00:00,No Desc,"githubbot:1456992938:2016-03-03T16:15:38.890+0000:1456992938:2016-03-03T16:15:38.890+0000:GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/883

    CAMEL-9661 - YAML Data Format

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel CAMEL-9661

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/883.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #883
    
----
commit fe8e1e939aaa3d29128af312880fa9b8d1ccbad2
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-03-02T15:17:55Z

    CAMEL-9661 - YAML Data Format

----

githubbot:1456993177:2016-03-03T16:19:37.971+0000:1456993177:2016-03-03T16:19:37.971+0000:Github user lburgazzoli closed the pull request at:

    https://github.com/apache/camel/pull/883

githubbot:1456993187:2016-03-03T16:19:47.217+0000:1456993187:2016-03-03T16:19:47.217+0000:GitHub user lburgazzoli reopened a pull request:

    https://github.com/apache/camel/pull/883

    CAMEL-9661 - YAML Data Format

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel CAMEL-9661

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/883.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #883
    
----
commit fe8e1e939aaa3d29128af312880fa9b8d1ccbad2
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-03-02T15:17:55Z

    CAMEL-9661 - YAML Data Format

----

davsclaus:1457049596:2016-03-04T07:59:56.940+0000:1457049596:2016-03-04T07:59:56.940+0000:Looks great, do you mind adding some docs to the wiki at
http://camel.apache.org/data-format.html
davsclaus:1457049639:2016-03-04T08:00:39.164+0000:1457049639:2016-03-04T08:00:39.164+0000:And yeah creating a data format and adding it into camel-core and whatnot is a bit tricker than a plain component - so you now earned the ""data format"" rider badge ;)
acosentino:1457049741:2016-03-04T08:02:21.087+0000:1457049741:2016-03-04T08:02:21.087+0000:With Luca, we were thinking to add a page on the gitbook with the full procedure to add a new dataformat.
githubbot:1457050569:2016-03-04T08:16:09.997+0000:1457050569:2016-03-04T08:16:09.997+0000:Github user lburgazzoli closed the pull request at:

    https://github.com/apache/camel/pull/883

lb:1457052616:2016-03-04T08:50:16.517+0000:1457052616:2016-03-04T08:50:16.517+0000:Done"
0,CAMEL-9660,Bug,Major,"2.16.2, 2.17.0","2.16.3, 2.17.0","
None
",Resolved,Fixed,"2.16.3, 2.17.0",Claus Ibsen,Tadayoshi Sato,0,2,2016-03-02 06:22:16+00:00,2016-03-07 01:49:09+00:00,"For instance,



template.sendBodyAndHeader(""jetty:http://localhost:9000/test?bridgeEndpoint=true"", ""Hello World"", Exchange.HTTP_URI, ""/<>{}"");




this test code crashes with the following error:



java.net.URISyntaxException: Illegal character in path at index 1: /<>{}




It is because there are places in the HTTP producers code where they are trying to create a java.net.URI instance based on the unsafe string ""/<>{}"".


This issue causes practical problems when bridging between Netty HTTP consumer endpoints and those HTTP producer endpoints, since Netty consumers route IN messages with Exchange.HTTP_URI header being unencoded.","githubbot:1456871385:2016-03-02T06:29:45.164+0000:1456871385:2016-03-02T06:29:45.164+0000:GitHub user tadayosi opened a pull request:

    https://github.com/apache/camel/pull/878

    CAMEL-9660 - HTTP producers crash when Exchange.HTTP_URI header contains unencoded unsafe characters

    Please review and merge it. Thanks!
    
    https://issues.jboss.org/browse/ENTESB-4737

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tadayosi/camel CAMEL-9660

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/878.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #878
    
----
commit 01c0cd4fa33eec1e64e19967c5f4a0a7fa7a8545
Author: Tadayoshi Sato <sato.tadayoshi@gmail.com>
Date:   2016-03-02T06:26:46Z

    CAMEL-9660 - HTTP producers crash when Exchange.HTTP_URI header contains unencoded unsafe characters

----

githubbot:1457286549:2016-03-07T01:49:09.704+0000:1457286549:2016-03-07T01:49:09.704+0000:Github user tadayosi closed the pull request at:

    https://github.com/apache/camel/pull/878
"
0,CAMEL-9659,New Feature,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Daniel Kulp,Daniel Kulp,0,2,2016-03-01 18:58:44+00:00,2016-03-21 08:43:53+00:00,"Should support both a producer with various ""file like"" operations (create, remove, list, etc..) and a consumer that will poll for new files and route appropriately.","davsclaus:1457056035:2016-03-04T09:47:15.521+0000:1457056035:2016-03-04T09:47:15.521+0000:I wonder if the component should not be renamed to camel-mongodb-gridfs as its for mongodb, and people may not be aware of that.
Also the component name could likely be renamed from gridfs to mongodb-gridfs. All that would make it much clearer what it is for."
0,CAMEL-9658,Bug,Major,"2.16.2, 2.17.0","2.16.3, 2.17.0","
None
",Resolved,Fixed,"2.16.3, 2.17.0",Claus Ibsen,Tadayoshi Sato,0,2,2016-03-01 08:18:59+00:00,2016-03-07 01:47:07+00:00,"When bridging HTTP endpoints like this, the HTTP path gets decoded at the TO endpoint:



from(""netty-http:http://localhost:9000/camel?matchOnUriPrefix=true"")
        .to(""http4://host1:9000/fred?bridgeEndpoint=true"");




For instance, requesting to http://localhost:9000/camel/%3B will result in a call to http://host1:9000/fred/;, thus cause several issues downstream.","tadayosi:1456809414:2016-03-01T13:16:54.226+0000:1456809414:2016-03-01T13:16:54.226+0000:PR sent: https://github.com/apache/camel/pull/877
githubbot:1457286427:2016-03-07T01:47:07.444+0000:1457286427:2016-03-07T01:47:07.444+0000:Github user tadayosi closed the pull request at:

    https://github.com/apache/camel/pull/877
"
0,CAMEL-9657,Improvement,Major,None,"2.16.3, 2.17.0","
None
",Resolved,Fixed,"2.16.3, 2.17.0",Claus Ibsen,James Netherton,0,2,2016-02-29 16:39:06+00:00,2016-03-04 11:09:58+00:00,"This code can cause problems when Camel runs in a container (like WildFly) with CDI.


The code assumes that the camel context will get started and stopped at some point during its lifecycle, which then triggers an unmanage from the Container instance object. 


With CDI, this scenario may not happen. Especially when CDI proxies are created for @Injecting camel contexts into beans. The camel context in this scenario is never started or stopped, resulting in this map of contexts filling up with redundant objects.  


Not sure what the best way of dealing with this is. It'd be nice to remove the Container.manage code from the DefaultCamelContext default constructor or implement Container in such a way that clients can override its behaviour.","githubbot:1456921552:2016-03-02T20:25:52.328+0000:1456921552:2016-03-02T20:25:52.328+0000:GitHub user jamesnetherton opened a pull request:

    https://github.com/apache/camel/pull/881

    [CAMEL-9657] Move container management of camel contexts to start method

    Also ignore CDI proxied camel contexts when invoking contextCreated()
    from CamelContextTrackerRegistry

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jamesnetherton/camel CAMEL-9657

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/881.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #881
    
----
commit c03ae5e260781a530311fdfb83eeaf5907772d5f
Author: James Netherton <jamesnetherton@gmail.com>
Date:   2016-03-01T20:51:05Z

    [CAMEL-9657] Move container management of camel contexts to start method
    
    Also ignore CDI proxied camel contexts when invoking contextCreated()
    from CamelContextTrackerRegistry

----

githubbot:1457060998:2016-03-04T11:09:58.870+0000:1457060998:2016-03-04T11:09:58.870+0000:Github user jamesnetherton closed the pull request at:

    https://github.com/apache/camel/pull/881
"
0,CAMEL-9656,Bug,Minor,2.16.2,"2.16.3, 2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.16.3, 2.17.1, 2.18.0",Claus Ibsen,Colin Harms,0,2,2016-02-29 16:26:34+00:00,2016-03-22 09:53:07+00:00,"I'm trying to re-use the Springboot Actuator HealthEndpoint and InfoEndpoint beans and exposing them via rest:



@Autowired
HealthEndpoint healthEndpoint;
...
//build the route
from(""rest:get:health"").routeId(""REST-healthcheck"").bean(healthEndpoint, ""invoke"");




However when that gets invoked, it throws a AmbiguousMethodCallException and its other candidate for ""invoke()"" is on the abstract class that HealthEndpoint is extending


It looks like the issue is here:
https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java#L1020


In this case HealthEndpoint extends AbstractHealthEndpoint, which is abstract, but invoke() is declared on the Endpoint interface. So this logic: 



 !isFromInterface && Modifier.isAbstract(info.getMethod().getModifiers()) 



Will not evaluate to true, and the abstract method will remain a candidate.


Here are the sources for the Endpoint/HealthEndpoint/AbstractEndpoint classes:


https://github.com/spring-projects/spring-boot/blob/master/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/Endpoint.java#L56


https://github.com/spring-projects/spring-boot/blob/master/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/AbstractEndpoint.java#L32


https://github.com/spring-projects/spring-boot/blob/master/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/HealthEndpoint.java#L36


It seems this is intentional, due to the ""if the class is an interface then keep the method"" comment in BeanInfo.
I'm curious as to why that is.","davsclaus:1457072189:2016-03-04T14:16:29.000+0000:1457072189:2016-03-04T14:16:29.000+0000:Can you build a sample project or somerthing and attach as a .zip or put on github etc. Then we can use that to look into this.
charms:1457074117:2016-03-04T14:48:37.914+0000:1457074117:2016-03-04T14:48:37.914+0000:Will do Claus!
davsclaus:1458605076:2016-03-22T08:04:36.160+0000:1458605076:2016-03-22T08:04:36.160+0000:I have reproduced the issue and working on a fix."
0,CAMEL-9655,Improvement,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Claus Ibsen,0,1,2016-02-28 12:38:57+00:00,2016-02-28 13:05:23+00:00,"To make it consistent as some components will not accept localhost or 0.0.0.0 when calling locally due they work a bit different when given local host name.


Add new allLocalIp to host name resolver and use it as default.",
0,CAMEL-9654,Improvement,Major,2.16.2,"2.16.3, 2.17.0","
None
",Resolved,Fixed,"2.16.3, 2.17.0",Claus Ibsen,Claus Ibsen,0,1,2016-02-28 11:42:16+00:00,2016-02-28 11:47:16+00:00,"Like the other rest-dsl components it should support foo/

{name}

 in the urls, so it maps that to a header with the key name, and the value in the http path.",
0,CAMEL-9653,Improvement,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Claus Ibsen,0,1,2016-02-28 06:29:57+00:00,2016-02-28 09:22:46+00:00,"See nabble
http://camel.465427.n5.nabble.com/Bean-instance-is-null-OGNL-bean-expressions-requires-bean-instances-tp5778338.html


In the code we say



            // loop and invoke each method
            Object beanToCall = beanHolder.getBean();
            // there must be a bean to call with, we currently does not support OGNL expressions on using purely static methods
            if (beanToCall == null) {
                throw new IllegalArgumentException(""Bean instance is null. OGNL bean expressions requires bean instances."");
            }",
0,CAMEL-9652,New Feature,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Claus Ibsen,0,1,2016-02-27 12:42:59+00:00,2016-02-27 15:25:33+00:00,"See nabbel
http://camel.465427.n5.nabble.com/Why-can-t-I-use-swagger-java-with-spark-rest-tp5778341.html",davsclaus:1456557933:2016-02-27T15:25:33.807+0000:1456557933:2016-02-27T15:25:33.807+0000:See the example/camel-example-spark-rest where we use the swagger api
0,CAMEL-9651,Bug,Major,2.16.2,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Jay mann,1,3,2016-02-26 23:57:37+00:00,2016-05-23 07:02:01+00:00,"Consuming a restful service using restlet component fails with URISyntaxException if there is a special character or space in the URL.  


To fix this org.apache.camel.component.restlet.RestletComponent should:



@Override
    public boolean useRawUri() {
        // should use encoded uri by default
        return true;
    }




Simple example of failure:



 rest(""/Utils"")
	    	.description(""Camel Utilities Rest Service"")
	    	.consumes(""application/json"").produces(""application/json"")
	    	.get(""test/testme"").route().log(""Got HEre"").
                to(""restlet:http://localhost:8299/Utils/test2/TEST%20Name?throwExceptionOnFailure=false&restletMethod=GET"")
                .getRestDefinition()
            .get(""test2/{name2}"").route().log(""GOt ${header.name2}"");




If you remove the space it works fine.



Caused by: java.net.URISyntaxException: Illegal character in path at index 38: http://localhost:8299/Utils/test2/TEST Name
	at java.net.URI$Parser.fail(URI.java:2848)
	at java.net.URI$Parser.checkChars(URI.java:3021)
	at java.net.URI$Parser.parseHierarchical(URI.java:3105)
	at java.net.URI$Parser.parse(URI.java:3053)
	at java.net.URI.<init>(URI.java:588)
	at org.apache.camel.component.restlet.RestletComponent.createEndpoint(RestletComponent.java:120)
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:114)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:570)




It seems like there are lots of bugs with restlet component, What is the most mature service for consuming restful/http services?


Thanks.","jmandawg:1456813670:2016-03-01T14:27:50.170+0000:1456813670:2016-03-01T14:27:50.170+0000:So:

@Override
    public boolean useRawUri() {
        // should use encoded uri by default
        return true;
    }

Is definitely not the correct fix because it breaks path substitution...  Not sure how to fix this.
jmandawg:1456896795:2016-03-02T13:33:15.954+0000:1456897028:2016-03-02T13:37:08.763+0000:I've attached a simple patch to use rawURL for the uriPattern and endpointURI ONLY.  This way restlet can match the uri correctly for consumer, and new URI() does not fail for producers.

Simple test to show consumer & producer both work with spaces in url.  Browse to http://localhost:9999/test%20me/now/:

{code}
from(""restlet:http://localhost:9999/test me/now"").process(new Processor() {
	@Override
	public void process(Exchange exchange) throws Exception {
                System.out.println(""Hi There"" + exchange.getIn().getHeader(Exchange.HTTP_QUERY));
			}
		}).choice()
         	.when(header(Exchange.HTTP_QUERY).isNull())
         		.to(""restlet:http://localhost:9999/test me/now?val=1"")
         	.otherwise()
             	.setHeader(""Content-Type"", constant(""application/json""))
         		.setBody(simple(""{\""DONE\"": \""${header.CamelHttpQuery}\""}""))
     		.endChoice();

{code}
jmandawg:1463503427:2016-05-18T00:43:47.121+0000:1463503427:2016-05-18T00:43:47.121+0000:Opened PR #986
davsclaus:1463958121:2016-05-23T07:02:01.102+0000:1463958121:2016-05-23T07:02:01.102+0000:Thanks for the PR"
0,CAMEL-9650,New Feature,Minor,2.16.1,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Marcin Zajaczkowski,0,2,2016-02-26 22:11:34+00:00,2016-04-09 08:45:04+00:00,"There could be an equivalent to <contextScan/> from XML configuration in JavaConfig to automatically find routes created as Spring beans using `RouteBuilder` (in non Spring Boot applications).
Currently they need to be added manually with `camelContext.addRoute(...)`.


More details:
https://mail-archives.apache.org/mod_mbox/camel-users/201602.mbox/%3C56C90F42.5000600%40wp.pl%3E","davsclaus:1456613834:2016-02-28T06:57:14.132+0000:1456613834:2016-02-28T06:57:14.132+0000:Can you maybe build a sample application using spring java config? It would be nice to have such an example in our examples catalog
https://github.com/apache/camel/tree/master/examples

That will also make it easier for us to take a look at and use for adding support for contextScan.
davsclaus:1460162264:2016-04-09T08:37:44.612+0000:1460162264:2016-04-09T08:37:44.612+0000:You can add @ComponentScan to your configuration class and spring will do its scanning. And then add @Component on your route builder classes.
davsclaus:1460162704:2016-04-09T08:45:04.664+0000:1460162704:2016-04-09T08:45:04.664+0000:See the updated example at
https://github.com/apache/camel/tree/master/examples/camel-example-spring-javaconfig"
0,CAMEL-9649,Improvement,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Martin Basovník,0,3,2016-02-26 13:52:25+00:00,2016-03-08 08:35:35+00:00,We should fix method org.apache.camel.converter.jaxb.FallbackTypeConverter#isJaxbType. It can only handle beans with annotation  @XmlRootElement now. But this annotation is not necessary. We should check if there is ObjectFactory.java class in current java package and explore this class if there is proper method returning JAXBElement<T> with annotation @XmlElementDecl.,"davsclaus:1456529849:2016-02-27T07:37:29.458+0000:1456529849:2016-02-27T07:37:29.458+0000:Are you working on a contribution?
mbasovni:1456751962:2016-02-29T21:19:22.706+0000:1456751962:2016-02-29T21:19:22.706+0000:I would like to contribute. I will inform you in few days.
githubbot:1456878895:2016-03-02T08:34:55.964+0000:1456878895:2016-03-02T08:34:55.964+0000:GitHub user basovnik opened a pull request:

    https://github.com/apache/camel/pull/879

    CAMEL-9649: Do not require @XmlRootElement annotation in JAXB FallbackTypeConverter

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/basovnik/camel CAMEL-9649

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/879.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #879
    
----
commit 1c59370527bd9903fe4366240d830225706ecb8d
Author: Martin Basovnik <mbasovni@redhat.com>
Date:   2016-03-02T08:31:26Z

    CAMEL-9649: Do not require @XmlRootElement annotation in JAXB FallbackTypeConverter

----

mbasovni:1456879598:2016-03-02T08:46:38.468+0000:1456879598:2016-03-02T08:46:38.468+0000:Hi Claus,
here is my pull request. Could you please check it?

https://github.com/apache/camel/pull/879

{{@XmlRootElement}} annotation is not required if there is dedicated JAXB factory method in {{ObjectFactory}} class.

Next step would be to use {{QName}} to support multiple possible mappings between java class and its XML representation. It is not possible now.


mbasovni:1456880311:2016-03-02T08:58:31.643+0000:1456880311:2016-03-02T08:58:31.643+0000:The following unit test is failing now. I do not know why yet:
{{org.apache.camel.example.DataFormatDataSetTest#testConcurrentMarshall}}
mbasovni:1456881623:2016-03-02T09:20:23.548+0000:1456881623:2016-03-02T09:20:23.548+0000:{{type.getPackage()}} was returning {{null}}.

https://github.com/basovnik/camel/commit/9a87ad3e25a1b95fffb517e69437ece59ee5b49a?diff=unified#diff-ea4b0f6cbed780ed0e41f4cbbdc75aa2R337
githubbot:1457308615:2016-03-07T07:56:55.580+0000:1457308615:2016-03-07T07:56:55.580+0000:Github user basovnik closed the pull request at:

    https://github.com/apache/camel/pull/879

mbasovni:1457310294:2016-03-07T08:24:54.824+0000:1457310448:2016-03-07T08:27:28.936+0000:[~davsclaus], do you think it would be useful to add possibility to have several {{@XmlElementDecl}} annotations for one type?

e.g.
{code:xml}
<request>
<text>world</text>
</request>
{code}

{code:xml}
<response>
<text>Hello world!</text>
</response>
{code}
*Java class*:
{code:java}
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = """", propOrder = {""text""})
public class Message {
    @XmlElement(required = true)
    private String text;
    ....
}
{code}
*ObjectFactory*:
{code:java}
@XmlElementDecl(namespace = """", name = ""request"")
public JAXBElement<Message> createRequest(Message value) {
        return new JAXBElement<>(REQUEST_QNAME, Message.class, null, value);
}
@XmlElementDecl(namespace = """", name = ""response"")
public JAXBElement<Message> createResponse(Message value) {
        return new JAXBElement<>(RESPONSE_QNAME, Message.class, null, value);
}
{code}

We would have to somehow pass the {{QName}} parameter of required element to {{convertTo}} method when it uses {{Exchange}}, e.g.:
* exchange property
* message header
* ???

or add new method to interface {{TypeConverter}} with extra parameter of type {{Object}}. 

What do you think? Is this use case interesting for us?


davsclaus:1457353208:2016-03-07T20:20:08.520+0000:1457353208:2016-03-07T20:20:08.520+0000:Just improved this so the regular jaxb data format now also supports this, so you can use ObjectFactory for those as well.
davsclaus:1457391671:2016-03-08T07:01:11.148+0000:1457391671:2016-03-08T07:01:11.148+0000:I am having 2nd doubts about this as there is a performance penality with the reflection overhead and check for object factory. As a fallback converter the converter can potentially be invoked for any kind of convertion attempts that is not related to XML at all.

The check for annotation is very fast and so was not a problem. But the new check for ObjectFactory class is not.
davsclaus:1457396689:2016-03-08T08:24:49.393+0000:1457396689:2016-03-08T08:24:49.393+0000:Okay I added an option to allow to turn this off.

You can set CamelJaxbObjectFactory=false on the properties on camel context.
davsclaus:1457397335:2016-03-08T08:35:35.063+0000:1457397335:2016-03-08T08:35:35.063+0000:And as well there is an option on the <jaxb> data format you can use to turn this off."
0,CAMEL-9648,New Feature,Major,None,None,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,John D. Ament,0,4,2016-02-26 12:03:47+00:00,2016-03-07 08:38:18+00:00,Create an IronMQ component for Camel,"githubbot:1456560294:2016-02-27T16:04:54.810+0000:1456560294:2016-02-27T16:04:54.810+0000:GitHub user pax95 opened a pull request:

    https://github.com/apache/camel/pull/871

    CAMEL-9648: Create new IronMQ component

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/pax95/camel ironmq

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/871.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #871
    
----
commit 076a849ce84195358eb81c9e366264ca10113c86
Author: Preben Asmussen <preben.asmussen@gmail.com>
Date:   2016-02-27T13:39:33Z

    CAMEL-9648: Create new IronMQ component

----

githubbot:1456561305:2016-02-27T16:21:45.251+0000:1456561305:2016-02-27T16:21:45.251+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/871

davsclaus:1456561504:2016-02-27T16:25:04.027+0000:1456561504:2016-02-27T16:25:04.027+0000:Thanks to Preben we have the component donated. What is still to do is to add a wiki page with the documentation. 
davsclaus:1456561532:2016-02-27T16:25:32.809+0000:1456561532:2016-02-27T16:25:32.809+0000:And also a karaf camel-ironmq feature file. As ironmq JAR is not OSGi we need to wrap it.
preben:1456561696:2016-02-27T16:28:16.625+0000:1456561696:2016-02-27T16:28:16.625+0000:I'll fix the docs asap.
johndament:1456563084:2016-02-27T16:51:24.744+0000:1456563084:2016-02-27T16:51:24.744+0000:I can take a look at Karaf support as well.  I raised a ticket against IronMQ directly to have them publish the client in an OSGi compliant way, but in the interim we can probably republish the JAR.
preben:1456629015:2016-02-28T11:10:15.672+0000:1456629015:2016-02-28T11:10:15.672+0000:Docs done.

I realized that the component documentation in asciidoc actually uses the javadoc for component options documentation.
I'll polish that so that documentation in asciidoc and the wiki are in sync with a new PR.

[~johndament] Maybe you can create a PR for the OSGi compliance. The ironmq library is maven based..

githubbot:1456640230:2016-02-28T14:17:10.434+0000:1456640230:2016-02-28T14:17:10.434+0000:GitHub user pax95 opened a pull request:

    https://github.com/apache/camel/pull/873

    CAMEL-9648: Polished javadoc

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/pax95/camel ironmq-javadoc

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/873.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #873
    
----
commit e37e781a93a8c9145394ecbc9fc0878833237d02
Author: Preben Asmussen <preben.asmussen@gmail.com>
Date:   2016-02-28T14:14:05Z

    CAMEL-9648: Polished javadoc

----

johndament:1456642338:2016-02-28T14:52:18.651+0000:1456642338:2016-02-28T14:52:18.651+0000:Raised a PR to servicemix bundles to create Gson and IronMQ OSGi wrapped artifacts: https://github.com/apache/servicemix-bundles/pull/55

Hope they look right ;-)

[~preben] I'm always hesitant to raise PRs to commercial vendors, even when they have code up on github.
githubbot:1456704767:2016-02-29T08:12:47.620+0000:1456704767:2016-02-29T08:12:47.620+0000:Github user pax95 closed the pull request at:

    https://github.com/apache/camel/pull/873

preben:1457078419:2016-03-04T16:00:19.130+0000:1457078419:2016-03-04T16:00:19.130+0000:Got a notice from the Iron. They will look at making a OSGi jar.
davsclaus:1457311098:2016-03-07T08:38:18.472+0000:1457311098:2016-03-07T08:38:18.472+0000:Create a new ticket about ironmq in the karaf features when they have released it as an osgi bundle."
0,CAMEL-9647,New Feature,Major,None,None,"
None
",Resolved,Not A Problem,2.18.0,Claus Ibsen,James Strachan,0,3,2016-02-26 09:56:24+00:00,2016-04-24 15:48:41+00:00,"It might be nice if the circuit breakers in Apache Camel could expose metrics to Hystrix so that the Hystrix dashboard could be included to visualise them
http://projects.spring.io/spring-cloud/docs/1.0.3/spring-cloud.html#_hystrix_metrics_stream


Its pretty easy to add the Hystrix dashboard to spring boot apps; and use Turbine to aggregate them etc","davsclaus:1456614046:2016-02-28T07:00:46.410+0000:1456614046:2016-02-28T07:00:46.410+0000:Yeah a camel-hysterix component is in the works, so it could be that we could scrape the metrics from camel there, and expose them in a format that hysterix uses.
davsclaus:1461484121:2016-04-24T15:48:41.446+0000:1461484121:2016-04-24T15:48:41.446+0000:We have a hystrix EIP you can use now"
0,CAMEL-9646,Task,Minor,2.16.2,"2.16.3, 2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.16.3, 2.17.1, 2.18.0",Andrea Cosentino,Tadayoshi Sato,0,3,2016-02-26 02:40:13+00:00,2016-04-01 06:26:35+00:00,"Xalan ServiceMix bundle 2.7.2_3 will be released in March 2016, which should include the bug fix SM-2880.","davsclaus:1459388166:2016-03-31T09:36:06.222+0000:1459388166:2016-03-31T09:36:06.222+0000:Has this bundle been released?
acosentino:1459388299:2016-03-31T09:38:19.087+0000:1459388299:2016-03-31T09:38:19.087+0000:yes :-)"
0,CAMEL-9645,New Feature,Minor,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Claus Ibsen,0,1,2016-02-25 15:31:25+00:00,2016-03-06 12:48:30+00:00,"We should add a messageHistory function so you can do


So end users can use that in their loggings or whatnot.



<log message=""I am at ${messageHistory}""/>




Then it uses that same message history dumping we used in the error handler that you see when an exception occurred.",davsclaus:1456385537:2016-02-25T15:32:17.918+0000:1456385537:2016-02-25T15:32:17.918+0000:We may consider whether to allow to specify if we want to include exchange details or not.
0,CAMEL-9644,Improvement,Minor,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Luca Burgazzoli,Luca Burgazzoli,0,2,2016-02-25 15:23:25+00:00,2016-02-25 16:30:03+00:00,"1. Remove deprecated classes like:



HTablePool
HTableInterface



2. Use try-with-reources to close hbase resources
3. Upgrade hbase-client to latest version (1.1.3)","githubbot:1456385922:2016-02-25T15:38:42.200+0000:1456385922:2016-02-25T15:38:42.200+0000:GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/868

    CAMEL-9644 - improve camel-hbase component

    - removed deprecated code usage
    - cleaned up code and use try-with-resource
    - hbase-client upgrade to latest version (1.1.3)

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel CAMEL-9644

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/868.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #868
    
----
commit 9b647dfac58e41ef724a99137ef46a964b294957
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-02-25T14:35:46Z

    CAMEL-9644 - camel-hbase : remove deprecated code

----

githubbot:1456388855:2016-02-25T16:27:35.866+0000:1456388855:2016-02-25T16:27:35.866+0000:Github user lburgazzoli closed the pull request at:

    https://github.com/apache/camel/pull/868
"
0,CAMEL-9643,Bug,Major,2.16.2,2.16.3,"
None
",Resolved,Fixed,2.16.3,Unassigned,John Yin,0,2,2016-02-25 14:51:24+00:00,2016-05-22 06:36:30+00:00,"A simple Camel CXF SOAP web services consumer (server) works fine in standalone mode.  But when deploying it in Karaf, it would fail if Camel 2.16.x is used.  It would work fine if 2.15.x is used.  streamCache is set to true.  The following error was received.  A zip file is attached containing a maven project (along with Karaf config info) that can reproduce this issue.  This is critical because we cannot move to 2.16.x until this issue is resolved.


javax.xml.transform.TransformerException: Can't transform a Source of type javax.xml.transform.stax.StAXSource 
        at org.apache.xalan.transformer.TransformerIdentityImpl.transform(TransformerIdentityImpl.java:419) 
        at org.apache.camel.converter.jaxp.XmlConverter.toResult(XmlConverter.java:132) 
        at org.apache.camel.converter.jaxp.XmlConverter.toResult(XmlConverter.java:116) 
        at org.apache.camel.component.cxf.converter.CachedCxfPayload.<init>(CachedCxfPayload.java:75) 
        at org.apache.camel.component.cxf.converter.CxfPayloadConverter.cxfPayLoadToStreamCache(CxfPayloadConverter.java:118) 
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.8.0_60] 
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)[:1.8.0_60] 
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)[:1.8.0_60] 
        at java.lang.reflect.Method.invoke(Method.java:497)[:1.8.0_60] 
        at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:1243)[164:org.apache.camel.camel-core:2.16.2] 
        at org.apache.camel.impl.converter.StaticMethodTypeConverter.convertTo(StaticMethodTypeConverter.java:59)[164:org.apache.camel.camel-core:2.16.2] 
        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:293)[164:org.apache.camel.camel-core:2.16.2] 
        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:120)[164:org.apache.camel.camel-core:2.16.2] 
        at org.apache.camel.core.osgi.OsgiTypeConverter.convertTo(OsgiTypeConverter.java:117)[171:org.apache.camel.camel-spring:2.16.2] 
        at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:72)[164:org.apache.camel.camel-core:2.16.2] 
        at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:47)[164:org.apache.camel.camel-core:2.16.2] 
        at org.apache.camel.impl.DefaultStreamCachingStrategy.cache(DefaultStreamCachingStrategy.java:189)[164:org.apache.camel.camel-core:2.16.2] 
        at org.apache.camel.processor.CamelInternalProcessor$StreamCachingAdvice.before(CamelInternalProcessor.java:765)[164:org.apache.camel.camel-core:2.16.2] 
        at org.apache.camel.processor.CamelInternalProcessor$StreamCachingAdvice.before(CamelInternalProcessor.java:744)[164:org.apache.camel.camel-core:2.16.2] 
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:138)[164:org.apache.camel.camel-core:2.16.2] 
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:121)[164:org.apache.camel.camel-core:2.16.2] 
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)[164:org.apache.camel.camel-core:2.16.2] 
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190)[164:org.apache.camel.camel-core:2.16.2] 
        at org.apache.camel.component.cxf.CxfConsumer$1.asyncInvoke(CxfConsumer.java:95)[165:org.apache.camel.camel-cxf:2.16.2] 
        at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:75)[165:org.apache.camel.camel-cxf:2.16.2] 
        at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:59)[63:org.apache.cxf.cxf-core:3.1.4] 
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)[:1.8.0_60] 
        at java.util.concurrent.FutureTask.run(FutureTask.java:266)[:1.8.0_60] 
        at org.apache.cxf.interceptor.ServiceInvokerInterceptor$2.run(ServiceInvokerInterceptor.java:126)[63:org.apache.cxf.cxf-core:3.1.4] 
        at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)[63:org.apache.cxf.cxf-core:3.1.4] 
        at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:131)[63:org.apache.cxf.cxf-core:3.1.4] 
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:308)[63:org.apache.cxf.cxf-core:3.1.4] 
        at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:121)[63:org.apache.cxf.cxf-core:3.1.4] 
        at org.apache.cxf.transport.http.AbstractHTTPDestination.invoke(AbstractHTTPDestination.java:251)[88:org.apache.cxf.cxf-rt-transports-http:3.1.4] 
        at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:234)[89:org.apache.cxf.cxf-rt-transports-http-jetty:3.1.4] 
        at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:70)[89:org.apache.cxf.cxf-rt-transports-http-jetty:3.1.4] 
        at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1129)[140:org.eclipse.jetty.server:9.2.14.v20151106] 
        at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1065)[140:org.eclipse.jetty.server:9.2.14.v20151106] 
        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)[140:org.eclipse.jetty.server:9.2.14.v20151106] 
        at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:215)[140:org.eclipse.jetty.server:9.2.14.v20151106] 
        at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)[140:org.eclipse.jetty.server:9.2.14.v20151106] 
        at org.eclipse.jetty.server.Server.handle(Server.java:499)[140:org.eclipse.jetty.server:9.2.14.v20151106] 
        at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:311)[140:org.eclipse.jetty.server:9.2.14.v20151106] 
        at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257)[140:org.eclipse.jetty.server:9.2.14.v20151106] 
        at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:544)[132:org.eclipse.jetty.io:9.2.14.v20151106] 
        at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)[143:org.eclipse.jetty.util:9.2.14.v20151106] 
        at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)[143:org.eclipse.jetty.util:9.2.14.v20151106] 
        at java.lang.Thread.run(Thread.java:745)[:1.8.0_60]","bocamel:1456383244:2016-02-25T14:54:04.404+0000:1456383244:2016-02-25T14:54:04.404+0000:This zip file contains the maven project that can reproduce the issue if deployed in Karaf 4.0.4.  The README file in the zip contains the feature install commands to install the cxf and camel in Karaf.
bocamel:1458906011:2016-03-25T19:40:11.386+0000:1458906011:2016-03-25T19:40:11.386+0000:I know the Camel team is very busy working on many important features and issues.  But I do hope this Jira issue will be fixed soon because there is no workaround that I know of.  Without a fix, we are stuck in 2.15.x. :-)  

Thanks!
davsclaus:1461812610:2016-04-28T11:03:30.628+0000:1461812610:2016-04-28T11:03:30.628+0000:Have you tried with Camel 2.17.x ?
bocamel:1461823322:2016-04-28T14:02:02.632+0000:1461823322:2016-04-28T14:02:02.632+0000:Hi Claus,

Thanks for reaching out and following up on this issue.  With 2.17.0, I have not been able to install it successfully in Karaf 4.0.4.  When I install my application bundle, I received an error:

Exception:
Configuration problem: Failed to import bean definitions from URL location [classpath:META-INF/spring/camel-cxf.xml]
Offending resource: URL [bundle://188.0:0/META-INF/spring/camel-context.xml]; nested exception is org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: Unable to locate Spring NamespaceHandler for XML schema namespace [http://camel.apache.org/schema/cxf]
Offending resource: OSGi resource[classpath:META-INF/spring/camel-cxf.xml|bnd.id=188|bnd.sym=TestCxfWs]

In the release notes, there was a mentioning about camel-spring not installed by default.  But camel-spring is brought in by camel-cxf automatically.  

Here is what I installed in karaf 4.0.4:

feature:repo-add cxf 3.1.6
feature:install cxf cxf-rt-security
feature:repo-add camel 2.17.0
feature:install camel-core camel-cxf camel-groovy

bundle:install -s file:/.../TestCxfWs-1.0-SNAPSHOT.jar

Thank you for your help!
bocamel:1463860327:2016-05-22T03:52:07.447+0000:1463860327:2016-05-22T03:52:07.447+0000:Hi Claus,

This issue seems to have been fixed by 2.16.3 (I will test it more thoroughly later).  But I still cannot test it under 2.17.0 or 2.17.1 because I have to use Spring for DSL, transactions and jdbc templates but I have trouble to even load my bundle in Karaf with camel-spring (or spring-dm).  camel-sql also cannot be loaded into Karaf (installing it would cause Karaf to hang).  If the issue is indeed fully fixed in 2.16.3, then I can start to move my application off 2.15.x.

I hope more tutorials are provided and/or updated for 2.17.x, especially in the area of deploying camel/cxf with spring in karaf.

Thank you for your help!"
0,CAMEL-9642,Bug,Major,2.16.2,"2.17.2, 2.18.0","
None
",Resolved,Fixed,"2.17.2, 2.18.0",Claus Ibsen,Jay mann,0,3,2016-02-24 18:06:27+00:00,2016-05-20 07:33:22+00:00,"Headers are not getting propagating from restlet consumers.  The code is setting them incorrectly inside DefaultRestletBinding.java -> populateRestletRequestFromExchange


This is the code that works (based on latest from github):



 for (Map.Entry<String, Object> entry : exchange.getIn().getHeaders().entrySet()) {
            String key = entry.getKey();
            Object value = entry.getValue();
            if (!headerFilterStrategy.applyFilterToCamelHeaders(key, value, exchange)) {
                // put the org.restlet headers in attributes
            	if (key.startsWith(""org.restlet."")) {
                    if(key.equals(""org.restlet.http.headers"")){
                        //Check if existing headers already exist we don't want to wipe the headers that are already in there.
                    	Series<Header> headers = (Series)request.getAttributes().get(""org.restlet.http.headers"");
    	               	if(headers != null){ //If headers exists add them to the existing ones
    	               		Series<Header> newHeaders = (Series)value;
    	               		for(Header h: newHeaders){
                                headers.set(key, value.toString());                    	
    	               		}
    	               	}
    	               	else{
                            request.getAttributes().put(key, value);
    	               	}
                    }
                    else{
                        request.getAttributes().put(key, value);
                    }
                    	
                }
                // Use forms only for PUT, POST and x-www-form-urlencoded
            	else if (form != null) {
                    // put the user stuff in the form
                    if (value instanceof Collection) {
                        for (Object v : (Collection<?>) value) {
                            form.add(key, v.toString());
                        }
                    } else {
                        form.add(key, value.toString());
                    }
                }else {
                    // For non-form put all the headers in attributes header
                	Series<Header> headers = (Series)request.getAttributes().get(""org.restlet.http.headers"");
	               	if(headers == null){
	               		headers = new Series<Header>(Header.class);
	               		request.getAttributes().put(""org.restlet.http.headers"", headers);
	               	}
                    headers.set(key, value.toString());
                }

                LOG.debug(""Populate Restlet request from exchange header: {} value: {}"", key, value);
            }
        }","jmandawg:1456330823:2016-02-25T00:20:23.068+0000:1456333145:2016-02-25T00:59:05.580+0000:For some reason this is having the ill effect of setting multiple content-types and Accept-types. But the other headers are coming in now.  I'm guess restlet merges the org.restlet.http.headers with the known headers.

Looks like the standard headers should not be added directly, but how to pick and choose the headers you want to send over?

https://restlet.com/technical-resources/restlet-framework/guide/2.3/core/http-headers-mapping
davsclaus:1456357058:2016-02-25T07:37:38.069+0000:1456357058:2016-02-25T07:37:38.069+0000:Logged a ticket to restlet to make an easy to use api.
https://github.com/restlet/restlet-framework-java/issues/1198

jmandawg:1456369870:2016-02-25T11:11:10.557+0000:1456369870:2016-02-25T11:11:10.557+0000:Yes their api is slightly confusing to say the least.   Thanks. 
jmandawg:1456548758:2016-02-27T12:52:38.478+0000:1456548758:2016-02-27T12:52:38.478+0000:Hey Claus,

Can you tell me what the correct default behavior should be for restlet consumer?  Should all the camel headers get mapped to the outgoing http headers of the restlet request?


githubbot:1463692079:2016-05-20T05:07:59.312+0000:1463692079:2016-05-20T05:07:59.312+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/985

davsclaus:1463700802:2016-05-20T07:33:22.926+0000:1463700802:2016-05-20T07:33:22.926+0000:Thanks for the PR"
0,CAMEL-9641,Bug,Major,2.16.2,"2.15.6, 2.16.3, 2.17.0","
None
",Resolved,Fixed,"2.15.6, 2.16.3, 2.17.0",Claus Ibsen,Claus Ibsen,0,1,2016-02-24 15:56:04+00:00,2016-02-24 16:31:51+00:00,"See nabble
http://camel.465427.n5.nabble.com/Unknown-File-Language-Syntax-tp5778208.html",
0,CAMEL-9640,Bug,Major,"2.16.2, 2.17.0","2.16.3, 2.17.0","
None
",Resolved,Fixed,"2.16.3, 2.17.0",Claus Ibsen,Tadayoshi Sato,0,3,2016-02-24 11:33:40+00:00,2016-03-01 08:19:42+00:00,The same problem as CAMEL-9442 but for camel-netty*-http instead of camel-http4.,"githubbot:1456285277:2016-02-24T11:41:17.288+0000:1456285277:2016-02-24T11:41:17.288+0000:GitHub user tadayosi opened a pull request:

    https://github.com/apache/camel/pull/862

    CAMEL-9640 - Query string gets decoded when bridging from netty*-http to netty*-http

    Please review and merge this PR. Thanks!

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tadayosi/camel CAMEL-9640

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/862.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #862
    
----
commit cd9df09ae4dbbce49b64aac51fe8c6d32bf62c16
Author: Tadayoshi Sato <sato.tadayoshi@gmail.com>
Date:   2016-02-24T11:37:21Z

    CAMEL-9640 - Query string gets decoded when bridging from netty*-http to netty*-http

----

davsclaus:1456364363:2016-02-25T09:39:23.102+0000:1456364363:2016-02-25T09:39:23.102+0000:Thanks for the PR
githubbot:1456371252:2016-02-25T11:34:12.367+0000:1456371252:2016-02-25T11:34:12.367+0000:Github user tadayosi closed the pull request at:

    https://github.com/apache/camel/pull/862
"
0,CAMEL-9639,Improvement,Minor,2.16.2,"2.15.6, 2.16.3, 2.17.0","
None
",Resolved,Fixed,"2.15.6, 2.16.3, 2.17.0",Claus Ibsen,Claus Ibsen,0,1,2016-02-24 09:56:42+00:00,2016-02-24 10:27:48+00:00,So the pool knows its invalidated and not still borrowed,
0,CAMEL-9638,New Feature,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Arno Noordover,Claus Ibsen,0,4,2016-02-24 09:25:13+00:00,2016-07-01 07:13:06+00:00,"For the jsse security
http://camel.apache.org/camel-configuration-utilities.html


in the camel-core we should add support for the new java 8 features.","davsclaus:1456277135:2016-02-24T09:25:35.778+0000:1456277135:2016-02-24T09:25:35.778+0000:A bit related
http://camel.465427.n5.nabble.com/How-do-I-access-the-SNI-extension-in-HTTP4-tp5778046.html
anoordover:1466517174:2016-06-21T21:52:54.257+0000:1466521891:2016-06-21T23:11:31.774+0000:Please comment on the changes:
I'm in the process of adding xml-elements for Spring:
{code}
  <xs:complexType name=""sslContextClientParametersFactoryBean"">
    <xs:complexContent>
      <xs:extension base=""tns:abstractJsseUtilFactoryBean"">
        <xs:all>
          <xs:element minOccurs=""0"" name=""cipherSuites"" type=""tns:cipherSuitesParameters""/>
          <xs:element minOccurs=""0"" name=""cipherSuitesFilter"" type=""tns:filterParameters""/>
          <xs:element minOccurs=""0"" name=""secureSocketProtocols"" type=""tns:secureSocketProtocolsParameters""/>
          <xs:element minOccurs=""0"" name=""secureSocketProtocolsFilter"" type=""tns:filterParameters""/>
          <xs:element minOccurs=""0"" name=""SNIHostNamesDefinition"" type=""tns:SNIHostNames""/>
        </xs:all>
        <xs:attribute name=""sessionTimeout"" type=""xs:string""/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
...
  <xs:complexType name=""SNIHostNames"">
    <xs:sequence>
      <xs:element maxOccurs=""unbounded"" minOccurs=""0"" name=""SNIHostName"" nillable=""true"" type=""xs:string""/>
    </xs:sequence>
  </xs:complexType>
{code}

I suppose the next step would be to change getSSLSocketFactorySSLSocketConfigurers?

Advice is needed on:
* should I add the SNIHostNames only to the client-side?
* should I check in the above method which implementation I have and cast accordingly or should I add a method to the BaseSSLContextParameters-class and let the Client-impl override this?
Looking at the other methods I suppose I should implement the method for getting the SNIHostNames in BaseSSLContextParameters and override it in the Client-impl
* testing this functionality

If I understand correctly SNIHostNames is a way to ask for a certain certificate at the 
serverside.
githubbot:1466593954:2016-06-22T19:12:34.853+0000:1466593954:2016-06-22T19:12:34.853+0000:GitHub user anoordover opened a pull request:

    https://github.com/apache/camel/pull/1048

    CAMEL-9638: Introduced SNIHostName config in sslContextParameters

    Introduced SNIHostName in sslContextParameters.
    Added a test to https://www.mnot.net which throws 403 or 421 when SNIHostName is not used.
    Eventually it might be needed to ignore this test. I didn't find a simple way to test this.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/anoordover/camel CAMEL-9638

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1048.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1048
    
----
commit 3d84bbef8879fc7a64c73ad38aae6c20099f1d73
Author: Arno Noordover <anoordover@users.noreply.github.com>
Date:   2016-06-22T19:07:20Z

    CAMEL-9638: Introduced SNIHostName config in sslContextParameters

----

githubbot:1466767932:2016-06-24T19:32:12.957+0000:1466767932:2016-06-24T19:32:12.957+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1048
"
0,CAMEL-9637,New Feature,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Claus Ibsen,0,1,2016-02-24 07:54:52+00:00,2016-02-24 10:28:28+00:00,"If you want to re-use the same Channel when calling a remote TCP server with netty producer, then this requires to store the Channel on the exchange so it can be re-used on the next netty producer and so on. And then use an UoW to return the Channel in the pool when the Exchange is done.


For example in the route below, the 2 x netty should use the same Channel.



from foo
  to netty
  to bar
  to netty",
0,CAMEL-9636,Bug,Major,"2.15.5, 2.16.2","2.15.6, 2.16.3, 2.17.0","
None
",Resolved,Fixed,"2.15.6, 2.16.3, 2.17.0",Grzegorz Grzybek,Paolo Antinori,0,3,2016-02-23 17:34:13+00:00,2016-02-24 20:20:43+00:00,"Test execution hangs with the specific use case of passing a configuration similar to:



  <cm:property-placeholder persistent-id=""my-placeholders"" update-strategy=""reload"">
  </cm:property-placeholder>




The will pass value for that pid only at Test level inside the method useOverridePropertiesWithConfigAdmin


The fix makes the attached test case succeed.","githubbot:1456220412:2016-02-23T17:40:12.209+0000:1456220412:2016-02-23T17:40:12.209+0000:GitHub user paoloantinori opened a pull request:

    https://github.com/apache/camel/pull/860

    CAMEL-9636 - camel-test-blueprint - support for empty properties

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/paoloantinori/camel camel-2.15.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/860.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #860
    
----
commit 0766a067850c03817fdb3a99e3059ac4f7b0f82d
Author: Paolo Antinori <pantinor@redhat.com>
Date:   2016-02-23T16:50:45Z

    CAMEL-9636 - camel-test-blueprint - support for empty properties

----

paolo.antinori:1456220434:2016-02-23T17:40:34.631+0000:1456220434:2016-02-23T17:40:34.631+0000:PR for 2.25.x branch https://github.com/apache/camel/pull/860
githubbot:1456268983:2016-02-24T07:09:43.252+0000:1456268983:2016-02-24T07:09:43.252+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/860

ggrzybek:1456316435:2016-02-24T20:20:35.805+0000:1456316435:2016-02-24T20:20:35.805+0000:Fix for 2.15.x: https://github.com/apache/camel/commit/28bf2484c88fcbd33774aad4c67745f7901f0a03
Fix for 2.16.x: https://github.com/apache/camel/commit/a1acec615e400a008d6d083d6a84ad68ebb7ab43
FIx for 2.17.x: https://github.com/apache/camel/commit/e15603a977b825a89fcad20b8da0a8ba59d982d3

The fix is to detect problems early and do not simply fail on timeout while waiting for CamelContext OSGi service. One of the failures of Blueprint may be inability to resolve property placeholders. We've provided {{ConfigAdminNoDefaultValuesBlueprintCreationTest}} to show this problem."
0,CAMEL-9605,Improvement,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Xavier Fournet,1,4,2016-02-15 18:00:46+00:00,2016-02-15 18:32:04+00:00,"By default camel json unmarshaller accept to read only json which are map (eg the json document begin with ""{"" ). If you want to be able to umarshal more json document like simple string or list you have to specify the unmarshalTypeName which is not very convenient, eg:



<unmarshal>
    <json library=""Gson"" unmarshalTypeName=""java.lang.Object""/>
</unmarshal>




You should be able to unmarshall any type of json document with the default setting, eg:



<unmarshal>
    <json library=""Gson""/>
</unmarshal>","githubbot:1455530588:2016-02-15T18:03:08.575+0000:1455530588:2016-02-15T18:03:08.575+0000:GitHub user xfournet opened a pull request:

    https://github.com/apache/camel/pull/841

    CAMEL-9605 update default unmarshall type to java.lang.Object instead…

    … of java.util.Map to be able to unmarshall any valid Json document with the default configuration of Gson umarshaller

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/xfournet/camel CAMEL-9605

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/841.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #841
    
----
commit 274f9b6ddb9fc9031aa0364a8519d55e7da5d731
Author: Xavier Fournet <xavier.fournet@gmail.com>
Date:   2016-02-15T18:02:36Z

    CAMEL-9605 update default unmarshall type to java.lang.Object instead of java.util.Map to be able to unmarshall any valid Json document with the default configuration of Gson umarshaller

----

davsclaus:1455532320:2016-02-15T18:32:00.401+0000:1455532320:2016-02-15T18:32:00.401+0000:Thanks for the PR
githubbot:1455532324:2016-02-15T18:32:04.374+0000:1455532324:2016-02-15T18:32:04.374+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/841
"
0,CAMEL-9604,Improvement,Major,2.16.2,"2.16.3, 2.17.0","
None
",Resolved,Fixed,"2.16.3, 2.17.0",Claus Ibsen,Claus Ibsen,0,1,2016-02-15 15:46:02+00:00,2016-02-15 15:54:27+00:00,"The jpa endpoint should be singleton.


It can lead to issues with JMX such as
http://camel.465427.n5.nabble.com/JMX-Management-tp5777750.html",
0,CAMEL-9603,Improvement,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,John D. Ament,John D. Ament,0,3,2016-02-14 22:00:10+00:00,2016-02-20 13:51:07+00:00,Add a producer for aws kinesis endpoints.,"githubbot:1455458555:2016-02-14T22:02:35.573+0000:1455458555:2016-02-14T22:02:35.573+0000:GitHub user johnament opened a pull request:

    https://github.com/apache/camel/pull/840

    CAMEL-9603 Added support for Kinesis to handle producer requests.

    Added a producer for kinesis.
    
    I also took the liberty of refactoring that one method that was defined a few times into a single place.  I'm sure its in other places of the code as well.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/johnament/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/840.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #840
    
----
commit aaa87f97d6bbd43ec37d6a7db0d1d8a30d9087fe
Author: John D. Ament <johndament@apache.org>
Date:   2016-02-14T22:01:16Z

    CAMEL-9603 Added support for Kinesis to handle producer requests.

----

githubbot:1455496667:2016-02-15T08:37:47.821+0000:1455496667:2016-02-15T08:37:47.821+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/840

davsclaus:1455497394:2016-02-15T08:49:54.373+0000:1455497394:2016-02-15T08:49:54.373+0000:Thanks do you want to help with the docs to add some content about the producer side?
http://camel.apache.org/aws-kinesis.html
johndament:1455511824:2016-02-15T12:50:24.623+0000:1455511824:2016-02-15T12:50:24.623+0000:Cool, site is already up to date.

Yeah, I'll work on docs.  I also see a potential improvement for auto creating streams.
davsclaus:1455841139:2016-02-19T08:18:59.254+0000:1455841139:2016-02-19T08:18:59.254+0000:Thanks John. I granted your user permission to self assign tickets.
johndament:1455856078:2016-02-19T12:27:58.929+0000:1455856078:2016-02-19T12:27:58.929+0000:Great, thanks Claus.  I should have docs available in a PR this weekend.
githubbot:1455943556:2016-02-20T12:45:56.765+0000:1455943556:2016-02-20T12:45:56.765+0000:GitHub user johnament opened a pull request:

    https://github.com/apache/camel/pull/852

    CAMEL-9603 Documentation for Kinesis producer.

    Fixed one of the headers, even though it means something similar its a discreet value from Kinesis.
    
    - The key for shard id was changed.  The values that these two headers represent are functionally different, the value of partition key calculated which shard id data will be written to.
    - There was a unit test expecting these to be the same which I removed.
    - The docs indicate that partition key must be present when sending to kinesis so made it required.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/johnament/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/852.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #852
    
----
commit ef669f95a7cc95ad069db6e43cab39e294a26a19
Author: John D. Ament <johndament@apache.org>
Date:   2016-02-20T12:39:53Z

    CAMEL-9603 Documentation for Kinesis producer.
    
    Fixed one of the headers, even though it means something similar its a discreet value from Kinesis.

----

githubbot:1455947262:2016-02-20T13:47:42.224+0000:1455947262:2016-02-20T13:47:42.224+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/852
"
0,CAMEL-9602,New Feature,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Luca Burgazzoli,Claus Ibsen,0,3,2016-02-14 12:06:07+00:00,2016-05-03 09:43:01+00:00,"Would be nice with a fluent builder style for producer template, (not an extension) but similar as producer template.


So you use the builder methods to build the command.



ProducerTemplateBuilder builder = ...

String reply = builder.withBody(""Hello World"").withHeader(""foo"", 123).withHeader(""bar"", 456).to(""jms:queue:foo"").request(String.class);




or something like that. 


The current ProducerTemplate has an overload of methods that work with high and low level (eg Exchange, Processor vs strings).


Would be nice with a simpler api that use a more modern fluent style, but donesn't have a ton of methods - but can do the 95% need.


There is an ExchangeBuilder but its only for building an Exchange and its a bit too low level.","githubbot:1456808883:2016-03-01T13:08:03.692+0000:1456808883:2016-03-01T13:08:03.692+0000:GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/876

    CAMEL-9602 - ProducerTemplateBuilder

    This is a first cut of a ProducerTemplateBuilder which covers some basic cases.
    It does not support exchange, processor and exchange patter.
    
    Any feedback would be appreciated.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel CAMEL-9602

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/876.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #876
    
----
commit 5d1576c752a74d3ec93de339518438d89370878a
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-03-01T13:00:59Z

    CAMEL-9602 - ProducerTemplateBuilder

----

githubbot:1461716314:2016-04-27T08:18:34.030+0000:1461716314:2016-04-27T08:18:34.030+0000:Github user lburgazzoli closed the pull request at:

    https://github.com/apache/camel/pull/876
"
0,CAMEL-9601,Improvement,Major,2.16.2,"2.16.3, 2.17.0","
None
",Resolved,Fixed,"2.16.3, 2.17.0",Claus Ibsen,Claus Ibsen,0,1,2016-02-14 12:00:39+00:00,2016-02-14 12:01:38+00:00,"When using Accept http header then restlet do not understand it, as you need to do some special restlet code instead of using the headers 1:1",
0,CAMEL-9600,Improvement,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,4,2016-02-14 07:58:50+00:00,2016-04-09 05:48:12+00:00,We should upgrade camel-fop to use fop 2.1. It uses 1.1 today.,"davsclaus:1455407946:2016-02-14T07:59:06.852+0000:1455407946:2016-02-14T07:59:06.852+0000:Contributions is welcome
johndament:1455464257:2016-02-14T23:37:37.451+0000:1455464257:2016-02-14T23:37:37.451+0000:It looks straightforward, but I see  a couple of gotchas:

- FOP 1.x supported modifiying configuration.  FOP 2 is based on immutable config.  As a result the configuration is meant to be fully built by the time the factory is built.  As a result, the factory reference in the URI would need to be a fully constructed instance.  Is that OK?

- This implies that the userconfigurl param is not used any longer.  It should probably be a one or the other.  If user config set, we override the fop factory with one based on that config.

WDYT?
davsclaus:1455497648:2016-02-15T08:54:08.276+0000:1455497648:2016-02-15T08:54:08.276+0000:Yeah maybe remove that factory, and just use the user config file, as it seems the way you configure fop
http://xmlgraphics.apache.org/fop/2.1/configuration.html
syakimovich:1459993237:2016-04-07T09:40:37.654+0000:1459993237:2016-04-07T09:40:37.654+0000:I can work on this issue. In version 1.1 you could configure FopFactory programmatically, now you can't do that but you can programmatically configure FopFactoryBuilder which creates FopFactory https://xmlgraphics.apache.org/fop/2.1/embedding.html#config-internal. Maybe just forbid to specify both parameters by throwing something like FopConfigException with ""More than one configuration. You can configure fop either by config file or by supplying FopFactory but not both."" to avoid confusions. 
davsclaus:1460006301:2016-04-07T13:18:21.814+0000:1460006301:2016-04-07T13:18:21.814+0000:Sergey that sounds like a good idea. Thanks for helping
githubbot:1460090619:2016-04-08T12:43:39.643+0000:1460090619:2016-04-08T12:43:39.643+0000:GitHub user syakimovich opened a pull request:

    https://github.com/apache/camel/pull/936

    CAMEL-9600

    updating fop to 2.1

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/syakimovich/camel CAMEL-9600

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/936.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #936
    
----
commit a617f9fe3b6fa6639e93b1dce7b2757c5775c916
Author: syakimovich <s0yakimovich@gmail.com>
Date:   2016-04-07T20:10:12Z

    CAMEL-9600 update fop from 1.1 to 2.1

commit 84b882ca7319b8b98e105a0aabe6b15a2cfb19d6
Author: syakimovich <s0yakimovich@gmail.com>
Date:   2016-04-08T11:47:02Z

    CAMEL-9600 update fop to 2.1 in karaf features

----

githubbot:1460152077:2016-04-09T05:47:57.220+0000:1460152077:2016-04-09T05:47:57.220+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/936
"
0,CAMEL-9599,Bug,Major,2.16.2,"2.15.6, 2.16.3, 2.17.0","
None
",Resolved,Fixed,"2.15.6, 2.16.3, 2.17.0",Claus Ibsen,Claus Ibsen,0,1,2016-02-13 16:32:26+00:00,2016-02-13 17:01:44+00:00,The simple binding of cxfrs uses the content-length header from the input as the response content-length. It should not do that.,
0,CAMEL-9598,Bug,Minor,2.15.0,,"
None
",Resolved,Invalid,None,Unassigned,Naveen Kumar,0,2,2016-02-13 08:36:08+00:00,2016-02-13 11:50:08+00:00,"I have an existing project where i need to integrate the swagger by use of annotations. When i do jetty:run i get error when i am trying to read the swagger.json.


Would you be able to provide me direction on this.","NaveenKY:1455323801:2016-02-13T08:36:41.226+0000:1455323801:2016-02-13T08:36:41.226+0000:java.lang.IllegalArgumentException: Conflicting setter definitions for property ""restHostNameResolver"": org.apache.camel.spi.RestConfiguration#setRestHostNameResolver(1 params) vs org.apache.camel.spi.RestConfiguration#setRestHostNameResolver(1 params)
at com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.getSetter(POJOPropertyBuilder.java:299)
at io.swagger.jackson.ModelResolver.resolve(ModelResolver.java:277)
at io.swagger.jackson.ModelResolver.resolve(ModelResolver.java:159)
at io.swagger.converter.ModelConverterContextImpl.resolve(ModelConverterContextImpl.java:99)
at io.swagger.jackson.ModelResolver.resolveProperty(ModelResolver.java:138)
at io.swagger.jackson.ModelResolver.resolveProperty(ModelResolver.java:103)
at io.swagger.converter.ModelConverterContextImpl.resolveProperty(ModelConverterContextImpl.java:79)
at io.swagger.jackson.ModelResolver.resolve(ModelResolver.java:373)
at io.swagger.jackson.ModelResolver.resolve(ModelResolver.java:159)
at io.swagger.converter.ModelConverterContextImpl.resolve(ModelConverterContextImpl.java:99)
at io.swagger.jackson.ModelResolver.resolveProperty(ModelResolver.java:138)
at io.swagger.jackson.ModelResolver.resolveProperty(ModelResolver.java:103)
at io.swagger.converter.ModelConverterContextImpl.resolveProperty(ModelConverterContextImpl.java:79)
at io.swagger.jackson.ModelResolver.resolve(ModelResolver.java:373)
at io.swagger.jackson.ModelResolver.resolve(ModelResolver.java:159)
at io.swagger.converter.ModelConverterContextImpl.resolve(ModelConverterContextImpl.java:99)
at io.swagger.jackson.ModelResolver.resolveProperty(ModelResolver.java:138)
at io.swagger.jackson.ModelResolver.resolveProperty(ModelResolver.java:103)
at io.swagger.converter.ModelConverterContextImpl.resolveProperty(ModelConverterContextImpl.java:79)
at io.swagger.converter.ModelConverters.readAsProperty(ModelConverters.java:58)
at io.swagger.util.ParameterProcessor.applyAnnotations(ParameterProcessor.java:175)
at io.swagger.jaxrs.Reader.getParameters(Reader.java:905)
at io.swagger.jaxrs.Reader.parseMethod(Reader.java:868)
at io.swagger.jaxrs.Reader.read(Reader.java:295)
at io.swagger.jaxrs.Reader.read(Reader.java:147)
at io.swagger.jaxrs.listing.ApiListingResource.scan(ApiListingResource.java:68)
at io.swagger.jaxrs.listing.ApiListingResource.process(ApiListingResource.java:112)
at io.swagger.jaxrs.listing.ApiListingResource.getListingJson(ApiListingResource.java:154)
at io.swagger.jaxrs.listing.ApiListingResource.getListing(ApiListingResource.java:141)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:497)
at com.sun.jersey.spi.container.JavaMethodInvokerFactory$1.invoke(JavaMethodInvokerFactory.java:60)
at com.sun.jersey.server.impl.model.method.dispatch.AbstractResourceMethodDispatchProvider$ResponseOutInvoker._dispatch(AbstractResourceMethodDispatchProvider.java:205)
at com.sun.jersey.server.impl.model.method.dispatch.ResourceJavaMethodDispatcher.dispatch(ResourceJavaMethodDispatcher.java:75)
at com.sun.jersey.server.impl.uri.rules.HttpMethodRule.accept(HttpMethodRule.java:302)
at com.sun.jersey.server.impl.uri.rules.RightHandPathRule.accept(RightHandPathRule.java:147)
at com.sun.jersey.server.impl.uri.rules.ResourceClassRule.accept(ResourceClassRule.java:108)
at com.sun.jersey.server.impl.uri.rules.RightHandPathRule.accept(RightHandPathRule.java:147)
at com.sun.jersey.server.impl.uri.rules.RootResourceClassesRule.accept(RootResourceClassesRule.java:84)
at com.sun.jersey.server.impl.application.WebApplicationImpl._handleRequest(WebApplicationImpl.java:1480)
at com.sun.jersey.server.impl.application.WebApplicationImpl._handleRequest(WebApplicationImpl.java:1411)
at com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:1360)
at com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:1350)
at com.sun.jersey.spi.container.servlet.WebComponent.service(WebComponent.java:416)
at com.sun.jersey.spi.container.servlet.ServletContainer.service(ServletContainer.java:538)
at com.sun.jersey.spi.container.servlet.ServletContainer.service(ServletContainer.java:716)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:848)
at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:684)
at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1448)
at com.collaboration.util.ApiOriginFilter.doFilter(ApiOriginFilter.java:32)
at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1419)
at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:455)
at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:137)
at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:557)
at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:231)
at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1075)
at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:384)
at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:193)
at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1009)
at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)
at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:255)
at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:154)
at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)
at org.eclipse.jetty.server.Server.handle(Server.java:370)
at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:489)
at org.eclipse.jetty.server.AbstractHttpConnection.headerComplete(AbstractHttpConnection.java:949)
at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.headerComplete(AbstractHttpConnection.java:1011)
at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:644)
at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:235)
at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:82)
at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:668)
at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:52)
at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)
at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)
at java.lang.Thread.run(Thread.java:745)
davsclaus:1455335399:2016-02-13T11:49:59.873+0000:1455335399:2016-02-13T11:49:59.873+0000:Please use the user forum or user mailing list first to get help as we say here
http://camel.apache.org/support.html

The user forum is here
http://camel.apache.org/discussion-forums.html

And the mailing list here
http://camel.apache.org/mailing-lists.html"
0,CAMEL-9597,Improvement,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,3,2016-02-12 17:22:30+00:00,2016-11-09 11:15:30+00:00,"the test jar it uses for jsendnca is downloaded from jboss nexus maven. We should consider mocking the unit tests so we can drop the test jar, and then just the jar from maven central so we can drop the 3rd party repo.","kearls:1478570737:2016-11-08T10:05:37.305+0000:1478570737:2016-11-08T10:05:37.305+0000:I've started working on a fix for this.

githubbot:1478661116:2016-11-09T11:11:56.393+0000:1478661116:2016-11-09T11:11:56.393+0000:GitHub user kevinearls opened a pull request:

    https://github.com/apache/camel/pull/1257

    CAMEL-9597 update tests to use Mockito instead of jsendnsca stub

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kevinearls/camel CAMEL-9597

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1257.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1257
    
----
commit cdef307d49720c65a32ff7169ecdb79596f2802e
Author: Kevin Earls <kevin@kevinearls.com>
Date:   2016-11-09T11:09:42Z

    CAMEL-9597 update tests to use Mockito instead of jsendnsca stub

----

githubbot:1478661303:2016-11-09T11:15:03.361+0000:1478661303:2016-11-09T11:15:03.361+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1257

davsclaus:1478661329:2016-11-09T11:15:29.522+0000:1478661329:2016-11-09T11:15:29.522+0000:Thanks Kevin for the PR"
0,CAMEL-9596,Improvement,Major,2.16.2,"2.16.3, 2.17.0","
None
",Resolved,Fixed,"2.16.3, 2.17.0",Claus Ibsen,Ralf Steppacher,0,2,2016-02-12 15:33:37+00:00,2016-02-15 08:23:25+00:00,"I am attempting to set a custom HTTP binding on the Jetty component used with the REST DSL:



<bean id=""jettyNoStackTraceHTTPBinding"" class=""ch.vivates.vel.rest.JettyNoStacktraceHttpBinding"" />

<camelContext id=""vel-jetty-rest-service"" allowUseOriginalMessage=""false"" xmlns=""http://camel.apache.org/schema/blueprint"" streamCache=""false"">
    <restConfiguration component=""jetty"" scheme=""http"" host=""{{vel.rest.host}}"" port=""{{vel.rest.port}}"" contextPath=""{{vel.rest.contextpath}}"" bindingMode=""json"">
        <endpointProperty key=""httpBindingRef"" value=""jettyNoStackTraceHTTPBinding"" />
    </restConfiguration>

    <!-- ... -->

</camelContext>




The http binding is not picked up though. At runtime the custom binding does not get triggered.
The logs show the generated endpoint URL without the httpBindingRef query parameter:



2016-02-12 16:22:15,454 | INFO  | pool-37-thread-1 | BlueprintCamelContext            | 64 - org.apache.camel.camel-core - 2.16.2 |   | Route: route1 started and consuming from: Endpoint[jetty:http://0.0.0.0:8181/vivates/vel/event/%7Bid%7D?httpMethodRestrict=PUT]




However, if I try to specify a binding bean that does not exist I receive an error during context ramp-up (as would be expected); the endpoint URI logged in the error message includes the httpBindingRef query parameter:



2016-02-12 16:26:17,194 | ERROR | Thread-35        | BlueprintCamelContext            | 61 - org.apache.camel.camel-blueprint - 2.16.2 |   | Error occurred during starting Camel: CamelContext(vel-jetty-rest-service) due Failed to resolve endpoint: jetty://http://0.0.0.0:8181/vivates/vel/event/%7Bid%7D?httpBindingRef=thisBindingBeanDoesNotExist&httpMethodRestrict=PUT due to: No bean could be found in the registry for: thisBindingBeanDoesNotExist of type: org.apache.camel.http.common.HttpBinding
org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: jetty://http://0.0.0.0:8181/vivates/vel/event/%7Bid%7D?httpBindingRef=thisBindingBeanDoesNotExist&httpMethodRestrict=PUT due to: No bean could be found in the registry for: thisBindingBeanDoesNotExist of type: org.apache.camel.http.common.HttpBinding","davsclaus:1455336862:2016-02-13T12:14:22.902+0000:1455336862:2016-02-13T12:14:22.902+0000:It is designed not to use custom binding as a rest binding is needed. However we can allow this but then as an end user you would need to extend the JettyRestHttpBinding or face the consequence if you do not.
ralfsteppacher:1455495805:2016-02-15T08:23:25.353+0000:1455495805:2016-02-15T08:23:25.353+0000:Hello [~davsclaus]. Thanks for adding the feature. 

From reading the documentation of the REST DSL I got the impression that I should be able to configure the endpoint or component  through the {{<restConfiguration>}} tag as if I was using the component directly. Maybe the documentation could be improved to point out limitations like this? Also that someone would have to extend {{JettyRestHttpBinding}} instead of {{DefaultHttpBinding}}."
0,CAMEL-9595,Improvement,Minor,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Andrea Cosentino,Andrea Cosentino,0,1,2016-02-12 12:47:35+00:00,2016-02-12 13:16:47+00:00,"Actually the Kubernetes consumers extends ScheduledPollConsumer.


Since the consumers can be used to monitor (maybe big) Kubernetes Cluster, it can be better to use an executor service and a ThreadPool to consume events.",
0,CAMEL-9594,Improvement,Minor,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Claus Ibsen,0,1,2016-02-12 09:52:20+00:00,2016-03-21 13:48:34+00:00,"We should use swagger.json which is the convention name used by swagger
http://swagger.io/specification/


api-docs was the old for 1.x spec.","davsclaus:1458521232:2016-03-21T08:47:12.210+0000:1458521232:2016-03-21T08:47:12.210+0000:We can now use /swagger.json or /swagger.yaml with camel-swagger-java so we can update the examples to use the url.
davsclaus:1458521243:2016-03-21T08:47:23.599+0000:1458521243:2016-03-21T08:47:23.599+0000:Contributions is welcome"
0,CAMEL-9593,Bug,Trivial,2.16.2,"2.16.3, 2.17.0","
None
",Resolved,Fixed,"2.16.3, 2.17.0",Claus Ibsen,Andreas Boss,0,2,2016-02-12 09:28:36+00:00,2016-02-12 09:51:00+00:00,http://camel.465427.n5.nabble.com/Camel-Swagger-cdi-Example-td5777632.html,"gagahhag:1455240568:2016-02-12T09:29:28.331+0000:1455240599:2016-02-12T09:29:59.727+0000:Added patch to create correct swagger definition
davsclaus:1455241855:2016-02-12T09:50:55.412+0000:1455241855:2016-02-12T09:50:55.412+0000:Thanks for the patch."
0,CAMEL-9592,Bug,Major,2.15.1,2.16.2,"

documentation

",Closed,Fixed,2.16.2,Unassigned,Mary Cochran,0,2,2016-02-11 19:22:21+00:00,2016-02-22 17:39:29+00:00,"If you try to use concurrentConsumers without setting the maxMessagesPerPoll whenever a message errors out it brings down the whole context. 


I plan on updating the wiki myself, but I haven't contributed before.  I am going to start the process by emailing the dev list today.","davsclaus:1455242081:2016-02-12T09:54:41.982+0000:1455242081:2016-02-12T09:54:41.982+0000:Test with latest release first please.
mary.mistretta@gmail.com:1455272139:2016-02-12T18:15:39.523+0000:1455272139:2016-02-12T18:15:39.523+0000:Will do.  I tested with 2.15.1 which the either way the documentation does not indicate needs to have maxMessagesPerPoll set.  I confirmed with Christian Posta that he thought this was intended functionality. I will test with 2.16 before updating anything to confirm if it is needed or not there. 
mary.mistretta@gmail.com:1455651110:2016-02-17T03:31:50.968+0000:1455651110:2016-02-17T03:31:50.968+0000:I verified on the latest camel version that the maxMessagesPerPoll flag does indeed need to be set when setting the concurrentConsumers for SQS to greater than 1.  I did manual test with routes and also adjust the unit test's route to not set maxMessagesPerPoll.  The unit test then failed with:

Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 1.053 sec <<< FAILURE! - in org.apache.camel.component.aws.sqs.SqsConcurrentConsumerTest
consumeMessagesFromQueue(org.apache.camel.component.aws.sqs.SqsConcurrentConsumerTest)  Time elapsed: 1.053 sec  <<< FAILURE!
java.lang.AssertionError: We were expecting to have about half of 10 numbers of concurrent consumers, but only found 1
	at org.junit.Assert.fail(Assert.java:88)
	at org.apache.camel.component.aws.sqs.SqsConcurrentConsumerTest.consumeMessagesFromQueue(SqsConcurrentConsumerTest.java:49)

I have filled out my ICLA and am waiting to get edit rights from the dev email list. As soon as this is done I will make the documentation adjustment. 
mary.mistretta@gmail.com:1456133956:2016-02-22T17:39:16.851+0000:1456133956:2016-02-22T17:39:16.851+0000:fixed documentation. I didn't a place I could assign the ticket to myself.  I am not sure I have access to do that, however I resolved it. "
0,CAMEL-9591,New Feature,Minor,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Luca Burgazzoli,Luca Burgazzoli,0,3,2016-02-11 15:17:13+00:00,2016-02-12 12:57:03+00:00,"Since Saxon 9.2, writing extension functions has been supplemented by a new mechanism, referred to as integrated extension functions. 


To use such an extension function, user writes a custom class which extends net.sf.saxon.lib.ExtensionFunctionDefinition an registers it in the Saxon transformer factory. It works fine. Only problem is that there's no convenient support in Camel to pass such an extension function reference to camel-xslt.


Current way: 



    // Define my extension functions (note: Saxon requires a class for each function)
    List<ExtensionFunctionDefinition> extensionFunctions = new ArrayList<ExtensionFunctionDefinition>();
    extensionFunctions.add(new MyExtensionFunction1());
    extensionFunctions.add(new MyExtensionFunction2());
    
    // Register extension functions
    TransformerFactoryImpl extendedSaxonTransformerFactory = new TransformerFactoryImpl();
    Configuration configuration = extendedSaxonTransformerFactory.getConfiguration();
    for ( ExtensionFunctionDefinition func : extensionFunctions ) {
        configuration.registerExtensionFunction(func);
    }

    // Enable secure processing (note: secure processing allows use of Saxon integrated extension functions as opposed to reflective extension functions)  
    extendedSaxonTransformerFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);

    // Register transformer factory on Camel
    SimpleRegistry registry = new SimpleRegistry();
    registry.put(""extendedSaxonTransformerFactory"", extendedSaxonTransformerFactory);
    CamelContext context = new DefaultCamelContext(registry);

    // Define Route
    context.addRoutes(new RouteBuilder() {
        @Override
        public void configure() throws Exception {
            from(""direct:start"")
                .to(""xslt:transformation/myStyleSheet.xslt?transformerFactory=#extendedSaxonTransformerFactory"");
        }
    });




Proposed way:



    // Define my extension functions (note: Saxon requires a class for each function)
    List<ExtensionFunctionDefinition> extensionFunctions = new ArrayList<ExtensionFunctionDefinition>();
    extensionFunctions.add(new MyExtensionFunction1());
    extensionFunctions.add(new MyExtensionFunction2());

    // Register extension functions with Camel
    SimpleRegistry registry = new SimpleRegistry();
    registry.put(""extensionFunctions"", extensionFunctions);
    CamelContext context = new DefaultCamelContext(registry);

    // Define Route
    context.addRoutes(new RouteBuilder() {
        @Override
        public void configure() throws Exception {
            from(""direct:start"")
                .to(""xslt:transformation/myStyleSheet.xslt?saxon=true&saxonExtensionFunctions=#extensionFunctions&secureProcessing=true"");
        }
    });","githubbot:1455175511:2016-02-11T15:25:11.914+0000:1455175511:2016-02-11T15:25:11.914+0000:GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/836

    CAMEL-9591 - Support Saxon integrated extension functions

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel CAMEL-9591

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/836.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #836
    
----
commit 82abd905cb4110090184c19a750ed2aac25c175c
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-02-11T15:23:23Z

    CAMEL-9591 - Support Saxon integrated extension functions

----

githubbot:1455245970:2016-02-12T10:59:30.241+0000:1455245970:2016-02-12T10:59:30.241+0000:Github user lburgazzoli closed the pull request at:

    https://github.com/apache/camel/pull/836

davsclaus:1455252306:2016-02-12T12:45:06.118+0000:1455252306:2016-02-12T12:45:06.118+0000:Oh it would also be good to add a line about this in the 2.17 release notes
http://camel.apache.org/camel-2170-release.html
lb:1455253023:2016-02-12T12:57:03.852+0000:1455253023:2016-02-12T12:57:03.852+0000:done"
0,CAMEL-9590,Bug,Major,"2.15.5, 2.16.2",,"
None
",Resolved,Won't Fix,None,Unassigned,Björn Paulsen,0,1,2016-02-11 11:10:21+00:00,2016-08-10 09:14:44+00:00,"When using a plus sign ""+"" in the URI, camel translate the URI wrong. Same Problem when encode the URI first.


Here is a Example:


Camel Route
public class defaultRoutes extends RouteBuilder {
	public void configure() throws UnsupportedEncodingException {
    		String url = ""plus +wrong"";
    		System.err.println(""URL before: "" + url); // Output plus +wrong
    		String encodedUrl = URLEncoder.encode(url, ""UTF-8"");
    		System.err.println(""URL after encoding: "" + encodedUrl); // Output plus+%2Bwrong <- This is right

    		// In Route it calls the URL http4://www.google.de/webhp?q=plus++
    		// and not http4://www.google.de/webhp?q=plus+%2bwrong
    		from(""timer://foo?fixedRate=true&period=10000"")
    			.to(""http4://www.google.de/webhp?q=""+encodedUrl)
    			.to(""activemq:testPlus"");
  	}
}




To see the wrong Url, put the Log Level to INFO",
0,CAMEL-9589,New Feature,Major,None,"3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Claus Ibsen,Claus Ibsen,1,5,2016-02-11 10:42:43+00:00,2019-04-30 10:24:42+00:00,"We should have an example that uses Camel with ActiveMQ Artemis as the broker. For example we have the widget-gadget that uses regular ActiveMQ. We could create an example with something similar or something else.


The idea is to show Camel as a client connecting to a remote Artemis broker.","fernandobalieiro:1460737253:2016-04-16T00:20:53.603+0000:1460737253:2016-04-16T00:20:53.603+0000:Hello, maybe something like this?
{code:java}
import java.net.URI;

import javax.jms.ConnectionFactory;

import org.apache.activemq.artemis.api.jms.ActiveMQJMSClient;
import org.apache.activemq.artemis.jms.client.ActiveMQConnectionFactory;
import org.apache.camel.CamelContext;
import org.apache.camel.component.jms.JmsComponent;
import org.apache.camel.component.jms.JmsConfiguration;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ArtemisComponentExampleTest extends CamelTestSupport {

    private static final Logger LOG = LoggerFactory.getLogger(ArtemisComponentExampleTest.class);
    
    protected CamelContext createCamelContext() throws Exception {
        CamelContext camelContext = super.createCamelContext();

        JmsComponent component = createArtemisComponent();
        camelContext.addComponent(""artemis"", component);

        return camelContext;
    }

    private JmsComponent createArtemisComponent() {

        JmsComponent component = new JmsComponent();
        try {
            ConnectionFactory factory = createFactory(""localhost"", 61616, ""name"", ""username"", ""passwd"");

            JmsConfiguration configuration = new JmsConfiguration();
            configuration.setConnectionFactory(factory);

            component = new JmsComponent(configuration);
        } catch (Exception e) {
            LOG.error(""Error when creating Factory: {}."", e.getMessage(), e);
        }
        return component;
    }

    private ConnectionFactory createFactory(final String host, final Integer port, final String name, final String username, final String password)
            throws Exception {

        URI uri = new URI(""tcp"", null, host, port, null, ""httpEnabled=true"", null);

        ActiveMQConnectionFactory factory = ActiveMQJMSClient.createConnectionFactory(uri.toString(), name);
        factory.setUser(username);
        factory.setPassword(password);

        return factory;
    }

}
{code}

Regards.
davsclaus:1460958124:2016-04-18T13:42:04.633+0000:1460958124:2016-04-18T13:42:04.633+0000:Yeah Fernando, that is something like that.


fernandobalieiro:1460969888:2016-04-18T16:58:08.265+0000:1460969888:2016-04-18T16:58:08.265+0000:Nice, what is the idea? Can I open a pull request based on [widget-gadget example|https://github.com/apache/camel/tree/master/examples/camel-example-widget-gadget-java]? 
mcekovic:1481859648:2016-12-16T11:40:48.090+0000:1481859648:2016-12-16T11:40:48.090+0000:Any plans for embedding Camel into Artemis, like it is possible to embed it into ActiveMQ?
Any plans for Native Artemis Camel component, like there is one for ActiveMQ?
P.S. These are powerful features of ActiveMQ/Camel, reducing Camel overhead to minimum, when embedded directly into broker, it would be very nice to have similar features in Artemis too.
jdanek:1485932502:2017-02-01T15:01:42.712+0000:1485932502:2017-02-01T15:01:42.712+0000:[~mcekovic] I believe you can already use Apache Felix/Karaf to run Artemis in an OSGi container (see ARTEMIS-325). You can then run Camel in the same OSGi container and create connections between the two using the efficient inVM connection/protocol. I haven't actually tried that, but I do not see obstacles to doing this.

As far as I know, ActiveMQ does it the same way, i.e. using Karaf for an OSGi container and running things inside the container.
mcekovic:1529484932:2018-06-20T16:55:32.420+0000:1529485044:2018-06-20T16:57:24.573+0000:Thanks for the tip. Old RedHat AMQ that used ActiveMQ did it that way (via Karaf OSGI container).
 But plain Apache ActiveMQ has ability to embed Camel naively inside the same JVM w/o need for additional complexity of OSGI container. Btw. RedHat AMQ abandoned ActiveMQ in favor to Artemis, but as well abandoned idea of using OSGI container to host the broker.

Apache ActiveMQ embeds Camel easily because it is Spring based, while Camel is also very Spring friendly.

Although it is probably possible to do what you suggest, still having Camel directly embedable inside Artemis would be very powerful.
 It is actually the only feature that prevent my project to move from ActiveMQ to Artemis."
0,CAMEL-9588,Bug,Major,2.16.2,,"
None
",Resolved,Invalid,None,Claus Ibsen,Matt Sicker,0,2,2016-02-10 19:01:15+00:00,2016-02-11 15:42:11+00:00,"Pretty much what it says in the subject, but here's some sample code:



rest(""/"").get(""search"")
  .param()
    .name(""q"")
    .type(RestParamType.query)
  .endParam()
  .route()
    .to(""direct:search"")
  .endRest();

from(""direct:search"").log(""q = ${headers.q}"");




Then I do GET /search?q=New%20York and it prints out ""q = New%20York"" instead of ""q = New York"". When I use CXF, though, the query parameters are automatically decoded.


This bug report may also apply to path params and such, but I came across this issue while porting from CXF stubs to the rest dsl.","davsclaus:1455148277:2016-02-11T07:51:17.024+0000:1455148277:2016-02-11T07:51:17.024+0000:You need to configure the component you use, eg netty4-http has an option urlDecodeHeaders

http://camel.apache.org/netty4-http
mattsicker:1455175967:2016-02-11T15:32:47.101+0000:1455176531:2016-02-11T15:42:11.081+0000:I enabled that option and all it seems to decode are + signs.

My config:

{code}
restConfiguration()
	.component(""netty4-http"")
	.componentProperty(""urlDecodeHeaders"", ""true"")
	.bindingMode(RestBindingMode.json)
	.skipBindingOnErrorCode(false)
	.dataFormatProperty(""prettyPrint"", ""true"")
	.contextPath(""synergy"")
	.host(host)
	.port(port);
{code}

Then I make a request like q=New%20York and then ${headers.q} will print ""New%20York"", but if I make a request like q=New+York I get ${headers.q} printed as ""New York""."
0,CAMEL-9587,Improvement,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Luca Burgazzoli,Claus Ibsen,0,3,2016-02-10 17:30:58+00:00,2016-04-08 12:45:33+00:00,"We should make it easy to turn on jackson or gson as the json library. You need to do this by adding those jackson type converters from those restlet.ext JAR files.


https://restlet.com/technical-resources/restlet-framework/javadocs/snapshot/jse/ext/


Then we can add some options on the component to turn this on|off.","lb:1459820135:2016-04-05T09:35:35.546+0000:1459820135:2016-04-05T09:35:35.546+0000:I may be wrong but it looks to me that to disable/enable an extension one has to manipulate a singleton like:

{code:java}
List<ConverterHelper> converters = Engine.getInstance().getRegisteredConverters();
for (ConverterHelper converter : converters) {
    if (converter instanceof JacksonConverter) {
        ...
    }
}
{code}

So removing/adding i.e. a JacksonConverter would affect all the restlets in the same classloader, isn't it ?

davsclaus:1459828375:2016-04-05T11:52:55.665+0000:1459828375:2016-04-05T11:52:55.665+0000:Yeah sure if that is a limitation in restlet itself, but we should still make it easier for camel users. 
lb:1459906907:2016-04-06T09:41:47.533+0000:1459906907:2016-04-06T09:41:47.533+0000:As Jackson/Gson should be optional should the dependencies be added to camel-restlet or in theirs own feature like camel-restlet-jackson/json or let the user install required bundles ?

btw, Jackson extensions has quite a few ""outdated"" dependencies:

{code:xml}
<?xml version=""1.0"" encoding=""UTF-8""?>
<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
	xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.restlet.osgi</groupId>
		<artifactId>org.restlet.parent</artifactId>
		<version>2.3.6</version>
	</parent>

	<artifactId>org.restlet.ext.jackson</artifactId>
	<name>Restlet Extension - Jackson</name>
	<description>Integration with Jackson.</description>

	<dependencies>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-core</artifactId>
			<version>2.4.4</version>
				
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-annotations</artifactId>
			<version>2.4.4</version>
				
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>2.4.4</version>
				
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-csv</artifactId>
			<version>2.4.4</version>
				
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-smile</artifactId>
			<version>2.4.4</version>
				
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-xml</artifactId>
			<version>2.4.4</version>
				
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-yaml</artifactId>
			<version>2.4.4</version>
				
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.module</groupId>
			<artifactId>jackson-module-jaxb-annotations</artifactId>
			<version>2.4.4</version>
				
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.module</groupId>
			<artifactId>jackson-module-jsonSchema</artifactId>
			<version>2.4.4</version>
				
		</dependency>
		<dependency>
			<groupId>org.codehaus.woodstox</groupId>
			<artifactId>woodstox-core-asl</artifactId>
			<version>4.3.0</version>
				
		</dependency>
		<dependency>
			<groupId>org.codehaus.woodstox</groupId>
			<artifactId>stax2-api</artifactId>
			<version>3.1.4</version>
				
		</dependency>
		<dependency>
			<groupId>org.yaml</groupId>
			<artifactId>snakeyaml</artifactId>
			<version>1.13</version>
				
		</dependency>
		<dependency>
			<groupId>org.restlet.osgi</groupId>
			<artifactId>org.restlet</artifactId>
			<version>2.3.6</version>
			
		</dependency>
	</dependencies>
</project>
{code}

githubbot:1459928022:2016-04-06T15:33:42.077+0000:1459928022:2016-04-06T15:33:42.077+0000:GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/933

    CAMEL-9587 - camel-restlet - Make it easy to turn on gson or jackson

    With this PR one can explicit set the converters to use with:
    
    ```
    from(""restlet:....?enabledConverters=JacksonConverter,my.company.MyConverter"")
    ```
    
    Notes:
    - the converted need to be installed
    - by default all the converter found by the Engine are enabled
    - converters not used are removed from the engine which is a singleton s
    
    To make it easy to add Jackson/Gson extension there are now two more features:
    - camel-restlet-jackson
    - camel-restlet-gson
    
    Hope it cope with the requirements.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel CAMEL-9587

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/933.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #933
    
----
commit 33f1135f646f9d9dc149a41f5b8ad5faa7656b8c
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-04-06T10:57:03Z

    CAMEL-9587 - camel-restlet - Make it easy to turn on gson or jackson

----

davsclaus:1460087235:2016-04-08T11:47:15.334+0000:1460087235:2016-04-08T11:47:15.334+0000:The PR has been merged.

The followings you can do yourself now. Welcome onboard ;)
lb:1460087502:2016-04-08T11:51:42.253+0000:1460087502:2016-04-08T11:51:42.253+0000:Thank you Claus.

The second sentence scares me a little, and you should too ;)
githubbot:1460090110:2016-04-08T12:35:10.757+0000:1460090110:2016-04-08T12:35:10.757+0000:Github user lburgazzoli closed the pull request at:

    https://github.com/apache/camel/pull/933
"
0,CAMEL-9586,New Feature,Minor,None,None,"
None
",Resolved,Fixed,2.17.0,Luca Burgazzoli,Luca Burgazzoli,0,3,2016-02-10 15:30:54+00:00,2016-02-23 13:37:33+00:00,No Desc,"githubbot:1455090991:2016-02-10T15:56:31.198+0000:1455090991:2016-02-10T15:56:31.198+0000:GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/835

    CAMEL-9586 - Create new Etcd component

    This PR is aimed to get some feedback on a new Etcd component. 
    
    At the moment the component lacks a proper set of tests, documentation and some more functionalities I will add in the coming days.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel CAMEL-9586

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/835.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #835
    
----
commit 4926a6bdf1bf74eb5281c5b24a207f002036e83a
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-02-10T15:54:39Z

    CAMEL-9586 - Create new Etcd component

----

davsclaus:1456184433:2016-02-23T07:40:33.507+0000:1456184433:2016-02-23T07:40:33.507+0000:I polished the code a bit to get the component docs included, and toned down the usage of generics (complicates matters to much).

The options needs documentation so I added a TODO: document me.
Can you do a PR so we can get them documented.
githubbot:1456187174:2016-02-23T08:26:14.101+0000:1456187174:2016-02-23T08:26:14.101+0000:Github user lburgazzoli closed the pull request at:

    https://github.com/apache/camel/pull/835

githubbot:1456194153:2016-02-23T10:22:33.559+0000:1456194153:2016-02-23T10:22:33.559+0000:GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/856

    CAMEL-9586 - add option documentation, include component in distribution, improve karaf features definition

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel CAMEL-9586-improvements

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/856.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #856
    
----
commit 108998d0e10825e0444a2f5179bb747eccbaeb4f
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-02-23T09:35:55Z

    CAMEL-9586 - add option documentation, include component in distribution, improve karaf features definition

----

githubbot:1456199263:2016-02-23T11:47:43.168+0000:1456199263:2016-02-23T11:47:43.168+0000:Github user lburgazzoli closed the pull request at:

    https://github.com/apache/camel/pull/856
"
0,CAMEL-9585,Improvement,Minor,None,,"
None
",Resolved,Won't Fix,None,Claus Ibsen,Tomohisa Igarashi,0,3,2016-02-10 15:11:21+00:00,2016-03-11 09:52:19+00:00,"Right now camel-jms sets username/password when it starts up here
https://github.com/apache/camel/blob/master/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsComponent.java#L864-L871


But it would be great if it can override the credentials per exchange dynamically via exchange header or something like that.


The org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter has setCredentialsForCurrentThread() method, which looks useful for this purpose.","davsclaus:1455337571:2016-02-13T12:26:11.202+0000:1455337571:2016-02-13T12:26:11.202+0000:This sounds a bit dangerous as JMS uses often a connection pool and may cache connections and whatnot. For this to have somehow a private username/password for every request, then you cannot use any kind of pooling as the connection must be disconnect and connect before use with the new set of username/password.

What is the use case as I see a danger here. Nobody has before come up with such a requirement.

And this would only be possible on the producer side, as the consumer uses the username/password you configure when the Camel application startup.
igarashitm:1455571693:2016-02-16T05:28:13.747+0000:1455571693:2016-02-16T05:28:13.747+0000:Ah that's a good point, it wouldn't work well with connection pool. So the usecase would be limited even at producer side. And agree that it doesn't make sense on consumer side. The user who want this are thinking about re-using the credentials used for SOAP inbound message, but it's not a common usecase here as well."
0,CAMEL-9584,Improvement,Major,2.16.1,2.17.0,"
None
",Resolved,Fixed,2.17.0,Andrea Cosentino,Hubertus Willuhn,0,2,2016-02-10 07:19:58+00:00,2016-02-18 07:54:37+00:00,"I am using the LevelDB repository of Camel to store exchanges while aggregating.


Every exchange contains a simple POJO in the header that serves as aggregation predicate.


My POJO-class got the following signature:


public class ID implements Cloneable, Serializable { ...


and only 3 properties:


 private final String org;
private final String type;
private String key;


But Camel don't want to serialize my class because:


WARN  org.apache.camel.impl.DefaultExchangeHolder – Exchange in headers containing key: RECID with object: CEN-PRJ-22 of type: com.domain.ID is not valid header type, it will be excluded by the holder.


I look into the ""DefaultExchangeHolder"" class and this function seems to be the problem:


protected static Object getValidHeaderValue(String headerName, Object headerValue) { ...


This function only allows default Java objects (like String).
But it should be possible to persist any ""Serializable"".


In the official documentation of LevelDB (http://camel.apache.org/leveldb.html) you can read:


LevelDBAggregationRepository will only preserve any Serializable compatible data types. If a data type is not such a type its dropped and a WARN is logged. And it only persists the Message body and the Message headers. The Exchange properties are not persisted.","davsclaus:1455084326:2016-02-10T14:05:26.434+0000:1455084326:2016-02-10T14:05:26.434+0000:We could add an
option to the level db repository to turn on serialized headers. And
then add such a flag to DefaultExchangeHolder."
0,CAMEL-9583,Improvement,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Claus Ibsen,0,1,2016-02-10 07:16:19+00:00,2016-02-10 08:54:24+00:00,"So it can be similar to what camel-jaxb can do with annotated POJOs, but just for json.


We need to have a few options to configure it so you can limit how far jackson should go etc.",
0,CAMEL-9582,Bug,Major,2.16.2,"2.16.3, 2.17.0","
None
",Resolved,Fixed,"2.16.3, 2.17.0",Claus Ibsen,Claus Ibsen,0,2,2016-02-09 11:20:31+00:00,2016-02-09 11:21:34+00:00,"See nabble
http://camel.465427.n5.nabble.com/Swagger-not-working-tp5777255.html",
0,CAMEL-9581,Bug,Minor,2.16.2,,"
None
",Resolved,Cannot Reproduce,None,Claus Ibsen,Prathap Thotapalle,0,2,2016-02-08 17:18:16+00:00,2016-03-04 14:13:26+00:00,"I have upgraded the version from 2.16.1 to 2.16.2 in order to leverage the fix 
CAMEL-9489 - rest-dsl with api-doc should allow multiple rest's with cdi.


But unfortunately, the input field (Text Box) on swagger page for the interface is scrambled and showing drop down list box. 


Thanks for your help in advance.


Regards,
Prathap","davsclaus:1454977209:2016-02-09T08:20:09.063+0000:1454977209:2016-02-09T08:20:09.063+0000:I cannot reproduce this, can you provide more details, and also check what the swagger json doc is outputted as.
davsclaus:1454977247:2016-02-09T08:20:47.960+0000:1454977247:2016-02-09T08:20:47.960+0000:And by swagger page, do you mean the swagger ui?
https://github.com/swagger-api/swagger-ui
davsclaus:1454979990:2016-02-09T09:06:30.271+0000:1454979990:2016-02-09T09:06:30.271+0000:You can try upgrade swagger-java there is a 1.5.7 release out. I noticed it fixed an issue with an empty default value for an integer type, that was a bug in 1.5.4"
0,CAMEL-9580,Improvement,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Franz Forsthofer,Franz Forsthofer,0,2,2016-02-08 16:10:28+00:00,2016-02-09 08:06:52+00:00,"The XSLT component allows already specifying custom URI resolvers via the parameter uriResolver. However, when your custom URI resolver depends on the dynamic URI of the endpoint then the current solution is not sufficient. Suppose you have a dynamically created XSLT endpoint, like


 <camel:recipientList>
<camel:simple>xslt:${header.XSLT_FILE}?uriResolver=#uriResolver</camel:simple>
</camel:recipientList>


where the resource URI of the XSLT document is also dynamic (in the example via the header XSLT_File). In this case you cannot hand-over the dynamic resource URI to the custom URI resolver. 


The contribution solves this problem by introducing a new parameter uriResolverFactory where you can specify a factory which implements the method


URIResolver createUriResolver(CamelContext camelContext, String resourceUri)


This method is called when the endpoint is created and gives you access to the endpoint resource URI.


We also support that the resource URI factory can be set on the component so that you must not set the factory on each endpoint.


Further advantage of the new approach is that you can now easily extend the default resource resolver org.apache.camel.builder.xml.XsltUriResolver which also depends on the resource URI of the endpoint.","forsthofer:1454919590:2016-02-08T16:19:50.990+0000:1454919590:2016-02-08T16:19:50.990+0000:I made a similar enhancement for the XSLT component as I have done for the Validator component. See https://issues.apache.org/jira/browse/CAMEL-9572
forsthofer:1454976412:2016-02-09T08:06:52.500+0000:1454976412:2016-02-09T08:06:52.500+0000:wiki updated"
0,CAMEL-9579,Improvement,Minor,None,2.17.0,"
None
",Closed,Fixed,2.17.0,Luca Burgazzoli,Luca Burgazzoli,0,2,2016-02-08 15:26:23+00:00,2016-02-11 08:37:53+00:00,"HazelcastMapConsumer uses addEntryListener(EntryListener, boolean) which is now deprecated and should be replaced with   addEntryListener(MapListener, boolean)","githubbot:1454918570:2016-02-08T16:02:50.141+0000:1454918570:2016-02-08T16:02:50.141+0000:GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/832

    CAMEL-9579 - Replace deprecated entry listener signature in Hazelcast…

    …MapConsumer

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel CAMEL-9579

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/832.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #832
    
----
commit a5faadc3e6b18be5f75ab0abf395ef435b1de64e
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-02-08T16:02:07Z

    CAMEL-9579 - Replace deprecated entry listener signature in HazelcastMapConsumer

----

githubbot:1455150324:2016-02-11T08:25:24.775+0000:1455150324:2016-02-11T08:25:24.775+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/832
"
0,CAMEL-9578,Improvement,Minor,None,2.17.0,"
None
",Closed,Fixed,2.17.0,Luca Burgazzoli,Luca Burgazzoli,0,2,2016-02-08 14:51:21+00:00,2016-02-11 08:37:37+00:00,"As today InfinispanProducer creates an object per event:



    @Override
    public void process(Exchange exchange) throws Exception {
        new InfinispanOperation(
            getCache(exchange), 
            configuration).process(exchange);
    }




Which could be reduce by making InfinispanOperation stateless","githubbot:1454916200:2016-02-08T15:23:20.432+0000:1454916200:2016-02-08T15:23:20.432+0000:GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/831

    CAMEL-9578 - Reduce object creation in InfinispanProducer

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel CAMEL-9578

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/831.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #831
    
----
commit bc4430f936671ef8f422a8ebd9b0c624c473380c
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-02-08T15:22:43Z

    CAMEL-9578 - Reduce object creation in InfinispanProducer

----

githubbot:1455150324:2016-02-11T08:25:24.768+0000:1455150324:2016-02-11T08:25:24.768+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/831
"
0,CAMEL-9577,Improvement,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Claus Ibsen,0,1,2016-02-08 13:59:44+00:00,2016-02-08 16:45:31+00:00,"We should mark components that has custom logic for suspend with a Suspenable marker interface.


This allows us to know this as the ServiceSupport base class has a default suspend implementation that the component inherits. 


This leads to situations where a suspend do not appear to suspend because the default implement is a noop.",
0,CAMEL-9576,Bug,Minor,2.16.2,"2.15.6, 2.16.3, 2.17.0","
None
",Resolved,Fixed,"2.15.6, 2.16.3, 2.17.0",Claus Ibsen,Lien Deboosere,0,3,2016-02-08 12:45:09+00:00,2016-02-08 17:24:43+00:00,"The camel-sql component contains a class called ClassLoadingAwareObjectInputStream, which is a copy from a class from the apache activeMQ project.
There was a bug in this class that was fixed in the activeMQ project but was not updated in the camel-sql component.
I face the same issue as in: https://issues.apache.org/jira/browse/AMQ-3537
where I cannot deserialize an object that contains a mix of jdk and non-jdk classes.","davsclaus:1454911356:2016-02-08T14:02:36.867+0000:1454911356:2016-02-08T14:02:36.867+0000:Thanks a patch or PR is welcome to fix this in Camel.
githubbot:1454913227:2016-02-08T14:33:47.890+0000:1454913227:2016-02-08T14:33:47.890+0000:GitHub user LienDeboosere opened a pull request:

    https://github.com/apache/camel/pull/830

    CAMEL-9576: fix deserializing proxies with mixed JDK&non-JDK interfaces

    This is a pull request with a fix for the issue: https://issues.apache.org/jira/browse/CAMEL-9576


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/LienDeboosere/camel CAMEL-9576

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/830.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #830
    
----
commit 75cac5eb14cc86180f54959d11f0caa816ed43a9
Author: Lien Deboosere <leb@melexis.com>
Date:   2016-02-08T14:29:47Z

    CAMEL-9576: fix deserializing proxies with mixed JDK & non-JDK interfaces

----

ldbooser:1454913282:2016-02-08T14:34:42.118+0000:1454913282:2016-02-08T14:34:42.118+0000:i created a pull request with a fix:

https://github.com/apache/camel/pull/830
githubbot:1454923455:2016-02-08T17:24:15.597+0000:1454923455:2016-02-08T17:24:15.597+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/830

davsclaus:1454923483:2016-02-08T17:24:43.590+0000:1454923483:2016-02-08T17:24:43.590+0000:Thanks for the PR"
0,CAMEL-9575,Bug,Major,2.16.2,,"
None
",Resolved,Invalid,None,Unassigned,Seiji Sogabe,0,3,2016-02-08 05:41:14+00:00,2016-02-11 08:25:24+00:00,"See http://camel.465427.n5.nabble.com/Invalid-quot-Content-Type-quot-Header-is-configured-td5777250.html


Content-Type header of response should be ""application/xml"", not ""application/json"".
It seems that if Content-Type header of request has been configured, it is used as a Content-Type header of response.","githubbot:1454884184:2016-02-08T06:29:44.844+0000:1454884184:2016-02-08T06:29:44.844+0000:GitHub user ssogabe opened a pull request:

    https://github.com/apache/camel/pull/828

    [CAMEL-9575] overrides Content-Type header even if it is set, or not

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ssogabe/camel CAMEL-9575

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/828.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #828
    
----
commit ee70ee95e6b960b384914f6bb8ba8ca867ccb99e
Author: Seiji Sogabe <s.sogabe@gmail.com>
Date:   2016-02-08T06:27:47Z

    overrides Content-Type header even if it is set, or not

----

ssogabe:1454884337:2016-02-08T06:32:17.428+0000:1454884337:2016-02-08T06:32:17.428+0000:created PR.
 https://github.com/apache/camel/pull/828
davsclaus:1454911537:2016-02-08T14:05:37.575+0000:1454911537:2016-02-08T14:05:37.575+0000:Please discuss this more on the mailing list and provide more details about your use case
githubbot:1455150324:2016-02-11T08:25:24.769+0000:1455150324:2016-02-11T08:25:24.769+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/828
"
0,CAMEL-9574,New Feature,Minor,None,"2.16.3, 2.17.1, 3.0.0","
None
",Resolved,Duplicate,"2.16.3, 2.17.1, 3.0.0",Freeman Yue Fang,David J. M. Karlsen,1,2,2016-02-07 23:29:59+00:00,2016-04-13 02:05:44+00:00,"It should be possible to make/force invocations oneway only (outonly? inonly?) either by setting the exchangePattern in the camel route or configuring the endpoint explicitly.
The way it works today is that it will always wait synchronously for the response if invoking a request/reply defined operation.
My usecase is to invoke soap webservices over JMS by using the camel cxf transport, but I would like the responses to appear decoupled on a dedicated messagedriven endpoint - not in a request/reply manner",
0,CAMEL-9573,Task,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Claus Ibsen,0,1,2016-02-07 09:27:33+00:00,2019-02-05 08:12:51+00:00,"They should not return CamelInternalProcessor in the createProcessor. But should like aggregate / splitter does.


We would need a way to add the advice in another way, so we can return the real processor in the method.",
0,CAMEL-9572,Improvement,Major,None,2.17.0,"
None
",Closed,Fixed,2.17.0,Franz Forsthofer,Franz Forsthofer,0,2,2016-02-06 15:25:41+00:00,2016-02-16 14:01:03+00:00,"The validator endpoint allows already to specify custom resource resolvers, via the parameter resourceResolver. However, there is a use case where this functionality is not sufficient. If you have a dynamically created validator endpoint, like


 <camel:recipientList>
     <camel:simple>validator:${header.XSD_FILE}?resourceResolver=#resourceResolver</camel:simple>
 </camel:recipientList>


where the resource URI of the XSD document is also dynamic (in the example via the header XSD_FILE) and if your resource resolver depends on the resource URI of the XSD document, then the current implementation gives you no solution for this problem. You cannot hand-over the dynamic resource URI to the custom resource resolver.


Therefore we introduce the new parameter resourceResolverFactory where you can specify a factory which implements the method 


LSResourceResolver createResourceResolver(CamelContext camelContext, String rootResourceUri);


This method is called when the endpoint is created and gives you access to the endpoint resource URI (parameter rootResourceUri).


Remark: resource resolvers need to have the root resource URI in the case of relative URIs.","forsthofer:1454743911:2016-02-06T15:31:51.037+0000:1454743911:2016-02-06T15:31:51.037+0000:Hi Claus,

what do you think about this feature. Can I check it in? I have commiter rights.

If you agree I would also submit a similar solution for the XSLT component.

Best Regards Franz
davsclaus:1454750844:2016-02-06T17:27:24.269+0000:1454750844:2016-02-06T17:27:24.269+0000:Yeah I would probably

- create a default resource resolver factory that creates the current resource resolver by default
- allow to configure the factory on the component level, and let endpoints inherit from component, that allows to configure this once globally on the component

But otherwise its a good idea, the factory makes it easier for end users to extend the default resolver with their own logic.
forsthofer:1454905580:2016-02-08T12:26:20.441+0000:1454905580:2016-02-08T12:26:20.441+0000:Hi Claus,

i made the changes requested by you. See attached patch.

Can I now check-ti in?

Best Regards Franz
davsclaus:1454906523:2016-02-08T12:42:03.988+0000:1454906523:2016-02-08T12:42:03.988+0000:Yeah sure
forsthofer:1454910874:2016-02-08T13:54:34.488+0000:1454910874:2016-02-08T13:54:34.488+0000:Wiki Page updated.
forsthofer:1455592851:2016-02-16T11:20:51.550+0000:1455592851:2016-02-16T11:20:51.550+0000:The current   clearCachedSchema method re-reads the schema document in binary format and then sets the object model of the schema to null so that in the next process call the object model is re-built from the read binary.

Suppose that the schema document was deleted and now the clearCachedSchema method is called in order to refresh the cached object model. In this case the re-read method will throw a ""not found"" exception and will not update the cache.

However, in this case one expects that the cache is invalidated and that during the next process call an error occurs because the schema document was deleted. 

Therefore the clear cache method should only clear the object model and not re-read the document. The document shall be re-read during the next process call. 

This would also be in consistency with the treatment in the XSLT component. 


forsthofer:1455602463:2016-02-16T14:01:03.740+0000:1455602463:2016-02-16T14:01:03.740+0000:refactoring done"
0,CAMEL-9571,Task,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Andrea Cosentino,Claus Ibsen,0,1,2016-02-06 08:12:18+00:00,2016-04-26 06:59:09+00:00,We should upgrade the testing to use Karaf 4.x based testing.,davsclaus:1459067301:2016-03-27T16:28:21.688+0000:1459067301:2016-03-27T16:28:21.688+0000:I have upgraded tests/camel-itest-karaf to be karaf 4 based now. So can take a look there that may help upgrading this module.
0,CAMEL-9570,Bug,Minor,2.16.2,,"
None
",Resolved,Won't Fix,None,Unassigned,Quinn Stevenson,1,6,2016-02-05 20:59:45+00:00,2019-07-31 09:22:26+00:00,"Basic Conditions:



Java interface used for OSGi Services
Implementation of the Java interface registered as a OSGi service.  Note that the package containing implementation is NOT exported
A Java RouteBuilder that uses the Java interface via bean(...) DSL calls, with a setter for the bean implementing the interface
Wire everything together with Blueprint - create a <reference ...> for the service, a <bean ...> for the RouteBuilder and inject the service reference, and use the RouteBuilder in a CamelContext.



After all this is deployed, stop the bundle implementing the service.  A ServiceUnavailableException should be thrown after a timeout, but the object that was injected into the RouteBuilder process the request - so the Blueprint Proxy is not used.","hqstevenson:1454678294:2016-02-05T21:18:14.199+0000:1454678294:2016-02-05T21:18:14.199+0000:Here's the example that I started the discussion ( http://camel.465427.n5.nabble.com/Invoking-Dynamic-OSGi-Blueprint-services-from-a-Java-RouteBuilder-td5776755.html#a5776848 ) with that demonstrates the issue:

Java Interface (service-interface bundle):
public interface Echo {
    String execute(String body);
}

Java Implementation:
public class EchoServiceOne implements Echo {
    Logger log = LoggerFactory.getLogger(this.getClass());

    @Override
    public String execute(String body) {
        log.info( ""{}:{} -> execute"", this.getClass().getSimpleName(), this.hashCode() );
        return body;
    }
}


Blueprint Registering the service (service-one bundle):
<?xml version=""1.0"" encoding=""UTF-8""?>
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
           xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
           xsi:schemaLocation=""http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd"">

    <service interface=""com.pronoia.test.osgi.service.Echo"" >
        <service-properties>
            <entry key=""instance"" value=""one"" />
        </service-properties>
        <bean class=""com.pronoia.test.osgi.service.impl.EchoServiceOne"" />
    </service>

</blueprint>

Java RouteBuilder (route-builder bundle):
public class VerySimpleBuilder extends RouteBuilder {
    Echo blueprintServiceReference;

    @Override
    public void configure() throws Exception {
        from(""timer://very-simple-builder?period=5000"").routeId( ""very-simple-route"" )
                .setBody( simple( ""${exchangeProperty["" + Exchange.TIMER_FIRED_TIME + ""]}"") )
                .log(""Calling Service via Reference: ${body}"" )
                .bean(blueprintServiceReference,false)
                .to( ""mock://result"")
                .log(""Finished"" );
    }

    public Echo getBlueprintServiceReference() {
        return blueprintServiceReference;
    }

    public void setBlueprintServiceReference(Echo blueprintServiceReference) {
        this.blueprintServiceReference = blueprintServiceReference;
    }
}

Blueprint constructing the Camel context (camel-context bundle):
<?xml version=""1.0"" encoding=""UTF-8""?>
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
           xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
           xmlns:ext=""http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.0.0""
           xsi:schemaLocation=""
       http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
       http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd""
>

    <reference id=""echo-service"" interface=""com.pronoia.test.osgi.service.Echo"" filter=""instance=one"" timeout=""2000"" />

    <bean id=""very-simple-route-builder"" class=""com.pronoia.test.camel.builder.VerySimpleBuilder"">
        <property name=""blueprintServiceReference"" ref=""echo-service"" />
    </bean>

    <camelContext id=""very-simple-context"" xmlns=""http://camel.apache.org/schema/blueprint"">
        <routeBuilder ref=""very-simple-route-builder"" />
    </camelContext>

</blueprint>
ranx:1454920173:2016-02-08T16:29:33.605+0000:1454920173:2016-02-08T16:29:33.605+0000:https://issues.apache.org/jira/browse/CAMEL-9562

This may be related. The OSGi classloader is fundamentally broken by fallback mechanisms that use a global classloader to grab files. 
rdavidson:1455202126:2016-02-11T22:48:46.172+0000:1455205152:2016-02-11T23:39:12.766+0000:I have been looking into this issue for a while this evening and can't figure it out. It is unrelated to the service being cached in the OsiServiceRegistry as described in http://camel.465427.n5.nabble.com/OsgiServiceRegistry-caching-service-references-why-td5777410.html.

Using the code supplied above I can recreate the issue when using a route builder, but from my investigations I don't get the issue when I use java DSL and inject the CamelContext manually via blueprint into a bean and call camelContext.addRoutes(new RouteBuilder(....)). For example I get the ServiceUnavailableException and the correct behaviour with:

{code}
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
	xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
	xmlns:ext=""http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.0.0""
	xsi:schemaLocation=""
http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd"">
	<reference id=""echo-service"" interface=""com.rdavidson.camel.test.Hello""
		 timeout=""2000"" />
		
	<bean id=""very-simple-route-builder"" class=""com.rdavidson.osgi.consumer.VerySimpleBuilder"" init-method=""start"">
		<property name=""blueprintServiceReference"" ref=""echo-service"" />
		<property name=""camelContext"" ref=""very-simple-context""/>
	</bean>
	
	<camelContext id=""very-simple-context""
		xmlns=""http://camel.apache.org/schema/blueprint"">
	</camelContext>
</blueprint>




public class VerySimpleBuilder extends RouteBuilder  {
	private Hello blueprintServiceReference;
	private CamelContext camelContext;

	public void setBlueprintServiceReference(Hello blueprintServiceReference) {
		this.blueprintServiceReference = blueprintServiceReference;
	}

	public void setCamelContext(CamelContext camelContext) {
		this.camelContext = camelContext;
	}

	public void configure() throws Exception {
		from(""timer://very-simple-builder?period=5000"").bean(blueprintServiceReference);
	}
	
	public void start() throws Exception{
		camelContext.addRoutes(this);
	}

}
{code}
ranx:1455539746:2016-02-15T20:35:46.118+0000:1455539746:2016-02-15T20:35:46.118+0000:Richard,

When you say you can replicate using a routebuilder are you using an annotation for the injection?  If I recall that's how I ran into the problem.  That's when I started looking at the package scanners. That may be an unrelated problem.  But as you say, if one manually injects the reference it works fine. 

If I use the @BeanInject annotation I'll get a concrete implementation of the interface I'm specifying.  If I manually inject it via blueprint XML the class will instead be shown as com.sun.proxy.$Proxy40

I was getting similar unexpected behaviors if I used @Produce or @Consume annotations. So there appears to be a fundamental difference in the way the references are being handled in annotation processing versus straight XML.

rdavidson:1455799178:2016-02-18T20:39:38.393+0000:1455799194:2016-02-18T20:39:54.907+0000:Sorry for the slow response. I have been away for a few days. No I was adding the route builder using the Blueprint DSL so I don't think it is related specifically to annotations or package scanning:

Adding the route builder like this causes the issue:
{code}
<camelContext id=""very-simple-context""
		xmlns=""http://camel.apache.org/schema/blueprint"">
<routeBuilder ref=""very-simple-route-builder"" />    
	</camelContext>
{code}





ranx:1455806686:2016-02-18T22:44:46.313+0000:1455806686:2016-02-18T22:44:46.313+0000:I'd be curious what class you see when you inject the reference.  In certain configurations with the route builders and annotations I'd see it inject non-proxied elements.  When I'd do the blueprintReference.getClass().getName() I'd see the concrete type of implementing class.  If I injected it it in a different fashion I'd see the com.sun.Proxy which is what I'd expect.  So what appears to be happening is that some other mechanic is loading that class and injecting in a non-proxied fashion.  When the other bundle is stopped it doesn't care because it isn't coming through that classloading mechanism.  

You are seeing the issue when  you do this which is similar to what I was doing with the package scanning when I saw that behavior.  I've been sick  for a few days and completely modified my design to skirt the issue so I don't recall it all right now. 

<camelContext id=""very-simple-context""
		xmlns=""http://camel.apache.org/schema/blueprint"">
<routeBuilder ref=""very-simple-route-builder"" />    
	</camelContext>

I was doing this:

<camelContext id=""very-simple-context""	xmlns=""http://camel.apache.org/schema/blueprint"">
              <package>com.foo.bar</package>
</camelContext>

At least I think that was the syntax but it's been awhile.  
ranx:1455806964:2016-02-18T22:49:24.082+0000:1455806964:2016-02-18T22:49:24.082+0000:https://issues.apache.org/jira/browse/CAMEL-3271

Seems that it was around before at least with the package scanner.  I only mention it as they are suspiciously alike in that the route builders bootstrapped inside the CamelContext appear to have the classloader issue.
hqstevenson:1456993666:2016-03-03T16:27:46.514+0000:1456993666:2016-03-03T16:27:46.514+0000:I've tried to determine the difference between the two, and the call path for the service looks to be identical as near as I can tell.

  I'm using a route where I call the service via to( ""bean:beadId"" ).  The RouteBuilder has a setter for the bean reference, but it's never used.  When the service reference is injected into the RouteBuilder, the route will never pickup a new service.  In addition, it keeps calling the old service even though it has been unregistered.

Here's my RouteBuilder
public class ServiceConsumerBuilder extends RouteBuilder{
    Logger log = LoggerFactory.getLogger(this.getClass());

    String beanId = ""osgi-service"";
    String timerName = ""default-timer"";

    Object beanInstance;

    public ServiceConsumerBuilder() {
    }

    @Override
    public void configure() throws Exception {
        fromF( ""timer://%s?period=%d&fixedRate=%b"", timerName, 5000, true)
            .routeId( ""java-route"")
            .setBody().constant( ""Dummy Value"")
            .toF( ""bean://%s?cache=%b&method=%s"", beanId, false, ""execute"")
            .to( ""mock://result"")
            ;

    }

    public String getTimerName() {
        return timerName;
    }

    public void setTimerName(String timerName) {
        this.timerName = timerName;
    }

    public String getBeanId() {
        return beanId;
    }

    public void setBeanId(String beanId) {
        this.beanId = beanId;
    }

    public Object getBeanInstance() {
        return beanInstance;
    }

    public void setBeanInstance(Object beanInstance) {
        Exception ex = new Exception();
        ex.fillInStackTrace();
        log.info( ""Setting beanInstance"", ex );

        this.beanInstance = beanInstance;
    }

    public static void main( String[] args ) {
        System.out.println( ""Hello"");

    }
}

Here's a Blueprint that works
<?xml version=""1.0"" encoding=""UTF-8""?>
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
           xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
           xmlns:cm=""http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0""
           xmlns:camel=""http://camel.apache.org/schema/blueprint""
           xsi:schemaLocation=""
         http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
         http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd"">

    <cm:property-placeholder persistent-id=""blueprint-test"" update-strategy=""reload"" >
        <cm:default-properties>
            <cm:property name=""timer-name"" value=""blueprint-consumer"" />
        </cm:default-properties>
    </cm:property-placeholder>

    <reference id=""osgi-service"" interface=""com.pronoia.osgi.service.MyServiceInterface"" filter=""implementation=bp-external""/>

    <bean id=""java-route"" class=""com.pronoia.camel.builder.ServiceConsumerBuilder"" >
        <property name=""beanId"" value=""osgi-service"" />
        <property name=""timerName"" value=""java-${timer-name}"" />
    </bean>

    <camelContext id=""blueprint-context"" xmlns=""http://camel.apache.org/schema/blueprint"">
        <routeBuilder ref=""java-route"" />
    </camelContext>

</blueprint>
 

And here's a blueprint that doesn't work
<?xml version=""1.0"" encoding=""UTF-8""?>
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
           xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
           xmlns:cm=""http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0""
           xmlns:camel=""http://camel.apache.org/schema/blueprint""
           xsi:schemaLocation=""
         http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
         http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd"">

    <cm:property-placeholder persistent-id=""blueprint-test"" update-strategy=""reload"" >
        <cm:default-properties>
            <cm:property name=""timer-name"" value=""blueprint-consumer"" />
        </cm:default-properties>
    </cm:property-placeholder>

    <reference id=""osgi-service"" interface=""com.pronoia.osgi.service.MyServiceInterface"" filter=""implementation=bp-external""/>

    <bean id=""java-route"" class=""com.pronoia.camel.builder.ServiceConsumerBuilder"" >
        <property name=""beanId"" value=""osgi-service"" />
        <property name=""beanInstance"" ref=""osgi-service"" />
        <property name=""timerName"" value=""java-${timer-name}"" />
    </bean>

    <camelContext id=""blueprint-context"" xmlns=""http://camel.apache.org/schema/blueprint"">
        <routeBuilder ref=""java-route"" />
    </camelContext>

</blueprint>
hqstevenson:1456993711:2016-03-03T16:28:31.435+0000:1456993711:2016-03-03T16:28:31.435+0000:Also, I've tried changing the order of the registries (putting the Blueprint registry before the OSGi registry), and that didn't have any effect.
hqstevenson:1463996965:2016-05-23T17:49:25.876+0000:1463996965:2016-05-23T17:49:25.876+0000:A couple of more updates on this -

I tried removing the OsgiServiceRegistry from the camel context - no effect

I also tried this with another Blueprint that doesn't use camel but uses the same service reference - all in the same bundle.  

<bean id=""blueprint-consumer"" class=""com.pronoia.osgi.blueprint.BlueprintServiceConsumer"" init-method=""start"" destroy-method=""stop"">
    <property name=""service"" ref=""osgi-service"" />
</bean>

The BlueprintServiceConsumer starts a timer and calls the injected service - nothing else.

The net of this is when the blueprint bundle behaves the same way as the camel bundle - i.e. when the service reference is injected into the route builder, the POJO in the blueprint bundle won't pickup new services either.  

I then removed the routebuilder from the camel context and tried again - this time the blueprint consumer works as expected.

So it appears that the service proxy is being modified somehow when the routebuilder is initialized in by the camel context?

Still digging - but this is strange
hqstevenson:1463997292:2016-05-23T17:54:52.066+0000:1463997292:2016-05-23T17:54:52.066+0000:One more thing - I noticed one change in the stack trace for the case when the service-reference is injected into the route builder.

When the route is initially running, the service is called via sun.reflect.NativeMethodAccessorImpl.  However, after the OSGi service is stopped (when I'd expect the call to pickup a new service, blocking until one becomes available), the stack changes and the service is called via a sun.reflect.GeneratedMethodAccessor.

Initial stack trace
	at com.pronoia.osgi.service.impl.ServiceOneImplementation.execute(ServiceOneImplementation.java:20)
	at Proxye4dcb4b6_278e_4b9e_b700_e969c2379f0d.execute(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.8.0_91]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)[:1.8.0_91]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)[:1.8.0_91]
	at java.lang.reflect.Method.invoke(Method.java:498)[:1.8.0_91]
	at org.apache.camel.component.bean.MethodInfo.invoke(MethodInfo.java:408)[55:org.apache.camel.camel-core:2.18.0.SNAPSHOT]

Stack trace after service is stopped
	at com.pronoia.osgi.service.impl.ServiceOneImplementation.execute(ServiceOneImplementation.java:20)
	at Proxye4dcb4b6_278e_4b9e_b700_e969c2379f0d.execute(Unknown Source)
	at sun.reflect.GeneratedMethodAccessor91.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)[:1.8.0_91]
	at java.lang.reflect.Method.invoke(Method.java:498)[:1.8.0_91]
	at org.apache.camel.component.bean.MethodInfo.invoke(MethodInfo.java:408)[55:org.apache.camel.camel-core:2.18.0.SNAPSHOT]

hqstevenson:1464015103:2016-05-23T22:51:43.044+0000:1464015103:2016-05-23T22:51:43.044+0000:I tried changing the route to use a processor exposed as an OSGi service instead of a bean ( i.e. process( svc ) instead of .to (""bean:....""), and the result is the same - dynamic changes don't happen and the route continues to call the processor even after the bundle exposing the processor as a service is stopped.

I also tried putting a simple wrapper object around the service and injecting that into the route builder instead - same results.

I'm running out of things to try in order to figure out what is going on here - let alone fix it.
hqstevenson:1464182333:2016-05-25T21:18:53.559+0000:1464182333:2016-05-25T21:18:53.559+0000:Does anybody have any other ideas?  I really need this fixed - I just don't know where to look and what to try next.
davsclaus:1464253988:2016-05-26T17:13:08.944+0000:1464253988:2016-05-26T17:13:08.944+0000:Sorry you may need to talk to the OSGi Blueprint / Karaf guys.
hqstevenson:1464255848:2016-05-26T17:44:08.588+0000:1464255848:2016-05-26T17:44:08.588+0000:Thank You Claus -

I was going to reach out to the other teams, but I'm pretty sure this problem is in Camel - not Blueprint of Karaf.

The reason I say that is I tried to replicate the issue using a plain Blueprint XML, and I couldn't.  The plain blueprint initialized a simple bean the same way I initialize a the route builder in the Camel Blueprint XML, and then started a thread that called the bean periodically (just like the timer-driver java RouteBuilder does).  With this configuration, I couldn't reproduce the issue.

I then put the plain blueprint XML in the same bundle as the Camel blueprint XML, and found that the plain blueprint XML was effected by the Camel Blueprint XML.  When the component in the plain blueprint XML called the service via the proxy (obtained from the blueprint container), it behaved exactly the same way as the Camel blueprint XML.  I also tried this when the route in the route builder was not auto-started, and that had no effect (i.e. I still didn't get the new service, and the original instance of the service is continued to be called even though the bundle exporting that service has been stopped)

Then I tried the bundle with both blueprint XMLs, but I did NOT put the route builder in the camel context.  In this situation, the component in the plain blueprint XML behaved as expected.

Based on all of this, it looks to me like the blueprint proxy is being modified when the camel context is initialized.  Either that Camel is effecting the way the proxy is created before it is put in the blueprint context.

If you can you point me to the right spot in the code where this type of initialization occurs, I'd be very grateful.  I've spent many hours tracing through the camel code in a debugger, be I get lost in all the dynamic proxies and reflection manipulations - I'm not sure where to focus.
ranx:1464256840:2016-05-26T18:00:40.630+0000:1464256840:2016-05-26T18:00:40.630+0000:Quinn,

Are you using any of the injection annotations?  I ran into that same
problem when I was using annotations for injection instead of plain ol'
getter/setter.  I think I posted something about it sometime back.  I was
pretty puzzled by it at the time because my service was coming from another
bundle but when I would print out the bean being injected it clearly showed
that it was of the concrete type and not the proxied interface.  That
alarmed me a bit since I wasn't sure what was happening and obviously some
classloader shenanigans were happening that I was unaware of.  When I get
rid of the annotations and used the getter/setter explicitly the problem
went away.  That still left me a bit nervous so I try to check for that
regularly now.

Brad

On Thu, May 26, 2016 at 12:44 PM, Quinn Stevenson (JIRA) <jira@apache.org>


hqstevenson:1464257012:2016-05-26T18:03:32.191+0000:1464257012:2016-05-26T18:03:32.191+0000:Thanks Brad -

No - I stripped out everything I could to keep things as simple as possible and reproduce the issue.  The only annotation I have anywhere in any of these bundles is Override - I don't think that should effect anything.
ranx:1464259960:2016-05-26T18:52:40.667+0000:1464259960:2016-05-26T18:52:40.667+0000:Interesting.  I guess you can't post any of the XML?  Did this just start
happening with a newer version of Camel or is this older?  This sort of
news makes me get nervous.   When I expect the behavior to be one way and
something else happens it can be a bit disconcerting.  You mentioned that
you have two blueprint files.  Are you exporting the service from one
bundle and then pulling it by reference in another bundle or are they in
the same bundle/classloader.  When I ran into the problem before what was
especially disconcerting is that the class that implemented the service
interface was explicitly private it in its own bundle.  If something were
wired wrong what I'd expect is a class not found exception but the loader
was actually finding the explicitly private class in that other bundle and
using a reference to it.  So like you I didn't see the timeout happen when
I uninstalled the service provider bundle. Instead the reference to the
concrete implementation was being held onto by the consumer.

At that point you're in classloader hell.

On Thu, May 26, 2016 at 1:04 PM, Quinn Stevenson (JIRA) <jira@apache.org>


hqstevenson:1464264755:2016-05-26T20:12:35.414+0000:1464264755:2016-05-26T20:12:35.414+0000:The basic versions of the source are in this JIRA at the top, but I just push the current incarnation of my testing components to GitHub ( https://github.com/hqstevenson/example-camel-osgi-service-testing ).

As far a I know, this has been there forever.  I first noticed some strange behavior with Camel 2.12 (at least that's what I remember), but I didn't ever track down exactly what was going on until Camel 2.16.

I actually have a bunch of blueprint files.  There are three bundles that make up the services I'm using for testing - one that contains the java interface for the service and two that have implementations of the service.  I recently moved the basic implementation of the service into and abstract class in the service interface bundle (because I got tired of changing code twice every time I wanted the service implementations to log something more/different), but that didn't have any effect on the behavior.  The service implementations from the two bundles are exposed using a blueprint file in each bundle, and the implementing classes are not exported from the bundle.

The bundle containing the camel consumer has three blueprint files in it.  One defines the service references (used by the other two), one defines the camel context and configures the route builder, and the final one configures a plain java object to call the same service (i.e. no Camel involved).

If you clone the project, you'll see another bundle as well - it has a blueprint that doesn't use camel that calls services (similar to the camel bundle, just without camel).  I was trying to reproduce the behavior with this bundle, but I couldn't.

ranx:1464267700:2016-05-26T21:01:40.629+0000:1464267700:2016-05-26T21:01:40.629+0000:I'm going to have to go back and recheck this.  At the time I ran into the
problem I'd started working with the Java route builder and the
annotations.  Usually I did everything in beans and XML.  After I ran into
the problem I started looking at the classloaders in Camel and posted a
concern that I had about the order and way classloaders were working.  It's
been awhile and I've been so focused on other technical issues the details
escape recall.

I switched back to using XML for routes and Java beans for all logic and
stopped using the route builder altogether.  I haven't seen the problem
since.  To make my code a bit more Java centric I started using a number of
smaller Camel routes inside the bundles and use @EndpointInject to inject
them into a connector class that I could use in my other Java classes.  But
I've avoided the Java DSL and route builder with blueprint since then.
Well, the other reason I stopped using the route builder is that I didn't
find it helped me interoperate with the Java classes themselves in any
really improved way and when I ran into some bean invocation errors on top
of it it started to feel a bit of a mess.

The hybrid approach of injecting endpoints into a small helper/wrapper
class that I use in my Java classes has worked well.  At least it limits
the casting to and from calls to routes to that one location.  And then I
can inject that into my other Java classes and they can simply call out to
whatever camel routes make sense in the context.  I use an interface on
that connector class so I can even mock it for testing of my Java classes
(though I haven't done that as much as I should <confession>).

I took a quick look at your code and if I get time later tonight I'll look
again.  Did the other bundle you have in their use Camel blueprint XML for
the routes.  In essence doing the same thing as the Java RouteBuilder but
only in blueprint XML?  I'll also have to see if I can find some of the
posts from back when I was wrestling with this same problem some time after
the first of the year.

Brad

On Thu, May 26, 2016 at 3:13 PM, Quinn Stevenson (JIRA) <jira@apache.org>


hqstevenson:1465818322:2016-06-13T19:45:22.168+0000:1465818322:2016-06-13T19:45:22.168+0000:I found a workaround - I haven't tested it throughly, but it works in the basic case of my test.

I extended the BlueprintCamelContext, and then used that context as a normal bean rather than using the camel blueprint extension namespace.

Here's the extended context I used

public class SimpleCamelBlueprintContext extends BlueprintCamelContext {
    public SimpleCamelBlueprintContext(BundleContext bundleContext, BlueprintContainer blueprintContainer) {
        super(bundleContext, blueprintContainer);
    }

    public void setRoute(RouteBuilder builder) throws Exception {
        this.addRoutes(builder);
    }

    @Override
    public void init() throws Exception {
        super.init();
        super.start();
    }

    @Override
    public void destroy() throws Exception {
        super.destroy();
    }
}

And here's a sample blueprint snippit

<bean id=""bean-route"" class=""com.pronoia.camel.builder.BeanConsumerBuilder"">
        <property name=""timerName"" value=""$camel{timerName}"" />
        <property name=""timerPeriod"" value=""$camel{timerPeriod}"" />
        <property name=""trace"" value=""$camel{trace}"" />
        <property name=""cacheBean"" value=""$camel{cacheBean}"" />
        <property name=""beanInstance"" ref=""alternate-service"" />
        <!--
        <property name=""beanInstance"" ref=""alternate-service"" />
        <property name=""beanInstance"" ref=""osgi-service"" />
        <property name=""beanInstance"" >
            <bean class=""com.pronoia.osgi.service.MyServiceWrapper"" >
                <property name=""delegate"" ref=""osgi-service"" />
            </bean>
        </property>
        -->
    </bean>

    <bean id=""simple-camel-context"" class=""com.pronoia.camel.context.SimpleCamelBlueprintContext"" init-method=""init"" destroy-method=""destroy"">
        <argument index=""0"" ref=""blueprintBundleContext"" />
        <argument index=""1"" ref=""blueprintContainer"" />
        <property name=""route"" ref=""bean-route"" />
    </bean>

So as near as I can tell, something in the camel blueprint namespace extension is causing the issue.
ranx:1465896820:2016-06-14T17:33:40.755+0000:1465896820:2016-06-14T17:33:40.755+0000:I don't have access to computer or code right now but ran into these
problems earlier and reported them.  When I looked at the code there is a
spot in the camel code that was making a choice about how to handle the
bean.

When I get back to a computer next week I'll take another look.  But I was
getting the same set of problems.  The bean was not getting proxied and
uninstalling the bundle didn't result in the service going away. when I
strayed to actually log the instance what I saw was the concrete type of
the bean and not a proxy.

The only solution I found was to stop using the camel DSL altogether.  That
actually worked out well.  I now use one connector class in my bundles and
inject camel routes into it and then inject that connector into other
beans.  it is
sort of an inversion of control.  The beans now invoke routes through the
connector. The connector in turn invokes other beans. It makes tearing a
snap.

It also means everything is set up in blueprint and I haven't experienced
the problem since.


hqstevenson:1465900597:2016-06-14T18:36:37.240+0000:1465900597:2016-06-14T18:36:37.240+0000:Digging through the logs, I see on difference in the initialization phases - I see the following entry for the service proxy that doesn't work

2016-06-14 12:24:55,543 | DEBUG | Karaf local console user karaf | org.apache.aries.blueprint.container.BlueprintContainerImpl | 13 - org.apache.aries.blueprint.core - 1.6.1 | Recipe service-one is already instantiated and cannot be updated

When the proxy is working correctly, I don't see this entry.


ranx:1466411340:2016-06-20T16:29:00.163+0000:1466411340:2016-06-20T16:29:00.163+0000:Quinn,

Just got back in the country and to a computer so wanted to look at this again.  I did a search to look for an issue I'd reported previously.  I don't know if this bears on the same issue you are seeing here.  

https://issues.apache.org/jira/browse/CAMEL-9562

Perhaps if it is then 9562 should be raised to the level of a bug with a proposed fix or closed and incorporated into this one since you have captured a lot of information. Since you've delved into this a lot deeper do you think these are related issues?

In any case, if a route builder or camel context are in the context of Blueprint I don't think they should fall back to using the global classloader if it can't find a class.  The problem is that means if I've misconfigured my bundle(s) somehow the code can still work but it breaks the classloader mechanics.  However, just globally changing it at this time might break things that are ""accidentally"" working because they are using the global classloader.

But I'd certainly like to be able to specify a strict mode for blueprint so that if the OSGi proxy mechanism and classloader can't find the class I'm specifying it shouldn't just fall back on using a global classloader reach around.

hqstevenson:1471325767:2016-08-16T13:36:07.436+0000:1471325767:2016-08-16T13:36:07.436+0000:Sorry Brad - I guess I missed you're last comments - I just saw them when I was checking on this.

I don't know if the two issues should be merged.  I haven't tried to reproduce the other issue because it hasn't hit me :-)

I'd leave it to the powers that be to decide if the two issues should be merged.

It doesn't look like much is happening with this one - I went as far as I could short of re-writing the blueprint extender, so I'm not sure if anything will happen with this - I don't think I can fix it, at least not alone.
githubbot:1479112913:2016-11-14T16:41:53.051+0000:1479112913:2016-11-14T16:41:53.051+0000:GitHub user hqstevenson opened a pull request:

    https://github.com/apache/camel/pull/1269

    CAMEL-9570:  Blueprint service proxies aren't used

    This PR has two main pieces.  First, the CamelDependenciesFinder was removed from the CamelNamespaceHandler.  This code caused the issue described in CAMEL-9570 as well as CAMEL-10394.  The net effect of removing this class is the CamelContext may attempt to start when a service isn't available because the reference hasn't been specified in the XML.  This is better than what happens today which is service references sometimes get registered for services that don't exist - therefore, starting Blueprint Context times-out waiting for service references.  This one actually bit me 18-mo ago with a customer - I'm just didn't know at the time what was causing it.
    
    The second piece of the PR is changing the BlueprintCamelContext so it starts after the BlueprintContainer is created (on the BlueprintEvent.CREATED).  This fixes some startup issues.  Basically what was happening is if the serviceChanged method (which previously was used to start the camel context) threw a RuntimeException, the Karaf container would spin until a stack overflow occurred.  I didn't see this behavior when the context is started after the BlueprintContainer is fully initialized.
    
    The only thing I changed in the CamelContextFactoryBean was removing a space that caused a Checkstyle error.
    


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/hqstevenson/camel CAMEL-9570

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1269.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1269
    
----
commit 0376e45defaaa70e4795dcc8ef54905025568a79
Author: Quinn Stevenson <quinn@pronoia-solutions.com>
Date:   2016-11-14T16:09:10Z

    CAMEL-9570: Remove CamelDependenciesFinder from CamelNamespaceHandler

commit 57d92619ac62655eafe9434e2149616f025c21df
Author: Quinn Stevenson <quinn@pronoia-solutions.com>
Date:   2016-11-14T16:29:49Z

    CAMEL-9570: Start BlueprintCamelContext on BlueprintEvent.CREATED

commit c4a7e820be90c5101cef2b04aa5d057e6820b57e
Author: Quinn Stevenson <quinn@pronoia-solutions.com>
Date:   2016-11-14T16:30:16Z

    Fix checkstyle issue

----

hqstevenson:1479116994:2016-11-14T17:49:54.220+0000:1479116994:2016-11-14T17:49:54.220+0000:I've had a few discussions on the mailing list about this one, and I thought I should add the relevant information here.

The root of this problem is the CamelDependenciesFinder - it is forcing the BlueprintContainer to create objects before it should.  This puts the BlueprintContainer in a strange state, where service references and such are not handled correctly.

The PR removes the CamelDependenciesFinder, and the expected net effect is described in the PR comment above.  IMO this is more intuitive behavior than what occurs now.  It turns out that the CamelDependenciesFinder bit me in the past - with a custom DataFormat.  It caused the CamelContext to timeout when starting because of a service dependent, but the DataFormat was defined in the same bundle as the rest of the code, so there wasn't a service reference required - this one was tough to work around.
githubbot:1479820742:2016-11-22T21:19:02.711+0000:1479820742:2016-11-22T21:19:02.711+0000:Github user hqstevenson closed the pull request at:

    https://github.com/apache/camel/pull/1269

githubbot:1479888751:2016-11-23T16:12:31.214+0000:1479888751:2016-11-23T16:12:31.214+0000:GitHub user hqstevenson opened a pull request:

    https://github.com/apache/camel/pull/1302

    CAMEL-9570: Change CamelNamespaceHandler so that is doesn't force Blu…

    …eprint Container to create objects too early

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/hqstevenson/camel CAMEL-9570-2

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1302.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1302
    
----
commit 4999501287bdbfa0f212959ddb3e03f36d81c925
Author: Quinn Stevenson <quinn@pronoia-solutions.com>
Date:   2016-11-23T16:11:40Z

    CAMEL-9570: Change CamelNamespaceHandler so that is doesn't force Blueprint Container to create objects too early

----

githubbot:1513129476:2017-12-13T09:44:36.182+0000:1513129476:2017-12-13T09:44:36.182+0000:davsclaus commented on issue #1302: CAMEL-9570: Change CamelNamespaceHandler so that is doesn't force Blu…
URL: https://github.com/apache/camel/pull/1302#issuecomment-351337934
 
 
   Closing old PRs

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1513129476:2017-12-13T09:44:36.698+0000:1513129476:2017-12-13T09:44:36.698+0000:davsclaus closed pull request #1302: CAMEL-9570: Change CamelNamespaceHandler so that is doesn't force Blu…
URL: https://github.com/apache/camel/pull/1302
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-blueprint/src/main/java/org/apache/camel/blueprint/CamelContextFactoryBean.java b/components/camel-blueprint/src/main/java/org/apache/camel/blueprint/CamelContextFactoryBean.java
index 6802312e0b7..d9ec97d264e 100644
--- a/components/camel-blueprint/src/main/java/org/apache/camel/blueprint/CamelContextFactoryBean.java
+++ b/components/camel-blueprint/src/main/java/org/apache/camel/blueprint/CamelContextFactoryBean.java
@@ -272,7 +272,7 @@ protected void initPropertyPlaceholder() throws Exception {
             if (pc.getLocations() == null) {
                 String[] ids = parser.lookupPropertyPlaceholderIds();
                 for (int i = 0; i < ids.length; i++) {
-                    if (!ids[i].startsWith( ""blueprint:"")) {
+                    if (!ids[i].startsWith(""blueprint:"")) {
                         ids[i] = ""blueprint:"" + ids[i];
                     }
                 }
diff --git a/components/camel-blueprint/src/main/java/org/apache/camel/blueprint/handler/CamelNamespaceHandler.java b/components/camel-blueprint/src/main/java/org/apache/camel/blueprint/handler/CamelNamespaceHandler.java
index e95f5e14527..5313831def6 100644
--- a/components/camel-blueprint/src/main/java/org/apache/camel/blueprint/handler/CamelNamespaceHandler.java
+++ b/components/camel-blueprint/src/main/java/org/apache/camel/blueprint/handler/CamelNamespaceHandler.java
@@ -48,6 +48,7 @@
 import org.apache.aries.blueprint.mutable.MutablePassThroughMetadata;
 import org.apache.aries.blueprint.mutable.MutableRefMetadata;
 import org.apache.aries.blueprint.mutable.MutableReferenceMetadata;
+
 import org.apache.camel.BeanInject;
 import org.apache.camel.CamelContext;
 import org.apache.camel.Endpoint;
@@ -99,13 +100,17 @@
 import org.apache.camel.util.jsse.KeyStoreParameters;
 import org.apache.camel.util.jsse.SSLContextParameters;
 import org.apache.camel.util.jsse.SecureRandomParameters;
+
 import org.osgi.framework.Bundle;
+import org.osgi.framework.BundleContext;
+
 import org.osgi.service.blueprint.container.BlueprintContainer;
 import org.osgi.service.blueprint.container.ComponentDefinitionException;
 import org.osgi.service.blueprint.reflect.BeanMetadata;
 import org.osgi.service.blueprint.reflect.ComponentMetadata;
 import org.osgi.service.blueprint.reflect.Metadata;
 import org.osgi.service.blueprint.reflect.RefMetadata;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -176,7 +181,7 @@ public URL getSchemaLocation(String namespace) {
         return getClass().getClassLoader().getResource(""camel-blueprint.xsd"");
     }
 
-    @SuppressWarnings({""rawtypes""})
+    @SuppressWarnings({""unchecked"", ""rawtypes""})
     public Set<Class> getManagedClasses() {
         return new HashSet<Class>(Arrays.asList(BlueprintCamelContext.class));
     }
@@ -300,7 +305,7 @@ private Metadata parseCamelContextNode(Element element, ParserContext context) {
 
         MutablePassThroughMetadata regProcessorFactory = context.createMetadata(MutablePassThroughMetadata.class);
         regProcessorFactory.setId("".camelBlueprint.processor.registry.passThrough."" + contextId);
-        regProcessorFactory.setObject(new PassThroughCallable<Object>(new CamelDependenciesFinder(contextId, context)));
+        regProcessorFactory.setObject(new PassThroughCallable<Object>(new CamelDependenciesFinder(ccfb, context)));
 
         MutableBeanMetadata regProcessor = context.createMetadata(MutableBeanMetadata.class);
         regProcessor.setId("".camelBlueprint.processor.registry."" + contextId);
@@ -310,6 +315,7 @@ private Metadata parseCamelContextNode(Element element, ParserContext context) {
         regProcessor.setProcessor(true);
         regProcessor.addDependsOn("".camelBlueprint.processor.bean."" + contextId);
         regProcessor.addProperty(""blueprintContainer"", createRef(context, ""blueprintContainer""));
+        regProcessor.addProperty(""blueprintBundleContext"", createRef(context, ""blueprintBundleContext""));
         context.getComponentDefinitionRegistry().registerComponentDefinition(regProcessor);
 
         // lets inject the namespaces into any namespace aware POJOs
@@ -967,12 +973,13 @@ protected boolean isSingleton(Object bean, String beanName) {
 
     public static class CamelDependenciesFinder implements ComponentDefinitionRegistryProcessor {
 
-        private final String camelContextName;
+        private final CamelContextFactoryBean camelContextFactoryBean;
         private final ParserContext context;
         private BlueprintContainer blueprintContainer;
+        private BundleContext blueprintBundleContext;
 
-        public CamelDependenciesFinder(String camelContextName, ParserContext context) {
-            this.camelContextName = camelContextName;
+        public CamelDependenciesFinder(CamelContextFactoryBean camelContextFactoryBean, ParserContext context) {
+            this.camelContextFactoryBean = camelContextFactoryBean;
             this.context = context;
         }
 
@@ -980,9 +987,15 @@ public void setBlueprintContainer(BlueprintContainer blueprintContainer) {
             this.blueprintContainer = blueprintContainer;
         }
 
+        public void setBlueprintBundleContext(BundleContext blueprintBundleContext) {
+            this.blueprintBundleContext = blueprintBundleContext;
+        }
+
+        @SuppressWarnings(""deprecation"")
         public void process(ComponentDefinitionRegistry componentDefinitionRegistry) {
-            CamelContextFactoryBean ccfb = (CamelContextFactoryBean) blueprintContainer.getComponentInstance("".camelBlueprint.factory."" + camelContextName);
-            CamelContext camelContext = ccfb.getContext();
+            camelContextFactoryBean.setBlueprintContainer(blueprintContainer);
+            camelContextFactoryBean.setBundleContext(blueprintBundleContext);
+            CamelContext camelContext = camelContextFactoryBean.getContext();
 
             Set<String> components = new HashSet<String>();
             Set<String> languages = new HashSet<String>();
@@ -1010,20 +1023,20 @@ public void process(ComponentDefinitionRegistry componentDefinitionRegistry) {
                 }
             }
 
-            if (ccfb.getRestConfiguration() != null) {
+            if (camelContextFactoryBean.getRestConfiguration() != null) {
                 // rest configuration may refer to a component to use
-                String component = ccfb.getRestConfiguration().getComponent();
+                String component = camelContextFactoryBean.getRestConfiguration().getComponent();
                 if (component != null) {
                     components.add(component);
                 }
-                component = ccfb.getRestConfiguration().getApiComponent();
+                component = camelContextFactoryBean.getRestConfiguration().getApiComponent();
                 if (component != null) {
                     components.add(component);
                 }
 
                 // check what data formats are used in binding mode
-                RestBindingMode mode = ccfb.getRestConfiguration().getBindingMode();
-                String json = ccfb.getRestConfiguration().getJsonDataFormat();
+                RestBindingMode mode = camelContextFactoryBean.getRestConfiguration().getBindingMode();
+                String json = camelContextFactoryBean.getRestConfiguration().getJsonDataFormat();
                 if (json == null && mode != null) {
                     if (RestBindingMode.json.equals(mode) || RestBindingMode.json_xml.equals(mode)) {
                         // jackson is the default json data format
@@ -1033,7 +1046,7 @@ public void process(ComponentDefinitionRegistry componentDefinitionRegistry) {
                 if (json != null) {
                     dataformats.add(json);
                 }
-                String xml = ccfb.getRestConfiguration().getXmlDataFormat();
+                String xml = camelContextFactoryBean.getRestConfiguration().getXmlDataFormat();
                 if (xml == null && mode != null) {
                     if (RestBindingMode.xml.equals(mode) || RestBindingMode.json_xml.equals(mode)) {
                         // jaxb is the default xml data format
@@ -1189,5 +1202,4 @@ private void findSchedulerUriComponent(String uri, Set<String> components) {
         }
 
     }
-
 }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1513129477:2017-12-13T09:44:37.177+0000:1513129477:2017-12-13T09:44:37.177+0000:Github user davsclaus closed the pull request at:

    https://github.com/apache/camel/pull/1302
"
0,CAMEL-9569,Bug,Major,"2.15.5, 2.16.2","2.15.6, 2.16.3, 2.17.0","
None
",Resolved,Fixed,"2.15.6, 2.16.3, 2.17.0",Claus Ibsen,Claus Ibsen,0,1,2016-02-05 16:20:16+00:00,2016-02-05 16:56:28+00:00,"See nabble
http://camel.465427.n5.nabble.com/Leak-of-Memory-using-JdbcMessageIdRepository-tp5777242.html",
0,CAMEL-9568,Improvement,Major,2.16.2,"2.16.2, 2.17.0","
None
",Resolved,Fixed,"2.16.2, 2.17.0",Andrea Cosentino,Ruslan,0,2,2016-02-05 13:38:58+00:00,2016-02-17 12:26:24+00:00,"There are several issues with parsing response from the server side:



The target server failed to respond
org.apache.http.NoHttpResponseException: The target server failed to respond
        at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:95)
        at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:62)
        at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:254)
        at org.apache.http.impl.AbstractHttpClientConnection.receiveResponseHeader(AbstractHttpClientConnection.java:289)
        at org.apache.http.impl.conn.DefaultClientConnection.receiveResponseHeader(DefaultClientConnection.java:252)
        at org.apache.http.impl.conn.ManagedClientConnectionImpl.receiveResponseHeader(ManagedClientConnectionImpl.java:191)
        at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:300)
        at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:127)
        at org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:517)
        at org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:906)




This bug is fixed in HTTPCLIENT-1610


So, it would be very useful if upgrade latest camel to use httpclient 4.4 or latest to avoid such bugs.","acosentino:1455680458:2016-02-17T11:40:58.735+0000:1455680458:2016-02-17T11:40:58.735+0000:In camel-http4, we already use httpclient version 4.5.1. The version is the same for camel 2.16.2 and camel 2.17.
acosentino:1455680484:2016-02-17T11:41:24.304+0000:1455680484:2016-02-17T11:41:24.304+0000:Anyway I'll do some checks.
acosentino:1455683174:2016-02-17T12:26:14.350+0000:1455683174:2016-02-17T12:26:14.350+0000:We have already update camel-http4 to use httpclient 4.5.1"
0,CAMEL-9567,Bug,Major,2.16.2,"2.15.6, 2.16.3, 2.17.0","

camel-sjms

",Resolved,Fixed,"2.15.6, 2.16.3, 2.17.0",Claus Ibsen,Zdeněk Obst,0,3,2016-02-05 07:21:32+00:00,2016-02-16 08:14:12+00:00,"When using SjmsConsumer that consumes JMS messages from broker (e.g. ActiveMQ) and stop Camel Context, the consumer still reads new messages from broker even if it should only finish processing of already fetched messages. It causes that Context is never stopped if there are still new and new messages in the broker (or before timeout for stop operation occurs).


When I investigated code, it seems that suspend operation is not implemented (or code does not check isSuspended flag). What I would expect is that consumer unregisters JMS listener on context stop (consumer suspend).


Here is the sample code I used for testing:



public class Test {

    public static void main(String[] args) throws Exception {
       // pre-fill JMS Broker with many many messages, e.g. 10.000

        RouteBuilder rb = new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(""sjms:queue:test?consumerCount=5"")
                        .process(new Processor() {
                            @Override
                            public void process(Exchange exchange) throws Exception {
                                Thread.sleep(1000); // not to consume all messages instantly
                                System.out.println(""Processed message "" + exchange.getExchangeId());
                            }
                        });
            }
        };

        CamelContext context = new DefaultCamelContext();
        context.getShutdownStrategy().setTimeout(1000); // 1000s = big enough timeout so I can be sure it is consumer problem
        addJmsComponent(context);
        context.addRoutes(rb);

        System.out.println(""=====> Starting context"");
        context.start();
        Thread.sleep(5 * 1000); // Consume few messages at the beginning

        System.out.println(""=====> Stopping context"");
        context.stop();
        System.out.println(""=====> Context stopped""); // Will not get here as long as there are any messages left in the queue
    }

    private static void addJmsComponent(CamelContext context) {
        ConnectionFactory factory = new ActiveMQConnectionFactory(""tcp://localhost:61616""); // ActiveMQ is easiest for testing this
        ConnectionFactoryResource connResource = new ConnectionFactoryResource(5, factory);
        SjmsComponent comp = new SjmsComponent();
        comp.setConnectionResource(connResource);
        context.addComponent(""sjms"", comp);
    }
}




The original mailing list thread:
http://camel.465427.n5.nabble.com/CamelContext-stop-with-SJMS-consumer-does-not-stop-consuming-messages-from-broker-td5777207.html","onurakdemir:1454650332:2016-02-05T13:32:12.863+0000:1454650332:2016-02-05T13:32:12.863+0000:I started to work on this issue. 
davsclaus:1454650753:2016-02-05T13:39:13.002+0000:1454650753:2016-02-05T13:39:13.002+0000:The doSuspend could call the stop logic, but it would be better if we can find a way like camel-jms, to stop the jms listener only, and keep the other bits running.
d1x:1454897032:2016-02-08T10:03:52.369+0000:1454897032:2016-02-08T10:03:52.369+0000:Do you have any rough estimation when this bug may be resolved?
onurakdemir:1454901940:2016-02-08T11:25:40.635+0000:1454901940:2016-02-08T11:25:40.635+0000:Sorry but it is hard to estimate because I try to get familiar with the
source code. What I know that I will start to work on the issue on Thursday.





d1x:1454903292:2016-02-08T11:48:12.232+0000:1454903292:2016-02-08T11:48:12.232+0000:Ok, the information when you will start work on it is also useful - thank you :-)
davsclaus:1454917712:2016-02-08T15:48:32.587+0000:1454917712:2016-02-08T15:48:32.587+0000:We can a short-term fix for 2.16.x make doSuspend/doResume call the same logic as in doStart/doStop. 

I took a look at the source code and it wasn't easy to make the JmsListener suspend while keep other stuff running. That make take more work to figure our or maybe the component need some refactoring.

And also CAMEL-9577 improves a general issue that we only call the suspend methods if the component has custom suspend code. Otherwise we would stop instead. As it turns out there is only about 20 or so components that has custom suspend logic.
d1x:1454919336:2016-02-08T16:15:36.063+0000:1454919336:2016-02-08T16:15:36.063+0000:Ok thank you very much for the info provided. I will have an eye on 9577 too.
davsclaus:1454925215:2016-02-08T17:53:35.777+0000:1454925215:2016-02-08T17:53:35.777+0000:I made a fix for 2.16 and 2.15
https://github.com/apache/camel/commit/88dd249fe0aae965d7c9736e0911082f62efed16

From 2.17 onwards its fixed by that other CAMEL-9577 ticket.

d1x:1454931352:2016-02-08T19:35:52.256+0000:1454931352:2016-02-08T19:35:52.256+0000:Oh nice that was quick, thank you. I suppose it is now available only in SNAPSHOT version.
Do you have idea when you will release regular version?
davsclaus:1454977306:2016-02-09T08:21:46.728+0000:1454977306:2016-02-09T08:21:46.728+0000:We just released 2.16.2, so would take a month or so for the next. But maybe 2.15.x is released sooner.

You can always build a local JAR with the patch and use that until there is a release."
0,CAMEL-9566,Bug,Major,2.16.1,"2.16.3, 2.17.0","
None
",Resolved,Fixed,"2.16.3, 2.17.0",Claus Ibsen,Mohit,1,3,2016-02-04 06:59:23+00:00,2016-03-18 13:56:33+00:00,"Create a web socket consumer route 
Ensure that the web socket provider is available
Create connection to the web socket provider from the consumer
Send a message from the provider (send to all)
Message gets consumed in the consumer route
Bring down the producer
Bring up the producer 
Create connection to the web socket provider from the consumer
Send a message from the provider (send to all)
Message is not printed as reconnect was not done","davsclaus:1455926647:2016-02-20T08:04:07.142+0000:1455926647:2016-02-20T08:04:07.142+0000:Can you build a sample project that can reproduce this?
davsclaus:1455926911:2016-02-20T08:08:31.332+0000:1455926911:2016-02-20T08:08:31.332+0000:Are you sure its camel-ahc-ws and not camel-websocket ?
Rizon:1458125750:2016-03-16T18:55:50.224+0000:1458125819:2016-03-16T18:56:59.774+0000:I'm having the same issue.

Take a look at the WsListener class.  The onClose() and onError() methods only log the issue and never raise the exception to the camel route.  https://github.com/apache/camel/blob/master/components/camel-ahc-ws/src/main/java/org/apache/camel/component/ahc/ws/WsEndpoint.java

davsclaus:1458171673:2016-03-17T07:41:13.203+0000:1458171673:2016-03-17T07:41:13.203+0000:I pushed some code changes to master branch. Feel free to build and give that a test.
Rizon:1458193550:2016-03-17T13:45:50.135+0000:1458193550:2016-03-17T13:45:50.135+0000:Thank you Claus.  In order to test I did have to clone the 2.16.x branch and migrate your changes to 2.16.3-SNAPSHOT since all my other dependencies required 2.16.  However, this did not resolve the issue.  There simply is no detection of the lost socket connection.  When I shutdown the websocket server (i.e another camel endpoint using the camel-websocket component) I don't think the onClose() method is ever invoked.

Perhaps we could add a condition in the WsProducer for sendMessage() to check the connection state and throw an Exception if the connection is closed.

Question:  Is there a way to enable debugging for a single bundle in Karaf? 
davsclaus:1458193725:2016-03-17T13:48:45.826+0000:1458193725:2016-03-17T13:48:45.826+0000:Ah okay, what exception does the producer throw? Maybe we can detect a ConnectionException or somerhing and then use that to force a re-connection?

In karaf you can set log levels from the karaf shell

something like:
log:level set org.apache.camel.xxx INFO

There should be some --help on the log command
Rizon:1458193969:2016-03-17T13:52:49.168+0000:1458193969:2016-03-17T13:52:49.168+0000:As of right now there is no exception thrown by the WsProducer when the connection is closed.  Right now I'm testing adding a condition in the process() method of WsProducer to check getWebsocket().isOpen and throw ConnectionException.  However, I'm unsure how to trigger the reconnect...

Thanks for the debug info.
Rizon:1458194534:2016-03-17T14:02:14.565+0000:1458194534:2016-03-17T14:02:14.565+0000:Ah I figured how to trigger reconnect...

this.getEndpoint().reConnect();

Testing it now.
Rizon:1458195260:2016-03-17T14:14:20.840+0000:1458195260:2016-03-17T14:14:20.840+0000:Actually my test was invalid.  For some reason when I copied the camel-ahc-ws component into the deploy folder it didn't install.  Although the log said it did.  When I do a feature:list it still shows 2.16 instead of 2.16.3-SNAPSHOT.  I tried uninstalling the 2.16 version but that didn't work.  What's the preferred way to install a particular dependency?
Rizon:1458203313:2016-03-17T16:28:33.591+0000:1458203313:2016-03-17T16:28:33.591+0000:Claus - I was able to successfully test your changes and they worked perfectly without any of my modifications.  The changes you've committed to 2.17, could they be released under rev 2.16.3 of Camel? 

If not, do you have a suggested method of using a different component version?  Currently I'm deploying to Karaf 3 using Camel 2.16.  Thank you!
davsclaus:1458205421:2016-03-17T17:03:41.392+0000:1458205421:2016-03-17T17:03:41.392+0000:Thanks for testing. I backported to 2.16.x
Rizon:1458276752:2016-03-18T12:52:32.756+0000:1458276752:2016-03-18T12:52:32.756+0000:Claus - The change didn't got into last night's 2.16.3-SNAPSHOT build.  I see that the maven metadata xml files where updated but not the JAR.  Is there a process that I should know about for changes to the repo to go into the build?
https://repository.apache.org/content/groups/snapshots/org/apache/camel/camel-ahc/2.16.3-SNAPSHOT/

Thanks again
davsclaus:1458280593:2016-03-18T13:56:33.865+0000:1458280593:2016-03-18T13:56:33.865+0000:Build from source manually as those mvn servers are not reliable building"
0,CAMEL-9565,Improvement,Minor,2.16.1,,"
None
",Resolved,Information Provided,None,Unassigned,souciance eqdam rashti,0,2,2016-02-03 08:05:29+00:00,2022-09-02 09:15:57+00:00,"Today, in Camel when you use the camel-rabbitmq component to send a message to a topic, and expect a response, the component will automatically create a a random amq queue and set that as a replyto and as the routing key to listen for the response. 


Ideally, it would be nice if it would be possible to manually set the routing key and the queue for the response part. This could be the case for environments where the routing keys and queues are created via a script or by an admin.


I have tried with skipQueueDeclare but that did not help. 


Thanks.",davsclaus:1662081357:2022-09-02T09:15:57.315+0000:1662081357:2022-09-02T09:15:57.315+0000:use the spring-rabbitmq component
0,CAMEL-9564,Improvement,Minor,2.16.1,"2.16.3, 2.17.0","
None
",Resolved,Fixed,"2.16.3, 2.17.0",Claus Ibsen,Jay mann,0,1,2016-02-02 21:27:58+00:00,2017-03-21 21:33:03+00:00,"EndpointHelper.resolveReferenceListParameter can sometimes return immutable lists, which can cause issues when other components try to add items to those lists.


The fact that other endpoints (like jetty-common JettyHttpComponent [enableCors line 279]) can add other components into the lists can cause hard to track down failures.


Sorry don't have a patch file, but the lines i would fix in EndpointHelper.java would be:


line 350: return Collections.emptyList();


line 360: return Arrays.asList(elements.size())


These should just return ArrayLists.


I know these parameters should optionally be Lists already, and this is a slight performance hit when starting up, but i think it's better than trying to figure out what went wrong when it fails.


My particular scenario was a Jetty endpoint with a filtersRef (with a single Filter - not a list) and then enableCORS=true.  The filtersRef returned Arrays.asLIst and then enableCORS tried to add an element into that list and crashed.",
0,CAMEL-9563,Task,Major,"2.15.2, 2.14.4",None,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Sebb,0,1,2016-02-02 20:47:00+00:00,2016-02-17 22:24:03+00:00,"To reduce the load on the ASF mirrors, projects are required to delete old releases [1]


Please can you remove all non-current releases?


i.e. 2.14.4, 2.15.2


Thanks!


[1] http://www.apache.org/dev/release.html#when-to-archive","davsclaus:1455581864:2016-02-16T08:17:44.269+0000:1455581864:2016-02-16T08:17:44.269+0000:Thanks I have removed the old 2.1.4.4 and 2.15.2. 
sebb:1455590653:2016-02-16T10:44:13.404+0000:1455590653:2016-02-16T10:44:13.404+0000:OK, thanks.

If you have some release manager documentation, please can you add a reminder to tidy up the old releases?
This is best done just after the new release is announced and the download pages have been updated.

Thanks
davsclaus:1455595845:2016-02-16T12:10:45.653+0000:1455595845:2016-02-16T12:10:45.653+0000:Yes we have that as step 6
http://camel.apache.org/release-guide.html
sebb:1455719043:2016-02-17T22:24:03.919+0000:1455719043:2016-02-17T22:24:03.919+0000:That's good.
However it's not advisable to delete the old versions until you have announced the new version, so it should be after step 14."
0,CAMEL-9562,Improvement,Minor,2.16.2,,"
None
",Resolved,Abandoned,None,Unassigned,Brad Johnson,4,3,2016-02-02 16:48:15+00:00,2019-07-31 09:22:12+00:00,"At least: OSGiClassResolver and OSGiPackageScanner but probably others.  A strict mode flag should be added to enforce using the OSGi classloader.  By default it could be false to be backwardly compatible but when it set to true then the secondary attempt at using the application context classloader would be circumvented.  This should really be the default behavior in an OSGi environment but because of backward compatibility issues that might not be possible. 


This fix should be relatively easy and unnoticeable by most.  But for those working OSGi environments we usually want the strict mode in order to be in compliance with OSGi.  Without it the current design reflects a classloader leak that shouldn't be allowed.  If a class can't be found then it isn't being exported correctly or a bundle is hiding a class it shouldn't or Camel blueprint isn't being set up correctly or....  But in all cases it should fail.


The OSGi classloader mechanics includes a fall back mechanism that uses the global classloader to find classes if it can't find them in OSGi registry it cheats with SU.
OSGiClassResolver:
 if (clazz == null && camelContext != null) {
            // fallback and load class using the application context classloader
            clazz = super.loadClass(name, camelContext.getApplicationContextClassLoader());
            if (LOG.isTraceEnabled()) {
                LOG.trace(""Loading class {} using CamelContext {} -> {}"", new Object[]

{name, camelContext, clazz}

);
            }
        }


OSGiPackageScanClassResolver.
 // if we did not find any new, then fallback to use regular non bundle class loading
        if (classes.size() == classesSize) {
            // Using the non-OSGi classloaders as a fallback
            // this is necessary when use JBI packaging for servicemix-camel SU
            // so that we get chance to use SU classloader to scan packages in the SU
            log.trace(""Cannot find any classes in bundles, not trying regular classloaders scanning: {}"", packageName);
            for (ClassLoader classLoader : super.getClassLoaders()) {
                if (!isOsgiClassloader(classLoader)) 

{
                    find(test, packageName, classLoader, classes);
                }

            }  
        }","davsclaus:1454977366:2016-02-09T08:22:46.809+0000:1454977366:2016-02-09T08:22:46.809+0000:Have anyone tried to test this by removing that part of the code, and see that your apps still runs in OSGi?

ranx:1455010933:2016-02-09T17:42:13.269+0000:1455010997:2016-02-09T17:43:17.713+0000:I doubt that it could be removed at this point.  I found the issue as I was moving between blueprint and the package scanner for route builders and found that when I ran it it was not proxying the private implementation of a service from another bundle.  The actual class was being used.  That means there are likely folks out there who have functioning code in place that functions due to a classloader leak.  The only reason I noticed it was some flakiness I was seeing when I would swap bundles.  I'd get exceptions due to the missing implementation.  After running a restart on the bundle it worked.

So a Boolean strictMode setting that could be set in the configuration file for future projects would likely be required so that already deployed code would not break.  By default the strictMode would be set to false and checked as follows.  The default would be Boolean.FALSE so all mechanics would work as they currently do.  For new projects that could be set to TRUE and breaks could be dealt with.

OSGiPackageScanClassResolver.
// if we did not find any new, then fallback to use regular non bundle class loading
if(strictMode.equals(Boolean.TRUE) throw new ClassNotFoundInOSGiRegistryException(clazz);
if (classes.size() == classesSize) {
// Using the non-OSGi classloaders as a fallback
// this is necessary when use JBI packaging for servicemix-camel SU
// so that we get chance to use SU classloader to scan packages in the SU
log.trace(""Cannot find any classes in bundles, not trying regular classloaders scanning: {}"", packageName);
for (ClassLoader classLoader : super.getClassLoaders()) {
if (!isOsgiClassloader(classLoader))
{ find(test, packageName, classLoader, classes); }

} 

ranx:1455014171:2016-02-09T18:36:11.218+0000:1455014171:2016-02-09T18:36:11.218+0000:I'd like to add that I probably had something misconfigured in one of the bundles.  But I'd want that to fail hard."
0,CAMEL-9561,Improvement,Major,2.16.2,Future,"
None
",Resolved,Information Provided,Future,Unassigned,Arnaud CHOTARD,1,4,2016-02-02 15:29:17+00:00,2022-09-02 09:15:28+00:00,"The use case uses a RabbitMQ InOut Producer with a dynamic RabbitMQ exchange name header :



from(""direct:route"")
   .setHeader(RabbitMQConstants.EXCHANGE_NAME, constant(""exchange""))
   .inOut(""rabbitmq:///?connectionFactory=..."")




The exchange name is only set on header, not in RabbitMQ endpoint URI.


This generates a RabbitMQ Exception :



com.rabbitmq.client.ShutdownSignalException: channel error; protocol method: #method<channel.close>(reply-code=403, reply-text=ACCESS_REFUSED - operation not permitted on the default exchange, class-id=50, method-id=20)




The problem is located when doing queueBinding on reply to queue in org.apache.camel.component.rabbitmq.reply.TemporaryQueueReplyManager



protected Connection createListenerContainer() throws Exception





channel.queueBind(getReplyTo(), endpoint.getExchangeName(), getReplyTo());




The header exchange name should be used instead of the endpoint exchange name.","davsclaus:1454455574:2016-02-03T07:26:14.814+0000:1454455574:2016-02-03T07:26:14.814+0000:Thanks you are welcome to work on a patch / PR
http://camel.apache.org/contributing
davsclaus:1455927527:2016-02-20T08:18:47.972+0000:1455927527:2016-02-20T08:18:47.972+0000:This is not supported as the reply manager is tied to the producer and cannot by dynamic in that way.
davsclaus:1455927661:2016-02-20T08:21:01.629+0000:1455927661:2016-02-20T08:21:01.629+0000:You can use dynamic-to and set the exchangeName in the uri
http://camel.apache.org/how-to-use-a-dynamic-uri-in-to.html
davsclaus:1455928654:2016-02-20T08:37:34.715+0000:1455928654:2016-02-20T08:37:34.715+0000:To support this we would possible need to create a reply manager per dynamic exchange name, which potentially could lead to a lot if using many different exchange names.

Also there should maybe be a way to tell if the reply manager should be discarded afterwards if the exchange name was only to be used once. But if there is a lot more in the future using same exchange name then you may want to reuse the same reply manager.

This adds another dimension on top of the existing reply manager support.
davsclaus:1662081328:2022-09-02T09:15:28.612+0000:1662081328:2022-09-02T09:15:28.612+0000:use spring-rabbitmq component"
0,CAMEL-9560,Bug,Major,2.16.2,"2.16.3, 2.17.0","
None
",Resolved,Fixed,"2.16.3, 2.17.0",Claus Ibsen,Arnaud CHOTARD,0,3,2016-02-02 15:04:00+00:00,2016-02-04 18:43:56+00:00,"The use case uses a correlationId with RabbitMQ InOut Producer :



from(""direct:route"")
   .setHeader(RabbitMQConstants.EXCHANGE_NAME, constant(""exchange""))
   .setHeader(RabbitMQConstants.CORRELATIONID, constant(""123""))
   .inOut(""rabbitmq://..."")




The response always contains a null out body message.


The problem is located when restoring the original correlation id in org.apache.camel.component.rabbitmq.reply.ReplyManagerSupport : 



public void processReply(ReplyHolder holder)





// restore correlation id in case the remote server messed with it
if (holder.getOriginalCorrelationId() != null) {
   if (exchange.getOut() != null) {
      exchange.getOut().setHeader(RabbitMQConstants.CORRELATIONID, 
         holder.getOriginalCorrelationId());
   } else {
      exchange.getIn().setHeader(RabbitMQConstants.CORRELATIONID, 
         holder.getOriginalCorrelationId());
   }
}




The test exchange.getOut() is always successful because of the lazy creation in DefaultExchange.getOut



public Message getOut() {
   // lazy create
   if (out == null) {
      out = (in != null && in instanceof MessageSupport)
      ? ((MessageSupport)in).newInstance() : new DefaultMessage();
      configureMessage(out);
   }
   return out;
}




The in body message contains the correct response from RabbitMQ. However, since the out message will be always created with a null body, the null body response will be returned in the pipeline","arnaudchotard:1454404093:2016-02-02T17:08:13.707+0000:1454404093:2016-02-02T17:08:13.707+0000:Maybe replacing exchange.getOut() by exchange.hasOut() should resolve the bug 
davsclaus:1454455510:2016-02-03T07:25:10.537+0000:1454455510:2016-02-03T07:25:10.537+0000:Yes it should be hasOut().

You are welcome to provide a patch or PR
http://camel.apache.org/contributing
davsclaus:1454582636:2016-02-04T18:43:56.280+0000:1454582636:2016-02-04T18:43:56.280+0000:Thanks Arnaud for the patch. Keep testing rabbitmq and work on patches for it."
0,CAMEL-9559,Improvement,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Claus Ibsen,0,1,2016-02-02 09:23:18+00:00,2016-02-02 09:27:23+00:00,"See SO
http://stackoverflow.com/questions/35136796/how-do-i-configure-sslcontextparameters-for-camel-undertow-to-use-with-the-rest",
0,CAMEL-9558,Bug,Major,2.16.2,"2.16.3, 2.17.0","
None
",Resolved,Fixed,"2.16.3, 2.17.0",Claus Ibsen,Andreas Siepert,0,2,2016-02-02 09:00:25+00:00,2016-02-05 15:57:08+00:00,"The assumption is that handled exceptions will not be propagated any further.
In version 2.15.5 the test code (from the camel-jetty page) runs fine - but since 2.16.0 the handled exception is propagated to the DefaultErrorHandler which causes ERROR logs for every handled exception.


I could not find a hint in the release notes - so I think it's a bug.



public class MyTest extends CamelTestSupport {

    @Test
    public void test() throws Exception {
        // using httpclient 4.3.5
        CloseableHttpClient httpclient = HttpClients.createDefault();
        HttpGet httRequest = new HttpGet(""http://127.0.0.1:7890/myserver"");
        HttpResponse response = httpclient.execute(httRequest);
        assertThat(response.getStatusLine().getStatusCode(), is(500));
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {

            @Override
            public void configure() throws Exception {
                from(""jetty://http://localhost:7890/myserver"").tracing()
                        // use onException to catch all exceptions and return a custom reply message
                        .onException(Exception.class).handled(true)
                        // create a custom failure response
                        .transform(constant(""Dude something went wrong""))
                        // we must remember to set error code 500 as handled(true)
                        // otherwise would let Camel thing its a OK response (200)
                        .setHeader(Exchange.HTTP_RESPONSE_CODE, constant(500)).end()
                        // now just force an exception immediately
                        .throwException(new IllegalArgumentException(""I cannot do this""));
            }
        };
    }
}




References from the user-list
http://camel.465427.n5.nabble.com/onException-block-in-camel-2-16-1-td5777019.html#a5777064


http://camel.465427.n5.nabble.com/jetty-handled-true-not-working-as-before-td5776774.html",davsclaus:1454659028:2016-02-05T15:57:08.641+0000:1454659028:2016-02-05T15:57:08.641+0000:Thanks for reporting.
0,CAMEL-9557,Bug,Major,2.16.2,"2.16.3, 2.17.0","
None
",Resolved,Fixed,"2.16.3, 2.17.0",Claus Ibsen,Justin W,0,2,2016-02-02 06:07:25+00:00,2016-02-03 07:32:12+00:00,"I've configured a polling Facebook consumer with nearly default Spring configuration as follows:



<camel:from uri=""facebook://getFeed?
    reading.since=2016-01-01T00:00:00Z&amp;
    userId=myUserId&amp;
    consumer.delay=60000&amp;
    oAuthAppId=[s]&amp;
    oAuthAppSecret=[s]&amp;
    oAuthAccessToken=[s]
    ""/>




However, an IllegalArgument is thrown with any reading.* parameter regardless of endpoint:



java.lang.IllegalArgumentException: No matching operation for getFeed, with arguments [readingOptions, reading, userId]




On debugging, the method FacebookEndpoint.configureProperties sets two properties on the configuration object: (readingOptions, reading).



FacebookPropertiesHelper.configureReadingProperties(configuration, options);




readingOptions is a Map which is finally size 0 after all the relevant properties are extracted into the reading parameter. However, it isn't nullified.


In the subsequent method initState(), it tries to look for a method in FacebookMethodTypes with the signature:



getFeed(String userId, Reading reading)




Because readingOptions is non null, it looks for a readingOptions parameter as well which doesn't exist, throwing the Exception.


Is there a workaround I can use for the moment? Thanks!","jusw85:1454365723:2016-02-02T06:28:43.546+0000:1454369087:2016-02-02T07:24:47.032+0000:The commit for CAMEL-9472 adds the following line in FacebookPropertiesHelper.configureReadingProperties which causes the error I believe:

{code}
configuration.setReadingOptions(readingProperties);
{code}

[GitHub|https://github.com/apache/camel/commit/846b097c2b881eac68328800bdd6a9d3017921c7]

I've reverted to 2.16.1 until this is fixed.

Thanks for your time!

davsclaus:1454455932:2016-02-03T07:32:12.368+0000:1454455932:2016-02-03T07:32:12.368+0000:Thanks for reporting."
0,CAMEL-9556,Task,Major,2.17.0,2.17.0,"
None
",Resolved,Fixed,2.17.0,Unassigned,Claus Ibsen,0,1,2016-02-01 20:26:59+00:00,2016-02-01 20:55:49+00:00,"This is now default out of the box. But we should keep the old method name, so old code can still compile and run.


eg ad enableHangupSupport() and mark it as @deprecated.",
0,CAMEL-9524,Improvement,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Claus Ibsen,0,2,2016-01-19 17:59:07+00:00,2016-01-22 12:25:40+00:00,"See nabble
http://camel.465427.n5.nabble.com/Error-Reading-Files-from-four-different-Routes-tp5776391.html


We should turn off file probe by default as it brings little value, and can cause problems on various file systems.


Also its likely some bottleneck with various probes that may try to read the file content to see if its xml or json files or whatnot. And we do not want that overhead of routing files by default.","davsclaus:1453197573:2016-01-19T17:59:33.786+0000:1453197573:2016-01-19T17:59:33.786+0000:See CAMEL-8357
preben:1453436740:2016-01-22T12:25:40.908+0000:1453436740:2016-01-22T12:25:40.908+0000:There was a bug in jdk, which has been fixed with the latest release 
See https://bugs.openjdk.java.net/browse/JDK-8080115
"
0,CAMEL-9523,Improvement,Minor,2.15.2,2.17.0,"
None
",Resolved,Fixed,2.17.0,Andrea Cosentino,Matteo Perini,0,1,2016-01-19 17:45:10+00:00,2016-03-09 14:36:32+00:00,Add the feature to stop the scan of hbase table at fixed key,
0,CAMEL-9522,Bug,Major,2.16.1,,"
None
",Closed,Invalid,None,Unassigned,Jay mann,0,2,2016-01-19 17:36:03+00:00,2016-01-19 17:49:36+00:00,"Trying to run a groovy scirpt in camel-spring-boot fails with NPE.  To reacreate modify the examples-spring-boot route to this:


public void configure() 

{
        from(""timer://trigger"").setProperty(""groovyProp"").groovy(""return 'hi'"")
                .transform().simple(""ref:myBean"").
                to(""log:out"", ""mock:test"");
    }


and add dependency to pom:


 <dependency>
          <groupId>org.apache.camel</groupId>
          <artifactId>camel-script</artifactId>
        </dependency>


Startup fails with NPE.


StackTrace:



org.apache.camel.spring.boot.CamelSpringBootInitializationException: org.apache.camel.FailedToCreateRouteException: Failed to create route route1 at: >>> SetProperty[groovyProp, groovy
Unknown macro: {return 'hi'} ] <<< in route: Route(route1)[[From[timer://trigger]] -> [SetProperty[groovy... because of null
	at org.apache.camel.spring.boot.RoutesCollector.onApplicationEvent(RoutesCollector.java:87)
	at org.apache.camel.spring.boot.RoutesCollector.onApplicationEvent(RoutesCollector.java:37)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:151)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:128)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:331)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:775)
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:139)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:483)
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:117)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:689)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:321)
	at org.apache.camel.spring.boot.FatJarRouter.main(FatJarRouter.java:26)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.springframework.boot.maven.RunMojo$LaunchRunner.run(RunMojo.java:423)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route route1 at: >>> SetProperty[groovyProp, groovy
] <<< in route: Route(route1)[[From[timer://trigger]] -> [SetProperty[groovy... because of null
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:1072)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:196)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:947)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:3258)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:2981)
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:175)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2812)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2808)
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:2831)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:2808)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:2777)
	at org.apache.camel.spring.boot.RoutesCollector.onApplicationEvent(RoutesCollector.java:85)
	... 17 common frames omitted
Caused by: java.lang.NullPointerException: null
	at org.apache.camel.model.language.ExpressionDefinition.createExpression(ExpressionDefinition.java:197)
	at org.apache.camel.model.language.ExpressionDefinition.createExpression(ExpressionDefinition.java:177)
	at org.apache.camel.model.SetPropertyDefinition.createProcessor(SetPropertyDefinition.java:74)
	at org.apache.camel.model.ProcessorDefinition.makeProcessorImpl(ProcessorDefinition.java:534)
	at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:495)
	at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:219)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:1069)
	... 29 common frames omitted
2016-01-19 12:32:24.338  INFO 41772 — [arRouter.main()] ationConfigEmbeddedWebApplicationContext : Closing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@2e629aa7: startup date [Tue Jan 19 12:32:20 EST 2016]; root of context hierarchy
2016-01-19 12:32:24.339  INFO 41772 — [arRouter.main()] o.s.c.support.DefaultLifecycleProcessor  : Stopping beans in phase 0
2016-01-19 12:32:24.341  INFO 41772 — [arRouter.main()] o.s.j.e.a.AnnotationMBeanExporter        : Unregistering JMX-exposed beans on shutdown
[WARNING] 
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.springframework.boot.maven.RunMojo$LaunchRunner.run(RunMojo.java:423)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.apache.camel.spring.boot.CamelSpringBootInitializationException: org.apache.camel.FailedToCreateRouteException: Failed to create route route1 at: >>> SetProperty[groovyProp, groovy
Unknown macro: {return 'hi'} ] <<< in route: Route(route1)[[From[timer://trigger]] -> [SetProperty[groovy... because of null
	at org.apache.camel.spring.boot.RoutesCollector.onApplicationEvent(RoutesCollector.java:87)
	at org.apache.camel.spring.boot.RoutesCollector.onApplicationEvent(RoutesCollector.java:37)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:151)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:128)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:331)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:775)
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:139)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:483)
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:117)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:689)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:321)
	at org.apache.camel.spring.boot.FatJarRouter.main(FatJarRouter.java:26)
	... 6 more
Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route route1 at: >>> SetProperty[groovyProp, groovy
] <<< in route: Route(route1)[[From[timer://trigger]] -> [SetProperty[groovy... because of null
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:1072)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:196)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:947)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:3258)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:2981)
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:175)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2812)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2808)
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:2831)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:2808)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:2777)
	at org.apache.camel.spring.boot.RoutesCollector.onApplicationEvent(RoutesCollector.java:85)
	... 17 more
Caused by: java.lang.NullPointerException
	at org.apache.camel.model.language.ExpressionDefinition.createExpression(ExpressionDefinition.java:197)
	at org.apache.camel.model.language.ExpressionDefinition.createExpression(ExpressionDefinition.java:177)
	at org.apache.camel.model.SetPropertyDefinition.createProcessor(SetPropertyDefinition.java:74)
	at org.apache.camel.model.ProcessorDefinition.makeProcessorImpl(ProcessorDefinition.java:534)
	at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:495)
	at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:219)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:1069)
	... 29 more","davsclaus:1453196575:2016-01-19T17:42:55.657+0000:1453196575:2016-01-19T17:42:55.657+0000:You need to add camel-groovy as dependency
jmandawg:1453196767:2016-01-19T17:46:07.714+0000:1453196767:2016-01-19T17:46:07.714+0000:Thank you, sorry for creating the issue.  I should have done more research, I didn't see it under ""Dependencies"" section in the groovy page.
davsclaus:1453196976:2016-01-19T17:49:36.651+0000:1453196976:2016-01-19T17:49:36.651+0000:No problem I am improving the code so you dont get a NPE but a better exception"
0,CAMEL-9521,Improvement,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,5,2016-01-19 09:38:04+00:00,2016-04-14 07:12:36+00:00,"We should move the osgi/spring-dm part out of camel-spring, so it can be a standalone module that do not import the old spring-dm stuff.


Then we can have a camel-spring-dm module as a legacy way of using spring xml on osgi.


This makes it possible to install and use camel-spring without bringing in the old spring-dm and spring 3.x libraries on osgi.","davsclaus:1460523920:2016-04-13T13:05:20.431+0000:1460523920:2016-04-13T13:05:20.431+0000:Took a look and it may be a bit of OSGi pain/nightmare with a camel-spring and camel-spring-dm at the same time.
davsclaus:1460527379:2016-04-13T14:02:59.833+0000:1460527379:2016-04-13T14:02:59.833+0000:I created a branch for this with a new camel-spring-dm module
https://github.com/apache/camel/tree/9521
davsclaus:1460589156:2016-04-14T07:12:36.814+0000:1460589156:2016-04-14T07:12:36.814+0000:Merged to master branch"
0,CAMEL-9520,Task,Minor,2.17.0,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Rachel Evans,0,2,2016-01-18 17:23:22+00:00,2016-01-19 10:46:31+00:00,"I would like to be able to define my own PollingConsumerPollStrategy for a DdbStream.


I can add ?pollStrategy=#myStrategy to the URI of the endpoint, and that does indeed define it correctly on the endpoint (as shown by endpoint.getPollStrategy()).


However the poll strategy is not copied across to the consumer (consumer.getPollStrategy() shows the DefaultPollingConsumerPollStrategy, not my custom one).",davsclaus:1453171469:2016-01-19T10:44:29.707+0000:1453171469:2016-01-19T10:44:29.707+0000:Yeah you need to call configureConsumer. I am fixing this.
0,CAMEL-9519,Bug,Minor,"2.15.0, 2.15.1, 2.15.2, 2.15.3, 2.16.0, 2.15.4, 2.16.1, 2.15.5, 2.17.0","2.16.2, 2.17.0","

easyfix

",Resolved,Fixed,"2.16.2, 2.17.0",Grzegorz Grzybek,Quinn Stevenson,0,3,2016-01-15 19:07:28+00:00,2016-01-19 16:30:47+00:00,"The POM in a new project created using the camel-archetype-blueprint archetype has a configuration for the maven-bundle-plugin that causes CamelBlueprintTestSupport-based test to fail under some conditions.


When Blueprint property placeholders are used and the blueprint.xml file is in src/main/resources/OSGI-INF/blueprint, the test will randomly fail.  Also, the camel context is created a large number of times, when it should only be created twice (the initial creation and then again when the blueprint is reloaded because of the properties change).","hqstevenson:1452856133:2016-01-15T19:08:53.802+0000:1452856133:2016-01-15T19:08:53.802+0000:I'm working on a PR for this now.  I'll update the POM as well as include a unit test in the generated project that uses Blueprint property placeholders so that the fix can be verified.
githubbot:1453111092:2016-01-18T17:58:12.938+0000:1453111092:2016-01-18T17:58:12.938+0000:GitHub user hqstevenson opened a pull request:

    https://github.com/apache/camel/pull/781

    CAMEL-9519:  Fixed generated POM and added more generated tests

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/hqstevenson/camel CAMEL-9519

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/781.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #781
    
----
commit 445ecf49c1f6489fd86eac1db0d82140d6f87a71
Author: Quinn Stevenson <quinn@pronoia-solutions.com>
Date:   2016-01-18T17:56:25Z

    Updated generated POM and added generated tests

----

davsclaus:1453162397:2016-01-19T08:13:17.796+0000:1453162397:2016-01-19T08:13:17.796+0000:Thanks for the PR
githubbot:1453192247:2016-01-19T16:30:47.141+0000:1453192247:2016-01-19T16:30:47.141+0000:Github user hqstevenson closed the pull request at:

    https://github.com/apache/camel/pull/781
"
0,CAMEL-9518,Improvement,Minor,2.16.1,None,"
None
",Resolved,Fixed,"2.16.2, 2.17.0",Claus Ibsen,Thomas Diesler,0,3,2016-01-15 11:40:13+00:00,2016-01-15 12:30:52+00:00,"10:06:13,591 INFO  [org.apache.camel.impl.DefaultCamelContext] (pool-1-thread-1) Apache Camel 2.16.1.redhat-630008 (CamelContext: swagger-test) started in 0.399 seconds
10:06:14,413 INFO  [stdout] (pool-1-thread-1) org.apache.camel:context=swagger-test,type=context,name=""swagger-test"": <?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
10:06:14,413 INFO  [stdout] (pool-1-thread-1) <rests xmlns=""http://camel.apache.org/schema/spring"">
10:06:14,414 INFO  [stdout] (pool-1-thread-1)     <rest path=""/hello"">
10:06:14,414 INFO  [stdout] (pool-1-thread-1)         <get uri=""/{name}"" consumes=""application/json"" produces=""application/json"" outType=""org.wildfly.camel.test.swagger.subA.User"" routeId=""route1"">
10:06:14,414 INFO  [stdout] (pool-1-thread-1)             <description>A user object</description>
10:06:14,414 INFO  [stdout] (pool-1-thread-1)             <param name=""name"" type=""path""/>
10:06:14,414 INFO  [stdout] (pool-1-thread-1)             <to uri=""direct:hello"" customId=""true"" id=""route1""/>
10:06:14,414 INFO  [stdout] (pool-1-thread-1)         </get>
10:06:14,414 INFO  [stdout] (pool-1-thread-1)     </rest>
10:06:14,414 INFO  [stdout] (pool-1-thread-1) </rests>
10:06:14,415 INFO  [stdout] (pool-1-thread-1) 
10:06:14,416 INFO  [stdout] (pool-1-thread-1) jboss.jsr77:j2eeType=JVM,name=default,J2EEServer=default: null
10:06:14,417 INFO  [stdout] (pool-1-thread-1) jboss.jsr77:j2eeType=J2EEServer,name=default: null
10:06:14,417 INFO  [stdout] (pool-1-thread-1) jboss.jsr77:j2eeType=J2EEDomain,name=jboss.jsr77: null
10:06:14,447 WARN  [org.apache.camel.swagger.servlet.RestSwaggerServlet] (http-/127.0.0.1:8080-1) Error rendering Swagger API due JBAS019903: No attribute called CamelVersion: javax.management.AttributeNotFoundException: JBAS019903: No attribute called CamelVersion
	at org.jboss.as.jsr77.managedobject.BaseHandler.getAttribute(BaseHandler.java:59)
	at org.jboss.as.jsr77.managedobject.JVMHandler.getAttribute(JVMHandler.java:80)
	at org.jboss.as.jsr77.managedobject.ManagedObjectHandlerRegistry.getAttribute(ManagedObjectHandlerRegistry.java:91)
	at org.jboss.as.jsr77.subsystem.JSR77ManagementMBeanServer.getAttribute(JSR77ManagementMBeanServer.java:141)
	at org.jboss.as.jmx.PluggableMBeanServerImpl.getAttribute(PluggableMBeanServerImpl.java:392)
	at org.apache.camel.swagger.RestSwaggerSupport.findCamelContexts(RestSwaggerSupport.java:162) [camel-swagger-java-2.16.1.redhat-630008.jar:2.16.1.redhat-630008]
	at org.apache.camel.swagger.servlet.RestSwaggerServlet.doGet(RestSwaggerServlet.java:140) [camel-swagger-java-2.16.1.redhat-630008.jar:2.16.1.redhat-630008]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:734) [jboss-servlet-api_3.0_spec-1.0.2.Final-redhat-2.jar:1.0.2.Final-redhat-2]","githubbot:1452829309:2016-01-15T11:41:49.855+0000:1452829309:2016-01-15T11:41:49.855+0000:GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/775

    [CAMEL-9518] Swagger may see non-camel MBeans

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-9518

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/775.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #775
    
----
commit a01734db4d510f6b69a2ed7e1de2ace59296f359
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2016-01-15T11:40:46Z

    [CAMEL-9518] Swagger may see non-camel MBeans

----

davsclaus:1452831728:2016-01-15T12:22:08.863+0000:1452831728:2016-01-15T12:22:08.863+0000:This is a JBoss only issue.
githubbot:1452831855:2016-01-15T12:24:15.897+0000:1452831855:2016-01-15T12:24:15.897+0000:Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/775

tdiesler:1452832224:2016-01-15T12:30:24.373+0000:1452832252:2016-01-15T12:30:52.225+0000:Not quite, the spec {code}new ObjectName(""*:type=context,*""){code} would find any MBean that happens to have that attribute/value combination. I wasn't sure whether being specific on the domain would be correct i.e.  {code}new ObjectName(""org.apache.camel:type=context,*""){code}"
0,CAMEL-9517,Improvement,Major,2.17.0,2.17.0,"
None
",Closed,Resolved,2.17.0,Franz Forsthofer,Franz Forsthofer,0,3,2016-01-14 15:57:38+00:00,2016-01-15 07:43:51+00:00,"Currently the ValidatorProcessor caches an object representation of the schema and there is no possibility to invalidate the cache. This improvement introduces the method clearCachedSchema on the Validator Endpoint with which the cached schema is cleared so that on the next call the schema is reread. The method is annotated with @ManagedOperation so that it can be called from the JMX console.


The method can be used to update the schema in the endpoint when the underlying schema file has changed. For example, you can implement a custom class resolver which reads the schema file from a data base; whenever the schema file is changed in the data base, then you can update the cached schema with the above method without restarting the camel route.


A similar method exists for the XSLT component. See method XsltEndpoint.clearCachedStylesheet.","forsthofer:1452758551:2016-01-14T16:02:31.541+0000:1452758551:2016-01-14T16:02:31.541+0000:Hi Claus,

can you please have a look at this improvement. I saw that you made some changes in release 2.15 and 2.16. What do you think about it? I am committer and can do the final submit and I will update the wiki-page.

Best Regards Franz
davsclaus:1452761445:2016-01-14T16:50:45.539+0000:1452761445:2016-01-14T16:50:45.539+0000:Hi Franz, yeah this looks great. 

I think its a good addition to introduce in the next 2.17 release.

+1
forsthofer:1452815031:2016-01-15T07:43:51.111+0000:1452815031:2016-01-15T07:43:51.111+0000:Wiki updated"
0,CAMEL-9516,New Feature,Minor,None,Future,"
None
",Resolved,Abandoned,Future,Unassigned,Rachel Evans,0,2,2016-01-14 11:30:09+00:00,2022-09-02 09:13:46+00:00,"Use case: I want to read and keep up-to-date with the contents of a table.


Approach: start reading the stream (using DdbStreamConsumer), then once the consumer has definitely started reading the stream, i.e. is guaranteed not to miss any future updates, then I scan the table.


In order to achieve this I need to know when the consumer has started reading the stream.  Specifically, when the first successful call to GetRecords has occurred.


Possible approach: on the endpoint URI, define a ddbStreamStartupListener bean parameter.


Given I have a DdbStreamEndpoint with a ddbStreamStartupListener
When the first call to GetRecords success
Then the bean should be called synchronously (before the consumer proceeds with processing any records that GetRecords returned).


Of course it is up to the user providing that bean what it does – for example, whether it does something blocking and therefore potentially long, or whether it triggers something async.","rvedotrc:1452742575:2016-01-14T11:36:15.692+0000:1452742575:2016-01-14T11:36:15.692+0000:Looking at this, it seems that defining a PollingConsumerPollStrategy (where ""commit"" is the callback we need) may be sufficient.  This approach satisfies everything on this ticket except for the requirement that the callback happens before any Exchanges.

davsclaus:1473923409:2016-09-15T15:10:09.471+0000:1473923409:2016-09-15T15:10:09.471+0000:Contributions is welcome for anyone working with AWS and Camel"
0,CAMEL-9515,Improvement,Minor,2.17.0,None,"
None
",Resolved,Fixed,2.17.0,Andrew Wheat,Andrew Wheat,0,3,2016-01-14 10:59:13+00:00,2016-01-21 09:14:58+00:00,"Given a running poll that has processed some records from the stream
When the AWS DDB Stream is unavailable for greater than the shard iterator expiry time (currently 15 mins) and less than the trim horizon (currently 24 hours)
And then becomes available again
Then the consumer gets stuck trying to request data for a shard that has expired


Expected Behaviour:


Then the consumer should be able to resume from where it left off","candle:1453180368:2016-01-19T13:12:48.804+0000:1453180368:2016-01-19T13:12:48.804+0000:Currently I'm working on this.
davsclaus:1453338898:2016-01-21T09:14:58.347+0000:1453338898:2016-01-21T09:14:58.347+0000:Thanks for the PR"
0,CAMEL-9514,Task,Major,"2.16.1, 2.15.5",None,"
None
",Resolved,Fixed,"2.15.6, 2.16.2, 2.17.0",Willem Jiang,Willem Jiang,0,2,2016-01-14 02:25:05+00:00,2016-01-18 06:40:34+00:00,We need to move the maximumPoolSize option to the camel-netty4 component as wile.,"cmoulliard:1452740398:2016-01-14T10:59:58.563+0000:1452740398:2016-01-14T10:59:58.563+0000:And maybe the other params as well
njiang:1453070425:2016-01-18T06:40:25.055+0000:1453070425:2016-01-18T06:40:25.055+0000:Committed the patch into master, camel-2.16.x and camel-2.15.x branches."
0,CAMEL-9513,Task,Minor,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Andrea Cosentino,Willem Jiang,0,1,2016-01-14 02:14:45+00:00,2016-03-09 13:28:57+00:00,No Desc,
0,CAMEL-9512,Bug,Major,2.14.1,,"
None
",Resolved,Invalid,None,Claus Ibsen,omar attari,0,3,2016-01-13 15:44:22+00:00,2016-01-14 14:39:24+00:00,"Dears,
we are using the sftp camel route service but for unknown reasons ths sftp camel service was stop polling any file from sftp server then we need to restart the service again to polling the files again.


This condition occurs daily we need your assistent to solve it.


public class SftpRoutesBuilder
  extends RouteBuilder
{
  private static final Logger LOGGER = LoggerFactory.getLogger(SftpRoutesBuilder.class);
  private String protocol;
  private String username;
  private String password;
  private String requestUri;
  private String inProcessUri;
  private boolean passiveMode;
  private boolean binary;
  private String routeId;
  private String fileOwnerBicCode;
  private String filePurpose;
  private String privateKey;
  private String privateKeyPassphrase;


  public void configure()
    throws Exception
  {
    LOGGER.info(""configuring the ftp routes builder"");


    errorHandler(loggingErrorHandler(LOGGER).level(LoggingLevel.INFO));
    if ((this.privateKey != null) && (this.password != null) && (this.privateKeyPassphrase == null)) {
      ((RouteDefinition)((RouteDefinition)((RouteDefinition)((ProcessorDefinition)((ProcessorDefinition)((ProcessorDefinition)from(MessageFormat.format(""

{0}://{1}@{2}?password={3}&passiveMode={4}&binary={5}&privateKey={6}"", new Object[] { this.protocol, this.username, this.requestUri, this.password, Boolean.valueOf(this.passiveMode), Boolean.valueOf(this.binary), this.privateKey }) + ""&delay=60000&delete=true&"" + ""maximumReconnectAttempts="" + PropertiesLoader.getInstance().getPropertyValue(""ftp.maximum.reconnect.attempts"") + ""&reconnectDelay="" + PropertiesLoader.getInstance().getPropertyValue(""ftp.reconnect.delay"") + ""&disconnect="" + PropertiesLoader.getInstance().getPropertyValue(""disconnect.route"")).setProperty(""fileName"").simple(""CamelFileName"")).setProperty(""fileOwnerBicCode"").simple(this.fileOwnerBicCode)).setProperty(""filePurpose"").simple(this.filePurpose)).to(MessageFormat.format(""{0}

://

{1}@{2}?password={3}&passiveMode={4}&binary={5}&privateKey={6}"", new Object[] { this.protocol, this.username, this.inProcessUri, this.password, Boolean.valueOf(this.passiveMode), Boolean.valueOf(this.binary), this.privateKey }) + ""&maximumReconnectAttempts="" + PropertiesLoader.getInstance().getPropertyValue(""ftp.maximum.reconnect.attempts"") + ""&reconnectDelay="" + PropertiesLoader.getInstance().getPropertyValue(""ftp.reconnect.delay"") + ""&disconnect="" + PropertiesLoader.getInstance().getPropertyValue(""disconnect.route""))).convertBodyTo(byte[].class)).process(new FtpFilesProcessor())).routeId(this.routeId);


    } else if ((this.privateKey != null) && (this.password == null) && (this.privateKeyPassphrase == null)) {


      ((RouteDefinition)((RouteDefinition)((RouteDefinition)((ProcessorDefinition)((ProcessorDefinition)((ProcessorDefinition)from(MessageFormat.format(""{0}://{1}

@

{2}?passiveMode={3}&binary={4}&privateKey={5}"", new Object[] { this.protocol, this.username, this.requestUri, Boolean.valueOf(this.passiveMode), Boolean.valueOf(this.binary), this.privateKey }) + ""&delay=60000&delete=true&"" + ""maximumReconnectAttempts="" + PropertiesLoader.getInstance().getPropertyValue(""ftp.maximum.reconnect.attempts"") + ""&reconnectDelay="" + PropertiesLoader.getInstance().getPropertyValue(""ftp.reconnect.delay"") + ""&disconnect="" + PropertiesLoader.getInstance().getPropertyValue(""disconnect.route"")).setProperty(""fileName"").simple(""CamelFileName"")).setProperty(""fileOwnerBicCode"").simple(this.fileOwnerBicCode)).setProperty(""filePurpose"").simple(this.filePurpose)).to(MessageFormat.format(""{0}://{1}@{2}

?passiveMode=

{3}&binary={4}&privateKey={5}"", new Object[] { this.protocol, this.username, this.inProcessUri, Boolean.valueOf(this.passiveMode), Boolean.valueOf(this.binary), this.privateKey }) + ""&maximumReconnectAttempts="" + PropertiesLoader.getInstance().getPropertyValue(""ftp.maximum.reconnect.attempts"") + ""&reconnectDelay="" + PropertiesLoader.getInstance().getPropertyValue(""ftp.reconnect.delay"") + ""&disconnect="" + PropertiesLoader.getInstance().getPropertyValue(""disconnect.route""))).convertBodyTo(byte[].class)).process(new FtpFilesProcessor())).routeId(this.routeId);


    } else if ((this.privateKey == null) && (this.password != null) && (this.privateKeyPassphrase == null)) {


      ((RouteDefinition)((RouteDefinition)((RouteDefinition)((ProcessorDefinition)((ProcessorDefinition)((ProcessorDefinition)from(MessageFormat.format(""{0}://{1}@{2}?password={3}

&passiveMode=

{4}&binary={5}"", new Object[] { this.protocol, this.username, this.password, this.requestUri, Boolean.valueOf(this.passiveMode), Boolean.valueOf(this.binary) }) + ""&delay=60000&delete=true&"" + ""maximumReconnectAttempts="" + PropertiesLoader.getInstance().getPropertyValue(""ftp.maximum.reconnect.attempts"") + ""&reconnectDelay="" + PropertiesLoader.getInstance().getPropertyValue(""ftp.reconnect.delay"") + ""&disconnect="" + PropertiesLoader.getInstance().getPropertyValue(""disconnect.route"")).setProperty(""fileName"").simple(""CamelFileName"")).setProperty(""fileOwnerBicCode"").simple(this.fileOwnerBicCode)).setProperty(""filePurpose"").simple(this.filePurpose)).to(MessageFormat.format(""{0}://{1}@{2}?password={3}&passiveMode={4}

&binary=

{5}"", new Object[] { this.protocol, this.username, this.password, this.inProcessUri, Boolean.valueOf(this.passiveMode), Boolean.valueOf(this.binary) }) + ""&maximumReconnectAttempts="" + PropertiesLoader.getInstance().getPropertyValue(""ftp.maximum.reconnect.attempts"") + ""&reconnectDelay="" + PropertiesLoader.getInstance().getPropertyValue(""ftp.reconnect.delay"") + ""&disconnect="" + PropertiesLoader.getInstance().getPropertyValue(""disconnect.route""))).convertBodyTo(byte[].class)).process(new FtpFilesProcessor())).routeId(this.routeId);


    } else if ((this.privateKey != null) && (this.password == null) && (this.privateKeyPassphrase != null)) {


      ((RouteDefinition)((RouteDefinition)((RouteDefinition)((ProcessorDefinition)((ProcessorDefinition)((ProcessorDefinition)from(MessageFormat.format(""{0}://{1}@{2}?passiveMode={3}&binary={4}&privateKey={5}

&privateKeyPassphrase=

{6}"", new Object[] { this.protocol, this.username, this.requestUri, Boolean.valueOf(this.passiveMode), Boolean.valueOf(this.binary), this.privateKey, this.privateKeyPassphrase }) + ""&delay=60000&delete=true&"" + ""maximumReconnectAttempts="" + PropertiesLoader.getInstance().getPropertyValue(""ftp.maximum.reconnect.attempts"") + ""&reconnectDelay="" + PropertiesLoader.getInstance().getPropertyValue(""ftp.reconnect.delay"") + ""&disconnect="" + PropertiesLoader.getInstance().getPropertyValue(""disconnect.route"")).setProperty(""fileName"").simple(""CamelFileName"")).setProperty(""fileOwnerBicCode"").simple(this.fileOwnerBicCode)).setProperty(""filePurpose"").simple(this.filePurpose)).to(MessageFormat.format(""{0}://{1}@{2}?passiveMode={3}&binary={4}&privateKey={5}&privateKeyPassphrase={6}

"", new Object[] 

{ this.protocol, this.username, this.inProcessUri, Boolean.valueOf(this.passiveMode), Boolean.valueOf(this.binary), this.privateKey, this.privateKeyPassphrase }

) + ""&maximumReconnectAttempts="" + PropertiesLoader.getInstance().getPropertyValue(""ftp.maximum.reconnect.attempts"") + ""&reconnectDelay="" + PropertiesLoader.getInstance().getPropertyValue(""ftp.reconnect.delay"") + ""&disconnect="" + PropertiesLoader.getInstance().getPropertyValue(""disconnect.route""))).convertBodyTo(byte[].class)).process(new FtpFilesProcessor())).routeId(this.routeId);
    } else if ((this.privateKey != null) && (this.password != null) && (this.privateKeyPassphrase != null)) {
      ((RouteDefinition)((RouteDefinition)((RouteDefinition)((ProcessorDefinition)((ProcessorDefinition)((ProcessorDefinition)from(MessageFormat.format(""

{0}://{1}@{2}?password={3}&passiveMode={4}&binary={5}&privateKey={6}&privateKeyPassphrase={7}"", new Object[] { this.protocol, this.username, this.requestUri, this.password, Boolean.valueOf(this.passiveMode), Boolean.valueOf(this.binary), this.privateKey, this.privateKeyPassphrase }) + ""&delay=60000&delete=true&"" + ""maximumReconnectAttempts="" + PropertiesLoader.getInstance().getPropertyValue(""ftp.maximum.reconnect.attempts"") + ""&reconnectDelay="" + PropertiesLoader.getInstance().getPropertyValue(""ftp.reconnect.delay"") + ""&disconnect="" + PropertiesLoader.getInstance().getPropertyValue(""disconnect.route"")).setProperty(""fileName"").simple(""CamelFileName"")).setProperty(""fileOwnerBicCode"").simple(this.fileOwnerBicCode)).setProperty(""filePurpose"").simple(this.filePurpose)).to(MessageFormat.format(""{0}

://

{1}

@

{2}

?password=

{3}

&passiveMode=

{4}

&binary=

{5}

&privateKey=

{6}

&privateKeyPassphrase=

{7}

"", new Object[] 

{ this.protocol, this.username, this.inProcessUri, this.password, Boolean.valueOf(this.passiveMode), Boolean.valueOf(this.binary), this.privateKey, this.privateKeyPassphrase }

) + ""&maximumReconnectAttempts="" + PropertiesLoader.getInstance().getPropertyValue(""ftp.maximum.reconnect.attempts"") + ""&reconnectDelay="" + PropertiesLoader.getInstance().getPropertyValue(""ftp.reconnect.delay"") + ""&disconnect="" + PropertiesLoader.getInstance().getPropertyValue(""disconnect.route""))).convertBodyTo(byte[].class)).process(new FtpFilesProcessor())).routeId(this.routeId);
    }
  }


  public SftpRoutesBuilder(String protocol, String username, String password, String requestUri, String inProcessUri, boolean passiveMode, boolean binary, String routeId, String fileOwnerBicCode, String filePurpose, String privateKey, String passPhrase)

  {
    this.protocol = protocol.toLowerCase();
    this.username = username;
    this.password = password;
    this.requestUri = requestUri;
    this.inProcessUri = inProcessUri;
    this.passiveMode = passiveMode;
    this.binary = binary;
    this.routeId = routeId;
    this.fileOwnerBicCode = fileOwnerBicCode;
    this.filePurpose = filePurpose;
    this.privateKey = privateKey;
    this.privateKeyPassphrase = passPhrase;
  }


  public SftpRoutesBuilder(String transferMethod, String username2, String password2, String requestUri2, String inProccessUri, String routeId, String fileOwnerBicCode, String filePurpose, String privateKey, String passPhrase)

  {
    this.protocol = transferMethod.toLowerCase();
    this.username = username2;
    this.password = password2;
    this.requestUri = requestUri2;
    this.inProcessUri = inProccessUri;
    this.passiveMode = Boolean.TRUE.booleanValue();
    this.binary = Boolean.TRUE.booleanValue();
    this.routeId = routeId;
    this.fileOwnerBicCode = fileOwnerBicCode;
    this.filePurpose = filePurpose;
    this.privateKey = privateKey;
    this.privateKeyPassphrase = passPhrase;
  }


  public SftpRoutesBuilder(String transferMethod, String username2, String password2, String requestUri2, String inProccessUri, String routeId, String fileOwnerBicCode, String filePurpose)

  {
    this.protocol = transferMethod.toLowerCase();
    this.username = username2;
    this.password = password2;
    this.requestUri = requestUri2;
    this.inProcessUri = inProccessUri;
    this.passiveMode = Boolean.TRUE.booleanValue();
    this.binary = Boolean.TRUE.booleanValue();
    this.routeId = routeId;
    this.fileOwnerBicCode = fileOwnerBicCode;
    this.filePurpose = filePurpose;
    this.privateKey = null;
  }

}","oattari:1452671494:2016-01-13T15:51:34.719+0000:1452671494:2016-01-13T15:51:34.719+0000:commConfig.properties file we are useing:

reload.comm.config.period.ms=60000
number.of.service.executors=100
wsdl.file.location=
file.responses.pull.period=60000
ftp.maximum.reconnect.attempts=3
ftp.reconnect.delay=30000
agent.id=agent2500
disconnect.route=true
acosentino:1452739704:2016-01-14T10:48:24.712+0000:1452739704:2016-01-14T10:48:24.712+0000:It's better to post this question on Camel users mailing list
davsclaus:1452753564:2016-01-14T14:39:24.540+0000:1452753564:2016-01-14T14:39:24.540+0000:Yes use the user mailing list to get help first as we say
http://camel.apache.org/support.html

Also try upgrading and testing with newer versions of Camel and what is suggested on that page

And mind Camel 2.14 is EOL."
0,CAMEL-9511,Improvement,Minor,None,"2.16.3, 2.17.0","
None
",Resolved,Fixed,"2.16.3, 2.17.0",Akitoshi Yoshida,Serge Smertin,0,3,2016-01-13 11:07:36+00:00,2016-02-04 09:46:58+00:00,"If we set configuration for Kafka endpoint as reference, the actual resulting configuration for endpoint is not merged and some query param-set properties are lost. It's easier to use shared configuration in cases us having global bean with zookeeper configuration and broker list.



    @UriParam
    private KafkaConfiguration configuration = new KafkaConfiguration();

...

    @Override
    protected KafkaEndpoint createEndpoint(String uri,
                                           String remaining,
                                           Map<String, Object> params) throws Exception {

        KafkaEndpoint endpoint = new KafkaEndpoint(uri, this);
        String brokers = remaining.split(""\\?"")[0];
        if (brokers != null) {
            endpoint.getConfiguration().setBrokers(brokers);
        }
        setProperties(endpoint, params);
        return endpoint;
    }","ay:1454388894:2016-02-02T12:54:54.171+0000:1454388894:2016-02-02T12:54:54.171+0000:I think the basic idea to offer this option would be to add a cloning option operation to KafkaConfiguration so that we can assign a cloned configuration to the endpoint and update that local configuration with the additional params so that they are correctly merged.

If that is what is requested and there is no objection, I can update the code that way.
regards, aki


davsclaus:1454389355:2016-02-02T13:02:35.466+0000:1454389355:2016-02-02T13:02:35.466+0000:Aki, sounds good"
0,CAMEL-9510,Task,Trivial,None,2.16.2,"
None
",Resolved,Fixed,2.16.2,Claus Ibsen,Jan Bouska,0,2,2016-01-13 10:06:32+00:00,2016-01-14 16:54:21+00:00,There is a maxHeadersSize option in documentation but in source code is attribute maxHeaderSize. I think it should be maxHeaderSize in documentation too.,davsclaus:1452761661:2016-01-14T16:54:21.062+0000:1452761661:2016-01-14T16:54:21.062+0000:Thanks for spotting.
0,CAMEL-9509,Bug,Major,2.15.2,"2.15.6, 2.16.2, 2.17.0","
None
",Resolved,Fixed,"2.15.6, 2.16.2, 2.17.0",Claus Ibsen,dharsh.,0,2,2016-01-13 09:12:11+00:00,2016-01-15 11:27:52+00:00,"I see that the Jetty server is getting stopped as soon as it was started. See the log below:


08:59:23.229 [default] [main] DEBUG o.a.c.m.DefaultManagementAgent - Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=tracer,name=BacklogDebugger 
08:59:23.233 [default] [main] DEBUG o.a.c.p.interceptor.DefaultChannel - Initialize channel for target: 'SetHeader[Exception, simple{${exception.message}}]' 
08:59:23.257 [default] [main] DEBUG o.a.c.m.DefaultManagementAgent - Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=errorhandlers,name=""DefaultErrorHandlerBuilder(ref:CamelDefaultErrorHandlerBuilder)"" 
08:59:23.260 [default] [main] DEBUG o.a.c.p.interceptor.DefaultChannel - Initialize channel for target: 'RecipientList[simple{activemq:DLQ.${exchangeProperty.Queue},bean:metoEnvironmentHealthIndicator}]' 
08:59:23.261 [default] [main] DEBUG org.apache.camel.model.LogDefinition - The LogName is null. Falling back to create logger by using the route id cometdRoute. 
08:59:23.261 [default] [main] DEBUG o.a.c.p.interceptor.DefaultChannel - Initialize channel for target: 'Log[Sending message to Cometd]' 
08:59:23.265 [default] [main] DEBUG o.a.camel.spring.SpringCamelContext - Using ComponentResolver: org.apache.camel.impl.DefaultComponentResolver@1e308cc to resolve component with name: cometd 
08:59:23.265 [default] [main] DEBUG o.s.b.f.s.DefaultListableBeanFactory - Returning cached instance of singleton bean 'cometd' 
08:59:23.265 [default] [main] DEBUG o.a.c.impl.DefaultComponentResolver - Found component: cometd in registry: mydomain.service.tada_messaging.DefaultActiveMqConfiguration$1@ff6bd5 
08:59:23.265 [default] [main] DEBUG o.a.c.m.DefaultManagementAgent - Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=components,name=""cometd"" 
08:59:23.266 [default] [main] DEBUG o.apache.camel.impl.DefaultComponent - Creating endpoint uri=[cometd://0.0.0.0:9999/cometdBroadcastChannel], path=[0.0.0.0:9999/cometdBroadcastChannel] 
08:59:23.266 [default] [main] DEBUG o.a.camel.spring.SpringCamelContext - cometd://0.0.0.0:9999/cometdBroadcastChannel converted to endpoint: Endpoint[cometd://0.0.0.0:9999/cometdBroadcastChannel] by component: mydomain.service.tada_messaging.DefaultActiveMqConfiguration$1@ff6bd5 
08:59:23.268 [default] [main] DEBUG o.a.c.p.interceptor.DefaultChannel - Initialize channel for target: 'To[cometd://0.0.0.0:9999/cometdBroadcastChannel]' 
08:59:23.271 [default] [main] DEBUG o.a.c.m.DefaultManagementAgent - Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=services,name=MetricsRoutePolicy(0x1fa486) 
08:59:23.277 [default] [main] DEBUG o.a.c.m.DefaultManagementAgent - Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=services,name=MetricsRegistryService 
08:59:23.277 [default] [main] DEBUG o.s.b.f.s.DefaultListableBeanFactory - Returning cached instance of singleton bean 'metricRegistry' 
08:59:23.294 [default] [main] INFO  o.a.camel.spring.SpringCamelContext - AllowUseOriginalMessage is enabled. If access to the original message is not needed, then its recommended to turn this option off as it may improve performance. 
08:59:23.294 [default] [main] INFO  o.a.camel.spring.SpringCamelContext - StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html 
08:59:23.295 [default] [main] DEBUG o.a.camel.spring.SpringCamelContext - Warming up route id: cometdRoute having autoStartup=true 
08:59:23.295 [default] [main] DEBUG org.apache.camel.impl.RouteService - Starting services on route: cometdRoute 
08:59:23.302 [default] [main] DEBUG o.a.c.component.jms.JmsQueueEndpoint - Using destinationName: MyBroadcastQueue on listenerContainer: org.apache.camel.component.jms.DefaultJmsMessageListenerContainer@1ce9dc5 
08:59:23.306 [default] [main] DEBUG o.a.c.m.DefaultManagementAgent - Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=threadpools,name=""JmsConsumer(0xdd070a)"" 
08:59:23.306 [default] [main] DEBUG o.a.c.i.DefaultExecutorServiceManager - Created new CachedThreadPool for source: Consumer[activemq://MyBroadcastQueue] with name: JmsConsumer[MyBroadcastQueue]. -> java.util.concurrent.ThreadPoolExecutor@f92404[Running, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0] 
08:59:23.307 [default] [main] DEBUG org.apache.camel.impl.RouteService - Starting child service on route: cometdRoute -> Pipeline[[Channel[Log(cometdRoute)[Sending message to Cometd]], Channel[sendTo(Endpoint[cometd://0.0.0.0:9999/cometdBroadcastChannel])]]] 
08:59:23.307 [default] [main] DEBUG o.a.c.processor.DefaultErrorHandler - Redelivery enabled: false on error handler: DefaultErrorHandler[EvalExpression[Simple: activemq:DLQ.${exchangeProperty.Queue},bean:metoEnvironmentHealthIndicator]] 
08:59:23.307 [default] [main] DEBUG o.a.camel.processor.RecipientList - RecipientList RecipientList[Simple: activemq:DLQ.${exchangeProperty.Queue},bean:metoEnvironmentHealthIndicator] using ProducerCache with default cache size 
08:59:23.307 [default] [main] DEBUG o.a.c.processor.DefaultErrorHandler - Redelivery enabled: false on error handler: DefaultErrorHandler[Instrumentation:log[Log(cometdRoute)[Sending message to Cometd]]] 
08:59:23.311 [default] [main] DEBUG o.a.c.m.DefaultManagementAgent - Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=producers,name=CometdProducer(0x1908a5c) 
08:59:23.321 [default] [main] DEBUG org.eclipse.jetty.util.log - Logging to Logger[org.eclipse.jetty.util.log] via org.eclipse.jetty.util.log.Slf4jLog 
08:59:23.328 [default] [main] DEBUG o.e.jetty.util.component.Container - Container org.eclipse.jetty.server.Server@141651e + org.eclipse.jetty.server.handler.ContextHandlerCollection@55bf45 as handler 
08:59:23.329 [default] [main] DEBUG o.e.jetty.util.component.Container - Container org.eclipse.jetty.server.Server@141651e + SelectChannelConnector@0.0.0.0:9999 as connector 
08:59:23.345 [default] [main] DEBUG o.e.jetty.util.component.Container - Container org.eclipse.jetty.server.Server@141651e - org.eclipse.jetty.server.handler.ContextHandlerCollection@55bf45 as handler 
08:59:23.345 [default] [main] DEBUG o.e.jetty.util.component.Container - Container org.eclipse.jetty.server.Server@141651e + o.e.j.s.ServletContextHandler

{/,null} as handler 


08:59:23.356 
[default]
 
[main]
 DEBUG o.e.jetty.servlet.ServletHandler - filterNameMap={} 


08:59:23.357 
[default]
 
[main]
 DEBUG o.e.jetty.servlet.ServletHandler - pathFilters=null 


08:59:23.357 
[default]
 
[main]
 DEBUG o.e.jetty.servlet.ServletHandler - servletFilterMap=null 


08:59:23.357 
[default]
 
[main]
 DEBUG o.e.jetty.servlet.ServletHandler - servletPathMap={/cometd/*=org.cometd.server.CometdServlet-c5fe9b} 


08:59:23.357 
[default]
 
[main]
 DEBUG o.e.jetty.servlet.ServletHandler - servletNameMap={org.cometd.server.CometdServlet-c5fe9b=org.cometd.server.CometdServlet-c5fe9b} 


08:59:23.357 
[default]
 
[main]
 DEBUG o.e.jetty.servlet.ServletHandler - filterNameMap={} 


08:59:23.357 
[default]
 
[main]
 DEBUG o.e.jetty.servlet.ServletHandler - pathFilters=null 


08:59:23.357 
[default]
 
[main]
 DEBUG o.e.jetty.servlet.ServletHandler - servletFilterMap=null 


08:59:23.357 
[default]
 
[main]
 DEBUG o.e.jetty.servlet.ServletHandler - servletPathMap={/cometd/*=org.cometd.server.CometdServlet-c5fe9b, /=org.eclipse.jetty.servlet.DefaultServlet-17ca83e} 


08:59:23.357 
[default]
 
[main]
 DEBUG o.e.jetty.servlet.ServletHandler - servletNameMap={org.cometd.server.CometdServlet-c5fe9b=org.cometd.server.CometdServlet-c5fe9b, org.eclipse.jetty.servlet.DefaultServlet-17ca83e=org.eclipse.jetty.servlet.DefaultServlet-17ca83e} 


08:59:23.365 
[default]
 
[main]
 DEBUG o.e.j.u.component.AbstractLifeCycle - starting org.eclipse.jetty.server.Server@141651e 


08:59:23.367 
[default]
 
[main]
 INFO  org.eclipse.jetty.server.Server - jetty-8.1.18.v20150929 


08:59:23.381 
[default]
 
[main]
 DEBUG o.e.jetty.util.component.Container - Container org.eclipse.jetty.server.Server@141651e + qtp16541084{8<=0<=0/254,-1} as threadpool 


08:59:23.381 
[default]
 
[main]
 DEBUG o.e.j.u.component.AbstractLifeCycle - starting o.e.j.s.ServletContextHandler{/,null}

 
08:59:23.394 [default] [main] DEBUG o.e.jetty.util.component.Container - Container org.eclipse.jetty.servlet.ServletHandler@1aed797 + org.cometd.server.CometdServlet-c5fe9b as servlet 
08:59:23.394 [default] [main] DEBUG o.e.jetty.util.component.Container - Container org.eclipse.jetty.servlet.ServletHandler@1aed797 + org.eclipse.jetty.servlet.DefaultServlet-17ca83e as servlet 
08:59:23.394 [default] [main] DEBUG o.e.jetty.util.component.Container - Container org.eclipse.jetty.servlet.ServletHandler@1aed797 + [/cometd/*]=>org.cometd.server.CometdServlet-c5fe9b as servletMapping 
08:59:23.394 [default] [main] DEBUG o.e.jetty.util.component.Container - Container org.eclipse.jetty.servlet.ServletHandler@1aed797 + [/]=>org.eclipse.jetty.servlet.DefaultServlet-17ca83e as servletMapping 
08:59:23.394 [default] [main] DEBUG o.e.jetty.util.component.Container - Container org.eclipse.jetty.server.session.SessionHandler@1cc1503 + org.eclipse.jetty.servlet.ServletHandler@1aed797 as handler 
08:59:23.394 [default] [main] DEBUG o.e.jetty.util.component.Container - Container org.eclipse.jetty.server.session.SessionHandler@1cc1503 + org.eclipse.jetty.server.session.HashSessionManager@1778636 as sessionManager 
08:59:23.394 [default] [main] DEBUG o.e.jetty.util.component.Container - Container o.e.j.s.ServletContextHandler

{/,null} + org.eclipse.jetty.server.session.SessionHandler@1cc1503 as handler 


08:59:23.394 
[default]
 
[main]
 DEBUG o.e.j.u.component.AbstractLifeCycle - starting org.eclipse.jetty.server.session.SessionHandler@1cc1503 


08:59:23.394 
[default]
 
[main]
 DEBUG o.e.j.u.component.AbstractLifeCycle - starting org.eclipse.jetty.server.session.HashSessionManager@1778636 


08:59:23.395 
[default]
 
[main]
 DEBUG o.e.jetty.util.component.Container - Container org.eclipse.jetty.server.Server@141651e + org.eclipse.jetty.server.session.HashSessionIdManager@1397822 as sessionIdManager 


08:59:23.395 
[default]
 
[main]
 DEBUG o.e.j.u.component.AbstractLifeCycle - starting org.eclipse.jetty.server.session.HashSessionIdManager@1397822 


08:59:23.395 
[default]
 
[main]
 DEBUG o.e.j.u.component.AbstractLifeCycle - STARTED org.eclipse.jetty.server.session.HashSessionIdManager@1397822 


08:59:23.396 
[default]
 
[main]
 DEBUG o.e.j.u.component.AbstractLifeCycle - STARTED org.eclipse.jetty.server.session.HashSessionManager@1778636 


08:59:23.396 
[default]
 
[main]
 DEBUG o.e.j.u.component.AbstractLifeCycle - starting org.eclipse.jetty.servlet.ServletHandler@1aed797 


08:59:23.396 
[default]
 
[main]
 DEBUG o.e.jetty.servlet.ServletHandler - filterNameMap={} 


08:59:23.396 
[default]
 
[main]
 DEBUG o.e.jetty.servlet.ServletHandler - pathFilters=null 


08:59:23.396 
[default]
 
[main]
 DEBUG o.e.jetty.servlet.ServletHandler - servletFilterMap=null 


08:59:23.396 
[default]
 
[main]
 DEBUG o.e.jetty.servlet.ServletHandler - servletPathMap={/cometd/*=org.cometd.server.CometdServlet-c5fe9b, /=org.eclipse.jetty.servlet.DefaultServlet-17ca83e} 


08:59:23.396 
[default]
 
[main]
 DEBUG o.e.jetty.servlet.ServletHandler - servletNameMap={org.cometd.server.CometdServlet-c5fe9b=org.cometd.server.CometdServlet-c5fe9b, org.eclipse.jetty.servlet.DefaultServlet-17ca83e=org.eclipse.jetty.servlet.DefaultServlet-17ca83e} 


08:59:23.396 
[default]
 
[main]
 DEBUG o.e.j.server.handler.AbstractHandler - starting org.eclipse.jetty.servlet.ServletHandler@1aed797 


08:59:23.396 
[default]
 
[main]
 DEBUG o.e.j.u.component.AbstractLifeCycle - STARTED org.eclipse.jetty.servlet.ServletHandler@1aed797 


08:59:23.396 
[default]
 
[main]
 DEBUG o.e.j.server.handler.AbstractHandler - starting org.eclipse.jetty.server.session.SessionHandler@1cc1503 


08:59:23.396 
[default]
 
[main]
 DEBUG o.e.j.u.component.AbstractLifeCycle - STARTED org.eclipse.jetty.server.session.SessionHandler@1cc1503 


08:59:23.396 
[default]
 
[main]
 DEBUG o.e.j.server.handler.AbstractHandler - starting o.e.j.s.ServletContextHandler{/,null}

 
08:59:23.396 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - starting org.cometd.server.CometdServlet-c5fe9b 
08:59:23.415 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - starting org.cometd.server.BayeuxServerImpl@868937 
08:59:23.415 [default] [main] WARN  o.c.server.BayeuxServerImpl@8816951 - setDebugEnabled not implemented 
08:59:23.415 [default] [main] INFO  o.c.server.BayeuxServerImpl@8816951 - JSONCommented=true 
08:59:23.415 [default] [main] INFO  o.c.server.BayeuxServerImpl@8816951 - interval=0 
08:59:23.415 [default] [main] INFO  o.c.server.BayeuxServerImpl@8816951 - logLevel=1 
08:59:23.415 [default] [main] INFO  o.c.server.BayeuxServerImpl@8816951 - maxInterval=30000 
08:59:23.415 [default] [main] INFO  o.c.server.BayeuxServerImpl@8816951 - multiFrameInterval=1500 
08:59:23.415 [default] [main] INFO  o.c.server.BayeuxServerImpl@8816951 - timeout=240000 
08:59:23.417 [default] [main] DEBUG o.c.server.BayeuxServerImpl@8816951 - Added channel /meta 
08:59:23.418 [default] [main] DEBUG o.c.server.BayeuxServerImpl@8816951 - Added channel /meta/handshake 
08:59:23.418 [default] [main] DEBUG o.c.server.BayeuxServerImpl@8816951 - Added channel /meta/connect 
08:59:23.418 [default] [main] DEBUG o.c.server.BayeuxServerImpl@8816951 - Added channel /meta/subscribe 
08:59:23.418 [default] [main] DEBUG o.c.server.BayeuxServerImpl@8816951 - Added channel /meta/unsubscribe 
08:59:23.418 [default] [main] DEBUG o.c.server.BayeuxServerImpl@8816951 - Added channel /meta/disconnect 
08:59:23.420 [default] [main] DEBUG o.c.server.BayeuxServerImpl@8816951 - Allowed Transports: [callback-polling, long-polling] 
08:59:23.421 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - STARTED org.cometd.server.BayeuxServerImpl@868937 
08:59:23.421 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - STARTED org.cometd.server.CometdServlet-c5fe9b 
08:59:23.421 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - starting org.eclipse.jetty.servlet.DefaultServlet-17ca83e 
08:59:23.423 [default] [main] DEBUG org.eclipse.jetty.servlet.Holder - Holding class org.eclipse.jetty.servlet.DefaultServlet 
08:59:23.423 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - STARTED org.eclipse.jetty.servlet.DefaultServlet-17ca83e 
08:59:23.423 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - STARTED o.e.j.s.ServletContextHandler

{/,null} 


08:59:23.423 
[default]
 
[main]
 DEBUG o.e.j.server.handler.AbstractHandler - starting org.eclipse.jetty.server.Server@141651e 


08:59:23.423 
[default]
 
[main]
 DEBUG o.e.j.u.component.AbstractLifeCycle - starting qtp16541084{8<=0<=0/254,-1} 


08:59:23.424 
[default]
 
[main]
 DEBUG o.e.j.u.component.AbstractLifeCycle - STARTED qtp16541084{8<=7<=8/254,0} 


08:59:23.424 
[default]
 
[main]
 DEBUG o.e.j.u.component.AbstractLifeCycle - starting SelectChannelConnector@0.0.0.0:9999 


08:59:23.428 
[default]
 
[main]
 DEBUG o.e.j.u.component.AbstractLifeCycle - starting null/null 


08:59:23.429 
[default]
 
[main]
 DEBUG o.e.j.u.component.AbstractLifeCycle - STARTED PooledBuffers 
[0/1024@6144,0/1024@16384,0/1024@-]
/PooledBuffers 
[0/1024@6144,0/1024@32768,0/1024@-]
 


08:59:23.429 
[default]
 
[main]
 DEBUG o.e.j.u.component.AbstractLifeCycle - starting org.eclipse.jetty.server.nio.SelectChannelConnector$ConnectorSelectorManager@1e36e5e 


08:59:23.436 
[default]
 
[main]
 DEBUG o.e.j.u.component.AbstractLifeCycle - STARTED org.eclipse.jetty.server.nio.SelectChannelConnector$ConnectorSelectorManager@1e36e5e 


08:59:23.436 
[default]
 
[qtp16541084-30 Selector0]
 DEBUG org.eclipse.jetty.io.nio - Starting Thread
[qtp16541084-30 Selector0,5,main]
 on org.eclipse.jetty.io.nio.SelectorManager$1@13b4f4c 


08:59:23.437 
[default]
 
[main]
 INFO  o.e.jetty.server.AbstractConnector - Started SelectChannelConnector@0.0.0.0:9999 


08:59:23.437 
[default]
 
[main]
 DEBUG o.e.j.u.component.AbstractLifeCycle - STARTED SelectChannelConnector@0.0.0.0:9999 


08:59:23.437 
[default]
 
[main]
 DEBUG o.e.j.u.component.AbstractLifeCycle - STARTED org.eclipse.jetty.server.Server@141651e 


08:59:23.453 
[default]
 
[main]
 DEBUG o.c.server.BayeuxServerImpl@8816951 - >  {""id"":""1"",""channel"":""/meta/handshake""} /cometdBroadcastChannel_1ps6caf8lxivw14tib5lvs74mx 


08:59:23.453 
[default]
 
[main]
 DEBUG o.c.server.BayeuxServerImpl@8816951 - >> {""id"":""1"",""channel"":""/meta/handshake""} 


08:59:23.454 
[default]
 
[main]
 DEBUG o.c.server.BayeuxServerImpl@8816951 - << {""id"":""1"",""minimumVersion"":""1.0"",""supportedConnectionTypes"":[""callback-polling"",""long-polling""],""successful"":true,""channel"":""/meta/handshake"",""clientId"":""/cometdBroadcastChannel_1ps6caf8lxivw14tib5lvs74mx"",""version"":""1.0""} 


08:59:23.454 
[default]
 
[main]
 DEBUG o.c.server.BayeuxServerImpl@8816951 - <  {""id"":""1"",""minimumVersion"":""1.0"",""supportedConnectionTypes"":[""callback-polling"",""long-polling""],""successful"":true,""channel"":""/meta/handshake"",""clientId"":""/cometdBroadcastChannel_1ps6caf8lxivw14tib5lvs74mx"",""version"":""1.0""} 


08:59:23.455 
[default]
 
[main]
 DEBUG o.c.server.BayeuxServerImpl@8816951 - >  {""id"":""2"",""advice"":{""interval"":-1},""channel"":""/meta/connect"",""clientId"":""/cometdBroadcastChannel_1ps6caf8lxivw14tib5lvs74mx""} /cometdBroadcastChannel_1ps6caf8lxivw14tib5lvs74mx 


08:59:23.455 
[default]
 
[main]
 DEBUG o.c.server.BayeuxServerImpl@8816951 - >> {""id"":""2"",""advice"":{""interval"":-1},""channel"":""/meta/connect"",""clientId"":""/cometdBroadcastChannel_1ps6caf8lxivw14tib5lvs74mx""} 


08:59:23.455 
[default]
 
[main]
 DEBUG o.c.server.BayeuxServerImpl@8816951 - << {""id"":""2"",""successful"":true,""channel"":""/meta/connect""} 


08:59:23.455 
[default]
 
[main]
 DEBUG o.c.server.BayeuxServerImpl@8816951 - <  {""id"":""2"",""successful"":true,""channel"":""/meta/connect""} 


08:59:23.456 
[default]
 
[main]
 DEBUG o.e.jetty.util.component.Container - Container org.eclipse.jetty.server.Server@141651e - SelectChannelConnector@0.0.0.0:9999 as connector 


08:59:23.456 
[default]
 
[main]
 DEBUG o.e.j.u.component.AbstractLifeCycle - stopping SelectChannelConnector@0.0.0.0:9999 


08:59:23.456 
[default]
 
[main]
 DEBUG o.e.j.u.component.AbstractLifeCycle - stopping org.eclipse.jetty.server.nio.SelectChannelConnector$ConnectorSelectorManager@1e36e5e 


08:59:23.457 
[default]
 
[qtp16541084-30 Selector0]
 DEBUG org.eclipse.jetty.io.nio - Stopped Thread
[qtp16541084-30 Selector0,5,main]
 on org.eclipse.jetty.io.nio.SelectorManager$1@13b4f4c 


08:59:23.467 
[default]
 
[main]
 DEBUG o.e.j.u.component.AbstractLifeCycle - STOPPED org.eclipse.jetty.server.nio.SelectChannelConnector$ConnectorSelectorManager@1e36e5e 


08:59:23.467 
[default]
 
[main]
 DEBUG o.e.j.u.component.AbstractLifeCycle - stopping PooledBuffers 
[0/1024@6144,0/1024@16384,0/1024@-]
/PooledBuffers 
[0/1024@6144,0/1024@32768,0/1024@-]
 


08:59:23.467 
[default]
 
[main]
 DEBUG o.e.j.u.component.AbstractLifeCycle - STOPPED null/null 


08:59:23.468 
[default]
 
[main]
 DEBUG o.e.j.u.component.AbstractLifeCycle - STOPPED SelectChannelConnector@0.0.0.0:9999 


08:59:23.468 
[default]
 
[main]
 DEBUG o.e.j.u.component.AbstractLifeCycle - stopping org.eclipse.jetty.server.Server@141651e 


08:59:23.468 
[default]
 
[main]
 DEBUG o.e.j.u.component.AbstractLifeCycle - stopping o.e.j.s.ServletContextHandler{/,null}

 
08:59:23.468 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - stopping org.eclipse.jetty.server.session.SessionHandler@1cc1503 
08:59:23.468 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - stopping org.eclipse.jetty.server.session.HashSessionManager@1778636 
08:59:23.468 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - STOPPED org.eclipse.jetty.server.session.HashSessionManager@1778636 
08:59:23.468 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - stopping org.eclipse.jetty.servlet.ServletHandler@1aed797 
08:59:23.468 [default] [main] DEBUG o.e.j.server.handler.AbstractHandler - stopping org.eclipse.jetty.servlet.ServletHandler@1aed797 
08:59:23.469 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - stopping org.eclipse.jetty.servlet.DefaultServlet-17ca83e 
08:59:23.469 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - STOPPED org.eclipse.jetty.servlet.DefaultServlet-17ca83e 
08:59:23.469 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - stopping org.cometd.server.CometdServlet-c5fe9b 
08:59:23.469 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - stopping org.cometd.server.BayeuxServerImpl@868937 
08:59:23.469 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - STOPPED org.cometd.server.BayeuxServerImpl@868937 
08:59:23.470 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - STOPPED org.cometd.server.CometdServlet-c5fe9b 
08:59:23.470 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - STOPPED org.eclipse.jetty.servlet.ServletHandler@1aed797 
08:59:23.470 [default] [main] DEBUG o.e.j.server.handler.AbstractHandler - stopping org.eclipse.jetty.server.session.SessionHandler@1cc1503 
08:59:23.470 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - STOPPED org.eclipse.jetty.server.session.SessionHandler@1cc1503 
08:59:23.470 [default] [main] DEBUG o.e.j.server.handler.AbstractHandler - stopping o.e.j.s.ServletContextHandler

{/,null} 


08:59:23.470 
[default]
 
[main]
 INFO  o.e.j.server.handler.ContextHandler - stopped o.e.j.s.ServletContextHandler{/,null}

 
08:59:23.470 [default] [main] DEBUG o.e.jetty.util.component.Container - Container o.e.j.s.ServletContextHandler

{/,null} - org.eclipse.jetty.server.session.SessionHandler@1cc1503 as handler 


08:59:23.470 
[default]
 
[main]
 DEBUG o.e.j.u.component.AbstractLifeCycle - STOPPED o.e.j.s.ServletContextHandler{/,null}

 
08:59:23.470 [default] [main] DEBUG o.e.j.server.handler.AbstractHandler - stopping org.eclipse.jetty.server.Server@141651e 
08:59:23.470 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - stopping org.eclipse.jetty.server.session.HashSessionIdManager@1397822 
08:59:23.470 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - STOPPED org.eclipse.jetty.server.session.HashSessionIdManager@1397822 
08:59:23.470 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - stopping qtp16541084

{8<=8<=8/254,0}

 
08:59:23.527 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - STOPPED qtp16541084

{8<=0<=0/254,4}

 
08:59:23.527 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - STOPPED org.eclipse.jetty.server.Server@141651e 
08:59:23.527 [default] [main] DEBUG o.a.c.processor.DefaultErrorHandler - Redelivery enabled: false on error handler: DefaultErrorHandler[Instrumentation:to[sendTo(Endpoint[cometd://0.0.0.0:9999/cometdBroadcastChannel])]] 
08:59:23.527 [default] [main] DEBUG org.apache.camel.impl.RouteService - Starting child service on route: cometdRoute -> Pipeline[[Channel[Log(cometdRoute)[Sending message to Cometd]], Channel[sendTo(Endpoint[cometd://0.0.0.0:9999/cometdBroadcastChannel])]]] 
08:59:23.527 [default] [main] DEBUG org.apache.camel.impl.RouteService - Starting child service on route: cometdRoute -> Log(cometdRoute)[Sending message to Cometd] 
08:59:23.534 [default] [main] DEBUG o.a.c.m.DefaultManagementAgent - Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=processors,name=""log2"" 
08:59:23.535 [default] [main] DEBUG org.apache.camel.impl.RouteService - Starting child service on route: cometdRoute -> Channel[Log(cometdRoute)[Sending message to Cometd]] 
08:59:23.535 [default] [main] DEBUG org.apache.camel.impl.RouteService - Starting child service on route: cometdRoute -> sendTo(Endpoint[cometd://0.0.0.0:9999/cometdBroadcastChannel]) 
08:59:23.541 [default] [main] DEBUG o.a.c.m.DefaultManagementAgent - Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=processors,name=""to1"" 
08:59:23.541 [default] [main] DEBUG org.apache.camel.impl.RouteService - Starting child service on route: cometdRoute -> Channel[sendTo(Endpoint[cometd://0.0.0.0:9999/cometdBroadcastChannel])] 
08:59:23.548 [default] [main] DEBUG o.a.c.m.DefaultManagementAgent - Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=routes,name=""cometdRoute"" 
08:59:23.548 [default] [main] DEBUG o.a.c.support.TimerListenerManager - Added TimerListener: org.apache.camel.management.mbean.ManagedSuspendableRoute@18afde8 
08:59:23.549 [default] [main] DEBUG o.a.camel.spring.SpringCamelContext - Route: cometdRoute >>> EventDrivenConsumerRoute[Endpoint[activemq://MyBroadcastQueue] -> Pipeline[[Channel[Log(cometdRoute)[Sending message to Cometd]], Channel[sendTo(Endpoint[cometd://0.0.0.0:9999/cometdBroadcastChannel])]]]] 
08:59:23.549 [default] [main] DEBUG o.a.camel.spring.SpringCamelContext - Starting consumer (order: 1000) on route: cometdRoute 
08:59:23.552 [default] [main] DEBUG o.a.c.m.DefaultManagementAgent - Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=consumers,name=JmsConsumer(0xdd070a) 
08:59:23.552 [default] [main] DEBUG o.a.camel.component.jms.JmsConsumer - Starting consumer: Consumer[activemq://MyBroadcastQueue] 
08:59:23.555 [default] [main] DEBUG o.a.a.thread.TaskRunnerFactory - Initialized TaskRunnerFactoryActiveMQ VMTransport: vm://localhost#2 using ExecutorService: java.util.concurrent.ThreadPoolExecutor@4a7e7f[Running, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0] 
08:59:23.555 [default] [ActiveMQ BrokerService[localhost] Task-2] DEBUG o.a.a.thread.TaskRunnerFactory - Initialized TaskRunnerFactoryActiveMQ VMTransport: vm://localhost#3 using ExecutorService: java.util.concurrent.ThreadPoolExecutor@b6fa5d[Running, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0] 
08:59:23.557 [default] [main] DEBUG o.a.c.c.j.DefaultJmsMessageListenerContainer - Established shared JMS Connection 
08:59:23.558 [default] [main] DEBUG o.a.c.c.j.DefaultJmsMessageListenerContainer - Resumed paused task: org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker@9cef26 
08:59:23.558 [default] [main] DEBUG o.a.c.c.j.DefaultJmsMessageListenerContainer - Resumed paused task: org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker@118d229 
08:59:23.558 [default] [main] DEBUG o.a.c.c.j.DefaultJmsMessageListenerContainer - Resumed paused task: org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker@8da115 
08:59:23.562 [default] ActiveMQ VMTransport: vm://localhost#3-1 DEBUG o.a.a.broker.TransportConnection - Setting up new connection id: ID:EXXHSLSY4J-59436-1452675561504-3:2, address: vm://localhost#2, info: ConnectionInfo 

{commandId = 1, responseRequired = true, connectionId = ID:EXXHSLSY4J-59436-1452675561504-3:2, clientId = ID:EXXHSLSY4J-59436-1452675561504-2:1, clientIp = null, userName = null, password = *****, brokerPath = null, brokerMasterConnector = false, manageable = true, clientMaster = true, faultTolerant = false, failoverReconnect = false}

 
08:59:23.674 [default] ActiveMQ VMTransport: vm://localhost#3-1 DEBUG o.a.a.broker.region.AbstractRegion - localhost adding destination: topic://ActiveMQ.Advisory.Connection 
08:59:23.688 [default] ActiveMQ VMTransport: vm://localhost#3-1 DEBUG o.a.a.broker.region.AbstractRegion - localhost adding consumer: ID:EXXHSLSY4J-59436-1452675561504-3:2:-1:1 for destination: ActiveMQ.Advisory.TempQueue,ActiveMQ.Advisory.TempTopic 
08:59:23.698 [default] [main] DEBUG o.a.camel.component.jms.JmsConsumer - Started listener container org.apache.camel.component.jms.DefaultJmsMessageListenerContainer@1ce9dc5 on destination MyBroadcastQueue 
08:59:23.698 [default] [main] INFO  o.a.camel.spring.SpringCamelContext - Route: cometdRoute started and consuming from: Endpoint[activemq://MyBroadcastQueue] 
08:59:23.698 [default] [main] DEBUG o.a.c.m.DefaultManagementLifecycleStrategy - Load performance statistics disabled 
08:59:23.698 [default] [main] INFO  o.a.camel.spring.SpringCamelContext - Total 1 routes, of which 1 is started. 
08:59:23.699 [default] [main] INFO  o.a.camel.spring.SpringCamelContext - Apache Camel 2.15.2 (CamelContext: camel-1) started in 0.645 seconds","dharshana:1452647575:2016-01-13T09:12:55.796+0000:1452647575:2016-01-13T09:12:55.796+0000:Here is the maven dependency list for my spring boot app:

[DEBUG] + Filtering omitted nodes from dependency tree
[INFO] mydomain.service:tada-messaging-pkg-os:jar:develop-SNAPSHOT
[INFO] +- org.springframework.boot:spring-boot-starter-actuator:jar:1.3.1.RELEASE:compile
[INFO] |  +- org.springframework.boot:spring-boot-starter:jar:1.3.1.RELEASE:compile
[INFO] |  |  +- org.springframework.boot:spring-boot:jar:1.3.1.RELEASE:compile
[INFO] |  |  +- org.springframework.boot:spring-boot-autoconfigure:jar:1.3.1.RELEASE:compile
[INFO] |  |  +- org.springframework.boot:spring-boot-starter-logging:jar:1.3.1.RELEASE:compile
[INFO] |  |  |  +- org.slf4j:jcl-over-slf4j:jar:1.7.13:compile
[INFO] |  |  |  \- org.slf4j:log4j-over-slf4j:jar:1.7.13:compile
[INFO] |  |  \- org.yaml:snakeyaml:jar:1.16:runtime
[INFO] |  \- org.springframework.boot:spring-boot-actuator:jar:1.3.1.RELEASE:compile
[INFO] +- org.springframework.boot:spring-boot-starter-web:jar:1.3.1.RELEASE:compile
[INFO] |  +- org.springframework.boot:spring-boot-starter-tomcat:jar:1.3.1.RELEASE:compile
[INFO] |  |  +- org.apache.tomcat.embed:tomcat-embed-core:jar:8.0.30:compile
[INFO] |  |  +- org.apache.tomcat.embed:tomcat-embed-el:jar:8.0.30:compile
[INFO] |  |  +- org.apache.tomcat.embed:tomcat-embed-logging-juli:jar:8.0.30:compile
[INFO] |  |  \- org.apache.tomcat.embed:tomcat-embed-websocket:jar:8.0.30:compile
[INFO] |  +- org.springframework.boot:spring-boot-starter-validation:jar:1.3.1.RELEASE:compile
[INFO] |  |  \- org.hibernate:hibernate-validator:jar:5.2.2.Final:compile
[INFO] |  |     +- javax.validation:validation-api:jar:1.1.0.Final:compile
[INFO] |  |     +- org.jboss.logging:jboss-logging:jar:3.3.0.Final:compile (version managed from 3.2.1.Final)
[INFO] |  |     \- com.fasterxml:classmate:jar:1.1.0:compile
[INFO] |  +- com.fasterxml.jackson.core:jackson-databind:jar:2.6.4:compile
[INFO] |  |  +- com.fasterxml.jackson.core:jackson-annotations:jar:2.6.4:compile (version managed from 2.6.0)
[INFO] |  |  \- com.fasterxml.jackson.core:jackson-core:jar:2.6.4:compile
[INFO] |  +- org.springframework:spring-web:jar:4.2.4.RELEASE:compile
[INFO] |  \- org.springframework:spring-webmvc:jar:4.2.4.RELEASE:compile
[INFO] |     \- org.springframework:spring-expression:jar:4.2.4.RELEASE:compile
[INFO] +- org.springframework:spring-jms:jar:4.2.4.RELEASE:compile
[INFO] |  +- org.springframework:spring-aop:jar:4.2.4.RELEASE:compile
[INFO] |  |  \- aopalliance:aopalliance:jar:1.0:compile
[INFO] |  +- org.springframework:spring-beans:jar:4.2.4.RELEASE:compile
[INFO] |  +- org.springframework:spring-context:jar:4.2.4.RELEASE:compile
[INFO] |  +- org.springframework:spring-core:jar:4.2.4.RELEASE:compile
[INFO] |  |  \- commons-logging:commons-logging:jar:1.2:compile
[INFO] |  +- org.springframework:spring-messaging:jar:4.2.4.RELEASE:compile
[INFO] |  \- org.springframework:spring-tx:jar:4.2.4.RELEASE:compile
[INFO] +- mydomain.wave.common:mydomain-commons-logging:jar:1.0.4:compile
[INFO] |  +- org.slf4j:slf4j-api:jar:1.7.13:compile
[INFO] |  \- org.slf4j:jul-to-slf4j:jar:1.7.13:compile
[INFO] +- ch.qos.logback:logback-classic:jar:1.1.3:compile
[INFO] +- ch.qos.logback:logback-core:jar:1.1.3:compile
[INFO] +- org.apache.camel:camel-jaxb:jar:2.15.2:compile
[INFO] |  +- com.sun.xml.bind:jaxb-core:jar:2.2.11:compile
[INFO] |  \- com.sun.xml.bind:jaxb-impl:jar:2.2.11:compile
[INFO] +- org.apache.camel:camel-core:jar:2.15.2:compile
[INFO] +- org.apache.camel:camel-http:jar:2.15.2:compile
[INFO] |  +- org.apache.geronimo.specs:geronimo-servlet_3.0_spec:jar:1.0:compile
[INFO] |  +- commons-httpclient:commons-httpclient:jar:3.1:compile
[INFO] |  \- commons-codec:commons-codec:jar:1.10:compile
[INFO] +- org.apache.camel:camel-cometd:jar:2.15.2:compile
[INFO] +- org.cometd.java:cometd-java-server:jar:2.3.1:compile
[INFO] |  \- org.cometd.java:bayeux-api:jar:2.3.1:compile
[INFO] +- org.cometd.java:cometd-java-common:jar:2.3.1:compile
[INFO] +- org.eclipse.jetty:jetty-server:jar:8.1.18.v20150929:compile
[INFO] |  \- org.eclipse.jetty.orbit:javax.servlet:jar:3.0.0.v201112011016:compile
[INFO] +- org.eclipse.jetty:jetty-util:jar:8.1.18.v20150929:compile
[INFO] +- org.eclipse.jetty:jetty-servlet:jar:8.1.18.v20150929:compile
[INFO] +- org.eclipse.jetty:jetty-http:jar:8.1.18.v20150929:compile
[INFO] +- org.eclipse.jetty:jetty-io:jar:8.1.18.v20150929:compile
[INFO] +- org.eclipse.jetty:jetty-security:jar:8.1.18.v20150929:compile
[INFO] +- org.eclipse.jetty:jetty-jmx:jar:8.1.18.v20150929:compile
[INFO] +- org.eclipse.jetty:jetty-servlets:jar:8.1.18.v20150929:compile
[INFO] |  \- org.eclipse.jetty:jetty-client:jar:8.1.18.v20150929:compile
[INFO] +- org.eclipse.jetty:jetty-continuation:jar:8.1.18.v20150929:compile
[INFO] +- org.apache.camel:camel-jms:jar:2.15.2:compile
[INFO] +- org.apache.camel:camel-spring:jar:2.15.2:compile
[INFO] +- org.apache.camel:camel-spring-javaconfig:jar:2.15.2:compile
[INFO] |  \- org.apache.servicemix.bundles:org.apache.servicemix.bundles.cglib:jar:2.1_3_7:compile
[INFO] +- org.apache.camel:camel-metrics:jar:2.15.2:compile
[INFO] |  +- io.dropwizard.metrics:metrics-core:jar:3.1.2:compile (version managed from 3.1.1)
[INFO] |  \- io.dropwizard.metrics:metrics-json:jar:3.1.1:compile
[INFO] +- org.apache.camel:camel-spring-boot:jar:2.15.2:compile
[INFO] +- org.apache.activemq:activemq-camel:jar:5.7.0:compile
[INFO] |  +- org.apache.activemq:activemq-core:jar:5.7.0:compile
[INFO] |  |  +- org.apache.geronimo.specs:geronimo-jms_1.1_spec:jar:1.1.1:compile
[INFO] |  |  +- org.apache.activemq:kahadb:jar:5.7.0:compile
[INFO] |  |  +- org.apache.activemq.protobuf:activemq-protobuf:jar:1.1:compile
[INFO] |  |  +- org.fusesource.mqtt-client:mqtt-client:jar:1.3:compile
[INFO] |  |  |  +- org.fusesource.hawtdispatch:hawtdispatch-transport:jar:1.11:compile
[INFO] |  |  |  |  \- org.fusesource.hawtdispatch:hawtdispatch:jar:1.11:compile
[INFO] |  |  |  \- org.fusesource.hawtbuf:hawtbuf:jar:1.9:compile
[INFO] |  |  +- org.apache.geronimo.specs:geronimo-j2ee-management_1.1_spec:jar:1.0.1:compile
[INFO] |  |  +- commons-net:commons-net:jar:3.1:compile
[INFO] |  |  \- org.jasypt:jasypt:jar:1.9.0:compile
[INFO] |  \- org.apache.activemq:activemq-pool:jar:5.12.1:compile (version managed from 5.7.0)
[INFO] |     +- org.apache.activemq:activemq-jms-pool:jar:5.12.1:compile
[INFO] |     +- org.apache.activemq:activemq-client:jar:5.12.1:compile
[INFO] |     +- org.apache.geronimo.specs:geronimo-jta_1.0.1B_spec:jar:1.0.1:compile
[INFO] |     \- org.apache.commons:commons-pool2:jar:2.4.2:compile
[INFO] +- commons-io:commons-io:jar:1.4:compile
[INFO] +- info.cukes:cucumber-junit:jar:1.2.4:test
[INFO] |  +- info.cukes:cucumber-core:jar:1.2.4:test
[INFO] |  |  +- info.cukes:cucumber-html:jar:0.2.3:test
[INFO] |  |  +- info.cukes:cucumber-jvm-deps:jar:1.0.5:test
[INFO] |  |  \- info.cukes:gherkin:jar:2.12.2:test
[INFO] |  \- junit:junit:jar:4.12:test (version managed from 4.11)
[INFO] +- info.cukes:cucumber-java:jar:1.2.4:test
[INFO] +- info.cukes:cucumber-spring:jar:1.2.4:test
[INFO] +- commons-lang:commons-lang:jar:2.4:compile
[INFO] +- org.springframework.boot:spring-boot-starter-test:jar:1.3.1.RELEASE:test
[INFO] |  +- org.mockito:mockito-core:jar:1.10.19:test
[INFO] |  |  \- org.objenesis:objenesis:jar:2.1:test
[INFO] |  +- org.hamcrest:hamcrest-core:jar:1.3:test
[INFO] |  +- org.hamcrest:hamcrest-library:jar:1.3:test
[INFO] |  \- org.springframework:spring-test:jar:4.2.4.RELEASE:test
[INFO] +- org.apache.camel:camel-test-spring:jar:2.15.2:test
[INFO] |  \- org.apache.camel:camel-test:jar:2.15.2:test
[INFO] +- org.jmockit:jmockit:jar:1.20:test
[INFO] \- org.cometd.java:cometd-java-client:jar:2.3.1:test
dharshana:1452647940:2016-01-13T09:19:00.693+0000:1452647940:2016-01-13T09:19:00.693+0000:I debugged it up to the isSingleton method of CometdProducer. in version 2.9.0/2.10.0 isSingleton is delegated to the parent, which always returns true.  In the new releases the default method delegates the call to the endpoint which is returning false in this case, making the producer shutdown during refresh the refresh.

hread [main] (Suspended (breakpoint at line 169 in CometdComponent))	
	owns: LinkedHashMap<K,V>  (id=113)	
	owns: RouteService  (id=94)	
	owns: SpringCamelContext  (id=95)	
	owns: Object  (id=96)	
	owns: DefaultContextCache  (id=97)	
	DefaultActiveMqConfiguration$1(CometdComponent).disconnect(CometdProducerConsumer) line: 169	
	DefaultActiveMqConfiguration$1$1(CometdEndpoint).disconnect(CometdProducerConsumer) line: 107	
	CometdProducer.stop() line: 60	
	ServiceHelper.stopService(Object) line: 141	
	ServiceHelper.stopAndShutdownService(Object) line: 204	
	ProducerCache.releaseProducer(Endpoint, Producer) line: 139	
	SendProcessor.doStart() line: 223	
	SendProcessor(ServiceSupport).start() line: 61	
	ServiceHelper.startService(Service) line: 74	
	ServiceHelper.startService(Object) line: 59	
	ServiceHelper.startServices(Collection<?>) line: 103	
	ServiceHelper.startServices(Object...) line: 89	
	InstrumentationProcessor(DelegateAsyncProcessor).doStart() line: 79	
	InstrumentationProcessor(ServiceSupport).start() line: 61	
	ServiceHelper.startService(Service) line: 74	
	ServiceHelper.startService(Object) line: 59	
	ServiceHelper.startServices(Collection<?>) line: 103	
	ServiceHelper.startServices(Object...) line: 89	
	DefaultErrorHandler(RedeliveryErrorHandler).doStart() line: 1272	
	DefaultErrorHandler(ChildServiceSupport).start(boolean) line: 44	
	DefaultErrorHandler(ChildServiceSupport).start() line: 31	
	ServiceHelper.startService(Service) line: 74	
	ServiceHelper.startService(Object) line: 59	
	ServiceHelper.startServices(Collection<?>) line: 103	
	ServiceHelper.startServices(Object...) line: 89	
	DefaultChannel.doStart() line: 155	
	DefaultChannel(ServiceSupport).start() line: 61	
	ServiceHelper.startService(Service) line: 74	
	ServiceHelper.startService(Object) line: 59	
	ServiceHelper.startServices(Collection<?>) line: 103	
	ServiceHelper.startService(Object) line: 61	
	ServiceHelper.startServices(Collection<?>) line: 103	
	ServiceHelper.startServices(Object...) line: 89	
	Pipeline(MulticastProcessor).doStart() line: 1122	
	Pipeline(ServiceSupport).start() line: 61	
	ServiceHelper.startService(Service) line: 74	
	ServiceHelper.startService(Object) line: 59	
	ServiceHelper.startServices(Collection<?>) line: 103	
	ServiceHelper.startServices(Object...) line: 89	
	CamelInternalProcessor(DelegateAsyncProcessor).doStart() line: 79	
	CamelInternalProcessor(ServiceSupport).start() line: 61	
	ServiceHelper.startService(Service) line: 74	
	RouteService.startChildService(Route, List<Service>) line: 340	
	RouteService.warmUp() line: 182	
	SpringCamelContext(DefaultCamelContext).doWarmUpRoutes(Map<Integer,DefaultRouteStartupOrder>, boolean) line: 3090	
	SpringCamelContext(DefaultCamelContext).safelyStartRouteServices(boolean, boolean, boolean, boolean, Collection<RouteService>) line: 3020	
	SpringCamelContext(DefaultCamelContext).doStartOrResumeRoutes(Map<String,RouteService>, boolean, boolean, boolean, boolean) line: 2797	
	SpringCamelContext(DefaultCamelContext).doStartCamel() line: 2653	
	DefaultCamelContext.access$000(DefaultCamelContext) line: 167	
	DefaultCamelContext$2.call() line: 2467	
	DefaultCamelContext$2.call() line: 2463	
	SpringCamelContext(DefaultCamelContext).doWithDefinedClassLoader(Callable<T>) line: 2486	
	SpringCamelContext(DefaultCamelContext).doStart() line: 2463	
	SpringCamelContext(ServiceSupport).start() line: 61	
	SpringCamelContext(DefaultCamelContext).start() line: 2432	
	RoutesCollector.onApplicationEvent(ContextRefreshedEvent) line: 67	
	RoutesCollector.onApplicationEvent(ApplicationEvent) line: 29	
	SimpleApplicationEventMulticaster.invokeListener(ApplicationListener, ApplicationEvent) line: 163	
	SimpleApplicationEventMulticaster.multicastEvent(ApplicationEvent, ResolvableType) line: 136	
	AnnotationConfigApplicationContext(AbstractApplicationContext).publishEvent(Object, ResolvableType) line: 381	
	AnnotationConfigApplicationContext(AbstractApplicationContext).publishEvent(ApplicationEvent) line: 335	
	AnnotationConfigApplicationContext(AbstractApplicationContext).finishRefresh() line: 855	
	AnnotationConfigApplicationContext(AbstractApplicationContext).refresh() line: 541	


I have written a workaround by overriding the isSingleton method of the CometdProducer to return true as the older versions which makes the system work.
davsclaus:1452762007:2016-01-14T17:00:07.981+0000:1452762007:2016-01-14T17:00:07.981+0000:Thanks for reporting and digging into the code and finding where to fix it.
dharshana:1452820981:2016-01-15T09:23:01.447+0000:1452821017:2016-01-15T09:23:37.503+0000:One more thing I forgot to mention, even after changing the singleton cometd would stop broadcasting after the first message because disconnectLocalSession=true by default. I had to use a url similar to ometd://0.0.0.0:9999/myBroadcastChannel?disconnectLocalSession=false get the code working correctly in camel.


My tests looked like the following:

    @Test
    public void testSendToClientRoute() throws InterruptedException {

        Map<String, Object> options = new HashMap<String, Object>();
        String url = ""http://localhost:9099/cometd"";
        BayeuxClient client = new BayeuxClient(url, LongPollingTransport.create(options));
        client.handshake();
        boolean connected = client.waitFor(10000, BayeuxClient.State.CONNECTED);
        final List<Object> data = new ArrayList<Object>();
        if (connected) {
            // Subscription to channels
            ClientSessionChannel channel = client.getChannel(""/alertchannel"");
            channel.subscribe(new ClientSessionChannel.MessageListener() {
                @Override
                public void onMessage(ClientSessionChannel channel, Message message) {
                    data.add(message.getData());
                }
            });

        } else {
            org.junit.Assert.fail(""Failed to connect to commet instance! at "" + url);
        }

        sendTextMessageToQueue(""SendToClientRoute"", ""test message 1"");
        Thread.sleep(100);

        sendTextMessageToQueue(""SendToClientRoute"", ""test message 2"");
        Thread.sleep(100);

        // Disconnecting
        client.disconnect();
        Assert.assertThat(data.size(), Is.is(2));
        Assert.assertThat((String) data.get(0), Is.is(""test message 1""));
        Assert.assertThat((String) data.get(1), Is.is(""test message 2""));
    }


My route setup is : This route will not send more than one message if ""disconnectLocalSession=false"" is omitted as the service will be torn down after sending each message.

        from(""activemq://queue:SendToClientRoute"").routeId(""sendToClientRoute"")
                .tracing()
                .log(LoggingLevel.DEBUG, ""xxx.SendToClientRoute"",
                        ""Sent message on alertchannel"")
                .to(""cometd://0.0.0.0:9099/alertchannel?disconnectLocalSession=false"")
                .end();

davsclaus:1452828472:2016-01-15T11:27:52.726+0000:1452828472:2016-01-15T11:27:52.726+0000:Okay thanks changing that to false by default now."
0,CAMEL-9508,Improvement,Major,2.16.1,"2.16.2, 2.17.0","
None
",Resolved,Fixed,"2.16.2, 2.17.0",Claus Ibsen,Yogesh Rao,0,3,2016-01-13 04:19:33+00:00,2016-01-15 11:24:30+00:00,"The camel-sjms component for now supports only jms 1.1 spec, Since the JMS 2 spec maintains the backward compatibility with jms 1.1 it would be possible for the camel-sjms component to support jms 2 spec as well. Change in OSGI manfiest would allow camel-sjms to work with jms 2.0 providers as well.


Issue was previously discussed in http://camel.465427.n5.nabble.com/camel-sjms-support-for-JMS-2-in-OSGI-td5776164.html","githubbot:1452717449:2016-01-14T04:37:29.441+0000:1452717449:2016-01-14T04:37:29.441+0000:GitHub user yogeshrao opened a pull request:

    https://github.com/apache/camel/pull/768

    CAMEL-9508 : support jms 2.0 in osgi manifest

    added jms version range in pom.xml for osgi manifest

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/yogeshrao/camel camel-2.16.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/768.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #768
    
----
commit 6f8bc73dd3e02c4f4ee2caf081facf0aa67084f5
Author: Yogesh Rao <yogesh.rao@tpt.com>
Date:   2016-01-14T04:34:14Z

    CAMEL-9508 : support jms 2.0 in osgi manifest
    
    added jms version range in pom.xml for osgi manifest

----

davsclaus:1452761508:2016-01-14T16:51:48.982+0000:1452761508:2016-01-14T16:51:48.982+0000:Its not so good idea to change this in a patch release. But we are happy to do so in the next 2.17 release.
Would you mind doing a new PR against the master branch instead?
githubbot:1452802891:2016-01-15T04:21:31.716+0000:1452802891:2016-01-15T04:21:31.716+0000:Github user yogeshrao closed the pull request at:

    https://github.com/apache/camel/pull/768

githubbot:1452803118:2016-01-15T04:25:18.700+0000:1452803118:2016-01-15T04:25:18.700+0000:GitHub user yogeshrao opened a pull request:

    https://github.com/apache/camel/pull/774

    CAMEL-9508 : support jms 2.0 in osgi manifest

    added jms version range in pom.xml for osgi manifest

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/yogeshrao/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/774.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #774
    
----
commit f2de32da4db26cf407791b212d4ecfa8902e359b
Author: Yogesh Rao <yogesh.rao@tpt.com>
Date:   2016-01-15T04:21:08Z

    CAMEL-9508 : support jms 2.0 in osgi manifest
    
    added jms version range in pom.xml for osgi manifest

----

yogu13:1452803187:2016-01-15T04:26:27.689+0000:1452803187:2016-01-15T04:26:27.689+0000:Sure...No Problem.. Done!
davsclaus:1452814162:2016-01-15T07:29:22.862+0000:1452814162:2016-01-15T07:29:22.862+0000:Ah the camel-jms (spring) was having that manifest entry, so we should assume its safe to backport for 2.16.x branch also.
githubbot:1452828270:2016-01-15T11:24:30.518+0000:1452828270:2016-01-15T11:24:30.518+0000:Github user yogeshrao closed the pull request at:

    https://github.com/apache/camel/pull/774
"
0,CAMEL-9507,New Feature,Major,2.16.1,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Doug Tung,1,3,2016-01-13 04:04:31+00:00,2016-02-06 07:40:32+00:00,"Add a configuration option to suppress the downloading of the s3 object for the aws-s3 consumer. Just return the metadata.


Sometimes, you may want to use the claimcheck pattern with S3, where you care about a new object but will not actually download it in Camel.  An example of this is the Redshift COPY command.  When a file arrives in S3, we can import it into Redshift.","davsclaus:1452761709:2016-01-14T16:55:09.999+0000:1452761709:2016-01-14T16:55:09.999+0000:Ah yeah sounds like a nice idea.

We love contributions
http://camel.apache.org/contributing
dwtung:1452768820:2016-01-14T18:53:40.614+0000:1452768820:2016-01-14T18:53:40.614+0000:Claus,
I'm working on a pull request for this.

The name of the new setting is currently &nullBody=true, to skip downloading the body.  Do you prefer another name?

Doug

Sent from my iPhone


davsclaus:1452812177:2016-01-15T06:56:17.940+0000:1452812177:2016-01-15T06:56:17.940+0000:Yeah naming is hard ;)

At the ftp component we have the option named download=true|false.
 Though what if the name is 'includeBody' and is true by default - is that not a better name?

dwtung:1452813940:2016-01-15T07:25:40.605+0000:1452813940:2016-01-15T07:25:40.605+0000:Thanks Claus!

Sent from my iPhone


davsclaus:1454463473:2016-02-03T09:37:53.001+0000:1454463473:2016-02-03T09:37:53.001+0000:How is it going Doug?
dwtung:1454492020:2016-02-03T17:33:40.622+0000:1454599877:2016-02-04T23:31:17.297+0000:Hi Claus,

I will put in a PR today.  Its very simple change and we have been using it
with no issues for a bit now on our end.  I had held off because I was
thinking a more seamless strategy for integration testing would be nice.
But, perhaps this is overkill.



githubbot:1454509451:2016-02-03T22:24:11.035+0000:1454509451:2016-02-03T22:24:11.035+0000:GitHub user drsquidop opened a pull request:

    https://github.com/apache/camel/pull/825

    CAMEL-9507 Add includeBody option to camel-aws S3 consumer

    For your consideration:
    
    CAMEL-9507 Add includeBody option to camel-aws S3 consumer
    
    https://issues.apache.org/jira/browse/CAMEL-9507

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/drsquidop/camel CAMEL-9507

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/825.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #825
    
----
commit c93456bdf04299835dc20d6855120dfd7dcc1895
Author: Doug Tung <dwtung@isg.la>
Date:   2016-02-03T19:45:54Z

    CAMEL-9507 Add includeBody option to camel-aws S3 consumer

----

davsclaus:1454715627:2016-02-06T07:40:27.624+0000:1454715627:2016-02-06T07:40:27.624+0000:Thanks for the PR
githubbot:1454715632:2016-02-06T07:40:32.261+0000:1454715632:2016-02-06T07:40:32.261+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/825
"
0,CAMEL-9506,Bug,Major,2.16.1,"2.16.2, 2.17.0","
None
",Resolved,Fixed,"2.16.2, 2.17.0",Willem Jiang,Alex Ford,0,3,2016-01-12 20:35:26+00:00,2016-03-08 09:38:18+00:00,"The STOMP component only performs a very simple toString() on the body of the incoming exchange when it creates a STOMP message. This does not work when the body does not support a toString() which gives some reasonable human readable representation of the object. This is exactly the case if you try to do the following:



from(""direct:a"").marshal().json(JsonLibrary.Gson).to(""stomp:topic:foobar"")




The result of the JSON serialization is a Stream, and the toString() on a Stream results in an object hash (e.g. ""[B@30479402""). A more appropriate thing to do here is similar to what the File component does. (Basically, read the stream for the data.)","njiang:1452619927:2016-01-13T01:32:07.054+0000:1452619927:2016-01-13T01:32:07.054+0000:I just checked the code of camel stomp endpoint, it should not use the toString() directly on the message body.
The fix is on the way :) 
ceosion:1452672384:2016-01-13T16:06:24.948+0000:1452672384:2016-01-13T16:06:24.948+0000:Great! I looked at the change you made and replicated it in my dev environment. Confirmed that this fixes the problem! :)

I assume this will get rolled into a 2.16.2 release of Apache Camel? Any idea when that would be released?
pascalschumacher:1452679597:2016-01-13T18:06:37.365+0000:1452679697:2016-01-13T18:08:17.484+0000:Yes, the fix is in the camel-2.16.x branch: [https://github.com/apache/camel/commit/302c91d1a49ce8985950f7da53a034bd97951b88]

2.16.2 will be released week (+ a few days if there are any problems): [http://mail-archives.apache.org/mod_mbox/camel-dev/201601.mbox/%3CCADL1oApn9mWNpYjT9zBT43VbRrpTKUs7nzwp5VkzzyvCyR2%2BxA%40mail.gmail.com%3E]"
0,CAMEL-9505,Bug,Major,2.16.1,"2.15.6, 2.16.2, 2.17.0","
None
",Resolved,Fixed,"2.15.6, 2.16.2, 2.17.0",Andrea Cosentino,Arnaud CHOTARD,0,3,2016-01-12 11:39:52+00:00,2016-01-13 14:26:18+00:00,"The use case is :


onException(NotHandledException.class)
   .handled(false)
   .log(""Exception not handled"");


onException(HandledException.class)
   .handled(true)
   .log(""Exception handled"");


from(""rabbitmq://...&autoAck=false"")
   .setHeader(RabbitMQConstants.REQUEUE, constant(true))
   .to(...);


If the route generate a NotHandledException, the message is requeue in RabbitMQ, it works fine.


If the route generate a HandledException, the message is requeue in RabbitMQ before the execution of Camel ExceptionHandler wich should handle the exception and should not propagate it. 


The message handled by Camel ExceptionHandler should not be requeue in RabbitMQ since the exception is handled.


The related code is in :


org.apache.camel.component.rabbitmq.RabbitConsumer.handleDelivery


Maybe this line :


getExceptionHandler().handleException(""Error processing exchange"", exchange, exchange.getException());


should be before :


if (deliveryTag != 0 && !consumer.endpoint.isAutoAck()) {
   log.trace(""Rejecting receipt [delivery_tag={}] with requeue={}"", deliveryTag, isRequeueHeaderSet);
   if (isRequeueHeaderSet) 

{
      channel.basicReject(deliveryTag, true);
   }

 else 

{
      channel.basicReject(deliveryTag, false);
   }

}","arnaudchotard:1452662130:2016-01-13T13:15:30.397+0000:1452662130:2016-01-13T13:15:30.397+0000:I think theses lines : 

if (exchange.getException() != null) {
    getExceptionHandler().handleException(""Error processing exchange"", exchange, exchange.getException());
}

could be move just after :

Message msg;
if (exchange.hasOut()) {
    msg = exchange.getOut();
} else {
    msg = exchange.getIn();
}

and before test :

if (!exchange.isFailed())

the getExceptionHandler().handleException could be in a try catch in order to send ack to RabbitMQ even if the onException block generate an exception
acosentino:1452662343:2016-01-13T13:19:03.610+0000:1452662343:2016-01-13T13:19:03.610+0000:With the latest commit it works correctly.

I've pushed two integration tests to test the behaviour.
arnaudchotard:1452664386:2016-01-13T13:53:06.525+0000:1452664386:2016-01-13T13:53:06.525+0000:Thank you. Perhaps the exception handler should be place before the test !exchange.isFailed() ?
Indeed, with the actual code, with an handled exception and autoAck=false, the RabbitMQ will still have a basiReject.
Should RabbitMQ have a basicAck is this case since the exception is handled ?
acosentino:1452665115:2016-01-13T14:05:15.501+0000:1452665115:2016-01-13T14:05:15.501+0000:It makes sense. You're right.

I'll push this change.

Anyway, if you want, we love contributions:
http://camel.apache.org/contributing.html
acosentino:1452666378:2016-01-13T14:26:18.666+0000:1452666378:2016-01-13T14:26:18.666+0000:Updated."
0,CAMEL-9504,Improvement,Minor,2.16.1,"2.15.6, 2.16.2, 2.17.0","
None
",Resolved,Fixed,"2.15.6, 2.16.2, 2.17.0",Claus Ibsen,Claus Ibsen,0,1,2016-01-12 10:27:18+00:00,2016-01-12 11:02:01+00:00,CAMEL-7707 fixed an issue with onCompletion. But some end user would like to access the caught exception in the onCompletion / onFailureOnly. And its remove currently. So we should keep that information in the exchange property.,
0,CAMEL-9503,Bug,Minor,2.16.1,"2.15.6, 2.16.2, 2.17.0","
None
",Resolved,Fixed,"2.15.6, 2.16.2, 2.17.0",Claus Ibsen,Claus Ibsen,0,1,2016-01-12 10:06:09+00:00,2016-01-12 10:08:27+00:00,No Desc,
0,CAMEL-9502,Bug,Minor,2.16.1,"2.17.6, 2.18.3, 2.19.0","
None
",Resolved,Fixed,"2.17.6, 2.18.3, 2.19.0",Tadayoshi Sato,Ralf Steppacher,1,4,2016-01-12 09:10:57+00:00,2017-03-03 12:00:46+00:00,"Re-installing a bundle (in my case via a feature) that uses camel-cxf throws 3 instances of javax.management.InstanceAlreadyExistsException:



2016-01-12 09:57:15,974 | WARN  | pache.cxf.osgi]) | MBeanContainer                   | 222 - org.eclipse.jetty.util - 9.2.10.v20150310 |   | bean: org.eclipse.jetty.server.session.HashSessionIdManager@398c8e55
javax.management.InstanceAlreadyExistsException: org.eclipse.jetty.server.session:type=hashsessionidmanager,id=0
	at com.sun.jmx.mbeanserver.Repository.addMBean(Repository.java:437)[:1.8.0_40]
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerWithRepository(DefaultMBeanServerInterceptor.java:1898)[:1.8.0_40]
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerDynamicMBean(DefaultMBeanServerInterceptor.java:966)[:1.8.0_40]
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerObject(DefaultMBeanServerInterceptor.java:900)[:1.8.0_40]
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(DefaultMBeanServerInterceptor.java:324)[:1.8.0_40]
	at com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean(JmxMBeanServer.java:522)[:1.8.0_40]
	at org.eclipse.jetty.jmx.MBeanContainer.beanAdded(MBeanContainer.java:209)[214:org.eclipse.jetty.jmx:9.2.10.v20150310]
	at org.eclipse.jetty.util.component.ContainerLifeCycle.addBean(ContainerLifeCycle.java:264)[222:org.eclipse.jetty.util:9.2.10.v20150310]
	at org.eclipse.jetty.util.component.ContainerLifeCycle.addBean(ContainerLifeCycle.java:228)[222:org.eclipse.jetty.util:9.2.10.v20150310]
	at org.eclipse.jetty.util.component.ContainerLifeCycle.updateBean(ContainerLifeCycle.java:777)[222:org.eclipse.jetty.util:9.2.10.v20150310]
	at org.eclipse.jetty.server.Server.setSessionIdManager(Server.java:578)[219:org.eclipse.jetty.server:9.2.10.v20150310]
	at org.eclipse.jetty.server.session.AbstractSessionManager.doStart(AbstractSessionManager.java:247)[219:org.eclipse.jetty.server:9.2.10.v20150310]
	at org.eclipse.jetty.server.session.HashSessionManager.doStart(HashSessionManager.java:153)[219:org.eclipse.jetty.server:9.2.10.v20150310]
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)[222:org.eclipse.jetty.util:9.2.10.v20150310]
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:132)[222:org.eclipse.jetty.util:9.2.10.v20150310]
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:114)[222:org.eclipse.jetty.util:9.2.10.v20150310]
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:61)[219:org.eclipse.jetty.server:9.2.10.v20150310]
	at org.eclipse.jetty.server.handler.ScopedHandler.doStart(ScopedHandler.java:120)[219:org.eclipse.jetty.server:9.2.10.v20150310]
	at org.eclipse.jetty.server.session.SessionHandler.doStart(SessionHandler.java:116)[219:org.eclipse.jetty.server:9.2.10.v20150310]
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)[222:org.eclipse.jetty.util:9.2.10.v20150310]
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:132)[222:org.eclipse.jetty.util:9.2.10.v20150310]
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:114)[222:org.eclipse.jetty.util:9.2.10.v20150310]
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:61)[219:org.eclipse.jetty.server:9.2.10.v20150310]
	at org.eclipse.jetty.server.handler.ScopedHandler.doStart(ScopedHandler.java:120)[219:org.eclipse.jetty.server:9.2.10.v20150310]
	at org.eclipse.jetty.server.handler.ContextHandler.startContext(ContextHandler.java:784)[219:org.eclipse.jetty.server:9.2.10.v20150310]
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:294)[220:org.eclipse.jetty.servlet:9.2.10.v20150310]
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:741)[219:org.eclipse.jetty.server:9.2.10.v20150310]
	at org.ops4j.pax.web.service.jetty.internal.HttpServiceContext.doStart(HttpServiceContext.java:245)[235:org.ops4j.pax.web.pax-web-jetty:4.2.3]
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)[222:org.eclipse.jetty.util:9.2.10.v20150310]
	at org.ops4j.pax.web.service.jetty.internal.JettyServerImpl$1.start(JettyServerImpl.java:258)[235:org.ops4j.pax.web.pax-web-jetty:4.2.3]
	at org.ops4j.pax.web.service.internal.HttpServiceStarted.registerServlet(HttpServiceStarted.java:216)[237:org.ops4j.pax.web.pax-web-runtime:4.2.3]
	at org.ops4j.pax.web.service.internal.HttpServiceStarted.registerServlet(HttpServiceStarted.java:190)[237:org.ops4j.pax.web.pax-web-runtime:4.2.3]
	at org.ops4j.pax.web.service.internal.HttpServiceStarted.registerServlet(HttpServiceStarted.java:175)[237:org.ops4j.pax.web.pax-web-runtime:4.2.3]
	at org.ops4j.pax.web.service.internal.HttpServiceProxy.registerServlet(HttpServiceProxy.java:64)[237:org.ops4j.pax.web.pax-web-runtime:4.2.3]
	at org.apache.cxf.transport.http.osgi.ServletExporter.updated(ServletExporter.java:92)[178:org.apache.cxf.cxf-rt-transports-http:3.1.4]
	at org.apache.felix.cm.impl.helper.ManagedServiceTracker.updated(ManagedServiceTracker.java:189)[7:org.apache.felix.configadmin:1.8.8]
	at org.apache.felix.cm.impl.helper.ManagedServiceTracker.updateService(ManagedServiceTracker.java:152)[7:org.apache.felix.configadmin:1.8.8]
	at org.apache.felix.cm.impl.helper.ManagedServiceTracker.provideConfiguration(ManagedServiceTracker.java:85)[7:org.apache.felix.configadmin:1.8.8]
	at org.apache.felix.cm.impl.ConfigurationManager$ManagedServiceUpdate.provide(ConfigurationManager.java:1444)[7:org.apache.felix.configadmin:1.8.8]
	at org.apache.felix.cm.impl.ConfigurationManager$ManagedServiceUpdate.run(ConfigurationManager.java:1400)[7:org.apache.felix.configadmin:1.8.8]
	at org.apache.felix.cm.impl.UpdateThread.run0(UpdateThread.java:143)[7:org.apache.felix.configadmin:1.8.8]
	at org.apache.felix.cm.impl.UpdateThread.run(UpdateThread.java:110)[7:org.apache.felix.configadmin:1.8.8]
	at java.lang.Thread.run(Thread.java:745)[:1.8.0_40]





2016-01-12 09:57:19,508 | WARN  | pool-52-thread-1 | MBeanContainer                   | 222 - org.eclipse.jetty.util - 9.2.10.v20150310 |   | bean: qtp972461288{STOPPED,8<=0<=200,i=0,q=0}
javax.management.InstanceAlreadyExistsException: org.eclipse.jetty.util.thread:type=queuedthreadpool,id=1
	at com.sun.jmx.mbeanserver.Repository.addMBean(Repository.java:437)[:1.8.0_40]
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerWithRepository(DefaultMBeanServerInterceptor.java:1898)[:1.8.0_40]
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerDynamicMBean(DefaultMBeanServerInterceptor.java:966)[:1.8.0_40]
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerObject(DefaultMBeanServerInterceptor.java:900)[:1.8.0_40]
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(DefaultMBeanServerInterceptor.java:324)[:1.8.0_40]
	at com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean(JmxMBeanServer.java:522)[:1.8.0_40]
	at org.eclipse.jetty.jmx.MBeanContainer.beanAdded(MBeanContainer.java:209)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.addEventListener(ContainerLifeCycle.java:367)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.8.0_40]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)[:1.8.0_40]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)[:1.8.0_40]
	at java.lang.reflect.Method.invoke(Method.java:497)[:1.8.0_40]
	at org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine.addServerMBean(JettyHTTPServerEngine.java:555)
	at org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine.addServant(JettyHTTPServerEngine.java:395)
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.activate(JettyHTTPDestination.java:175)
	at org.apache.cxf.transport.AbstractObservable.setMessageObserver(AbstractObservable.java:53)
	at org.apache.cxf.binding.AbstractBindingFactory.addListener(AbstractBindingFactory.java:95)
	at org.apache.cxf.binding.soap.SoapBindingFactory.addListener(SoapBindingFactory.java:895)
	at org.apache.cxf.endpoint.ServerImpl.start(ServerImpl.java:123)
	at org.apache.camel.component.cxf.CxfConsumer.doStart(CxfConsumer.java:279)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:3232)[159:org.apache.camel.camel-core:2.16.1]
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRouteConsumers(DefaultCamelContext.java:3526)[159:org.apache.camel.camel-core:2.16.1]
	at org.apache.camel.impl.DefaultCamelContext.doStartRouteConsumers(DefaultCamelContext.java:3462)[159:org.apache.camel.camel-core:2.16.1]
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:3392)[159:org.apache.camel.camel-core:2.16.1]
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:3160)[159:org.apache.camel.camel-core:2.16.1]
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3016)[159:org.apache.camel.camel-core:2.16.1]
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:175)[159:org.apache.camel.camel-core:2.16.1]
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2812)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2808)
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:2831)[159:org.apache.camel.camel-core:2.16.1]
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:2808)[159:org.apache.camel.camel-core:2.16.1]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:2777)[159:org.apache.camel.camel-core:2.16.1]
	at org.apache.camel.blueprint.BlueprintCamelContext.start(BlueprintCamelContext.java:180)
	at org.apache.camel.blueprint.BlueprintCamelContext.maybeStart(BlueprintCamelContext.java:212)
	at org.apache.camel.blueprint.BlueprintCamelContext.serviceChanged(BlueprintCamelContext.java:150)
	at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:991)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:839)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:546)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4557)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.Felix.registerService(Felix.java:3549)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:348)
	at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:355)
	at org.apache.camel.blueprint.BlueprintCamelContext.init(BlueprintCamelContext.java:100)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.8.0_40]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)[:1.8.0_40]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)[:1.8.0_40]
	at java.lang.reflect.Method.invoke(Method.java:497)[:1.8.0_40]
	at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:299)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:980)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:736)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate2(BeanRecipe.java:848)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:811)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:79)[13:org.apache.aries.blueprint.core:1.4.5]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)[:1.8.0_40]
	at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:88)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:247)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:183)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:688)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:383)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:270)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:294)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:263)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:253)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:500)[22:org.apache.aries.util:1.1.1]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:433)[22:org.apache.aries.util:1.1.1]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:725)[22:org.apache.aries.util:1.1.1]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:463)[22:org.apache.aries.util:1.1.1]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:422)[22:org.apache.aries.util:1.1.1]
	at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1179)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.util.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:731)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:486)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4541)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2172)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:998)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:984)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl.startBundle(FeaturesServiceImpl.java:1189)[9:org.apache.karaf.features.core:4.0.3]
	at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:836)[9:org.apache.karaf.features.core:4.0.3]
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1079)[9:org.apache.karaf.features.core:4.0.3]
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl$1.call(FeaturesServiceImpl.java:975)[9:org.apache.karaf.features.core:4.0.3]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)[:1.8.0_40]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)[:1.8.0_40]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)[:1.8.0_40]
	at java.lang.Thread.run(Thread.java:745)[:1.8.0_40]





2016-01-12 09:57:19,522 | WARN  | pool-52-thread-1 | MBeanContainer                   | 222 - org.eclipse.jetty.util - 9.2.10.v20150310 |   | bean: org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine$1@7cb0817d
javax.management.InstanceAlreadyExistsException: org.apache.cxf.transport.http_jetty:type=jettyhttpserverengine$1,id=0
	at com.sun.jmx.mbeanserver.Repository.addMBean(Repository.java:437)[:1.8.0_40]
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerWithRepository(DefaultMBeanServerInterceptor.java:1898)[:1.8.0_40]
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerDynamicMBean(DefaultMBeanServerInterceptor.java:966)[:1.8.0_40]
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerObject(DefaultMBeanServerInterceptor.java:900)[:1.8.0_40]
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(DefaultMBeanServerInterceptor.java:324)[:1.8.0_40]
	at com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean(JmxMBeanServer.java:522)[:1.8.0_40]
	at org.eclipse.jetty.jmx.MBeanContainer.beanAdded(MBeanContainer.java:209)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.addEventListener(ContainerLifeCycle.java:367)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.8.0_40]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)[:1.8.0_40]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)[:1.8.0_40]
	at java.lang.reflect.Method.invoke(Method.java:497)[:1.8.0_40]
	at org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine.addServerMBean(JettyHTTPServerEngine.java:555)
	at org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine.addServant(JettyHTTPServerEngine.java:395)
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.activate(JettyHTTPDestination.java:175)
	at org.apache.cxf.transport.AbstractObservable.setMessageObserver(AbstractObservable.java:53)
	at org.apache.cxf.binding.AbstractBindingFactory.addListener(AbstractBindingFactory.java:95)
	at org.apache.cxf.binding.soap.SoapBindingFactory.addListener(SoapBindingFactory.java:895)
	at org.apache.cxf.endpoint.ServerImpl.start(ServerImpl.java:123)
	at org.apache.camel.component.cxf.CxfConsumer.doStart(CxfConsumer.java:279)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:3232)[159:org.apache.camel.camel-core:2.16.1]
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRouteConsumers(DefaultCamelContext.java:3526)[159:org.apache.camel.camel-core:2.16.1]
	at org.apache.camel.impl.DefaultCamelContext.doStartRouteConsumers(DefaultCamelContext.java:3462)[159:org.apache.camel.camel-core:2.16.1]
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:3392)[159:org.apache.camel.camel-core:2.16.1]
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:3160)[159:org.apache.camel.camel-core:2.16.1]
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3016)[159:org.apache.camel.camel-core:2.16.1]
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:175)[159:org.apache.camel.camel-core:2.16.1]
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2812)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2808)
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:2831)[159:org.apache.camel.camel-core:2.16.1]
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:2808)[159:org.apache.camel.camel-core:2.16.1]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:2777)[159:org.apache.camel.camel-core:2.16.1]
	at org.apache.camel.blueprint.BlueprintCamelContext.start(BlueprintCamelContext.java:180)
	at org.apache.camel.blueprint.BlueprintCamelContext.maybeStart(BlueprintCamelContext.java:212)
	at org.apache.camel.blueprint.BlueprintCamelContext.serviceChanged(BlueprintCamelContext.java:150)
	at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:991)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:839)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:546)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4557)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.Felix.registerService(Felix.java:3549)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:348)
	at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:355)
	at org.apache.camel.blueprint.BlueprintCamelContext.init(BlueprintCamelContext.java:100)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.8.0_40]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)[:1.8.0_40]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)[:1.8.0_40]
	at java.lang.reflect.Method.invoke(Method.java:497)[:1.8.0_40]
	at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:299)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:980)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:736)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate2(BeanRecipe.java:848)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:811)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:79)[13:org.apache.aries.blueprint.core:1.4.5]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)[:1.8.0_40]
	at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:88)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:247)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:183)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:688)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:383)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:270)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:294)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:263)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:253)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:500)[22:org.apache.aries.util:1.1.1]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:433)[22:org.apache.aries.util:1.1.1]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:725)[22:org.apache.aries.util:1.1.1]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:463)[22:org.apache.aries.util:1.1.1]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:422)[22:org.apache.aries.util:1.1.1]
	at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1179)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.util.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:731)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:486)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4541)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2172)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:998)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:984)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl.startBundle(FeaturesServiceImpl.java:1189)[9:org.apache.karaf.features.core:4.0.3]
	at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:836)[9:org.apache.karaf.features.core:4.0.3]
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1079)[9:org.apache.karaf.features.core:4.0.3]
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl$1.call(FeaturesServiceImpl.java:975)[9:org.apache.karaf.features.core:4.0.3]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)[:1.8.0_40]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)[:1.8.0_40]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)[:1.8.0_40]
	at java.lang.Thread.run(Thread.java:745)[:1.8.0_40]","njiang:1452619370:2016-01-13T01:22:50.852+0000:1452619370:2016-01-13T01:22:50.852+0000:Was the camel-cxf bundle reinstalled?
ralfsteppacher:1452641269:2016-01-13T07:27:49.227+0000:1452641300:2016-01-13T07:28:20.375+0000:[~njiang], yes, the camel-cxf bundle was reinstalled. In fact, the problem is reproducible by reinstalling just the camel-cxf feature. 

{code}
karaf@root()> feature:repo-add camel 2.16.1
Adding feature url mvn:org.apache.camel.karaf/apache-camel/2.16.1/xml/features
karaf@root()> feature:install camel-cxf
karaf@root()> feature:uninstall camel-cxf
karaf@root()> feature:install camel-cxf
karaf@root()>
{code}
davsclaus:1454977796:2016-02-09T08:29:56.584+0000:1454977796:2016-02-09T08:29:56.584+0000:It smells like a bug in camel-cxf or cxf itself that it doesn't unregister the JMX MBean when stopping the bundle.
davsclaus:1487914991:2017-02-24T13:43:11.378+0000:1487914991:2017-02-24T13:43:11.378+0000:Try with latest releases to see if you can reproduce it there
davsclaus:1488340330:2017-03-01T11:52:10.224+0000:1488340330:2017-03-01T11:52:10.224+0000:Okay there is a fix in that linked ticket
davsclaus:1488358903:2017-03-01T17:01:43.781+0000:1488358903:2017-03-01T17:01:43.781+0000:Fixed by that other ticket
tadayosi:1488386339:2017-03-02T00:38:59.466+0000:1488386339:2017-03-02T00:38:59.466+0000:I'll check if CAMEL-10914 indeed fixes this issue.
tadayosi:1488513646:2017-03-03T12:00:46.588+0000:1488513646:2017-03-03T12:00:46.588+0000:I cannot reproduce the issue even with 2.18.2. Actually, there are a few other fixes (CXF-4878 and [PAXWEB-1001|https://ops4j1.jira.com/browse/PAXWEB-1001]) that might have fixed this issue already. But yeah it's highly likely CAMEL-10914 becomes the coup de grace for the issue. Let's leave it as ""resolved""."
0,CAMEL-9501,Improvement,Minor,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Willem Jiang,Willem Jiang,0,2,2016-01-12 04:03:54+00:00,2016-02-21 12:05:26+00:00,"Current Jetty endpoint doesn't support to setup the InitParameters from the URI, it could be handy if we support this kind of feature in camel.","davsclaus:1455782570:2016-02-18T16:02:50.952+0000:1455782570:2016-02-18T16:02:50.952+0000:Willem what is the status of this ticket?
njiang:1455928297:2016-02-20T08:31:37.710+0000:1455928297:2016-02-20T08:31:37.710+0000:It's still in progress, I will commit the patch at this weekend.
njiang:1456027526:2016-02-21T12:05:26.653+0000:1456027526:2016-02-21T12:05:26.653+0000:Applied the patch into camel master branch."
0,CAMEL-9500,Improvement,Minor,2.16.1,"2.16.2, 2.17.0","
None
",Resolved,Fixed,"2.16.2, 2.17.0",Claus Ibsen,Thomas Diesler,0,3,2016-01-11 12:51:33+00:00,2016-01-12 14:33:37+00:00,"15:16:52,966 ERROR [org.apache.catalina.core.ContainerBase.[jboss.web].[default-host].[/swagger-tests].[ApiDeclarationServlet]] (http-/127.0.0.1:8080-1) JBWEB000236: Servlet.service() for servlet ApiDeclarationServlet threw exception: java.lang.NumberFormatException: For input string: ""2161redhat-630004""
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) [rt.jar:1.8.0_31]
	at java.lang.Integer.parseInt(Integer.java:580) [rt.jar:1.8.0_31]
	at java.lang.Integer.valueOf(Integer.java:766) [rt.jar:1.8.0_31]
	at org.apache.camel.util.CamelVersionHelper.isGE(CamelVersionHelper.java:42) [camel-core-2.16.1.redhat-630004.jar:2.16.1.redhat-630004]
	at org.apache.camel.component.swagger.DefaultCamelSwaggerServlet$$anonfun$findCamelContexts$1.apply(DefaultCamelSwaggerServlet.scala:87) [camel-swagger-2.16.1.redhat-6","githubbot:1452488299:2016-01-11T12:58:19.572+0000:1452488299:2016-01-11T12:58:19.572+0000:GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/761

    [CAMEL-9500] CamelVersionHelper cannot handle version qualifier

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-9500

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/761.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #761
    
----
commit 41789f6087ddfb741a400d6f8b309c529e1fc8d6
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2016-01-11T12:52:21Z

    [CAMEL-9500] CamelVersionHelper cannot handle version qualifier

----

davsclaus:1452580345:2016-01-12T14:32:25.600+0000:1452580345:2016-01-12T14:32:25.600+0000:Thanks for the PR
githubbot:1452580417:2016-01-12T14:33:37.597+0000:1452580417:2016-01-12T14:33:37.597+0000:Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/761
"
0,CAMEL-9499,Improvement,Major,None,2.17.0,"
None
",Resolved,Won't Fix,2.17.0,Claus Ibsen,Claus Ibsen,0,1,2016-01-11 12:04:01+00:00,2016-01-19 18:15:04+00:00,"We use colon today which makes the uri ambigious and confusing. As colon is a separator for other options.


So we should use dash instead


temp:queue -> temp-queue
temp:topic -> temp-topic","davsclaus:1453198504:2016-01-19T18:15:04.109+0000:1453198504:2016-01-19T18:15:04.109+0000:This old syntax is the natural syntax in activemq itself. So we can leave it as is, and improve the catalog/tooling to do special handling of this option for AMQ."
0,CAMEL-9498,Improvement,Minor,None,"3.0.0-M2, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M2, 3.0.0",Claus Ibsen,Jyrki Ruuskanen,0,3,2016-01-10 19:57:25+00:00,2019-03-01 13:37:07+00:00,"Many Camel components need to reference objects in CamelContext's registry as part of their configuration (for example httpClientConfigurer for http/http4 and restletRealm for restlet).


These objects often apply to that particular CamelContext and not others, thus the registry holding these bits could be local instead of, say, OSGi service registry. Using a local registry prevents the risk of conflicting keys and spares us from devising a naming policy for even trivial stuff.


To conveniently create and add these objects, even from inside RouteBuilder's configure method, we need write access to said registry.


CamelContext should, in my opinion, provide a local SimpleRegistry that is always available.","githubbot:1452427535:2016-01-10T20:05:35.443+0000:1452427535:2016-01-10T20:05:35.443+0000:GitHub user yuruki opened a pull request:

    https://github.com/apache/camel/pull/760

    CAMEL-9498: Always provide a writable local registry

    https://issues.apache.org/jira/browse/CAMEL-9498
    
    + some polish

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/yuruki/camel camel-9498

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/760.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #760
    
----
commit e24b529cb9f1b37305696705e48f5c73fa3387a4
Author: Jyrki Ruuskanen <yuruki@kotikone.fi>
Date:   2016-01-10T19:57:15Z

    CAMEL-9498: Always provide a writable local registry

----

githubbot:1452772910:2016-01-14T20:01:50.653+0000:1452772910:2016-01-14T20:01:50.653+0000:GitHub user yuruki opened a pull request:

    https://github.com/apache/camel/pull/773

    CAMEL-9498: Always provide a writable local registry (camel-2.16.x)

    https://issues.apache.org/jira/browse/CAMEL-9498
    
    plus some polish

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/yuruki/camel camel-9498-2.16

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/773.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #773
    
----
commit b750650f4482c90995d0d8887c2c4c08d7ce1e2e
Author: Jyrki Ruuskanen <yuruki@kotikone.fi>
Date:   2016-01-10T19:57:15Z

    CAMEL-9498: Always provide a writable local registry

commit 96f991aa312e69838c36dc46915d85abf280c552
Author: Jyrki Ruuskanen <yuruki@kotikone.fi>
Date:   2016-01-12T08:40:21Z

    Local registry example in archetype

----

davsclaus:1452816888:2016-01-15T08:14:48.578+0000:1452816888:2016-01-15T08:14:48.578+0000:The Camel registry is a facade to lookup beans from a bean service registry of all sorts - such as jndi / cdi / spring / osgi etc.

So as this is about camel-scr and osgi, then the better way would be to make it easier to add a bean in the real osgi service registry. 
As all beans is then managed from the same source and there is no end user confusion which beans is managed by which. 

We do not want to let Camel take that control and have mix of both - that would be confusing why dependency injection and whatnot works for some beans and not for others etc.

I suggest to look at what code it would take to add a bean in the osgi service registry. And maybe some helper code can be added to camel-scr or camel-core-osgi etc to make this easier from Java code.
yuruki:1452828198:2016-01-15T11:23:18.133+0000:1452828352:2016-01-15T11:25:52.614+0000:Thanks for taking a look at this case.

Please note that I'm not changing the way Camel works here. AbstractCamelRunner is just a helper class for the users of camel-scr. The beauty of having a local registry always available as in the PR is that we can run the exact same concrete camel runner and routebuilders both with OSGi or without OSGi (plain JUnit).

If using a composite registry is not OK in this case the other alternative is to let camel-scr users pick the type of registry for themselves. Similar needs have come up in CamelTestSupport, if I recall correctly. Let me know if I must change the approach.

In a more general note, I firmly believe that having a local registry for stuff that is only interesting locally makes sense. It makes sure whatever you do with the registry it won't have any effect outside the intended scope.
yuruki:1452836769:2016-01-15T13:46:09.938+0000:1452836769:2016-01-15T13:46:09.938+0000:I would like to add that the PR hardly brings confusion to users since the local registry is empty by default and only accessible through getLocalRegistry(). Essentially we are just adding out-of-the-box flexibility.

Making the OSGi service registry easier to write to will be a clear improvement, but it won't help people like us who like to run complete and complex Camel contexts in JUnit and OSGi without conditional code and additional setting up.
davsclaus:1452917022:2016-01-16T12:03:42.437+0000:1452917022:2016-01-16T12:03:42.437+0000:Yeah I can see the point of being able to run osgi unit tests without the real osgi container. 

We can ponder a bit more about whether to introduce a LocalRegistry concept for camel-test modules, to allow to add/override beans in the registry from an unit test, in the unit test code. If so I think a general api in camel-test should be introduced that all the testing components can rely upon. 
Then camel-scr can adapt and use that too. Maybe we need a camel-test-scr module?
yuruki:1452927441:2016-01-16T14:57:21.968+0000:1452942230:2016-01-16T19:03:50.941+0000:If we really want to solve this for everybody in one go, the most straightforward solution is to add {{SimpleRegistry getLocalRegistry();}} to CamelContext (sub)interface. To achieve this we just have to:

# Make sure CompositeRegistry handles nesting correctly.
# Let every implementation of this (possibly new) CamelContext interface own a local registry of type SimpleRegistry. getLocalRegistry() just returns this registry.
# If a registry is given in the CamelContext constructor, CamelContext's registry will be a CompositeRegistry with its localRegistry and the given registry. Otherwise, registry = localRegistry.

Since access to the CamelContext is pretty much ubiquitous, above changes would solve the add/override problem for tests and everywhere else, too.

What do you think?
githubbot:1454111932:2016-01-30T07:58:52.256+0000:1454111932:2016-01-30T07:58:52.256+0000:Github user yuruki closed the pull request at:

    https://github.com/apache/camel/pull/773

githubbot:1454111947:2016-01-30T07:59:07.569+0000:1454111947:2016-01-30T07:59:07.569+0000:Github user yuruki closed the pull request at:

    https://github.com/apache/camel/pull/760

githubbot:1454144858:2016-01-30T17:07:38.770+0000:1454144858:2016-01-30T17:07:38.770+0000:GitHub user yuruki opened a pull request:

    https://github.com/apache/camel/pull/822

    CAMEL-9498: Universal local registry for CamelContext

    This change adds an always available local SimpleRegistry to CamelContext. Local registry makes sure that you can always add beans to a CamelContext regardless of how and where you setup and run your CamelContext.
    
    Notes:
    1. CompositeRegistry can now handle nested registries.
    2. Local registry is directly accessible with CamelContext.getLocalRegistry().
    3. DefaultCamelContext.getRegistry() now returns a CompositeRegistry with local SimpleRegistry as its first member. As before, one should not make assumptions on the registry hierarchy getRegistry() will give you. If you want to access a particular subregistry use getRegistry(Class<T> type).
    
    https://issues.apache.org/jira/browse/CAMEL-9498

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/yuruki/camel camel-localregistry

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/822.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #822
    
----
commit e3ce8832f019542e3a7bbc68df0a65b851c2023a
Author: Jyrki Ruuskanen <yuruki@kotikone.fi>
Date:   2016-01-28T21:34:44Z

    CAMEL-9498: Universal local registry for CamelContext

----

yuruki:1454839224:2016-02-07T18:00:24.515+0000:1454839224:2016-02-07T18:00:24.515+0000:Claus et al, I'd really appreciate some feedback on this PR.
githubbot:1480051530:2016-11-25T13:25:30.049+0000:1480051530:2016-11-25T13:25:30.049+0000:Github user yuruki closed the pull request at:

    https://github.com/apache/camel/pull/822
"
0,CAMEL-9497,Task,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Luca Burgazzoli,Claus Ibsen,0,2,2016-01-10 14:43:57+00:00,2016-03-10 10:45:57+00:00,"There is some options that do not match the @UriParam and @UriPath configured on this endpoint.


There was some time ago some contributions to this component, that didn't include wiki doc updates as well. So we are a bit out of sync.","lb:1457501246:2016-03-09T13:27:26.070+0000:1457501246:2016-03-09T13:27:26.070+0000:[~davsclaus] is it only a matter of documentation ? I so I can take it
davsclaus:1457501723:2016-03-09T13:35:23.316+0000:1457501723:2016-03-09T13:35:23.316+0000:Yeah Luca, the source code is *right* and the website wiki is outdated / wrong.

lb:1457505740:2016-03-09T14:42:20.745+0000:1457505783:2016-03-09T14:43:03.716+0000:[~davsclaus] I'm a little confused by org.apache.camel.component.spring.ws.type.EndpointMappingKey which should be an UriParam:

{code:java}
@UriParam(label = ""consumer"")
private EndpointMappingKey endpointMappingKey;

public EndpointMappingKey getEndpointMappingKey() {
    return endpointMappingKey;
}

public void setEndpointMappingKey(EndpointMappingKey endpointMappingKey) {
    this.endpointMappingKey = endpointMappingKey;
}
{code}

But then it appears that it is instantiated by SpringWebserviceComponent#addConsumerConfiguration where any value you may have set will be overridden:

{code:java}


    private void addConsumerConfiguration(String remaining, Map<String, Object> parameters, SpringWebserviceConfiguration configuration) {
        EndpointMappingType type = EndpointMappingType.getTypeFromUriPrefix(remaining);
        if (type != null) {
            LOG.debug(""Building Spring Web Services consumer of type "" + type);
            String lookupKey = getLookupKey(remaining, type);
            if (EndpointMappingType.BEANNAME.equals(type)) {
                addEndpointDispatcherToConfiguration(configuration, lookupKey);
            } else {
                addEndpointMappingToConfiguration(parameters, configuration);
            }
            XPathExpression xPathExpression = null;
            if (type.equals(EndpointMappingType.XPATHRESULT)) {
                String expression = getAndRemoveParameter(parameters, ""expression"", String.class);
                configuration.setExpression(expression);
                xPathExpression = createXPathExpression(expression);
            }
            configuration.setEndpointMappingKey(new EndpointMappingKey(type, lookupKey, xPathExpression));
        }
    }
{code}

Am I wrong ? 




lb:1457574729:2016-03-10T09:52:09.785+0000:1457574729:2016-03-10T09:52:09.785+0000:[~davsclaus] I've updated confluence, only open topic is about endpointMappingKey
davsclaus:1457575076:2016-03-10T09:57:56.669+0000:1457575076:2016-03-10T09:57:56.669+0000:Luca yeah you have maybe found something. And is that endpoint mapping key used in consumer only, or can the producer use it also?

If not them we can maybe remove it as an option?

Would this code return null sometimes?
EndpointMappingType.getTypeFromUriPrefix(remaining);

If it can then it seems it does not override the field. And then maybe it should stay.
lb:1457575921:2016-03-10T10:12:01.670+0000:1457575921:2016-03-10T10:12:01.670+0000:Sorry [~davsclaus] I'm wrong, it can be overridden as component's endpoint configuration sequence is:

addConsumerConfiguration --> which sets default EndpointMappingKey
setProperties --> which eventually override default EndpointMappingKey

I've added it to the list of options in confluence, let me know if the doc is good enough.
davsclaus:1457576284:2016-03-10T10:18:04.825+0000:1457576284:2016-03-10T10:18:04.825+0000:Sure looks good
https://cwiki.apache.org/confluence/display/CAMEL/Spring+Web+Services"
0,CAMEL-9496,Improvement,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Claus Ibsen,0,1,2016-01-10 12:39:03+00:00,2016-01-10 12:56:27+00:00,"Today you can provide a number of dynamic key/values in the uri for row mapping. 


We should prefix them with mapping. so they are more understandable and also useable for component docs and tooling",
0,CAMEL-9495,Improvement,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Claus Ibsen,0,1,2016-01-09 15:17:53+00:00,2016-01-09 15:19:12+00:00,"And also fix the parsing logic that is wrong today.


We should require to specify the url of the hipchat server so its consistent and not magic what happens.",
0,CAMEL-9494,Task,Minor,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Andrea Cosentino,Andrea Cosentino,0,2,2016-01-09 12:53:34+00:00,2016-01-09 15:35:59+00:00,The bundle has been released.,"davsclaus:1452321547:2016-01-09T14:39:07.794+0000:1452321547:2016-01-09T14:39:07.794+0000:There is no need for creating a ticket for such small changes.
acosentino:1452324959:2016-01-09T15:35:59.956+0000:1452324959:2016-01-09T15:35:59.956+0000:Ok. Sorry."
0,CAMEL-9493,Test,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Unassigned,Claus Ibsen,0,2,2016-01-09 08:31:51+00:00,2016-02-06 08:50:14+00:00,"We should use dynamic ports instead of hardcoded, as the latter causes CI servers and the likes to fail with ""Address already in use"" errors.


See how camel-hl7 / camel-mina2 etc assign dynamic ports in their tests.","davsclaus:1452299553:2016-01-09T08:32:33.434+0000:1452299553:2016-01-09T08:32:33.434+0000:For example

org.apache.camel.component.mllp.MllpProducerConsumerLoopbackTest.testLoopbackMultipleMessages

Failing for the past 14 builds (Since Unstable#586 )
Took 0.77 sec.
Error Message

Address already in use
Stacktrace

java.net.BindException: Address already in use
	at java.net.PlainSocketImpl.socketBind(Native Method)
	at java.net.AbstractPlainSocketImpl.bind(AbstractPlainSocketImpl.java:387)
	at java.net.ServerSocket.bind(ServerSocket.java:375)
	at org.apache.camel.component.mllp.MllpTcpServerConsumer.doStart(MllpTcpServerConsumer.java:96)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:3262)
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRouteConsumers(DefaultCamelContext.java:3556)
davsclaus:1452299598:2016-01-09T08:33:18.014+0000:1452299598:2016-01-09T08:33:18.014+0000:[~hqstevenson]n can you take a look at this?
hqstevenson:1452427601:2016-01-10T20:06:41.080+0000:1452427601:2016-01-10T20:06:41.080+0000:The test uses org.apache.camel.test.AvailablePortFinder.getNextAvailable() for each run, and it is getting a new port for each of the two tests in the test class when I run it locally.

I can't seem to reproduce the BindException on my workstation.  Can you tell me what OS and Java version the CI server is running so I can try and reproduce?  



davsclaus:1452471321:2016-01-11T08:15:21.681+0000:1452471321:2016-01-11T08:15:21.681+0000:You can likely see the details from the log here
https://builds.apache.org/job/Camel.trunk.fulltest.java8/602/consoleText

The CI server job is here
https://builds.apache.org/job/Camel.trunk.fulltest.java8/
hqstevenson:1452515458:2016-01-11T20:30:58.044+0000:1452515458:2016-01-11T20:30:58.044+0000:Thank You - that helped.  I still can't reproduce the test failure, but I think I've tracked down the issue - the ServerSocket isn't closing fast enough because of the long default acceptTimeout.  This is a bug in the component - I'm working on a fix now.
githubbot:1452518272:2016-01-11T21:17:52.742+0000:1452518272:2016-01-11T21:17:52.742+0000:GitHub user hqstevenson opened a pull request:

    https://github.com/apache/camel/pull/763

    CAMEL-9493 - Improve shutdown of listener for consumer

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/hqstevenson/camel CAMEL-9493

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/763.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #763
    
----
commit fc9dbd39d7f73476a9956d08ec3482e97eff398b
Author: Quinn Stevenson <quinn@pronoia-solutions.com>
Date:   2016-01-11T21:15:10Z

    Improve shutdown of listener for consumer

----

githubbot:1452760446:2016-01-14T16:34:06.017+0000:1452760446:2016-01-14T16:34:06.017+0000:Github user hqstevenson closed the pull request at:

    https://github.com/apache/camel/pull/763

davsclaus:1452761220:2016-01-14T16:47:00.097+0000:1452761220:2016-01-14T16:47:00.097+0000:Thanks for the PR, lets keep an eye on the CI servers to see if they become happy now ;)
hqstevenson:1452847436:2016-01-15T16:43:56.103+0000:1452847436:2016-01-15T16:43:56.103+0000:Looks like the tests are still failing intermittently - I'll keep looking.  Any ideas on what is special about the build environment and why I can't reproduce the issue on my OS X or Linux machines?
davsclaus:1452917132:2016-01-16T12:05:32.505+0000:1452917132:2016-01-16T12:05:32.505+0000:You can see a bit of the OS information in the maven outout log at
https://builds.apache.org/job/Camel.trunk.fulltest.java7/1568/consoleText

Isn't it the same 3 tests that always fails on the CI server or is it different tests from time to time?
davsclaus:1452917165:2016-01-16T12:06:05.289+0000:1452917165:2016-01-16T12:06:05.289+0000:And if its the same tests, are they more ""special"" than any of the other tests?
hqstevenson:1452948053:2016-01-16T20:40:53.129+0000:1452948053:2016-01-16T20:40:53.129+0000:It looks like I'm running an older kernel on my linux box (2.6.32) - I'll try and get it up to the same 3.x kernel the test systems are using.

On Java7, it looks like the same tests are always failing.  The results are a little less consistent on Java8.  The only test that is really much different in structure than the others is the loopback test - it uses both the Producer and Consumer in the test.  The other tests use the MLLP test client or server.

Hopefully once I get the kernel updated on my Linux box I'll be able to reproduce this and figure out what is going on.
hqstevenson:1452948224:2016-01-16T20:43:44.781+0000:1452948224:2016-01-16T20:43:44.781+0000:One thought I just had - I default SO_RESUSEADDR to false.  I did this to be ultra-safe in the real world, but it may be a little paranoid.  

What do you think about changing the default to true?  I could do a PR or a patch for this, or you could just change it - it's line 78 in MllpEndpoint.java.
hqstevenson:1453380914:2016-01-21T20:55:14.586+0000:1453380914:2016-01-21T20:55:14.586+0000:I still can't reproduce the error in order to diagnose the test failures.  I've tried Vagrant boxes using CentOS 7 and Ubuntu 14.04 - both give me the same results - i.e. the tests alway pass.

I can't quite figure out how this is happening at all.  The unit tests use the AvailablePortFinder to ensure a port is there, so I don't know how I""m getting the BindException unless the Jenkins build servers are enough faster than my systems that the AvailablePortFinder close() and the bind() call from the MLLP component are happening close enough together to cause the issue.

While looking at the code, I think I can improve the socket cleanup a little more.  Also, I'm going to implement the ""bindTimeout"" option - it's already declared in the endpoint but is currently unused.  That should fix the tests - but since I can't reproduce it locally, I'll have to wait until the PR I'm working on is merged to see for sure.
githubbot:1453890269:2016-01-27T18:24:29.101+0000:1453890269:2016-01-27T18:24:29.101+0000:GitHub user hqstevenson opened a pull request:

    https://github.com/apache/camel/pull/813

    CAMEL-9493 - Improve shutdown of listener for consumer

    Also updated the tests so they all use ""localhost"" instead of ""0.0.0.0""

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/hqstevenson/camel CAMEL-9493

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/813.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #813
    
----
commit 239cad33f7baeebfa4e88307a31e9f287714d87f
Author: Quinn Stevenson <quinn@pronoia-solutions.com>
Date:   2016-01-25T22:48:53Z

    Improved Socket cleanup and added support for bindTimeout URI paramter

commit 18ba7bbd2d6df7397615ae1cbceeb2ed5e31d4f7
Author: Quinn Stevenson <quinn@pronoia-solutions.com>
Date:   2016-01-27T18:19:42Z

    Updated tests to use localhost, and added bind retry in MllpServerResource

----

githubbot:1453940356:2016-01-28T08:19:16.026+0000:1453940356:2016-01-28T08:19:16.026+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/813
"
0,CAMEL-9492,Improvement,Minor,None,"2.16.2, 2.17.0","
None
",Resolved,Fixed,"2.16.2, 2.17.0",Claus Ibsen,Claus Ibsen,0,1,2016-01-08 12:23:31+00:00,2016-01-08 12:44:20+00:00,"Like the other http components you need to tell if its http or https. And its also as shown on the documentation.


But you could potential omit http, and get http protocol. But we should make it required option.",davsclaus:1452228260:2016-01-08T12:44:20.748+0000:1452228260:2016-01-08T12:44:20.748+0000:This is for the component docs btw
0,CAMEL-9491,Bug,Major,2.16.1,"2.15.6, 2.16.2, 2.17.0","
None
",Resolved,Fixed,"2.15.6, 2.16.2, 2.17.0",Greg A.,Felix Thomas,0,4,2016-01-08 08:20:38+00:00,2016-01-08 17:01:08+00:00,"I have tested in
multiple versio*n i.e. 2.15.1,2.16.0,2.16.1 *also but still the same issue.


Camel JDBC component  statement.maxRows is not respected when query is fired repeatedly using a timer. It works fine only on the first run of the route after that the query gets all the records.","gautric:1452237925:2016-01-08T15:25:25.386+0000:1452237925:2016-01-08T15:25:25.386+0000:I confirm the bug
I have got a correction
githubbot:1452239880:2016-01-08T15:58:00.695+0000:1452239880:2016-01-08T15:58:00.695+0000:GitHub user gautric opened a pull request:

    https://github.com/apache/camel/pull/758

    CAMEL-9491 : statement.maxRows not working as expected camel jdbc

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gautric/camel CAMEL-9491

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/758.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #758
    
----
commit 03db98b29769141d11ae60c6fed6fb176a443af2
Author: gautric <gautric@redhat.com>
Date:   2016-01-08T15:36:44Z

    CAMEL-9491 : statement.maxRows not working as expected camel jdbc

commit 649c2605500843d278f9e168d12b8fc29ea6ba29
Author: gautric <gautric@redhat.com>
Date:   2016-01-08T15:49:43Z

    CAMEL-9491 : statement.maxRows not working as expected camel jdbc
    
    add maxrows test

commit 7abfb48ed01bb8b0eee1f02b408dcb96894ffcd4
Author: gautric <gautric@redhat.com>
Date:   2016-01-08T15:54:01Z

    CAMEL-9491 : statement.maxRows not working as expected camel jdbc 

----

davsclaus:1452243608:2016-01-08T17:00:08.330+0000:1452243608:2016-01-08T17:00:08.330+0000:Thanks Greg for the PR and Felix for reporting.
githubbot:1452243668:2016-01-08T17:01:08.812+0000:1452243668:2016-01-08T17:01:08.812+0000:Github user gautric closed the pull request at:

    https://github.com/apache/camel/pull/758
"
0,CAMEL-9490,Test,Minor,2.17.0,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Kevin Anthony Earls,0,1,2016-01-07 13:31:41+00:00,2016-01-08 10:32:58+00:00,"The FacebookMethodsTypeHelperTest fails with the error shown below.  It looks like the result of this commit:  https://github.com/apache/camel/commit/846b097c2b881eac68328800bdd6a9d3017921c7


Running org.apache.camel.component.facebook.data.FacebookMethodsTypeHelperTest
Tests run: 7, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.324 sec <<< FAILURE! - in org.apache.camel.component.facebook.data.FacebookMethodsTypeHelperTest
testGetType(org.apache.camel.component.facebook.data.FacebookMethodsTypeHelperTest)  Time elapsed: 0.012 sec  <<< ERROR!
java.lang.IllegalArgumentException: readingOptions
	at org.apache.camel.component.facebook.data.FacebookMethodsTypeHelper.getType(FacebookMethodsTypeHelper.java:264)
	at org.apache.camel.component.facebook.data.FacebookMethodsTypeHelperTest.testGetType(FacebookMethodsTypeHelperTest.java:125)",
0,CAMEL-9489,Bug,Major,2.16.1,2.16.2,"
None
",Resolved,Fixed,2.16.2,Claus Ibsen,Gerald Mixa,0,2,2016-01-07 11:37:28+00:00,2016-01-07 11:39:12+00:00,"In Jira Ticket a Issue for Camel and Swagger is described.
That ticket mentions that CDI is not affected.
Using Swagger and CDI I could reproduce the same issues like described in that ticket. 
Unfortunatley it seems to be a bit trickier as sometimes the test set up works and sometimes it fails. I could not create a example which always fails.


My example project can be found at:


https://github.com/gmixa/camelswaggerissue


The test cases always fail while the main Program,
found at 
https://github.com/gmixa/camelswaggerissue/blob/master/src/main/java/com/fundsaccess/camelcdiswaggerissue/Startup.java
 just occasionally fails.


Chances that the main program fails can be increased if this example runs in debug mode with line break points in Startup
at 38
at 53
at 63
at 66


and the example is stepped through.


The Output which I got is :


Exception org.apache.camel.FailedToStartRouteException(""Failed to start route route4 because of Multiple consumers for the same endpoint is not allowed: Endpointhttp://0.0.0.0:9091/api-doc?httpMethodRestrict=GET"") breakpoint hit in org.apache.camel.impl.DefaultCamelContext at line 3486 by thread main.
Thread main stopped at DefaultCamelContext.java:3486.
User program running
Exception org.apache.camel.FailedToStartRouteException(""Failed to start route route4 because of Multiple consumers for the same endpoint is not allowed: Endpointhttp://0.0.0.0:9091/api-doc?httpMethodRestrict=GET"") breakpoint hit in org.apache.camel.impl.DefaultCamelContext at line 3172 by thread main.
Thread main stopped at DefaultCamelContext.java:3172.
User program running
Exception org.apache.camel.FailedToStartRouteException(""Failed to start route route4 because of Multiple consumers for the same endpoint is not allowed: Endpointhttp://0.0.0.0:9091/api-doc?httpMethodRestrict=GET"") breakpoint hit in org.apache.camel.impl.DefaultCamelContext$2 at line 2818 by thread main.
Thread main stopped at DefaultCamelContext.java:2818.
User program running
Exception org.apache.camel.FailedToStartRouteException(""Failed to start route route4 because of Multiple consumers for the same endpoint is not allowed: Endpointhttp://0.0.0.0:9091/api-doc?httpMethodRestrict=GET"") breakpoint hit in org.apache.camel.impl.DefaultCamelContext at line 2833 by thread main.
Thread main stopped at DefaultCamelContext.java:2833.
User program running
Exception org.apache.camel.FailedToStartRouteException(""Failed to start route route4 because of Multiple consumers for the same endpoint is not allowed: Endpointhttp://0.0.0.0:9091/api-doc?httpMethodRestrict=GET"") breakpoint hit in org.apache.camel.support.ServiceSupport at line 86 by thread main.
Thread main stopped at ServiceSupport.java:86.


Any hints how i could fix that issue with cdi ?


Greetings


Gerald",davsclaus:1452137952:2016-01-07T11:39:12.143+0000:1452137952:2016-01-07T11:39:12.143+0000:Fixed in next release
0,CAMEL-9488,Improvement,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Claus Ibsen,0,1,2016-01-06 18:06:01+00:00,2016-01-06 18:16:55+00:00,"There is some not so often used langauges like ruby php that are avail using camel-script, but they are not available as a Camel language for the component docs and catalog.",
0,CAMEL-9487,Improvement,Minor,None,Future,"
None
",Resolved,Won't Fix,Future,Claus Ibsen,Nykolas Laurentino de Lima,0,2,2016-01-06 17:28:09+00:00,2016-02-16 08:26:38+00:00,"Why does camel http depend on org.apache.geronimo.specs':'geronimo-servlet_3.0_spec'?


This could conflict with project's servlet-api dependency. I had a really hard to find bug caused by this geronimo dependency conflicting with my servlet-api dependency.


There is any special reason for camel http depend on it? Looks like it could run outside a servlet container, so this dependency shouldn't be needed.","davsclaus:1452124954:2016-01-07T08:02:34.568+0000:1452124954:2016-01-07T08:02:34.568+0000:Yeah it was in the older days that camel-http had a consumer that was servlet based. We can move that code to camel-servlet, camel-jetty-common, and eventually avoid having that dependency in camel-http-common and camel-http.
davsclaus:1452124992:2016-01-07T08:03:12.210+0000:1452124992:2016-01-07T08:03:12.210+0000:You can always use maven excludes to exclude that dep from camel-http
davsclaus:1455582398:2016-02-16T08:26:38.009+0000:1455582398:2016-02-16T08:26:38.009+0000:The servlet is too tightly coupled."
0,CAMEL-9486,Improvement,Major,None,"2.16.2, 2.17.0","
None
",Resolved,Fixed,"2.16.2, 2.17.0",Claus Ibsen,Claus Ibsen,0,1,2016-01-06 15:41:32+00:00,2016-01-06 16:46:10+00:00,"Some components allow to configure username and/or password in userinfo part of uri, such as ftp / ssh components.


This alternative syntax should be supported, so Camel catalog and the component docs is aware of this.",
0,CAMEL-9485,Bug,Major,2.16.1,,"
None
",Resolved,Not A Problem,None,Claus Ibsen,Henrik,0,2,2016-01-06 15:07:20+00:00,2016-01-07 09:50:42+00:00,"As reported by Mel in http://camel.465427.n5.nabble.com/camel-servlet-is-no-longer-working-in-2-16-1-works-in-2-15-3-and-2-16-0-td5774558.html on Nov 30, 2015 (reporting here since it affects me too):


I am using the camel-servlet component, in an app hosted in tomcat, to trigger a route via a URL such as this


http://localhost:9090/appcontext/triggerimport/


When upgrading to 2.16.1 the URL fails to trigger the route;  the URL works if I downgrade to 2.15.3 or 2.16.0 (looks like CAMEL-9263 may have introduced the issue)


web.xml:



<servlet>
  <servlet-name>MyTriggerImportServlet</servlet-name>
  <display-name>Trigger import of JArchive content</display-name>
	
  <servlet-class&gt;org.apache.camel.component.servlet.CamelHttpTransportServlet</servlet-class&gt;
  <load-on-startup>2</load-on-startup>
  <init-param>
    <param-name>ignoreDuplicateServletName</param-name>
    <param-value>true</param-value>
  </init-param>
</servlet>
		
<servlet-mapping>
  <servlet-name>MyTriggerImportServlet</servlet-name>
  <url-pattern>/triggerimport/*</url-pattern>
</servlet-mapping>




camel-config.xml:



<route id=""jarchive-import-rest-service"">
  <from uri=""servlet://jarchive?servletName=MyTriggerImportServlet&amp;matchOnUriPrefix=true"" />
  <to uri=""direct:handlenotifications"" pattern=""OutIn"" />
</route>




The endpoint is actually starting up: 



[INFO ] [2016-01-06T15:30:37,050] [RMI TCP Connection(3)-127.0.0.1] Initialized CamelHttpTransportServlet[name= MyTriggerImportServlet, contextPath=/my-integration]  [CamelHttpTransportServlet] 



2.16.2-SNAPSHOT does not fix the problem.","davsclaus:1452125047:2016-01-07T08:04:07.864+0000:1452125047:2016-01-07T08:04:07.864+0000:You need to call the right url, eg

http://localhost:9090/appcontext/triggerimport/jarchive


monti:1452125216:2016-01-07T08:06:56.645+0000:1452125216:2016-01-07T08:06:56.645+0000:So, the url has changed since 2.16.0 and 2.15.4?
davsclaus:1452126243:2016-01-07T08:24:03.715+0000:1452126243:2016-01-07T08:24:03.715+0000:If you want the root path, then use servlet:/ as the uri
monti:1452131442:2016-01-07T09:50:42.966+0000:1452131442:2016-01-07T09:50:42.966+0000:Found the problem.  My config was slightly different from Mel's.  

My servlet-mapping url-patter was <url-pattern>/pp/import/*</url-pattern> and I initialized the servlet as servlet://import/... 

I could access this with http://localhost:9090/appcontext/pp/import/start earlier, but with 2.16.1 I had to use http://localhost:9090/appcontext/pp/import/import/start

The fix was to use <url-pattern>/pp/*</url-pattern> instead.
"
0,CAMEL-9484,Improvement,Minor,2.16.1,,"
None
",Resolved,Won't Fix,None,Claus Ibsen,Serge Smertin,0,2,2016-01-06 09:53:13+00:00,2016-02-09 09:37:07+00:00,"Recently i've been working on testing framework on top of camel-test and found, that making org.apache.camel.test.spring.CamelSpringJUnit4ClassRunner.CamelTestContextManager as non-final and separate public class would make extendability of camel-test component easier. As now i have to extend CamelSpringJUnit4ClassRunner, make my own and copy-paste the code from CamelTestContextManager in order to add common TestExecutionListener. Having @TestExecutionListeners(listeners = {... is not really an option, as it is not really prone to human error factor.


any thoughts on this?","davsclaus:1452125097:2016-01-07T08:04:57.125+0000:1452125097:2016-01-07T08:04:57.125+0000:Why do you need to extend them in the first place? What is your usecase?
davsclaus:1454981827:2016-02-09T09:37:07.038+0000:1454981827:2016-02-09T09:37:07.038+0000:Extending the test classes is not intended for end users."
0,CAMEL-9483,Bug,Minor,2.16.1,"2.16.3, 2.17.0","
None
",Resolved,Fixed,"2.16.3, 2.17.0",Claus Ibsen,Ralf Steppacher,0,2,2016-01-06 09:24:20+00:00,2016-05-13 05:51:15+00:00,"I am struggling with random deployment failures of bundles containing Camel routes, packaged in a KAR file. Deployment fails mostly because data formats cannot be found on the classpath or Camel component beans are not found in the registry.


The attached sample KAR file contains one bundle with the following blueprint deployment descriptor:



<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0"" 			xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" 			xmlns:camel=""http://camel.apache.org/schema/blueprint"" 			xsi:schemaLocation=""				http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
				http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint-2.16.1.xsd"">
 
	<bean id=""processor"" class=""ch.rsteppac.karissue.RestProcessor"" />

	<camelContext id=""rest-api"" allowUseOriginalMessage=""false"" xmlns=""http://camel.apache.org/schema/blueprint"">
		<restConfiguration component=""netty4-http"" scheme=""http"" host=""0.0.0.0"" port=""2016"" bindingMode=""json"">
			<dataFormatProperty key=""prettyPrint"" value=""true"" />
		</restConfiguration>

		<rest path=""/say/hello"" id=""poc-route"" produces=""application/json"">
			<get uri=""/{yourName}"">
				<route>
					<camel:process ref=""processor"" />
				</route>
			</get>
		</rest>
	</camelContext>
</blueprint>




The feature file of the KAR:



<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
<features xmlns=""http://karaf.apache.org/xmlns/features/v1.3.0"" name=""KAR deployment issue PoC"">
    <repository>mvn:org.apache.camel.karaf/apache-camel/2.16.1/xml/features</repository>
    <feature name=""poc-rest-service"" description=""Sample REST bundle to demonstrate the deployment issue in Karaf 4"" version=""0.0.1.SNAPSHOT"">
        <details>Sample REST bundle to demonstrate the deployment issue in Karaf 4</details>
        <feature version=""2.16.1"" prerequisite=""false"" dependency=""false"">camel-jackson</feature>
        <feature version=""2.16.1"" prerequisite=""false"" dependency=""false"">camel-blueprint</feature>
        <feature version=""2.16.1"" prerequisite=""false"" dependency=""false"">camel-netty4-http</feature>
        <bundle>mvn:ch.rsteppac.kar-issue/poc-rest-service/0.0.1-SNAPSHOT</bundle>
    </feature>
</features>




On my development machine (OSX) deploying the sample KAR file succeeds about 8 out of 10 times. It appears that the more features the KAR file contains the lower the probability of success. Our actual project KAR fails deployment about 9 out of 10 times.
Not all Camel components are equally likely to cause the deployment failure. The most likely to trigger a failure are data formats, e.g., jackson-json or jaxb.
Once the KAR file has deployed successfully, restarting Karaf will consistently deploy the bundles successfully. Until one deletes Karaf's data folder, then all bets are off again.


Adding the feature.xml generated for the KAR with feature:repo-add and then deploying the features with feature:install virtually never fails.


Stack traces for most frequent deployment failure of the sample KAR are attached to the ticket.


EDIT


The issue is actually unrelated to fact that the features are deployed via a KAR file. While I can successfully install each feature individually on the command line, if I restart Karaf and the features are deployed from the $KARAF_HOME/data directory, the behavior is the same as described above.


I encountered another class of errors: A bean declared in the blueprint context was not resolvable in the Camel context in the same file. 


Defining a start-level for my bundles (90) seems to be a workaround for the different issues described above.","ralfsteppacher:1452500541:2016-01-11T16:22:21.457+0000:1452500541:2016-01-11T16:22:21.457+0000:[~davsclaus], should this be a Karaf ticket instead of a Camel ticket?
davsclaus:1454205402:2016-01-31T09:56:42.466+0000:1454205402:2016-01-31T09:56:42.466+0000:No we can improve camel-blueprint to detect those component names in the rest configuration. That should help with the netty4-http not found etc.
davsclaus:1454206303:2016-01-31T10:11:43.415+0000:1454206303:2016-01-31T10:11:43.415+0000:We now detect which components and data formats the rest-dsl is configured to use and wait for those bundles."
0,CAMEL-9482,Improvement,Minor,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Claus Ibsen,0,1,2016-01-05 16:36:32+00:00,2016-01-05 16:38:21+00:00,Remove some old options that has been deprecated forever,
0,CAMEL-9481,Bug,Minor,2.9.0,,"
None
",Resolved,Invalid,None,Claus Ibsen,Yih Tsern,0,2,2016-01-05 11:15:52+00:00,2016-01-05 11:38:51+00:00,"When route is something like this:



from(""file:target/test"")
        .process(ex -> ex.getOut())
        .process(ex -> ex.getOut());




file consumption completes with:



16528 [Camel (camel-1) thread #1 - file://target/test] ERROR org.apache.camel.component.file.GenericFileOnCompletion - Caused by: [org.apache.camel.component.file.GenericFileOperationFailedException - Error renaming file from C:\workspace\projects\test-camel\target\test\New Text Document.txt to \.camel\]
org.apache.camel.component.file.GenericFileOperationFailedException: Error renaming file from C:\workspace\projects\test-camel\target\test\New Text Document.txt to \.camel\
	at org.apache.camel.component.file.FileOperations.renameFile(FileOperations.java:68)
	at org.apache.camel.component.file.strategy.GenericFileProcessStrategySupport.renameFile(GenericFileProcessStrategySupport.java:96)
	at org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy.commit(GenericFileRenameProcessStrategy.java:86)
	at org.apache.camel.component.file.GenericFileOnCompletion.processStrategyCommit(GenericFileOnCompletion.java:132)
	...<snip>
Caused by: java.io.FileNotFoundException: \.camel (Access is denied)
	at java.io.FileOutputStream.open0(Native Method)
	at java.io.FileOutputStream.open(FileOutputStream.java:270)
	at java.io.FileOutputStream.<init>(FileOutputStream.java:213)
	at java.io.FileOutputStream.<init>(FileOutputStream.java:162)
	at org.apache.camel.util.FileUtil.copyFile(FileUtil.java:364)
	at org.apache.camel.util.FileUtil.renameFile(FileUtil.java:348)
	at org.apache.camel.component.file.FileOperations.renameFile(FileOperations.java:66)
	...<snip>","yihtserns:1451963825:2016-01-05T11:17:05.381+0000:1451963825:2016-01-05T11:17:05.381+0000:Here's my finding:
{code:java}
from(""file:target/test"")
        .process(ex -> ex.getOut()) // #1 Creates new, empty 'out' Message
        // #2 previous empty 'out' Message gets copied as 'in' Message for next processor
        .process(ex -> ex.getOut()); // #3 Creates new 'out' Message

// #4 GenericFileRenameProcessStrategy.commit ->
//      GenericFile.bindToExchange sets headers to 'out' Message (created by #3)
//      BUT ExpressionBuilder's expressions get headers from 'in' Message (which is empty, from #2)
{code}
yihtserns:1451963996:2016-01-05T11:19:56.118+0000:1451964136:2016-01-05T11:22:16.278+0000:I don't think this is a _realistic_ issue, because:
# Seems like nobody face this issue before
# http://camel.apache.org/using-getin-or-getout-methods-on-exchange.html already documented that if you want to play with Exchange.getOut(), you should also copy the headers and stuff from Exchange.getIn().

The purpose of this ticket is mainly to document the issue, in case someone *somehow* encounters it.
davsclaus:1451965131:2016-01-05T11:38:51.221+0000:1451965131:2016-01-05T11:38:51.221+0000:See this FAQ
http://camel.apache.org/using-getin-or-getout-methods-on-exchange.html

And see here about getting help
http://camel.apache.org/support.html"
0,CAMEL-9480,Bug,Major,"2.16.1, 2.15.5","2.15.6, 2.16.2, 2.17.0","
None
",Resolved,Fixed,"2.15.6, 2.16.2, 2.17.0",Claus Ibsen,Claus Ibsen,1,1,2016-01-05 08:48:26+00:00,2016-01-05 09:25:43+00:00,"See nabble
http://camel.465427.n5.nabble.com/Exception-from-idempotentConsumer-not-propagating-to-onException-tp5775779.html",
0,CAMEL-9479,Improvement,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Claus Ibsen,0,1,2016-01-04 21:04:10+00:00,2016-01-05 08:33:06+00:00,"The bean/class component allows configuring the bean instance with additional parameters from the uri. But this is maybe not well know. 


We should make those options stand out and use bean. as prefix, so users should use that to make it clear its for the bean. Then we can also add that better in the docs.",
0,CAMEL-9478,Bug,Major,2.16.0,None,"

file
idempotent
threading

",Resolved,Won't Fix,None,Unassigned,Philippe Khalife,0,3,2016-01-04 20:20:31+00:00,2016-02-09 09:39:39+00:00,"Given this setup:


String fileConsumerURI=""file://spool?move=.done&doneFileName=${file:name}.done&sortBy=file:modified&maxMessagesPerPoll=5000&eagerMaxMessagesPerPoll=true""


RouteDefinition route = from(fileConsumerURI).routeId(""MyRouteId"").to(""metrics:counter:MyRoute.counter?increment=1"");


route.idempotentConsumer(header(""CamelFileName""))
                                        .messageIdRepository(memoryIdempotentRepository)
                                        .threads(CONFIGURABLE_NUMBER)
                                        .unmarshal()
                                        .serialization()
                                        .process(MY_SIMPLE_PROCESSOR)
                                        .recipientList(header(""HEADER_CREATED_BY_MY_SIMPLE_PROCESSOR""));


Can occasionally lead to a destructive action by ""GenericFileProcessStrategySupport.renameFile"" when it attempts to delete the ""to.getAbsoluteFilePath()"" while the source file ""from.getAbsoluteFilePath()"" does not even exist.
I think is a bug on its own regardless of how we got there. The GenericFileProcessStrategySupport.renameFile method should check that from.getAbsoluteFilePath() exists BEFORE it attempts the delete. 


How did we get there? - I need to do multi-threaded processing of stored files in a spool, the files  contain meta data about their intended destination, AND using a configurable number of threads to do the work.
Why the idempotentConsumer in the route? I needed to control the size of the memoryIdempotentRepository, which is NOT configurable in the file component.


In this setup the file component seems to have a tendency to occasionally send a file to processing more than once, the idempotentConsumer takes care of that pretty well, but NOT when I choose to move the files instead of delete them as per the route above.


This can be reproduced on its own by running a lot of data and having varied delays in the processing. After much waiting and catching the real bug, I came up with a simulation for it.


By debugging and suspending I can simulate when the problem happens. This setup shows the consequences of files being pushed in exchanges more than once by the file consumer.


Let file F1 get processed, and moved, copy it back to the spool manually (this part is just to force the file being listed for processing more than once), now the idempotentConsumer will reject it, while suspeneded manually move/delete F1 file from the spool, now the file consumer's GenericFileProcessStrategySupport.renameFile will end up eagerly deleting an already processed / moved files while the F1 file does not exist.  


I did on a temporary basis use the file consumer's idempotent setting to avoid this issue as a workaround, but this is not ideal for my workflow.


I have a number of recommendations:
1) Fix this bug: The GenericFileProcessStrategySupport.renameFile method should check that from.getAbsoluteFilePath() exists BEFORE it attempts the delete. 
2) Have a configurable idempotent repository for the file consumer.


A sample stack trace:


WARN  GenericFileOnCompletion:135 - Error during commit. Exchange[ID-I-local-53638-1450384044069-0-170][ID-I-local-53638-1450384044069-0-5]. Caused by: [org.apache.camel.component.file.GenericFileOperationFailedException - Cannot rename file: GenericFile[ID-I-local-53638-1450384044069-0-5] to: GenericFile[.sent/ID-I-local-53638-1450384044069-0-5]]
org.apache.camel.component.file.GenericFileOperationFailedException: Cannot
rename file: GenericFile[ID-I-local-53638-1450384044069-0-5] to:
GenericFile[.sent/ID-I-local-53638-1450384044069-0-5]
        at
org.apache.camel.component.file.strategy.GenericFileProcessStrategySupport.renameFile(GenericFileProcessStrategySupport.java:115)
        at
org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy.commit(GenericFileRenameProcessStrategy.java:88)
        at
org.apache.camel.component.file.GenericFileOnCompletion.processStrategyCommit(GenericFileOnCompletion.java:127)
        at
org.apache.camel.component.file.GenericFileOnCompletion.onCompletion(GenericFileOnCompletion.java:83)
        at
org.apache.camel.component.file.GenericFileOnCompletion.onComplete(GenericFileOnCompletion.java:57)
        at
org.apache.camel.util.UnitOfWorkHelper.doneSynchronizations(UnitOfWorkHelper.java:104)
        at
org.apache.camel.impl.DefaultUnitOfWork.done(DefaultUnitOfWork.java:229)
        at
org.apache.camel.util.UnitOfWorkHelper.doneUow(UnitOfWorkHelper.java:65)
        at
org.apache.camel.processor.CamelInternalProcessor$UnitOfWorkProcessorAdvice.after(CamelInternalProcessor.java:653)
        at
org.apache.camel.processor.CamelInternalProcessor$UnitOfWorkProcessorAdvice.after(CamelInternalProcessor.java:608)
        at
org.apache.camel.processor.CamelInternalProcessor$InternalCallback.done(CamelInternalProcessor.java:239)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:109)
        at
org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190)
        at
org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:442)
        at
org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:214)
        at
org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:178)
        at
org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:174)
        at
org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:101)
        at
java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)
        at
java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)
        at
java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)
        at
java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
        at
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
        at java.lang.Thread.run(Thread.java:745)","davsclaus:1454981979:2016-02-09T09:39:39.934+0000:1454981979:2016-02-09T09:39:39.934+0000:We should not hide that fact. When using windows then files may be locked due some resource is not properly closed.

"
0,CAMEL-9477,Task,Minor,2.16.1,Future,"
None
",Resolved,Cannot Reproduce,Future,Unassigned,Serge Smertin,0,6,2016-01-04 18:31:51+00:00,2019-07-31 09:21:39+00:00,"While preparing internal demo of Camel i've tried to go over examples on test page and most of them are not actually working - http://camel.apache.org/spring-testing.html. I've seen davsclaus writing about http://www.davsclaus.com/2015/12/my-thoughts-on-buying-professional.html, so i find this issue as important.","davsclaus:1451909026:2016-01-04T20:03:46.537+0000:1451909026:2016-01-04T20:03:46.537+0000:Can you be more specific what you think is wrong?

And we love contributions, here is how you can help with the documentation
http://camel.apache.org/contributing
http://camel.apache.org/how-do-i-edit-the-website.html
nfx:1451909596:2016-01-04T20:13:16.702+0000:1451909596:2016-01-04T20:13:16.702+0000:For example, CamelSpringJUnit4ClassRunnerPlainTest doesn't work, even after correcting the syntax error. FilterTest got working only after adding camel-spring-javaconfig dependency, which was not really documented anywhere, so i had to go and do Github search for code where the class was defined. and so on and so on :) 
Test package documentation is pretty hard to follow, actually. I think documentation should be verified to be working before every major release. But that's in ideal world, of course.

davsclaus:1451911274:2016-01-04T20:41:14.339+0000:1451911274:2016-01-04T20:41:14.339+0000:People is welcome to help with the documentation
http://camel.apache.org/contributing
githubbot:1491450501:2017-04-06T11:48:21.192+0000:1491450501:2017-04-06T11:48:21.192+0000:GitHub user onders86 opened a pull request:

    https://github.com/apache/camel/pull/1601

    CAMEL-9477 - add simple lines to indicate removal of CamelSpringJUnit…

    …4ClassRunnerPlainTest for deprecation and update the link with the right test case & also fix some document links which are .html to .adoc
    
    As mentioned in the issue, I agree that there seems to be much work required to do on the documentation to keep the documents, website and code in sync. 
    
    This PR only covers what's complained in the issue.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onders86/camel CAMEL-9477

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1601.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1601
    
----
commit 7c4be2a7fa9eebd3773562611952c71646495bc2
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-04-06T08:58:58Z

    CAMEL-9477 - add simple lines to indicate removal of CamelSpringJUnit4ClassRunnerPlainTest for deprecation and update the link with the right test case & also fix some document links which are .html to .adoc

----

onders:1491450874:2017-04-06T11:54:34.257+0000:1491450874:2017-04-06T11:54:34.257+0000:The PR above only contains the changes what's complained in the issue.
I agree there is much work needed on documentation to keep it sync with code and website.
as the website will already be renewed, i believe keeping and fixing adocs is hopefully sufficient. and instead of doing a huge work in a single ticket, i think we need to divide and conquer the completion of documents.

as a small note, maybe we need to think of a way to extract and document even the examples from the code. maybe some adocs should be created for examples as well. just a thought....
githubbot:1491482130:2017-04-06T20:35:30.241+0000:1491482130:2017-04-06T20:35:30.241+0000:Github user onders86 closed the pull request at:

    https://github.com/apache/camel/pull/1601
"
0,CAMEL-9476,Improvement,Minor,2.16.1,2.18.0,"
None
",Resolved,Fixed,2.18.0,Arno Noordover,Jostein Gogstad,0,4,2016-01-04 14:28:35+00:00,2016-06-28 20:02:18+00:00,"Reading CAMEL-6039 one gets the impression that camel-bindy will pad fixed length records if the input record is smaller than the fixed length.


https://camel.apache.org/bindy.html:



When the size of the data does not fill completely the length of the field, we can then add 'padd' characters.


This is not the case as the following test demonstrates. It fails with



java.lang.IllegalArgumentException: Size of the record: 5 is not equal to the value provided in the model: 10
	at org.apache.camel.dataformat.bindy.fixed.BindyFixedLengthDataFormat.createModel(BindyFixedLengthDataFormat.java:248)
	at org.apache.camel.dataformat.bindy.fixed.BindyFixedLengthDataFormat.unmarshal(BindyFixedLengthDataFormat.java:209)
	at org.apache.camel.processor.UnmarshalProcessor.process(UnmarshalProcessor.java:69)





import org.apache.camel.EndpointInject;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.dataformat.bindy.annotation.DataField;
import org.apache.camel.dataformat.bindy.annotation.FixedLengthRecord;
import org.apache.camel.model.dataformat.BindyType;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Test;

public class BindyTest extends CamelTestSupport {

    public static final String URI_DIRECT_UNMARSHAL = ""direct:unmarshall"";
    public static final String URI_MOCK_UNMARSHAL_RESULT = ""mock:unmarshal_result"";

    @EndpointInject(uri = URI_MOCK_UNMARSHAL_RESULT)
    private MockEndpoint unmarhsalResult;

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(URI_DIRECT_UNMARSHAL)
                    .unmarshal().bindy(BindyType.Fixed, MyBindyModel.class)
                    .to(URI_MOCK_UNMARSHAL_RESULT);
            }
        };
    }

    @Test
    public void testUnmarshal() throws Exception {
        unmarhsalResult.expectedMessageCount(1);
        template.sendBody(URI_DIRECT_UNMARSHAL, ""foo  \r\n"");

        unmarhsalResult.assertIsSatisfied();
        MyBindyModel myBindyModel = unmarhsalResult.getReceivedExchanges().get(0).getIn().getBody(MyBindyModel.class);
        assertEquals(""foo  "", myBindyModel.foo);

    }

    @FixedLengthRecord(length = 10)
    public class MyBindyModel {
        @DataField(pos = 0, length = 5)
        String foo;

        @DataField(pos = 5, length = 5)
        String bar;
    }
}","davsclaus:1451911249:2016-01-04T20:40:49.673+0000:1451911249:2016-01-04T20:40:49.673+0000:Contributions is welcome to look into this
http://camel.apache.org/contributing
jgogstad:1451956979:2016-01-05T09:22:59.004+0000:1451956979:2016-01-05T09:22:59.004+0000:I thought a bit more about this. When the record received has a length smaller than the specified fixed length, we have two options for how to handle the fields that maps the missing data:
# Pad the record so that the length matches. {{@DataField}}-mappings for Strings will then populate the field with spaces (unless {{trim}} is specified). I don't know how mappings to other types behave. I would expect {{Date}} to be {{null}}, but I don't know if that's the case
# Don't pad the record and honor the {{@DataField}}'s {{defaultValue}} option instead

Any opinions?
davsclaus:1451957254:2016-01-05T09:27:34.494+0000:1451957254:2016-01-05T09:27:34.494+0000:I would go for #1.

As for #2 that should only happen if the value was empty.
lb:1453784414:2016-01-26T13:00:14.576+0000:1453784414:2016-01-26T13:00:14.576+0000:I would add an option to enable padding of truncated record as it may be a sign of incorrect record received so this should be explicit enabled, default should be false imho
davsclaus:1461813515:2016-04-28T11:18:35.882+0000:1461813515:2016-04-28T11:18:35.882+0000:Yeah Luca that sounds good. Contributions is welcome
anoordover:1462714591:2016-05-08T21:36:31.341+0000:1462714591:2016-05-08T21:36:31.341+0000:Should ignoreTrailingChars also be used for ignoring when marshalling or should it only be used when unmarshalling (as stated in the documentation)?
It doesn't sound logical to use it only for unmarshalling.
anoordover:1462715991:2016-05-08T21:59:51.572+0000:1462715991:2016-05-08T21:59:51.572+0000:Added ""enablePadding"" and also used ""ignoreTrailingChars"" to trim lines that are to long.
lb:1462782127:2016-05-09T16:22:07.401+0000:1462782127:2016-05-09T16:22:07.401+0000:[~anoordover] I think the padding should take into account DataField.paddingChar, [~davsclaus] what do you think ?


anoordover:1462793537:2016-05-09T19:32:17.281+0000:1462793537:2016-05-09T19:32:17.281+0000:Currently the paddingChar is only used for marshalling (exporting). I find it hard to decide what the most used use-case will be. Maybe we should try to create plugable marshalling and unmarshalling functionality and only provide one default implementation.
The hardest marshalling and unmarshalling in my opinion is fixed-width layout.
I think this should be the behaviour for unmarshalling:
* default-fillers (paddingChar) in a fixed-length field should be translated to a null object. The user didn't supply a value other than the default filler (paddingChar);
* padding characters should be removed from the correct side (left or right, based on the alignment). The user did supply a default filler on those position, i.e. no value;
* based on the previous two statements you might say that a record should be appended by the default filler (paddingChar).

But what would this mean for the following record:
We have two fields ""foo"", lenght 5, right aligned and ""bar"", length 5, left aligned.
The record definition defines a padding char '$' and a length of 10.
The record provided is ""$foo"".
Padding this gives ""$foo$$$$$$"". Unmarshalling this conforming the rules mentioned above means:
""foo"" has a value of ""foo$"" (the left $ is trimmed because of the right-aligning.
""bar"" is null because it only contains ""$$$$$"".

I would suggest the following for unmarshalling:
* Document the corner case when ignoring incorrect record lengths when padding is enabled;
* Pad with the padding character;
* trim the padding character from fields based on de alignment;
* if the trimmed field has a length of 0 the field should be set to null.

Please comment about what the use-case with the highest value will be.
anoordover:1462794161:2016-05-09T19:42:41.519+0000:1462794161:2016-05-09T19:42:41.519+0000:Additional complexity might be that you can provide a paddingChar on field and on record level.
Padding maybe should be done on field level not on record level.
Maybe the throwing of the exception about a record being to short or to long should be postponed to the unmarshalling on field level.

lb:1463799642:2016-05-21T11:00:42.757+0000:1463799642:2016-05-21T11:00:42.757+0000:I think that to complete an incomplete record should be see as marshalling the missing part so the same logic should apply.

I would amend poitn3 as:
- trim the padding character from fields based on the alignment and the trim option


lb:1466982302:2016-06-27T07:05:02.762+0000:1466982302:2016-06-27T07:05:02.762+0000:[~anoordover] Any update on this ? I see that you are a camel committer too so feel free to re-assign this issue to you.
anoordover:1467114399:2016-06-28T19:46:39.088+0000:1467114445:2016-06-28T19:47:25.757+0000:I did the following:
* added a record-level property: ignoreMissingChars, default: false. When this is set to true lines which are too short will not throw an error;
* changed the parsing of the lines to support missing field;
* changed the trimming of field to match alignment and paddingCharacter.
This changes the trimming behaviour because default-alignment is right and trimming was done using String.trim().

I will do a CS check and push is to asf after rebasing."
0,CAMEL-9475,Improvement,Major,None,"2.16.2, 2.17.0","
None
",Resolved,Fixed,"2.16.2, 2.17.0",Claus Ibsen,Claus Ibsen,0,1,2016-01-04 12:56:01+00:00,2016-01-15 10:35:57+00:00,"If you have an ArrayList in the message body, and do a


   <to uri=""language:simple:${body.remove(0)}?transform=false""/>


Then Camel may call the remove(Object) on the list, instead of remove(int)",
0,CAMEL-9444,Bug,Major,2.16.1,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Vlad Oblamskyi,0,2,2015-12-23 10:50:35+00:00,2019-02-05 08:12:51+00:00,"Steps to reproduce:
1. Create global onException handler



<onException>
    <exception>java.lang.Exception</exception>
    <handled>
        <constant>false</constant>
    </handled>
    <log message=""SOME MESSAGE""/>
</onException>




2. Create 2 routes with Splitter (set shareUnitOfWork to TRUE, important)



<route>
    <from uri=""timer://foo?repeatCount=1""/>

    <!-- Add some value list to body here -->

    <split shareUnitOfWork=""true"" stopOnException=""true"">
        <simple>${body}</simple>
        <to uri=""direct:handleSplit""/>
    </split>
</route>

<route>
    <from uri=""direct:handleSplit""/>
    <throwException ref=""myException""/>
</route>




Expected: string ""SOME MESSAGE"" is logged
Actual:  <log message=""SOME MESSAGE""/> is not executed at all","vlad.oblamskyi:1450839207:2015-12-23T10:53:27.504+0000:1450839207:2015-12-23T10:53:27.504+0000:Attaching project example
davsclaus:1454832697:2016-02-07T16:11:37.493+0000:1454832697:2016-02-07T16:11:37.493+0000:This problem is only when handled is false and you use shareUnitOfWork.
davsclaus:1455261252:2016-02-12T15:14:12.016+0000:1455261252:2016-02-12T15:14:12.016+0000:A fix for this is a bit more invasive in the source code, so going to apply this for 2.17 onwards."
0,CAMEL-9443,New Feature,Minor,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Unassigned,Andrew Wheat,0,2,2015-12-22 16:18:42+00:00,2016-01-14 10:50:54+00:00,"AS a user of DynamoDB
I WANT a camel component for the change event feed
SO THAT I can process the change events easily


Given a DynamoDB table
And the table has a stream configured
When Camel starts
Then my Processor gets Exchanges for each change event


Shard Iterator Types to handle:



TRIM_HORIZON
LATEST
AT_SEQUENCE_NUMBER
AFTER_SEQUENCE_NUMBER
See http://docs.aws.amazon.com/dynamodbstreams/latest/APIReference/API_GetShardIterator.html for definitions of these types.","candle:1450772873:2015-12-22T16:27:53.243+0000:1450772873:2015-12-22T16:27:53.243+0000:
# list streams with the table name to get the stream ARN.
# describe stream with the stream ARN to get the list of shards
# Select a shard (latest, next when walking some history)
# get a shard iterator
## use the shard iterator to call getRecords
## use the result of getRecords to populate the next shard iterator
## Repeat getRecords until the API returns a null shard iterator
# Repeat until the heat-death of the universe."
0,CAMEL-9442,Bug,Major,2.17.0,"2.15.6, 2.16.2, 2.17.0","
None
",Resolved,Fixed,"2.15.6, 2.16.2, 2.17.0",Gert Vanthienen,Gert Vanthienen,0,3,2015-12-22 13:37:14+00:00,2016-03-02 06:24:31+00:00,"When using a route like this one (to forward an HTTP request to a downstream server) using the netty-http component, the query is decoded when sent to the downstream server:



  from(""netty-http:http://localhost:9000/service?matchOnUriPrefix=true"")
          .to (""http4://downstream:9000/service?bridgeEndpoint=true"");




A request to http://localhost:9000/service?q=%3B will result in a call to http://downstream:9000/service?q=; (notice the decoded ; character). Replacing the netty-http:http: endpoint with a jetty:http: endpoint fixes the problem.


The difference is in the use of the Exchange.HTTP_QUERY and Exchange.HTTP_RAW_QUERY headers. The jetty:http: endpoint is only setting the former header (containing the raw header value), while the netty-http:http: endpoint is using both headers.


When using bridgeEndpoint, the http4 component should prefer the raw query header over the decoded header if both headers are available.","gertvanthienen:1450764287:2015-12-22T14:04:47.942+0000:1450764287:2015-12-22T14:04:47.942+0000:Fixed in 
- https://git-wip-us.apache.org/repos/asf?p=camel.git;a=commit;h=9827197a7874e2f331da25b3bfe9a028daae88b1 for {{master}}
- https://git-wip-us.apache.org/repos/asf?p=camel.git;a=commit;h=10d50677e6dbe6f8fbbb98cc1a8b473a97eaa43d for {{camel-2.16.x}}
- https://git-wip-us.apache.org/repos/asf?p=camel.git;a=commit;h=1a20c1ce542e487943c90617d1af9fab0818106e for {{camel-2.15.x}}
githubbot:1456268571:2016-02-24T07:02:51.861+0000:1456268571:2016-02-24T07:02:51.861+0000:GitHub user tadayosi opened a pull request:

    https://github.com/apache/camel/pull/861

    CAMEL-9442 - Add tests for camel-http, porting from camel-http4

    [CAMEL-9442](https://issues.apache.org/jira/browse/CAMEL-9442) should also fix `camel-http`, so I added the tests for `camel-http` to make sure it really has fixed the issue at `camel-http` as well.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tadayosi/camel CAMEL-9442

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/861.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #861
    
----
commit c7fd695e7089130c197f65b7ec1f57eb08530436
Author: Tadayoshi Sato <sato.tadayoshi@gmail.com>
Date:   2016-02-24T06:56:16Z

    CAMEL-9442 - Add tests for camel-http, porting from camel-http4

----

tadayosi:1456268800:2016-02-24T07:06:40.114+0000:1456268800:2016-02-24T07:06:40.114+0000:Developed a PR https://github.com/apache/camel/pull/861 to demonstrate it really fixes the same issue at {{camel-http}} as well.
githubbot:1456371219:2016-02-25T11:33:39.676+0000:1456371219:2016-02-25T11:33:39.676+0000:Github user tadayosi closed the pull request at:

    https://github.com/apache/camel/pull/861
"
0,CAMEL-9441,Improvement,Minor,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Andrea Cosentino,Andrea Cosentino,0,1,2015-12-22 11:03:51+00:00,2015-12-22 12:31:25+00:00,"Actually we have to do a search if we want to know if an index exists or not.


Create an operation for this could be better.",
0,CAMEL-9440,New Feature,Minor,None,None,"
None
",Resolved,Abandoned,None,Unassigned,Achmad Nasirudin Sandi,0,2,2015-12-22 03:03:20+00:00,2022-09-02 09:13:05+00:00,Another messaging component that support NSQ message broker. I would like to contribute although the nsq itself is not on 1 version yet. Something like preview may be.,
0,CAMEL-9439,Bug,Major,2.16.1,None,"
None
",Resolved,Fixed,"2.15.6, 2.16.2, 2.17.0",Andrea Cosentino,Matt Sicker,0,2,2015-12-21 17:47:51+00:00,2015-12-23 15:17:56+00:00,"From a fresh install of Karaf, I add the Camel feature repository and run feature:install camel-geocoder. Using a basic geocoder endpoint, I get the following exception:



java.lang.NoClassDefFoundError: com/google/gson/GsonBuilder
	at com.google.code.geocoder.Geocoder.geocode(Geocoder.java:56)
	at org.apache.camel.component.geocoder.GeoCoderProducer.process(GeoCoderProducer.java:89)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	... 23 more




This appears to be caused by the feature ""wrap:mvn:com.google.code.geocoder-java/geocoder-java/0.16"" which uses optional for all its import packages which is incorrect as it appears to require gson (amongst other things).


A quick fix was to also install camel-gson, but this should be handled transitively.","acosentino:1450847023:2015-12-23T13:03:43.834+0000:1450847023:2015-12-23T13:03:43.834+0000:I've tested with this little example: https://github.com/oscerd/camel-geocoder-example
mattsicker:1450855076:2015-12-23T15:17:56.187+0000:1450855076:2015-12-23T15:17:56.187+0000:Thanks!"
0,CAMEL-9438,Bug,Major,2.17.0,,"
None
",Closed,Fixed,None,Greg A.,Greg A.,0,2,2015-12-21 15:06:15+00:00,2015-12-21 15:26:26+00:00,"Got this exception when run 


mvn exec:java -PCamelTransport


[mbp:~/Source/git/camel/examples/camel-example-cxf]$> mvn exec:java -PCamelTransport 
[INFO] Scanning for projects...
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Example :: CXF 2.17-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] >>> exec-maven-plugin:1.1.1:java (default-cli) > validate @ camel-example-cxf >>>
[INFO] 
[INFO] — maven-enforcer-plugin:1.4:enforce (enforce-maven) @ camel-example-cxf —
[INFO] 
[INFO] — maven-bundle-plugin:2.3.7:cleanVersions (versions) @ camel-example-cxf —
[INFO] 
[INFO] <<< exec-maven-plugin:1.1.1:java (default-cli) < validate @ camel-example-cxf <<<
[INFO] 
[INFO] — exec-maven-plugin:1.1.1:java (default-cli) @ camel-example-cxf —
[t.CamelTransportExample.main()] BusApplicationContext          INFO  Refreshing org.apache.cxf.bus.spring.BusApplicationContext@567da882: startup date [Mon Dec 21 16:00:41 CET 2015]; root of context hierarchy
[t.CamelTransportExample.main()] BusApplicationContext          INFO  Loaded configuration file /org/apache/camel/example/camel/transport/CamelDestination.xml.
[t.CamelTransportExample.main()] idationXmlBeanDefinitionReader INFO  Loading XML bean definitions from class path resource [META-INF/cxf/cxf.xml]
[t.CamelTransportExample.main()] idationXmlBeanDefinitionReader INFO  Loading XML bean definitions from class path resource [META-INF/cxf/camel/cxf-extension-camel.xml]
[t.CamelTransportExample.main()] idationXmlBeanDefinitionReader INFO  Loading XML bean definitions from class path resource [org/apache/camel/example/camel/transport/CamelDestination.xml]
[t.CamelTransportExample.main()] SpringBusFactory               WARN  Initial attempt to create application context was unsuccessful.
org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 39 in XML document from class path resource [org/apache/camel/example/camel/transport/CamelDestination.xml] is invalid; nested exception is org.xml.sax.SAXParseException; lineNumber: 39; columnNumber: 46; cvc-complex-type.3.2.2: Attribute 'ref' is not allowed to appear in element 'loadBalance'.
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:399)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader.doLoadBeanDefinitions(ControlledValidationXmlBeanDefinitionReader.java:115)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:336)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader.internalLoadBeanDefinitions(ControlledValidationXmlBeanDefinitionReader.java:154)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader.access$000(ControlledValidationXmlBeanDefinitionReader.java:66)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader$1.run(ControlledValidationXmlBeanDefinitionReader.java:141)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader$1.run(ControlledValidationXmlBeanDefinitionReader.java:139)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader.loadBeanDefinitions(ControlledValidationXmlBeanDefinitionReader.java:139)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:304)
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:181)
	at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:123)
	at org.apache.cxf.bus.spring.BusApplicationContext.loadBeanDefinitions(BusApplicationContext.java:334)
	at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:129)
	at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:608)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:509)
	at org.apache.cxf.bus.spring.BusApplicationContext$1.run(BusApplicationContext.java:106)
	at org.apache.cxf.bus.spring.BusApplicationContext$1.run(BusApplicationContext.java:104)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.cxf.bus.spring.BusApplicationContext.<init>(BusApplicationContext.java:104)
	at org.apache.cxf.bus.spring.SpringBusFactory.createApplicationContext(SpringBusFactory.java:157)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:148)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:124)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:94)
	at org.apache.camel.example.camel.transport.Server.prepare(Server.java:38)
	at org.apache.camel.example.camel.transport.CamelTransportExample.main(CamelTransportExample.java:32)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.codehaus.mojo.exec.ExecJavaMojo$1.run(ExecJavaMojo.java:283)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.xml.sax.SAXParseException; lineNumber: 39; columnNumber: 46; cvc-complex-type.3.2.2: Attribute 'ref' is not allowed to appear in element 'loadBalance'.
	at org.apache.xerces.util.ErrorHandlerWrapper.createSAXParseException(Unknown Source)
	at org.apache.xerces.util.ErrorHandlerWrapper.error(Unknown Source)
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator$XSIErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.reportSchemaError(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.processAttributes(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.handleStartElement(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.startElement(Unknown Source)
	at org.apache.xerces.impl.XMLNSDocumentScannerImpl.scanStartElement(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher.dispatch(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument(Unknown Source)
	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
	at org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
	at org.apache.xerces.parsers.DOMParser.parse(Unknown Source)
	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source)
	at org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(DefaultDocumentLoader.java:76)
	at org.apache.cxf.bus.spring.TunedDocumentLoader.loadDocument(TunedDocumentLoader.java:116)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadDocument(XmlBeanDefinitionReader.java:429)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:391)
	... 31 more
[t.CamelTransportExample.main()] SpringBusFactory               WARN  Failed to create application context.
org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 39 in XML document from class path resource [org/apache/camel/example/camel/transport/CamelDestination.xml] is invalid; nested exception is org.xml.sax.SAXParseException; lineNumber: 39; columnNumber: 46; cvc-complex-type.3.2.2: Attribute 'ref' is not allowed to appear in element 'loadBalance'.
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:399)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader.doLoadBeanDefinitions(ControlledValidationXmlBeanDefinitionReader.java:115)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:336)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader.internalLoadBeanDefinitions(ControlledValidationXmlBeanDefinitionReader.java:154)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader.access$000(ControlledValidationXmlBeanDefinitionReader.java:66)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader$1.run(ControlledValidationXmlBeanDefinitionReader.java:141)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader$1.run(ControlledValidationXmlBeanDefinitionReader.java:139)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader.loadBeanDefinitions(ControlledValidationXmlBeanDefinitionReader.java:139)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:304)
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:181)
	at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:123)
	at org.apache.cxf.bus.spring.BusApplicationContext.loadBeanDefinitions(BusApplicationContext.java:334)
	at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:129)
	at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:608)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:509)
	at org.apache.cxf.bus.spring.BusApplicationContext$1.run(BusApplicationContext.java:106)
	at org.apache.cxf.bus.spring.BusApplicationContext$1.run(BusApplicationContext.java:104)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.cxf.bus.spring.BusApplicationContext.<init>(BusApplicationContext.java:104)
	at org.apache.cxf.bus.spring.SpringBusFactory.createApplicationContext(SpringBusFactory.java:157)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:148)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:124)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:94)
	at org.apache.camel.example.camel.transport.Server.prepare(Server.java:38)
	at org.apache.camel.example.camel.transport.CamelTransportExample.main(CamelTransportExample.java:32)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.codehaus.mojo.exec.ExecJavaMojo$1.run(ExecJavaMojo.java:283)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.xml.sax.SAXParseException; lineNumber: 39; columnNumber: 46; cvc-complex-type.3.2.2: Attribute 'ref' is not allowed to appear in element 'loadBalance'.
	at org.apache.xerces.util.ErrorHandlerWrapper.createSAXParseException(Unknown Source)
	at org.apache.xerces.util.ErrorHandlerWrapper.error(Unknown Source)
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator$XSIErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.reportSchemaError(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.processAttributes(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.handleStartElement(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.startElement(Unknown Source)
	at org.apache.xerces.impl.XMLNSDocumentScannerImpl.scanStartElement(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher.dispatch(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument(Unknown Source)
	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
	at org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
	at org.apache.xerces.parsers.DOMParser.parse(Unknown Source)
	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source)
	at org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(DefaultDocumentLoader.java:76)
	at org.apache.cxf.bus.spring.TunedDocumentLoader.loadDocument(TunedDocumentLoader.java:116)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadDocument(XmlBeanDefinitionReader.java:429)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:391)
	... 31 more
java.lang.RuntimeException: org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 39 in XML document from class path resource [org/apache/camel/example/camel/transport/CamelDestination.xml] is invalid; nested exception is org.xml.sax.SAXParseException; lineNumber: 39; columnNumber: 46; cvc-complex-type.3.2.2: Attribute 'ref' is not allowed to appear in element 'loadBalance'.
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:151)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:124)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:94)
	at org.apache.camel.example.camel.transport.Server.prepare(Server.java:38)
	at org.apache.camel.example.camel.transport.CamelTransportExample.main(CamelTransportExample.java:32)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.codehaus.mojo.exec.ExecJavaMojo$1.run(ExecJavaMojo.java:283)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 39 in XML document from class path resource [org/apache/camel/example/camel/transport/CamelDestination.xml] is invalid; nested exception is org.xml.sax.SAXParseException; lineNumber: 39; columnNumber: 46; cvc-complex-type.3.2.2: Attribute 'ref' is not allowed to appear in element 'loadBalance'.
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:399)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader.doLoadBeanDefinitions(ControlledValidationXmlBeanDefinitionReader.java:115)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:336)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader.internalLoadBeanDefinitions(ControlledValidationXmlBeanDefinitionReader.java:154)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader.access$000(ControlledValidationXmlBeanDefinitionReader.java:66)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader$1.run(ControlledValidationXmlBeanDefinitionReader.java:141)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader$1.run(ControlledValidationXmlBeanDefinitionReader.java:139)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader.loadBeanDefinitions(ControlledValidationXmlBeanDefinitionReader.java:139)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:304)
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:181)
	at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:123)
	at org.apache.cxf.bus.spring.BusApplicationContext.loadBeanDefinitions(BusApplicationContext.java:334)
	at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:129)
	at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:608)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:509)
	at org.apache.cxf.bus.spring.BusApplicationContext$1.run(BusApplicationContext.java:106)
	at org.apache.cxf.bus.spring.BusApplicationContext$1.run(BusApplicationContext.java:104)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.cxf.bus.spring.BusApplicationContext.<init>(BusApplicationContext.java:104)
	at org.apache.cxf.bus.spring.SpringBusFactory.createApplicationContext(SpringBusFactory.java:157)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:148)
	... 10 more
Caused by: org.xml.sax.SAXParseException; lineNumber: 39; columnNumber: 46; cvc-complex-type.3.2.2: Attribute 'ref' is not allowed to appear in element 'loadBalance'.
	at org.apache.xerces.util.ErrorHandlerWrapper.createSAXParseException(Unknown Source)
	at org.apache.xerces.util.ErrorHandlerWrapper.error(Unknown Source)
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator$XSIErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.reportSchemaError(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.processAttributes(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.handleStartElement(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.startElement(Unknown Source)
	at org.apache.xerces.impl.XMLNSDocumentScannerImpl.scanStartElement(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher.dispatch(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument(Unknown Source)
	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
	at org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
	at org.apache.xerces.parsers.DOMParser.parse(Unknown Source)
	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source)
	at org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(DefaultDocumentLoader.java:76)
	at org.apache.cxf.bus.spring.TunedDocumentLoader.loadDocument(TunedDocumentLoader.java:116)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadDocument(XmlBeanDefinitionReader.java:429)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:391)
	... 31 more","githubbot:1450681688:2015-12-21T15:08:08.506+0000:1450681688:2015-12-21T15:08:08.506+0000:GitHub user gautric opened a pull request:

    https://github.com/apache/camel/pull/741

    CAMEL-9438 - Unable to use camel-example-cxf

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gautric/camel CAMEL-9438

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/741.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #741
    
----
commit 63166acdf907d31c96fc9ee8fdf68ba6b7bf62fa
Author: gautric <gautric@redhat.com>
Date:   2015-12-21T15:07:35Z

    CAMEL-9438 - Unable to use camel-example-cxf

----

gautric:1450681761:2015-12-21T15:09:21.172+0000:1450681761:2015-12-21T15:09:21.172+0000:got this correct output after changes 


[mbp:~/Source/git/camel/examples/camel-example-cxf]$> mvn exec:java -PCamelTransport 
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Example :: CXF 2.17-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] >>> exec-maven-plugin:1.1.1:java (default-cli) > validate @ camel-example-cxf >>>
[INFO] 
[INFO] --- maven-enforcer-plugin:1.4:enforce (enforce-maven) @ camel-example-cxf ---
[INFO] 
[INFO] --- maven-bundle-plugin:2.3.7:cleanVersions (versions) @ camel-example-cxf ---
[INFO] 
[INFO] <<< exec-maven-plugin:1.1.1:java (default-cli) < validate @ camel-example-cxf <<<
[INFO] 
[INFO] --- exec-maven-plugin:1.1.1:java (default-cli) @ camel-example-cxf ---
[t.CamelTransportExample.main()] BusApplicationContext          INFO  Refreshing org.apache.cxf.bus.spring.BusApplicationContext@2927491d: startup date [Mon Dec 21 16:08:21 CET 2015]; root of context hierarchy
[t.CamelTransportExample.main()] BusApplicationContext          INFO  Loaded configuration file /org/apache/camel/example/camel/transport/CamelDestination.xml.
[t.CamelTransportExample.main()] idationXmlBeanDefinitionReader INFO  Loading XML bean definitions from class path resource [META-INF/cxf/cxf.xml]
[t.CamelTransportExample.main()] idationXmlBeanDefinitionReader INFO  Loading XML bean definitions from class path resource [META-INF/cxf/camel/cxf-extension-camel.xml]
[t.CamelTransportExample.main()] idationXmlBeanDefinitionReader INFO  Loading XML bean definitions from class path resource [org/apache/camel/example/camel/transport/CamelDestination.xml]
[t.CamelTransportExample.main()] egate$BeanPostProcessorChecker INFO  Bean 'cxf' of type [class org.apache.cxf.bus.spring.SpringBus] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[t.CamelTransportExample.main()] CamelContextFactoryBean        INFO  Bridging Camel and Spring property placeholder configurer with id: bridgePropertyPlaceholder
[t.CamelTransportExample.main()] DefaultTypeConverter           INFO  Loaded 205 type converters
[t.CamelTransportExample.main()] SpringCamelContext             INFO  Apache Camel 2.17-SNAPSHOT (CamelContext: dest_context) is starting
[t.CamelTransportExample.main()] ManagedManagementStrategy      INFO  JMX is enabled
[t.CamelTransportExample.main()] DefaultRuntimeEndpointRegistry INFO  Runtime endpoint registry is in extended mode gathering usage statistics of all incoming and outgoing endpoints (cache limit: 1000)
[t.CamelTransportExample.main()] SpringCamelContext             INFO  AllowUseOriginalMessage is enabled. If access to the original message is not needed, then its recommended to turn this option off as it may improve performance.
[t.CamelTransportExample.main()] SpringCamelContext             INFO  StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
[t.CamelTransportExample.main()] log                            INFO  Logging initialized @5211ms
[t.CamelTransportExample.main()] JettyHttpComponent             WARN  You use localhost interface! It means that no external connections will be available. Don't you want to use 0.0.0.0 instead (all network interfaces)? Endpoint[jetty:http://localhost:9001/GreeterContext/GreeterPort]
[t.CamelTransportExample.main()] JettyHttpComponent             INFO  Using default Jetty continuation timeout for: Endpoint[jetty:http://localhost:9001/GreeterContext/GreeterPort]
[t.CamelTransportExample.main()] Server                         INFO  jetty-9.2.11.v20150529
[t.CamelTransportExample.main()] AbstractHandler                WARN  No Server set for org.apache.camel.component.jetty.JettyHttpComponent$1@7e0b628b
[t.CamelTransportExample.main()] ContextHandler                 INFO  Started o.e.j.s.ServletContextHandler@1c948edc{/,null,AVAILABLE}
[t.CamelTransportExample.main()] ServerConnector                INFO  Started ServerConnector@6f45eca3{HTTP/1.1}{localhost:9001}
[t.CamelTransportExample.main()] Server                         INFO  Started @5317ms
[t.CamelTransportExample.main()] SpringCamelContext             INFO  Route: route1 started and consuming from: Endpoint[jetty:http://localhost:9001/GreeterContext/GreeterPort]
[t.CamelTransportExample.main()] SpringCamelContext             INFO  Total 1 routes, of which 1 is started.
[t.CamelTransportExample.main()] SpringCamelContext             INFO  Apache Camel 2.17-SNAPSHOT (CamelContext: dest_context) started in 0.404 seconds
Starting Server
[t.CamelTransportExample.main()] ReflectionServiceFactoryBean   INFO  Creating Service {http://apache.org/hello_world_soap_http}CamelService from class org.apache.hello_world_soap_http.Greeter
[t.CamelTransportExample.main()] ServerImpl                     INFO  Setting the server's publish address to be camel://direct:EndpointA
[t.CamelTransportExample.main()] ReflectionServiceFactoryBean   INFO  Creating Service {http://apache.org/hello_world_soap_http}CamelService from class org.apache.hello_world_soap_http.Greeter
[t.CamelTransportExample.main()] ServerImpl                     INFO  Setting the server's publish address to be camel://direct:EndpointB
Acquiring router port ...
[t.CamelTransportExample.main()] ReflectionServiceFactoryBean   INFO  Creating Service {http://apache.org/hello_world_soap_http}CamelService from class org.apache.hello_world_soap_http.Greeter
Invoking sayHi...
[               qtp219563892-16] GreeterImpl                    INFO  Executing operation sayHi
Executing operation sayHi

Server responded with: Bonjour from EndpointA

Invoking greetMe... with Mike
[               qtp219563892-17] GreeterImpl                    INFO  Executing operation greetMe
Executing operation greetMe
Message received: Mike

Server responded with: Hello Mike from EndpointB

Invoking greetMe... with James
[               qtp219563892-18] GreeterImpl                    INFO  Executing operation greetMe
Executing operation greetMe
Message received: James

Server responded with: Hello James from EndpointA

Invoking greetMeOneWay...
[           default-workqueue-1] GreeterImpl                    INFO  Executing operation greetMeOneWay
Executing operation greetMeOneWay

Hello there gautric
No response from server as method is OneWay

Invoking pingMe, expecting exception...
[               qtp219563892-20] GreeterImpl                    INFO  Executing operation pingMe, throwing PingMeFault exception, message = hello
Executing operation pingMe, throwing PingMeFault exception

[               qtp219563892-20] PhaseInterceptorChain          INFO  Application {http://apache.org/hello_world_soap_http}CamelService#{http://apache.org/hello_world_soap_http}pingMe has thrown exception, unwinding now: org.apache.hello_world_soap_http.PingMeFault: PingMeFault raised by server EndpointA
Expected exception: PingMeFault has occurred: PingMeFault raised by server EndpointA
FaultDetail major:2
FaultDetail minor:1
[
githubbot:1450682651:2015-12-21T15:24:11.135+0000:1450682651:2015-12-21T15:24:11.135+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/741
"
0,CAMEL-9437,Improvement,Minor,None,"2.16.2, 2.17.0","
None
",Resolved,Fixed,"2.16.2, 2.17.0",Claus Ibsen,Luca Burgazzoli,0,3,2015-12-21 13:36:28+00:00,2015-12-21 14:38:49+00:00,"The .to element of route definition generated by camel-api-component-maven-plugin is not properly indented and that triggers checkstyle violations.


I'll provide a PR.","githubbot:1450676300:2015-12-21T13:38:20.906+0000:1450676300:2015-12-21T13:38:20.906+0000:GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/740

    [CAMEL-9437] Fix checkstyle indentation violation for generated API test cases

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel api-generator-codestyle

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/740.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #740
    
----
commit b7f4e7ac288c93b5ebbb77560ce02c9f513cead7
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2015-12-21T13:37:01Z

    [CAMEL-9437] Fix checkstyle indentation violation for generated API test cases

----

githubbot:1450679609:2015-12-21T14:33:29.324+0000:1450679609:2015-12-21T14:33:29.324+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/740

davsclaus:1450679929:2015-12-21T14:38:49.959+0000:1450679929:2015-12-21T14:38:49.959+0000:Thanks for the PR"
0,CAMEL-9436,Improvement,Major,None,"2.16.2, 2.17.0","
None
",Resolved,Fixed,"2.16.2, 2.17.0",Claus Ibsen,Claus Ibsen,0,1,2015-12-21 11:53:20+00:00,2015-12-28 13:05:19+00:00,"For example to add activemq-camel to include activemq, and then what extra components end user may develop and use in-house.


They should be able to add easily to the camel-catalog so they are first-class citizen in the catalog too.",
0,CAMEL-9435,Bug,Major,2.14.1,,"
None
",Resolved,Invalid,None,Claus Ibsen,sunil,0,2,2015-12-21 06:13:38+00:00,2015-12-21 06:57:23+00:00,"I have written a test case as shown below. Though there are no system level dependencies, This case case never fails in my system but it fails in all other systems.



@Test
    public void testSOTBlock() throws Exception {
        context.getRouteDefinitions().get(0).adviceWith(context, new AdviceWithRouteBuilder() {

            @Override
            public void configure() throws Exception {
                interceptSendToEndpoint(""file://*"").skipSendToOriginalEndpoint().to(""mock:file"");
            }
        });

        MockEndpoint mock = getMockEndpoint(""mock:file"");
        mock.expectedBodiesReceived(Arrays.asList(""SOS:1;1;T00001;;5.00;;JANE;0;;0;;123456\r\n""));

        StartOfTransaction startOfSale = new StartOfTransaction(purchase, 1, 1, 1);
        template.sendBodyAndHeader(""direct:toSOT"", startOfSale, ""flightKey"", 123456);
        assertMockEndpointsSatisfied();
    }




Below is the test case error log.



org.apache.camel.FailedToCreateRouteException: Failed to create route route17: Route(route17)[[From[no uri or ref supplied!]] -> [process[c... because of Either 'uri' or 'ref' must be specified on: org.apache.camel.impl.DefaultRouteContext@a7720c2
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:192)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:805)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:2174)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1906)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1767)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1735)
	at org.apache.camel.test.junit4.CamelTestSupport.startCamelContext(CamelTestSupport.java:477)
	at org.apache.camel.test.junit4.CamelTestSupport.doSetUp(CamelTestSupport.java:311)
	at org.apache.camel.test.junit4.CamelTestSupport.setUp(CamelTestSupport.java:217)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: java.lang.IllegalArgumentException: Either 'uri' or 'ref' must be specified on: org.apache.camel.impl.DefaultRouteContext@a7720c2
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:135)
	at org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:72)
	at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:89)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:923)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:187)
	... 36 more","davsclaus:1450651090:2015-12-21T06:38:10.729+0000:1450651090:2015-12-21T06:38:10.729+0000:Use the user mailing list / user forum to get help first as said here
http://camel.apache.org/support.html
sunil4uing:1450652243:2015-12-21T06:57:23.871+0000:1450652243:2015-12-21T06:57:23.871+0000:Thanks."
0,CAMEL-9434,Improvement,Major,None,"2.16.2, 2.17.0","
None
",Resolved,Fixed,"2.16.2, 2.17.0",Claus Ibsen,Claus Ibsen,0,1,2015-12-20 12:29:41+00:00,2015-12-23 11:45:39+00:00,"We could add an optional module to use lucene spell checker to provide suggestions if people make a mistype in an endpoint uri option.


We could make a camel-catalog-lucene module or something that is optional to include, and if present then the validator can leverage it to get suggestions that it can report back.","davsclaus:1450585825:2015-12-20T12:30:25.437+0000:1450585825:2015-12-20T12:30:25.437+0000:There is maybe never blog posts but something along the lines of
http://www.javacodegeeks.com/2010/05/did-you-mean-feature-lucene-spell.html
davsclaus:1450842339:2015-12-23T11:45:39.009+0000:1450842339:2015-12-23T11:45:39.009+0000:There is a camel-catalog-lucene that has a implementation"
0,CAMEL-9433,Task,Minor,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Pascal Schumacher,0,2,2015-12-18 20:01:33+00:00,2015-12-20 08:54:15+00:00,No Desc,"githubbot:1450444766:2015-12-18T21:19:26.195+0000:1450444766:2015-12-18T21:19:26.195+0000:GitHub user PascalSchumacher opened a pull request:

    https://github.com/apache/camel/pull/737

    CAMEL-9433: Update to javax-mail 1.5.5

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/PascalSchumacher/camel CAMEL-9433

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/737.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #737
    
----
commit d5e1551ee2e74c9e5c26afb589506de862f76e43
Author: Pascal Schumacher <pascalschumacher@gmx.net>
Date:   2015-12-18T20:15:31Z

    CAMEL-9433: Update to javax-mail 1.5.5

----

githubbot:1450486931:2015-12-19T09:02:11.149+0000:1450486931:2015-12-19T09:02:11.149+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/737

githubbot:1450491833:2015-12-19T10:23:53.672+0000:1450491833:2015-12-19T10:23:53.672+0000:GitHub user PascalSchumacher opened a pull request:

    https://github.com/apache/camel/pull/738

    CAMEL-9433: Upgrade java mail with new maven coord.

    Some things I noticed:
    
    camel-atom
    * axiom-api/axiom-impl do not have a (transitive) dependency on javax.mail anymore, but on geronimo-javamail_1.4_spec. Should that be excluded instead?
    * abdera-parser does not have a (transitive) dependency on javax.mail anymore (so exclusion is not necessary)
    
    camel-aws
    * aws-java-sdk does not have a (transitive) dependency on javax.mail anymore. Exclusion of transitive dependency and java-mail dependency is not necessary.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/PascalSchumacher/camel java_mail_coord

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/738.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #738
    
----
commit 79a2ad61ecef99de9618eadc9935568a2793e7f6
Author: Pascal Schumacher <pascalschumacher@gmx.net>
Date:   2015-12-19T10:19:12Z

    CAMEL-9433: Upgrade java mail with new maven coord.

----

githubbot:1450572855:2015-12-20T08:54:15.541+0000:1450572855:2015-12-20T08:54:15.541+0000:Github user PascalSchumacher closed the pull request at:

    https://github.com/apache/camel/pull/738
"
0,CAMEL-9432,Bug,Minor,2.16.1,"2.15.6, 2.16.3, 2.17.0","
None
",Resolved,Fixed,"2.15.6, 2.16.3, 2.17.0",Luca Burgazzoli,Jon Fields,0,2,2015-12-17 20:18:58+00:00,2016-02-25 09:45:54+00:00,"In the camel-bindy documentation (http://camel.apache.org/bindy.html) it says that the @CsvRecord separator parameter is interpreted as a regex. While that does seem to be the case when the record is being parsed, it seems to be treated as a literal string when autospanLine is true.


For example, if we have 



@CsvRecord(separator=""\\s+"", autospanLine=true)




 and we have defined three string @DataField fields, and we have a line of input like this:



     field1 field2 field3a field3b




then the third field value will be



    ""field3a\s+field3b""




Looking at the code in BindyCsvDataFormat.java it seems that this is because in some cases the separator string is treated as a literal string, not a regex. For example, this also seems to be true in some cases in the unquoteTokens method.","githubbot:1456291947:2016-02-24T13:32:27.919+0000:1456291947:2016-02-24T13:32:27.919+0000:GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/864

    CAMEL-9432 - Bindy CSV separator not treated as regex but fixed character in all cases

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel CAMEL-9432

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/864.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #864
    
----
commit e3608281e7b6767fb4ac5a008ec8189ddb9cbac9
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-02-24T13:31:46Z

    CAMEL-9432 - Bindy CSV separator not treated as regex but fixed character in all cases

----

githubbot:1456364754:2016-02-25T09:45:54.312+0000:1456364754:2016-02-25T09:45:54.312+0000:Github user lburgazzoli closed the pull request at:

    https://github.com/apache/camel/pull/864
"
0,CAMEL-9431,Bug,Minor,2.16.1,"2.16.3, 2.17.0","
None
",Resolved,Fixed,"2.16.3, 2.17.0",Claus Ibsen,Laurent Chiarello,0,2,2015-12-17 14:12:50+00:00,2017-05-19 09:20:51+00:00,"When using autoconfiguration provided by the camel-spring-boot artifact,  a TypeConverter bean is automatically registered into the Spring context: 


TypeConversionConfiguration.java
@Bean
TypeConverter typeConverter(CamelContext camelContext) {
    return camelContext.getTypeConverter();
}




The returned bean is an instance of DefaultTypeConverter, which in turn implements ServiceSupport and its method public void shutdown(). This method is infered as a destroy-method by Spring, and called during the shutdown of the ApplicationContext. 


As a consequence, the TypeConverter will be destroyed before the CamelContext, effectively preventing any type conversion support for the inflight messages that have still to be processed during the graceful shutdown period of Camel. 


AFAIK the simple fix would be to disable the destroy-method inference using @Bean(destroyMethod=""""). This will let Camel have a chance to perform a clean shutdown in the right sequence. 


As a workaround, it is possible to entirely disable the registration of the type converter in Spring using the property
camel.springboot.type-conversion = false","lchdev:1450332815:2015-12-17T14:13:35.939+0000:1450332815:2015-12-17T14:13:35.939+0000:Attached a JUnit Test Case to demonstrate the bug
davsclaus:1454206658:2016-01-31T10:17:38.623+0000:1454206658:2016-01-31T10:17:38.623+0000:Can you try with Camel 2.16.2
lchdev:1454285733:2016-02-01T08:15:33.166+0000:1454285733:2016-02-01T08:15:33.166+0000:Same issue with {{2.16.2}}
davsclaus:1454980624:2016-02-09T09:17:04.261+0000:1454980624:2016-02-09T09:17:04.261+0000:Can you attach a modified version of the unit test that do not have that (c) notice, eg we cannot accept and use this at ASF.
lchdev:1454983290:2016-02-09T10:01:30.824+0000:1454983290:2016-02-09T10:01:30.824+0000:Reupload test case without copyright notice
davsclaus:1455084249:2016-02-10T14:04:09.220+0000:1455084249:2016-02-10T14:04:09.220+0000:Thanks for reporting and with the suggested solution and the unit test."
0,CAMEL-9430,New Feature,Major,None,None,"
None
",Resolved,Fixed,2.17.0,Luca Burgazzoli,Luca Burgazzoli,0,2,2015-12-17 12:41:38+00:00,2016-02-18 10:04:58+00:00,"I've been working on a new Apache Camel component which provides support for Braintree Payments gateway [1]. 
Braintree lets you acees to payment systems like PayPay (they are a PayPal company) , Apple Pay, Android Pay through an unified gateway and SDK


The component is available on my github profile [2].  and supports almost all the APIs Braintree' sdk provides [3][4] and I'm currently working to add tests cases where it make sense.


I would like to get feedback from the community to improve it and to get it included in official Apache Camel components.


Cheers,
Luca


[1] https://www.braintreepayments.com
[2] https://github.com/lburgazzoli/camel-braintree
[3] https://developers.braintreepayments.com/
[4] https://github.com/braintree/braintree_java/","githubbot:1452129341:2016-01-07T09:15:41.301+0000:1452129341:2016-01-07T09:15:41.301+0000:GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/756

    CAMEL-9430 Create camel-component for braintreepayments

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel CAMEL-9430-braintreepayments

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/756.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #756
    
----
commit 4bc4b1f9fcfd18f68cec52e45bc4c0f22f2b2e57
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-01-07T09:04:29Z

    CAMEL-9430 Create camel-component for braintreepayments

----

githubbot:1452246819:2016-01-08T17:53:39.417+0000:1452246819:2016-01-08T17:53:39.417+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/756

githubbot:1452497029:2016-01-11T15:23:49.304+0000:1452497029:2016-01-11T15:23:49.304+0000:GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/762

    CAMEL-9430 : camel-braintree feature definition

    Add feature definition for amel-braintree component

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel CAMEL-9430-camel-braintree

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/762.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #762
    
----
commit 900fcf29e5ab7e51fbb59dad9ee5a9982708798d
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-01-11T15:21:57Z

    CAMEL-9430 : camel-braintree feature definition

----

githubbot:1452561136:2016-01-12T09:12:16.554+0000:1452561136:2016-01-12T09:12:16.554+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/762

githubbot:1455067026:2016-02-10T09:17:06.333+0000:1455067026:2016-02-10T09:17:06.333+0000:GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/834

    CAMEL-9430 - improvements to camel-braintree component

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel CAMEL-9430

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/834.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #834
    
----
commit c653560badeebcca114fac64d07a1ddc11025241
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-02-10T09:15:26Z

    CAMEL-9430 - Add proxy support

commit 821e9f48ba3b5f0516c839d6a794d4ad6c3a0f13
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-02-10T09:15:44Z

    CAMEL-9430 - Removed unused imports

----

githubbot:1455071469:2016-02-10T10:31:09.166+0000:1455071469:2016-02-10T10:31:09.166+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/834

githubbot:1455334657:2016-02-13T11:37:37.879+0000:1455334657:2016-02-13T11:37:37.879+0000:GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/839

    CAMEL-9430 - upgrade camel-braintree

    - upgrade braintree-java SDK to 2.55.0
    - remove ServiceMix bundle has 2.55.0 has [OSGi support](https://github.com/braintree/braintree_java/pull/30)

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel CAMEL-9430-sdk-2.55.0

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/839.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #839
    
----
commit 94934bc41b9ce0c50bf7f63b00835ce59cbbcb15
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-02-13T11:33:58Z

    CAMEL-9430 - upgrade braintree sdk to 2.55.0, remove ServiceMix bundle has 2.55.0 has OSGi meta-data

----

githubbot:1455496667:2016-02-15T08:37:47.802+0000:1455496667:2016-02-15T08:37:47.802+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/839

githubbot:1455599554:2016-02-16T13:12:34.222+0000:1455599554:2016-02-16T13:12:34.222+0000:GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/842

    CAMEL-9430 - mark braintree javadoc as optional

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel CAMEL-9430

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/842.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #842
    
----
commit 0e175e3bca49bfc16104cb339834b43da050308d
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-02-16T13:09:37Z

    CAMEL-9430 - mark braintree javadoc as optional

----

githubbot:1455668899:2016-02-17T08:28:19.330+0000:1455668899:2016-02-17T08:28:19.330+0000:Github user lburgazzoli closed the pull request at:

    https://github.com/apache/camel/pull/842
"
0,CAMEL-9429,Task,Minor,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Claus Ibsen,0,1,2015-12-16 15:24:16+00:00,2016-02-11 11:28:24+00:00,"When updating then do as dejan says here


Hi Claus, 


I implemented a fix for this in 
https://issues.apache.org/jira/browse/AMQ-6077. If you can give it a look 
and see if anything else is missing, it would greatly appreciated. 


Here are the proposed changes to the Camel once we have 5.13.1 release 
https://github.com/dejanb/camel/commit/6c942f4bac18ab84c76411515d1e87caaf7705a4


BTW. We should change version of the current master to 5.14-SNAPSHOT now 
that 5.13.0 is out. 


Regards 
– 
Dejan Bosanac 
about.me/dejanb 


Also I think the examples such as the spring jms remoting is affecteted if it sends objects over the wire
https://github.com/apache/camel/tree/master/examples/camel-example-spring-jms","davsclaus:1450256845:2015-12-16T17:07:25.851+0000:1450256845:2015-12-16T17:07:25.851+0000:And more docs here
http://activemq.apache.org/objectmessage.html#ObjectMessage-Clients
davsclaus:1454977670:2016-02-09T08:27:50.758+0000:1454977670:2016-02-09T08:27:50.758+0000:Anyone wanna contribute. The links above should have a proposal to fix this. Make sure to run all the unit tests of camel-jms to make sure it all passes.

Also there is some JMS examples in the examples that may need a ""fix"" as well. And in the tests directory we have some JMS tests in tests/camel-itest

"
0,CAMEL-9428,Improvement,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,1,2015-12-16 13:50:08+00:00,2016-08-11 10:47:25+00:00,"We include a lot of details in camel-catalog. What is missing is the model of <camelContext> which we do not include today. We only include the eip models from camel-core. As <camelContext> is outside core in spring/blueprint, then we need to add some work in these modules to generate that model that the catalog can include.


When we have that we have everything covered.","davsclaus:1470820185:2016-08-10T17:09:45.790+0000:1470883637:2016-08-11T10:47:17.191+0000:We now generate for camel-spring json schema for all the extra stuff.

We need to

- copy that into the camel-catalog *DONE*
- enrich the camel-spring XSD with the documentation now we have the details from the json schema *DONE*
- generate for camel-blueprint as well *DONE*

"
0,CAMEL-9427,Improvement,Major,2.16.1,"2.16.2, 2.17.0","
None
",Resolved,Fixed,"2.16.2, 2.17.0",Claus Ibsen,Claus Ibsen,0,1,2015-12-16 07:30:18+00:00,2015-12-16 07:56:36+00:00,It should also implement api consumer so you can use jetty to service api-docs when adding camel-swagger-java to the classpath. The other components support this already.,
0,CAMEL-9426,Bug,Major,2.16.1,"2.16.2, 2.17.0","
None
",Resolved,Fixed,"2.16.2, 2.17.0",Claus Ibsen,Jay mann,0,2,2015-12-16 00:15:08+00:00,2015-12-16 14:26:18+00:00,"Spring-boot + swagger throws exception when there is another RouteBuilder component present:


org.apache.camel.spring.boot.CamelSpringBootInitializationException: org.apache.camel.FailedToStartRouteException: Failed to start route route4 because of Multiple consumers for the same endpoint is not allowed: Endpointhttp://0.0.0.0:10000/api-doc?httpMethodRestrict=GET


I used the same example as CAMEL-9247 but added an empty RouteBuilder component (AnotherRouter.java)


This makes it so we cannot have more than one RouteBuilder in our app.


Example here:
https://github.com/jmandawg/camel-spring-boot-swagger-problem","davsclaus:1450225174:2015-12-16T08:19:34.690+0000:1450225174:2015-12-16T08:19:34.690+0000:Thanks for reporting and with the sample code. 

Btw you may want to rename that camel version placeholder to be camel instead of another animal name ;)
jmandawg:1450237526:2015-12-16T11:45:26.679+0000:1450246634:2015-12-16T14:17:14.941+0000:Ha ha I wasn't even thinking when I typed that placeholder.   We are actually trying to get rid of the million dollar animal.   :)
davsclaus:1450247178:2015-12-16T14:26:18.839+0000:1450247178:2015-12-16T14:26:18.839+0000:Yeah if its that expensive then there are other animals that are cheaper."
0,CAMEL-9425,Bug,Major,2.16.1,,"
None
",Closed,Not A Problem,None,Claus Ibsen,Christian Posta,0,2,2015-12-15 22:25:31+00:00,2015-12-16 18:02:04+00:00,"This affects camel-swagger-java
How do we add that component to the list?


For example, i am using camel-servlet to serve APIs at path ""foo""...


i then have rest().get(""/hello"")......


for the restConfiguration() I have 



        restConfiguration().component(""servlet"").bindingMode(RestBindingMode.json)
                .apiContextPath(""/api-doc"")
                .apiProperty(""api.title"", ""User API"")
                .apiProperty(""api.version"", ""1.2.3"")
                .apiProperty(""api.description"", ""REST API for controlling the jobs"")
                .apiProperty(""cors"", ""true"")
                .apiProperty(""base.path"", ""/camel"")
                .apiProperty(""schemas"", ""http"")
                .apiProperty(""host"", ""postamac.local"")




but when I hit /came/api-docs, the rest endpoints all omit the ""/camel"" base context path. 


what's the expected behavior here? I assumed that the schemes+host+base.path would allow me to override the base path. is this not the right assumption?


BTW... the prop name is ""schemas"" when it should be ""schemes"" ... we should change this to as expected, how do we do that in terms of backward compatibility? i can open another jira for that.","ceposta:1450189591:2015-12-15T22:26:31.329+0000:1450189591:2015-12-15T22:26:31.329+0000:Let me know what the expected behavior is here... we can update the logic in the RestSwaggerReader:

https://github.com/christian-posta/camel/blob/85391f67e3008e9af6307bd2c56008a05e061ba6/components/camel-swagger-java/src/main/java/org/apache/camel/swagger/RestSwaggerReader.java#L136-136
davsclaus:1450219177:2015-12-16T06:39:37.583+0000:1450219177:2015-12-16T06:39:37.583+0000:Yes for servlet this is expected. The base.path cannot change the base path of servlet. You configure the servlet component with the base path you want, and repeat that in the restConfiguration.
davsclaus:1450219315:2015-12-16T06:41:55.458+0000:1450219315:2015-12-16T06:41:55.458+0000:You need to configure the contextPath also, eg restConfiguration().component(""servlet"").contextPath(""camel"") if its the path you use for the rest's
davsclaus:1450221189:2015-12-16T07:13:09.383+0000:1450221189:2015-12-16T07:13:09.383+0000:And dont use the apiProperty but the right builder method, eg scheme, contextPath, host etc. the apiPropertry is only for ""api.xx"" options
davsclaus:1450221231:2015-12-16T07:13:51.651+0000:1450221231:2015-12-16T07:13:51.651+0000:Yeah you are welcome to log a JIRA about the schemes typo. We would need to deprecated the old method.
ceposta:1450260124:2015-12-16T18:02:04.456+0000:1450260124:2015-12-16T18:02:04.456+0000:Thx [~davsclaus], repeating the servlet config solved it"
0,CAMEL-9424,Bug,Major,"2.16.0, 2.16.1","2.16.2, 2.17.0","
None
",Resolved,Fixed,"2.16.2, 2.17.0",Claus Ibsen,Donovan Muller,0,4,2015-12-15 21:41:16+00:00,2015-12-16 11:51:27+00:00,"This commit created a regression whereby if you set both a start and a stop route time on a CronScheduledRoutePolicy, like:



CronScheduledRoutePolicy policy = new CronScheduledRoutePolicy();
policy.setRouteStartTime(""*/3 * * * * ?"");
policy.setRouteStopTime(""*/5 * * * * ?"");




then adding the Quartz triggers will fail because of duplicate trigger names.
Basically, the start and stop triggers will have the same name because of this line.



org.apache.camel.FailedToCreateRouteException: Failed to create route test: Route(test)[[From[direct:start]] -> [To[mock:success]]] because of org.quartz.ObjectAlreadyExistsException: Unable to store Trigger with name: 'trigger-START-test' and group: 'triggerGroup-test', because one already exists with this identification.

	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:201)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:949)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:3261)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:2984)
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:176)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2814)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2810)
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:2833)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:2810)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:2779)
	at org.apache.camel.routepolicy.quartz2.CronScheduledRoutePolicyTest.testScheduledStartAndStopRoutePolicy(CronScheduledRoutePolicyTest.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:117)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:234)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:74)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)
Caused by: org.apache.camel.RuntimeCamelException: org.quartz.ObjectAlreadyExistsException: Unable to store Trigger with name: 'trigger-START-test' and group: 'triggerGroup-test', because one already exists with this identification.
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1642)
	at org.apache.camel.routepolicy.quartz2.CronScheduledRoutePolicy.onInit(CronScheduledRoutePolicy.java:41)
	at org.apache.camel.impl.DefaultRouteContext.commit(DefaultRouteContext.java:220)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:1076)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:196)
	... 43 more
Caused by: org.quartz.ObjectAlreadyExistsException: Unable to store Trigger with name: 'trigger-START-test' and group: 'triggerGroup-test', because one already exists with this identification.
...","githubbot:1450192191:2015-12-15T23:09:51.296+0000:1450192191:2015-12-15T23:09:51.296+0000:GitHub user donovanmuller opened a pull request:

    https://github.com/apache/camel/pull/732

    CAMEL-9424 Correctly build TriggerKey using the trigger prefix releva…

    …nt to the Action. This fixes the fuplicate trigger name issue when setting both start and stop route times on a CronScheduledRoutePolicy.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/donovanmuller/camel CAMEL-9424

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/732.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #732
    
----
commit 5d5bcfada07ded8e46c27aa07d194e7e7eb555bb
Author: Donovan Muller <donovan.muller@gmail.com>
Date:   2015-12-15T22:56:44Z

    CAMEL-9424 Correctly build TriggerKey using the trigger prefix relevant to the Action. This fixes the fuplicate trigger name issue when setting both start and stop route times on a CronScheduledRoutePolicy.

----

donovanmuller1984:1450192379:2015-12-15T23:12:59.779+0000:1450192379:2015-12-15T23:12:59.779+0000:Provided fix on [this PR|https://github.com/apache/camel/pull/732]
davsclaus:1450221308:2015-12-16T07:15:08.882+0000:1450221308:2015-12-16T07:15:08.882+0000:Thanks for reporting and the PR
githubbot:1450237621:2015-12-16T11:47:01.159+0000:1450237621:2015-12-16T11:47:01.159+0000:Github user donovanmuller closed the pull request at:

    https://github.com/apache/camel/pull/732

donovanmuller:1450237887:2015-12-16T11:51:27.093+0000:1450237887:2015-12-16T11:51:27.093+0000:No problem. Glad to help."
0,CAMEL-9423,Bug,Trivial,2.16.1,"2.16.2, 2.17.0","
None
",Resolved,Fixed,"2.16.2, 2.17.0",Claus Ibsen,Miroslav Matejovsky,0,3,2015-12-15 18:50:27+00:00,2015-12-16 07:59:46+00:00,"just replace 



    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-restlet</artifactId>
    </dependency>




with



    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-restlet</artifactId>
      <scope>test</scope>
    </dependency>","davsclaus:1450218263:2015-12-16T06:24:23.128+0000:1450218263:2015-12-16T06:24:23.128+0000:Thanks a PR to fix this is welcome
http://camel.apache.org/contributing
githubbot:1450222425:2015-12-16T07:33:45.078+0000:1450222425:2015-12-16T07:33:45.078+0000:GitHub user bassmake opened a pull request:

    https://github.com/apache/camel/pull/733

    CAMEL-9423: changed scope to test for camel-restlet dependency

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/bassmake/camel CAMEL-9423

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/733.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #733
    
----
commit 88ee199b56d6b4c79d658c63ff6152d6ffacbc70
Author: bsmk <miroslavmatejovsky@gmail.com>
Date:   2015-12-16T07:29:25Z

    CAMEL-9423: changed scope to test for camel-restlet dependency

----

githubbot:1450223986:2015-12-16T07:59:46.521+0000:1450223986:2015-12-16T07:59:46.521+0000:Github user bassmake closed the pull request at:

    https://github.com/apache/camel/pull/733
"
0,CAMEL-9422,Bug,Major,None,,"
None
",Resolved,Not A Problem,None,Unassigned,Joseph Kampf,0,2,2015-12-15 15:49:59+00:00,2015-12-16 06:32:17+00:00,"I attempted to explicitly set the Service Factory as per the documentation found at: http://cxf.apache.org/docs/jax-ws-configuration.html.



	<cxf:cxfEndpoint id=""cxfBeanFromEndpoint""
		address=""${esbservices.proxy.baseurl}/path""
		serviceClass=""MyPortClass""
		endpointName=""s:completePort"" serviceName=""s:aria_complete_api""
		wsdlURL=""MyWsdl.wsdl""
		xmlns:s=""myNamespace"">
		<cxf:inInterceptors>
			<bean class=""org.apache.cxf.interceptor.LoggingInInterceptor"" />
		</cxf:inInterceptors>
		<cxf:outInterceptors>
			<bean class=""org.apache.cxf.interceptor.LoggingOutInterceptor"" />
		</cxf:outInterceptors>
		<cxf:serviceFactory>
			<bean class=""org.apache.cxf.jaxws.JaxWsServerFactoryBean"" />
		</cxf:serviceFactory>
	</cxf:cxfEndpoint>




When I deploy the bundle I get:



karaf@root()> Exception in thread ""SpringOsgiExtenderThread-50"" org.apache.camel.RuntimeCamelException: org.apache.camel.FailedToCreateRouteException: Failed to create route aria.esbservices.complete.soap.proxy: Route(aria.esbservices.complete.soap.proxy)[[From[cxf:bean:a... because of Failed to resolve endpoint: cxf://bean:cxfBeanFromEndpoint due to: Cannot lookup: cxfBeanFromEndpoint from registry: org.apache.camel.spring.spi.ApplicationContextRegistry@51cb33dc with expected type: class org.apache.camel.component.cxf.CxfEndpoint due: Error creating bean with name 'cxfBeanFromEndpoint': Error setting property values; nested exception is org.springframework.beans.NotWritablePropertyException: Invalid property 'serviceFactory' of bean class [org.apache.camel.component.cxf.CxfSpringEndpoint]: Bean property 'serviceFactory' is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1363)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:122)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:318)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:96)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:334)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:950)
	at org.springframework.osgi.context.support.AbstractOsgiBundleApplicationContext.finishRefresh(AbstractOsgiBundleApplicationContext.java:235)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$4.run(AbstractDelegatedExecutionApplicationContext.java:358)
	at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:320)
	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:132)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route aria.esbservices.complete.soap.proxy: Route(aria.esbservices.complete.soap.proxy)[[From[cxf:bean:a... because of Failed to resolve endpoint: cxf://bean:cxfBeanFromEndpoint due to: Cannot lookup: cxfBeanFromEndpoint from registry: org.apache.camel.spring.spi.ApplicationContextRegistry@51cb33dc with expected type: class org.apache.camel.component.cxf.CxfEndpoint due: Error creating bean with name 'cxfBeanFromEndpoint': Error setting property values; nested exception is org.springframework.beans.NotWritablePropertyException: Invalid property 'serviceFactory' of bean class [org.apache.camel.component.cxf.CxfSpringEndpoint]: Bean property 'serviceFactory' is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:180)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:780)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:2068)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1816)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1683)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1651)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:254)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:120)
	... 10 more
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: cxf://bean:cxfBeanFromEndpoint due to: Cannot lookup: cxfBeanFromEndpoint from registry: org.apache.camel.spring.spi.ApplicationContextRegistry@51cb33dc with expected type: class org.apache.camel.component.cxf.CxfEndpoint due: Error creating bean with name 'cxfBeanFromEndpoint': Error setting property values; nested exception is org.springframework.beans.NotWritablePropertyException: Invalid property 'serviceFactory' of bean class [org.apache.camel.component.cxf.CxfSpringEndpoint]: Bean property 'serviceFactory' is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:534)
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:71)
	at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:190)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:106)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:112)
	at org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:72)
	at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:88)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:888)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:175)
	... 18 more
Caused by: org.apache.camel.NoSuchBeanException: Cannot lookup: cxfBeanFromEndpoint from registry: org.apache.camel.spring.spi.ApplicationContextRegistry@51cb33dc with expected type: class org.apache.camel.component.cxf.CxfEndpoint due: Error creating bean with name 'cxfBeanFromEndpoint': Error setting property values; nested exception is org.springframework.beans.NotWritablePropertyException: Invalid property 'serviceFactory' of bean class [org.apache.camel.component.cxf.CxfSpringEndpoint]: Bean property 'serviceFactory' is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?
	at org.apache.camel.impl.CompositeRegistry.lookupByNameAndType(CompositeRegistry.java:62)
	at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookupByNameAndType(PropertyPlaceholderDelegateRegistry.java:63)
	at org.apache.camel.util.CamelContextHelper.lookup(CamelContextHelper.java:129)
	at org.apache.camel.util.CamelContextHelper.mandatoryLookup(CamelContextHelper.java:149)
	at org.apache.camel.component.cxf.CxfComponent.createEndpoint(CxfComponent.java:70)
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:123)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:514)
	... 26 more
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'cxfBeanFromEndpoint': Error setting property values; nested exception is org.springframework.beans.NotWritablePropertyException: Invalid property 'serviceFactory' of bean class [org.apache.camel.component.cxf.CxfSpringEndpoint]: Bean property 'serviceFactory' is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1455)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1123)
	at org.apache.camel.spring.spi.ApplicationContextRegistry.lookupByNameAndType(ApplicationContextRegistry.java:47)
	at org.apache.camel.impl.CompositeRegistry.lookupByNameAndType(CompositeRegistry.java:56)
	... 32 more
Caused by: org.springframework.beans.NotWritablePropertyException: Invalid property 'serviceFactory' of bean class [org.apache.camel.component.cxf.CxfSpringEndpoint]: Bean property 'serviceFactory' is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?
	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:1044)
	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:904)
	at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:75)
	at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:57)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1452)
	... 40 more","jkampf:1450167892:2015-12-15T16:24:52.816+0000:1450167892:2015-12-15T16:24:52.816+0000:I found an example XML in the camel-cxf/test/resources  GreeterEndpointsForProducer.xml   However I can't seem to find a unit test that uses it.

davsclaus:1450218728:2015-12-16T06:32:08.318+0000:1450218728:2015-12-16T06:32:08.318+0000:You should use the camel-cxf documentation
http://camel.apache.org/cxf

camel-cxf uses org.apache.cxf.jaxws.JaxWsServerFactoryBean which does not support that factory class option.

And you should use the user mailing list / user forum to get help first.
"
0,CAMEL-9421,Bug,Minor,2.13.3,,"
None
",Resolved,Cannot Reproduce,None,Unassigned,Joseph Kampf,0,3,2015-12-15 15:27:11+00:00,2020-01-21 16:46:04+00:00,"Clearing out the karaf/data/cache directory and then doing a fresh deploy of the Bundle works fine.  


However after restarting Karaf the org.apache.cxf.jaxws.JaxWsServerFactoryBean is not used by the CxfEndpoint.  Instead the org.apache.cxf.frontend.ServerFactoryBean is used.  This causes the mapping of WSDL Operations to SEI methods to not work.  


This results in error messages:



2015-12-15 09:51:18,729 | WARN  | xtenderThread-42 | ReflectionServiceFactoryBean     | 194 - org.apache.cxf.cxf-rt-core - 2.7.11 | No method was found for the WSDL operation <%WSDL Operation%>


It also causes the CXF page to not list the WSDL Operations under the SOAP Port.


The reason this is happening is because the annotations that are on the SEI class are proxied.  This causes the annotation check in org.apache.camel.component.cxf.CxfSpringEndpoint.createServerFactoryBean() to seem as if the SEI does not have the javax.jws.WebService annotation.


The annotation is on the list of annotations for the SEI, but they are proxied by sun.reflect.annotation.AnnotationInvocationHandler.


One solution I see would be to change the implementation of org.apache.camel.component.cxf.CxfEndpointUtils.hasAnnotation() method.  Instead of relying on Class.getAnnoation(), instead loop through the annotations on the class and not only check the annotation class directly, but also try to reach into the annotation to determine if it is a proxy of the annotation in question.","jkampf:1450181210:2015-12-15T20:06:50.659+0000:1450182155:2015-12-15T20:22:35.181+0000:I found that if I use the Data format of ""PAYLOAD"", I am able to get the correct Service Factory.  However that means my route needs to use a jaxbFormat to unmarshal and marshal the XML to the JaxWS classes.
davsclaus:1461813598:2016-04-28T11:19:58.480+0000:1461813598:2016-04-28T11:19:58.480+0000:This is an old version of Camel. Try with latest release.
davsclaus:1489109193:2017-03-10T09:26:33.455+0000:1489109193:2017-03-10T09:26:33.455+0000:Joseph do you have a sample project or unit test that reproduces this issue?
jkampf:1489124477:2017-03-10T13:41:17.429+0000:1489124477:2017-03-10T13:41:17.429+0000:[~davsclaus],  Sorry I do not.  We have been using the PAYLOAD dataformat and it is working.  We did upgrade to 2.15.4, but we did not convert back to try.


ffang:1559630931:2019-06-04T14:48:51.951+0000:1559630931:2019-06-04T14:48:51.951+0000:Hi [~jkampf],

If you have a reproducer project I'd like to take a close look.

Thanks!
Freeman"
0,CAMEL-9420,Task,Minor,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Greg A.,Greg A.,0,2,2015-12-15 11:07:57+00:00,2015-12-18 14:05:45+00:00,"We could use 
qos from endpoint or from exchange msg 
idem for rentained option","githubbot:1450149959:2015-12-15T11:25:59.860+0000:1450149959:2015-12-15T11:25:59.860+0000:GitHub user gautric opened a pull request:

    https://github.com/apache/camel/pull/730

    CAMEL-9420 camel-paho : provide dynamic qos and rentained option

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gautric/camel CAMEL-9420

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/730.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #730
    
----
commit 1ac16009ee9e5fa747624842fbb53b8bd5cfa52b
Author: gautric <gautric@redhat.com>
Date:   2015-12-15T11:18:16Z

    add Constant header

commit 2ddbce57113c58af54d27e6c71d95fa1ee6206d1
Author: gautric <gautric@redhat.com>
Date:   2015-12-15T11:23:37Z

    CAMEL-9420 camel-paho : provide dynamic qos and rentained option

----

githubbot:1450418669:2015-12-18T14:04:29.264+0000:1450418669:2015-12-18T14:04:29.264+0000:Github user gautric closed the pull request at:

    https://github.com/apache/camel/pull/730
"
0,CAMEL-9419,New Feature,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,2,2015-12-15 10:55:28+00:00,2016-06-08 11:52:29+00:00,"So you in the applicaition.properties etc can integrate with the camel catalog, so we can provide type safe options in SB and the tooling would use this out of the box.


http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-external-config-typesafe-configuration-properties


And make the type-safe options for configuring CamelContext itself, so you can configure options like tracing, shutdown timeout, and various others you may enable.


And also for JMX management etc.","davsclaus:1458520679:2016-03-21T08:37:59.512+0000:1458520679:2016-03-21T08:37:59.512+0000:I wonder if we could auto generate the schema file that spring boot uses. It would maybe be cool if the schema file was included in the component JARs out of the box.
davsclaus:1465198086:2016-06-06T15:28:06.494+0000:1465198086:2016-06-06T15:28:06.494+0000:The screenshot shows the AHC component with generated configuration from the spring boot APT. 

We are not there yet as ideally this should configure the AHC component with the options you configure, but Spring Boot rely on the class has ConfiguraitonProperties annotation and that is from spring boot JAR which we do not want as dependency on camel-ahc. 

So maybe we need to create -starter modules for the components where we can generate thin java source code and maven pom.xml files to include what we need for Spring Boot APT to generate its stuff.

Then spring boot users, just add camel-ahc-starter as module, and it has auto configuration enabled, and you can configure in the application.yml file.

We can then also try to do this on the endpoint level, so you can do

camel.component.ahc.allow-java-serialized-object=true
camel.endpoint.ahc.bufferSize=8192

We could then use this as a sort of default options for components/endpoints of that type.


davsclaus:1465198356:2016-06-06T15:32:36.436+0000:1465198356:2016-06-06T15:32:36.436+0000:There is also a ticket for spring-boot to improve its APT generator
https://github.com/spring-projects/spring-boot/issues/6119
davsclaus:1465279751:2016-06-07T14:09:11.649+0000:1465279751:2016-06-07T14:09:11.649+0000:camel-xmlbeans cannot be compiled with spring boot due a bug in their APT
https://github.com/spring-projects/spring-boot/issues/6122"
0,CAMEL-9418,New Feature,Minor,2.16.0,,"
None
",Resolved,Fixed,None,Andrea Cosentino,Randy Bowen,0,2,2015-12-14 23:18:56+00:00,2015-12-18 10:53:48+00:00,"As of version 1.16.0, the camel-elasticsearch component is hard-coded to set the client.transport.sniff setting for the ElasticSearch TransportClient to true.  This setting is problematic in some network topologies – for example, in a case where client nodes are accessible, but data and master nodes are hidden behind a firewall.


To eliminate this problem, make this setting accessible as an endpoint option.","acosentino:1450137794:2015-12-15T08:03:14.110+0000:1450137794:2015-12-15T08:03:14.110+0000:Implemented and committed.

I leave the ticket open because I have permissions problems on editing docs, actually."
0,CAMEL-9417,Bug,Minor,2.16.1,"2.16.2, 2.17.0","
None
",Resolved,Fixed,"2.16.2, 2.17.0",Claus Ibsen,Pascal Schumacher,0,3,2015-12-11 18:15:33+00:00,2015-12-14 07:57:39+00:00,"org.apache.camel.dataformat.soap.Soap12DataFormatAdapter#createExceptionFromFault uses org.w3._2003._05.soap_envelope.Reasontext#toString to generate the exception message, but Reasontext does not have a toString implementation, so it prints values like org.w3._2003._05.soap_envelope.Reasontext@2b6afea1 and the Reasontext value is lost. Reasontext#getValue which returns a human-readable string should be used instead.","githubbot:1449829136:2015-12-11T18:18:56.476+0000:1449829136:2015-12-11T18:18:56.476+0000:GitHub user PascalSchumacher opened a pull request:

    https://github.com/apache/camel/pull/726

    CAMEL-9417: SOAP 1.2 Fault processing should use value of Reasontext …

    …to build exception message

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/PascalSchumacher/camel CAMEL-9417

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/726.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #726
    
----
commit 7d8b40b1855e0be035b22988f0cf3177279aff1a
Author: Pascal Schumacher <pascalschumacher@gmx.net>
Date:   2015-12-11T18:18:13Z

    CAMEL-9417: SOAP 1.2 Fault processing should use value of Reasontext to build exception message

----

davsclaus:1450048325:2015-12-14T07:12:05.498+0000:1450048325:2015-12-14T07:12:05.498+0000:Thanks for the PR
githubbot:1450051059:2015-12-14T07:57:39.218+0000:1450051059:2015-12-14T07:57:39.218+0000:Github user PascalSchumacher closed the pull request at:

    https://github.com/apache/camel/pull/726
"
0,CAMEL-9416,New Feature,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Jamie Mark Goodyear,0,4,2015-12-11 17:44:19+00:00,2016-02-16 08:27:52+00:00,"The camel-mllp component is specifically designed to handle the nuances of the MLLP protocol and provide the functionality required by Healthcare providers to communicate with other systems using the MLLP protocol.


The component is capable of handling both byte[] and String payloads which allows using other HL7 Libraries (i.e. HAPI) to parse the messages. When String payloads are specified, the component will use the systems default Charset for encoding/decoding, but this can be overridden.


The component provides a simple URI for configuring MLLP endpoints: MLLP-Producers: to( ""mllp://:"" ) MLLP-Consumers: from(""mllp:// to listen on a specific address from(""mllp://port"") to listen on all local addresses


MLLP-Producers also interrogate the HL7 Acknowledgment received from the external system and if a negative acknowledgment is received, the producer sets an exception on the exchange indicating the type of negative acknowledgement that was received (i.e. a HL7 Application Reject Acknowledgement or a HL7 Application Error Acknowledgement). This enables the use of Camel Redelivery Policies to configure redelivery attempts and routing erroneous messages to alternate endpoints for analysis.


MLLP-Consumers will, by default, automatically generate an acknowledgement (a HL7 Application Accept Acknowledgment for successfully processed messages, or a HL7 Application Error Acknowledgement for messages where an exception is generated). This behaviour can be disabled with the autoAck=false URI parameter, which allows the user to generated their own HL7 Acknowledgment.


The component also provides a Camel Processor that is capable of generating HL7 Acknowledgements. Therefore, the HAPI is not required to generate HL7 Acknowledgements - however, it can be used if desired.
By default, the processor will generate a HL7 Application Accept Acknowledgement if there is not an exception on the Camel Exchange - otherwise it will generate a HL7 Application Error Acknowledgement. The generated acknowledgement is placed in the ""Out"" Message of the Exchange by default in order to preserve the original HL7 message for later processing (i.e. log the HL7 message and the acknowledgment together).


Since the MLLP protocol does not typically use a large number of concurrent connections, the camel-mllp component uses a simple thread-per-connection model based an standard Java Sockets. This keeps the implementation simple, and also eliminates the dependencies on other camel components.


An initial code base has been developed here:
https://github.com/hqstevenson/camel-mllp","hqstevenson:1449836023:2015-12-11T20:13:43.504+0000:1449836023:2015-12-11T20:13:43.504+0000:I would like to start on the documentation for the component - where can I find information on the documentation standards and the process for creating them?
davsclaus:1450085858:2015-12-14T17:37:38.628+0000:1450085858:2015-12-14T17:37:38.628+0000:Read here all about contributing
http://camel.apache.org/contributing

And developer new component guide
http://camel.apache.org/add-new-component-guide.html
jgoodyear:1450099349:2015-12-14T21:22:29.928+0000:1450099349:2015-12-14T21:22:29.928+0000:We've added a set of small patches for including Camel-MLLP as a new component inside of Camel:
https://github.com/hqstevenson/camel-mllp/tree/master/camelPatches

We're working upon documentation, and expanded test cases.
githubbot:1450703119:2015-12-21T21:05:19.810+0000:1450703119:2015-12-21T21:05:19.810+0000:GitHub user hqstevenson opened a pull request:

    https://github.com/apache/camel/pull/742

    CAMEL-9416 - Creation of camel-mllp component

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/hqstevenson/camel CAMEL-9416

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/742.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #742
    
----
commit c6ac1dcdc5c4595ad959642cb1d72bad418944a6
Author: hqstevenson <quinn@pronoia-solutions.com>
Date:   2015-12-04T19:17:12Z

    Initial commit

commit 84e66b4a2f454430d082368698c0fffc1bc017a4
Author: Quinn Stevenson <quinn@pronoia-solutions.com>
Date:   2015-12-04T19:21:54Z

    Initial commit

commit 7592b3d3f1e617d6b1f3b68e968b9e2cc0e83a7d
Author: Quinn Stevenson <quinn@pronoia-solutions.com>
Date:   2015-12-07T16:06:30Z

    Disabled came-package-maven-plugin for now since it breaks mvn install and I can't figure out how to make it happy

commit 5f58525f4f550dc605e93fb71c22696ab0083214
Author: Quinn Stevenson <quinn@pronoia-solutions.com>
Date:   2015-12-07T16:20:36Z

    Added ASF Headers

commit 597b1b6f22744d92caba77b5dbba1187d9e2516d
Author: Quinn Stevenson <quinn@pronoia-solutions.com>
Date:   2015-12-07T16:22:13Z

    Added exceptions for MLLP AE and AR Acknowlegements

commit b15da0cd473c294051e72c8b741fbd66beb5b338
Author: Jamie Goodyear <jamie.goodyear@gmail.com>
Date:   2015-12-07T17:40:18Z

    Update README.md

commit 05653d858c3f5c902d0ffb3816e8a5ecd32493e4
Author: Quinn Stevenson <quinn@pronoia-solutions.com>
Date:   2015-12-07T18:00:16Z

    Updated project to work with Camel build system

commit b31e0b3c3c46ff3722993676283abd275d1fde9e
Author: Quinn Stevenson <quinn@pronoia-solutions.com>
Date:   2015-12-07T18:00:40Z

    Merge branch 'master' of https://github.com/hqstevenson/camel-mllp

commit 0ab5a35a990a75497ef19b115de5916454fedd1a
Author: Quinn Stevenson <quinn@pronoia-solutions.com>
Date:   2015-12-07T18:04:40Z

    Removed Pronoia from test package names

commit 35dd62423ea9958256db4b4d9032e9db35136a69
Author: Quinn Stevenson <quinn@pronoia-solutions.com>
Date:   2015-12-07T18:16:11Z

    Copy/Paste error - changed twitter to mllp in POM

commit bda1a11e96a2ad74bf63ef5d470b26f1d1de954e
Author: Quinn Stevenson <quinn@pronoia-solutions.com>
Date:   2015-12-07T21:38:13Z

    Moved TCP MLLP operations to utility class

commit 3ef74ae69117e6bc3922000aa8d9cd6568b3081b
Author: Quinn Stevenson <quinn@pronoia-solutions.com>
Date:   2015-12-08T00:02:46Z

    Refactored Tests

commit 067f68809759e6122cf51b54502af3c1adf5327e
Author: Quinn Stevenson <quinn@pronoia-solutions.com>
Date:   2015-12-09T19:47:28Z

    Refactored TCP code to eliminate duplication

commit 5cf9b09667e2c4888935a1aca096cacd16cb44ae
Author: Quinn Stevenson <quinn@pronoia-solutions.com>
Date:   2015-12-09T21:09:10Z

    Producer now throws exceptions for negative acknowledgements

commit 498b7616f478c085afdf52aeb4656068d449491a
Author: Quinn Stevenson <quinn@pronoia-solutions.com>
Date:   2015-12-11T05:46:32Z

    Reworked MLLP code to include out-of-frame data in exceptions

commit 18be5a3cfd2bae90fad835d0dccf34b708582a47
Author: Quinn Stevenson <quinn@pronoia-solutions.com>
Date:   2015-12-11T07:38:55Z

    Updated the README.md with a description, rationalization and some MLLP background information

commit 180bee30b88f57cff1328ce0c8b7a02f01ad81b1
Author: Quinn Stevenson <quinn@pronoia-solutions.com>
Date:   2015-12-13T06:48:51Z

    Added an InputStream.available() check in the AcceptThread where it's checking for a load balancer probe

commit 4b38307ba1af34f7a72407c4e34cbba0a0dfb48e
Author: Quinn Stevenson <quinn@pronoia-solutions.com>
Date:   2015-12-13T08:49:00Z

    Cleaned-up some test code and added some javadocs

commit ba2733f00fceaba78f01f5152bdd18476db4a34a
Author: Quinn Stevenson <quinn@pronoia-solutions.com>
Date:   2015-12-13T17:58:07Z

    Refactored tests to use common test data, and added stubs for work in progress

commit c276934a366ec983d7c8c21baf568145c9ec5914
Author: Quinn Stevenson <quinn@pronoia-solutions.com>
Date:   2015-12-14T06:49:04Z

    Added shells for the basic RouteBuilders and Tests

commit 42fa8064a69de08eda7955581d267dc5cd8252be
Author: jgoodyear <jgoodyear@apache.org>
Date:   2015-12-14T18:54:39Z

    Updating to follow Camel 2.16.x branch version

commit ee3cac44f1e375a82e91ade0dd8bd2270e14e68a
Author: jgoodyear <jgoodyear@apache.org>
Date:   2015-12-14T19:30:59Z

    Updating pom to build OSGi friendly Camel-MLLP jar

commit c87ffdee9736cb780a65d73e770da3160e93353e
Author: jgoodyear <jgoodyear@apache.org>
Date:   2015-12-14T19:34:55Z

    Creating CamelPatches folder for assorted Apache Camel updates

commit a9c9f2e16b644e3f4e50642bf35a839bebec354d
Author: jgoodyear <jgoodyear@apache.org>
Date:   2015-12-14T19:38:28Z

    Adding listing for CamelPatches folder

commit d58014e2f0acd7876c4761cd26d5473140b2dcb0
Author: Quinn Stevenson <quinn@pronoia-solutions.com>
Date:   2015-12-14T19:45:43Z

    Updated readme and added some constants for Exchange property and Message header names

commit 4ee301b3e205e32deea1238b2c8fc688ce604580
Author: Quinn Stevenson <quinn@pronoia-solutions.com>
Date:   2015-12-14T19:45:47Z

    Merge branch 'master' of https://github.com/hqstevenson/camel-mllp

commit e68be1cfdf20ce53bf2b2e43191b05f6f3d005db
Author: jgoodyear <jgoodyear@apache.org>
Date:   2015-12-14T21:06:20Z

    Update for Camel's parent pom

commit ad976a54d189d6ff7ff61442baa168fea2eb271b
Author: jgoodyear <jgoodyear@apache.org>
Date:   2015-12-14T21:06:36Z

    Merge branch 'master' of https://github.com/hqstevenson/camel-mllp

commit a5828d1f30f5d633d3dca19810bf570b760a83ba
Author: jgoodyear <jgoodyear@apache.org>
Date:   2015-12-14T21:14:01Z

    Add component to distribution

commit 4df329d27e1bee407d6ed39892f8a1aafae733c6
Author: jgoodyear <jgoodyear@apache.org>
Date:   2015-12-14T21:15:06Z

    Update ReadMe file's info on common-bin.xml

----

githubbot:1451295831:2015-12-28T17:43:51.630+0000:1451295831:2015-12-28T17:43:51.630+0000:Github user hqstevenson closed the pull request at:

    https://github.com/apache/camel/pull/742

githubbot:1451299226:2015-12-28T18:40:26.406+0000:1451299226:2015-12-28T18:40:26.406+0000:GitHub user hqstevenson opened a pull request:

    https://github.com/apache/camel/pull/748

    CAMEL-9416 - Added camel-mllp component

    New PR with a single commit for the camel-mllp component

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/hqstevenson/camel CAMEL-9416

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/748.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #748
    
----
commit ad8a6981fa6bcbbe6d330778c133b13555774201
Author: Quinn Stevenson <quinn@pronoia-solutions.com>
Date:   2015-12-28T18:38:14Z

    Added camel-mllp component

----

githubbot:1451439423:2015-12-30T09:37:03.004+0000:1451439423:2015-12-30T09:37:03.004+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/748

davsclaus:1451439695:2015-12-30T09:41:35.785+0000:1451439695:2015-12-30T09:41:35.785+0000:Thanks [~hqstevenson]

I added some TODOs in the endpoint class for some things that could be good to resolve.
The PR has been merged to master branch.


hqstevenson:1451980994:2016-01-05T16:03:14.356+0000:1451980994:2016-01-05T16:03:14.356+0000:Thank you for the TODO's Claus - I'll get another PR or patch ready to address those ASAP.
hqstevenson:1451999607:2016-01-05T21:13:27.733+0000:1451999607:2016-01-05T21:13:27.733+0000:I addressed the TODOs and cleaned-up some documentation.  I also added support for Commit Acknowledgements in the Producer.

I think I mis-named the PR because it doesn't seem to have updated the JIRA ticket.  Here it is https://github.com/apache/camel/pull/754
"
0,CAMEL-9415,Task,Major,None,None,"
None
",Resolved,Won't Fix,"2.16.2, 2.17.0",Claus Ibsen,Claus Ibsen,0,1,2015-12-11 11:28:50+00:00,2015-12-11 11:57:03+00:00,"We should generate a ""none"" as the enum choice when its optional. Otherwise the enum choices make it appear that you must be one of them and therefore it becomes as mandatory option.


For example the auth for http has these 3 enums


    ""authMethodPriority"": 

{ ""kind"": ""parameter"", ""group"": ""producer"", ""label"": ""producer"", ""type"": ""string"", ""javaType"": ""java.lang.String"", ""enum"": [ ""Basic"", ""Digest"", ""NTLM"" ], ""deprecated"": ""false"", ""description"": ""Authentication method for proxy either as Basic Digest or NTLM."" }

,


But we should have ""none"" as the 1st choice to indicate its not in use","davsclaus:1449806223:2015-12-11T11:57:03.279+0000:1449806223:2015-12-11T11:57:03.279+0000:The semantics is right. Its maybe better to leave the enum as is, with possible choices. And then tooling should understand that if its not required field then the option can be empty."
0,CAMEL-9414,Task,Minor,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Luca Burgazzoli,0,3,2015-12-11 11:06:27+00:00,2016-01-08 17:38:01+00:00,"quickfixj 1.6.1 is now OSGi ready and available on marketcetera maven repo



  <repositories>
    <repository>
      <id>marketcetera</id>
      <url>http://repo.marketcetera.org/maven</url>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
    </repository>
  </repositories>




information about maven repo on h ttp://www.quickfixj.org/quickfixj/usermanual/1.5.3/installation.html)","githubbot:1449803347:2015-12-11T11:09:07.138+0000:1449803347:2015-12-11T11:09:07.138+0000:GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/725

    [CAMEL-9414] update quickfixj to v1.6.1

    quickfixj is now an OSGi bundle and available on marketcetera maven repo
    
    ```xml
      <repositories>
        <repository>
          <id>marketcetera</id>
          <url>http://repo.marketcetera.org/maven</url>
          <snapshots>
            <enabled>false</enabled>
          </snapshots>
        </repository>
      </repositories>
    ```

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel quickfixj-1.6.1

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/725.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #725
    
----
commit 2b40ed9aed1e3c82d911ba93063bfa48fb12fd80
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2015-12-11T11:06:37Z

    CAMEL-9414 : update quickfixj to v1.6.1

----

davsclaus:1451007843:2015-12-25T09:44:03.864+0000:1451007843:2015-12-25T09:44:03.864+0000:The word is that they want to publish the quickfix jar to maven central, so lets wait for that as we do not want to depend on 3rd part maven repos.
githubbot:1452209836:2016-01-08T07:37:16.440+0000:1452209836:2016-01-08T07:37:16.440+0000:Github user lburgazzoli closed the pull request at:

    https://github.com/apache/camel/pull/725

githubbot:1452210294:2016-01-08T07:44:54.363+0000:1452210294:2016-01-08T07:44:54.363+0000:GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/757

    [CAMEL-9414] update quickfixj to v1.6.1

    quickfix-j dependency updated to 1.6.1 using ServiceMix bundle [SM-2773](https://issues.apache.org/jira/browse/SM-2773)

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel quickfixj-1.6.1

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/757.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #757
    
----
commit e6519b46db3452ac9b87cb7809fb8e9f2c037f7f
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-01-08T07:43:13Z

    [CAMEL-9414] update quickfixj to v1.6.1

----

lb:1452210394:2016-01-08T07:46:34.618+0000:1452210394:2016-01-08T07:46:34.618+0000:Third party maven repo not needed
davsclaus:1452215781:2016-01-08T09:16:21.606+0000:1452215781:2016-01-08T09:16:21.606+0000:Thanks for the PR
githubbot:1452245881:2016-01-08T17:38:01.855+0000:1452245881:2016-01-08T17:38:01.855+0000:Github user lburgazzoli closed the pull request at:

    https://github.com/apache/camel/pull/757
"
0,CAMEL-9413,Task,Minor,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Greg A.,Claus Ibsen,0,1,2015-12-11 07:09:37+00:00,2016-02-21 08:01:51+00:00,"Some of the readme have instructions how to run or install in osgi etc. For that there is a ${version} placeholder. We should tell in the readme that the version should be what version of Camel is being used, eg 2.17.0 etc.",
0,CAMEL-9412,Task,Minor,2.17.0,2.17.0,"

doc

",Closed,Fixed,2.17.0,Greg A.,Greg A.,0,3,2015-12-10 18:17:34+00:00,2015-12-14 16:55:22+00:00,"fix some typo
correct url","githubbot:1449751849:2015-12-10T20:50:49.242+0000:1449751849:2015-12-10T20:50:49.242+0000:GitHub user gautric opened a pull request:

    https://github.com/apache/camel/pull/724

    CAMEL-9412 Correct camel-example-swagger-cdi documentation

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gautric/camel CAMEL-9412

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/724.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #724
    
----
commit f6de5e450bb7e7f9ba4d195fa52d2e81ca6afb7b
Author: gautric <gautric@redhat.com>
Date:   2015-12-10T20:42:12Z

    CAMEL-9412 Correct camel-example-swagger-cdi documentation

----

davsclaus:1449792033:2015-12-11T08:00:33.964+0000:1449792033:2015-12-11T08:00:33.964+0000:For simpler things like this a new JIRA is not needed. A PR is just fine.
githubbot:1450083322:2015-12-14T16:55:22.507+0000:1450083322:2015-12-14T16:55:22.507+0000:Github user gautric closed the pull request at:

    https://github.com/apache/camel/pull/724
"
0,CAMEL-9411,Bug,Trivial,2.17.0,None,"
None
",Closed,Fixed,2.17.0,Greg A.,Greg A.,0,2,2015-12-10 15:51:06+00:00,2015-12-14 16:55:30+00:00,"we could remove old stuff 


like README.txt replaced by README.md
and camel-example-servlet-rest-tomcat no longer use","githubbot:1449734157:2015-12-10T15:55:57.610+0000:1449734157:2015-12-10T15:55:57.610+0000:GitHub user gautric opened a pull request:

    https://github.com/apache/camel/pull/723

    CAMEL-9411 Remove old stuff

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gautric/camel CAMEL-9411

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/723.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #723
    
----
commit 998e69e9e943612efe2bd07276099e32bfc1329d
Author: gautric <gautric@redhat.com>
Date:   2015-12-10T15:55:03Z

    CAMEL-9411 Remove old stuff

----

githubbot:1450083330:2015-12-14T16:55:30.353+0000:1450083330:2015-12-14T16:55:30.353+0000:Github user gautric closed the pull request at:

    https://github.com/apache/camel/pull/723
"
0,CAMEL-9410,Improvement,Minor,2.16.1,"2.16.2, 2.17.0","
None
",Resolved,Fixed,"2.16.2, 2.17.0",Claus Ibsen,Claus Ibsen,0,1,2015-12-10 13:53:55+00:00,2015-12-10 14:00:27+00:00,should use port 80 or 443 by default if just http or https selected.,
0,CAMEL-9409,Improvement,Major,2.16.1,"2.16.2, 2.17.0","
None
",Resolved,Fixed,"2.16.2, 2.17.0",Claus Ibsen,Claus Ibsen,0,1,2015-12-10 10:21:11+00:00,2015-12-10 10:22:27+00:00,"wiretap in java dsl accepts only a string uri, but we should allow endpoint instance as well.",
0,CAMEL-9408,Improvement,Minor,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Luca Burgazzoli,0,3,2015-12-10 09:07:54+00:00,2015-12-10 14:19:06+00:00,"The code generated by camel-api-component-maven-plugin for ApiName can potentially generate excessive garbage if fromValue is invoked often, this is because:



enum::values() is not cached so it generates a new array for each call
new for style generates an iterator each time","githubbot:1449709743:2015-12-10T09:09:03.957+0000:1449709743:2015-12-10T09:09:03.957+0000:GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/720

    [CAMEL-9408] Reduce garbage in ApiName Enums

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel TOOLING-API-COMPONENT-GARBAGE

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/720.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #720
    
----
commit c973f5f97ba286c3fa89c0db77f4aad685e05a02
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2015-12-09T12:54:50Z

    Reduce garbage in ApiName Enums

----

davsclaus:1449711347:2015-12-10T09:35:47.905+0000:1449711347:2015-12-10T09:35:47.905+0000:Thanks for the PR
githubbot:1449728346:2015-12-10T14:19:06.744+0000:1449728346:2015-12-10T14:19:06.744+0000:Github user lburgazzoli closed the pull request at:

    https://github.com/apache/camel/pull/720
"
0,CAMEL-9407,Test,Minor,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Andrea Cosentino,Andrea Cosentino,0,1,2015-12-10 08:52:26+00:00,2015-12-10 09:04:06+00:00,"Actually the cluster tests are ignored. There is a nice library [1] that run an ES cluster easily: we can use it.


[1] https://github.com/codelibs/elasticsearch-cluster-runner",
0,CAMEL-9406,Bug,Minor,2.16.1,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Anthony Lau,2,2,2015-12-10 06:03:47+00:00,2015-12-25 09:55:36+00:00,"The reply will be a empty message.


When 
org.apache.camel.component.rabbitmq.reply.ReplyManagerSupport#processReply
calls
org.apache.camel.component.rabbitmq.RabbitMQEndpoint#setRabbitExchange


The method setRabbitExchange will get `In` message and setBody for reply message while the expected message is `Out`.",davsclaus:1451008536:2015-12-25T09:55:36.687+0000:1451008536:2015-12-25T09:55:36.687+0000:Thanks for reporting
0,CAMEL-9405,Bug,Major,"2.15.3, 2.16.0, 2.15.4, 2.16.1, 2.15.5","2.15.6, 2.16.2, 2.17.0","
None
",Resolved,Fixed,"2.15.6, 2.16.2, 2.17.0",Claus Ibsen,Stephen Souness,0,2,2015-12-09 22:59:35+00:00,2015-12-18 17:14:06+00:00,"After upgrading applications from Camel 2.15.2 to Camel 2.15.3 we noticed a change in behaviour around the handling of a message from an SQS queue when a processing stage throws an exception.


Previously the message would not be deleted, and would become available to the SQS again.


After the upgrade, messages are deleted even if an exception occurs during the processing stage.


I will attach a unit test which demonstrates the behaviour by:



including a mock process which throws an exception
asserting that there is no call to delete a message.



I believe that the commit which changed the behaviour is:
https://github.com/apache/camel/commit/bd10c49bdcdbe6181e35461c449ea61db9a13bf1


This issue may be specific to the inclusion of a seda stage.","sounie:1449673338:2015-12-09T23:02:18.339+0000:1449673338:2015-12-09T23:02:18.339+0000:Unit test demonstrating that deletion occurs.
sounie:1449674520:2015-12-09T23:22:00.614+0000:1449674520:2015-12-09T23:22:00.614+0000:The code change for CAMEL-9055 introduced this change in functionality.
davsclaus:1450429617:2015-12-18T17:06:57.771+0000:1450429617:2015-12-18T17:06:57.771+0000:Yeah lets rollback that other ticket."
0,CAMEL-9404,Task,Major,2.17.0,2.17.0,"
None
",Closed,Fixed,2.17.0,Greg A.,Greg A.,0,2,2015-12-09 21:25:27+00:00,2015-12-10 14:52:59+00:00,we could provide an Markdown readme file for top folder,"githubbot:1449669175:2015-12-09T21:52:55.743+0000:1449669175:2015-12-09T21:52:55.743+0000:GitHub user gautric opened a pull request:

    https://github.com/apache/camel/pull/719

    [CAMEL-9404] Create .MD Readme for top folder 

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gautric/camel CAMEL-9404

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/719.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #719
    
----
commit 806fd4909d5ce81812fb6d679e2c253d2d0cc36f
Author: gautric <gautric@redhat.com>
Date:   2015-10-05T10:45:06Z

    Merge remote-tracking branch 'apache/master'

commit 2393b7f9b21fc64a2f050fb25a82905a781da205
Author: gautric <gautric@redhat.com>
Date:   2015-10-15T08:48:02Z

    Merge remote-tracking branch 'apache/master'

commit 8cba36542699de00fad5bc89d6be99c3d8690218
Author: gautric <gautric@redhat.com>
Date:   2015-11-17T16:21:04Z

    Merge remote-tracking branch 'apache/master'

commit d20b2fc05be0e919532fa2b684b002f1c21e510e
Author: gautric <gautric@redhat.com>
Date:   2015-11-19T08:48:59Z

    Merge remote-tracking branch 'apache/master'

commit c749bdd1952e5029b26f9418c54e43540144de1d
Author: gautric <gautric@redhat.com>
Date:   2015-11-25T20:50:51Z

    Merge remote-tracking branch 'apache/master'

commit 2cb5433eaec76ce69877e7c08856772aafb8fa31
Author: gautric <gautric@redhat.com>
Date:   2015-12-02T12:03:23Z

    Merge remote-tracking branch 'apache/master'

commit ba7692cae5263572bad890106cff6e0510545cd2
Author: gautric <gautric@redhat.com>
Date:   2015-12-08T17:40:37Z

    Merge branch 'master' of https://github.com/apache/camel

commit d893404139c8820729cb2f4de20f8b0fcd5849f4
Author: gautric <gautric@redhat.com>
Date:   2015-12-09T21:35:14Z

    [CAMEL-9404] Create .MD Readme for top folder

----

githubbot:1449730379:2015-12-10T14:52:59.901+0000:1449730379:2015-12-10T14:52:59.901+0000:Github user gautric closed the pull request at:

    https://github.com/apache/camel/pull/719
"
0,CAMEL-9403,Task,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Claus Ibsen,0,1,2015-12-09 16:05:59+00:00,2015-12-11 07:59:44+00:00,"We should remove the camel-examples from the BOM. The examples are to be built from source, and its included in the .zip download.","davsclaus:1449791984:2015-12-11T07:59:44.796+0000:1449791984:2015-12-11T07:59:44.796+0000:We also only had some of the examples in the bom, not all of them."
0,CAMEL-9402,Task,Major,2.16.1,None,"
None
",Resolved,Fixed,"2.16.2, 2.17.0",Claus Ibsen,Mark Symons,0,2,2015-12-09 13:02:05+00:00,2015-12-25 09:58:45+00:00,"Camel  2.16.1 has dependencies on spring 4.1.8.RELEASE


This is causing Sonatype Nexus Pro reports to identify a level 9 threat (See ""foxglove"" link) against artifact spring-core used in Camel.


Upgrade dependency to 4.2.3.RELEASE  (see linked SPR issue).",davsclaus:1449701471:2015-12-10T06:51:11.102+0000:1449701471:2015-12-10T06:51:11.102+0000:Use Camel 2.17.x which will be spring 4.2.x based. Camel 2.16 is on spring 4.1. So the spring guys need to do a 4.1.9 release with the security fix.
0,CAMEL-9401,Task,Major,2.16.0,,"
None
",Resolved,Later,None,Unassigned,Claus Ibsen,1,2,2015-12-08 14:45:55+00:00,2017-03-03 12:48:32+00:00,"Someone in the communiy have karaf problems with xslt component with saxon=true. It cannot load the saxon factory


I wonder if this is correct
https://github.com/apache/camel/blob/master/camel-core/pom.xml#L103


Should it be optional import instead? Or how do we make camel-core able to discover the saxon class if its installed later after camel-core.


There is some other saxon package names in the import section instead but listed os optional
https://github.com/apache/camel/blob/master/camel-core/pom.xml#L53


I wonder if net.sf.saxon should be that too, so the xslt component can load it
https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/component/xslt/XsltEndpoint.java#L358","blue-soft:1449559921:2015-12-08T15:32:01.817+0000:1449559921:2015-12-08T15:32:01.817+0000:Sample project for testing xsl 2 on karaf.
- karaf version 4.0.3
- see Readme,txt for loaded/started bundles

1. if the <camel:choice> is removed, bundle is deployed and prints in log file
                      Version:
                      2.0
                      Vendor:
                      Saxonica
                      Vendor URL:
                      HTTP://WWW.SAXONICA.COM

2. if <camel:choice> is added, but without saxon=""true"" bundle deployment is failed and error is ""upper-case function not found""

3. if if <camel:choice> is added with saxon=""true"" then  bundle is not deployed and the error is:

javax.xml.xpath.XPathFactoryConfigurationException: No XPathFactory implementation found for the object model: http://saxon.sf.net/jaxp/xpath/om


davsclaus:1451009119:2015-12-25T10:05:19.890+0000:1451009119:2015-12-25T10:05:19.890+0000:What JDK version are you using?

It works for me on java8 with karaf 4.0.3 and camel 2.17
davsclaus:1451009141:2015-12-25T10:05:41.237+0000:1451009141:2015-12-25T10:05:41.237+0000:{code}
2015-12-25 11:04:20,542 | INFO  | #0 - timer://foo | XSLTTestRoute                    | 55 - org.apache.camel.camel-core - 2.17.0.SNAPSHOT | <?xml version=""1.0"" encoding=""UTF-8""?><html><body><p>
                    Version:
                    2.0<br/>
                    Vendor:
                    Saxonica<br/>
                    Vendor URL:
                    HTTP://WWW.SAXONICA.COM/</p></body></html>
{code}"
0,CAMEL-9400,Improvement,Minor,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Andrea Cosentino,Andrea Cosentino,0,1,2015-12-08 13:29:00+00:00,2015-12-08 13:37:05+00:00,"We can add support to this kind of operation [1] . It can be very helpful for users.


[1] https://www.elastic.co/guide/en/elasticsearch/client/java-api/current/java-docs-multi-get.html",
0,CAMEL-9399,Improvement,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Miloš Milivojević,0,3,2015-12-08 11:15:00+00:00,2015-12-21 14:41:55+00:00,"Currently, when publishing a message through Camel there is no way make sure that the message was actually delivered to appropriate queues which does not meet the reliability requirements of certain mission-critical applications. While there are two ways of doing this - AMQP transactions and RabbitMQ's Confirms - the former is considered overly heavyweight and latter is preferred as per RabbitMQ's documentation.


New configuration properties should be added to RabbitMQ endpoint - a boolean property for enabling publisher acknowledges and a long property for configuring a timeout (in most cases the publisher will not want to wait forever for a confirmation).


I am almost done with the implementation - the only thing left to do is to perform a bit of code cleanup and add a few integration tests to verify that the acknowledges are working correctly.","githubbot:1449546497:2015-12-08T11:48:17.598+0000:1449546497:2015-12-08T11:48:17.598+0000:GitHub user FingolfinTEK opened a pull request:

    https://github.com/apache/camel/pull/717

    Implementation of CAMEL-9399

    Added support for RabbitMQ Publisher Acknowledgements, did a little code cleanup, added two producer integration tests that test out publisher acknowledgements.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/FingolfinTEK/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/717.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #717
    
----
commit 93bede4db144913ce8c1cfe07aa17ed16ea5acbe
Author: Miloš Milivojević <mmilivojevic@deployinc.com>
Date:   2015-12-08T11:15:55Z

    CAMEL-9399 Implementation and integration tests

commit ea8b2f4cafd1d4d87193ad4c98bba00311acf088
Author: Miloš Milivojević <mmilivojevic@deployinc.com>
Date:   2015-12-08T11:45:02Z

    Merge branch 'master' of https://github.com/apache/camel

----

githubbot:1450679914:2015-12-21T14:38:34.710+0000:1450679914:2015-12-21T14:38:34.710+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/717

davsclaus:1450680115:2015-12-21T14:41:55.848+0000:1450680115:2015-12-21T14:41:55.848+0000:Thanks for the PR"
0,CAMEL-9398,Bug,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Pavlo Kletsko,0,3,2015-12-07 09:42:26+00:00,2015-12-09 06:55:37+00:00,"Found a defect in a new feature CAMEL-9393. 


sendMessage in WebsocketProducer should handle the case when websocket is null because of connectionKey is not valid. This fix will be applicable for both send message to singe or to multiple connections.","githubbot:1449452976:2015-12-07T09:49:36.524+0000:1449452976:2015-12-07T09:49:36.524+0000:GitHub user pkletsko opened a pull request:

    https://github.com/apache/camel/pull/716

    [CAMEL-9398] NullPointerException when connectionKey is not valid

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/pkletsko/camel CAMEL-9398

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/716.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #716
    
----
commit f43c5359c64992c7f2dc011e38bb799f7a2a7f69
Author: Pavlo Kletsko <pkletsko@gmail.com>
Date:   2015-12-07T09:49:08Z

    [CAMEL-9398] NullPointerException when connectionKey is not valid

----

githubbot:1449453279:2015-12-07T09:54:39.209+0000:1449453279:2015-12-07T09:54:39.209+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/716

davsclaus:1449615337:2015-12-09T06:55:37.039+0000:1449615337:2015-12-09T06:55:37.039+0000:Thanks for the PR"
0,CAMEL-9397,Task,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Greg A.,Claus Ibsen,0,1,2015-12-07 06:37:00+00:00,2016-03-23 08:29:54+00:00,"spring 3.x is deprecated for a while, and we should drop it in the next release.


We have a test module, and some itests in tests we should remove.","davsclaus:1454982588:2016-02-09T09:49:48.075+0000:1454982588:2016-02-09T09:49:48.075+0000:Lets keep em for 2.17 as the last release.

Then remove it in 2.18 onwards, we should also remove camel-test-spring3 module.
davsclaus:1458692994:2016-03-23T08:29:54.675+0000:1458692994:2016-03-23T08:29:54.675+0000:Removed it"
0,CAMEL-9396,Bug,Major,2.16.1,,"
None
",Resolved,Invalid,None,Claus Ibsen,Minh Tran,0,2,2015-12-07 00:36:35+00:00,2015-12-07 21:43:06+00:00,"It seems that when using Exchange.HTTP_URI, the options added in here doesn't get stripped off the actual request and is being interpretted as part of the url rather than as an endpoint option. 


This is a working example



from(""direct:start"").
setHeader(Exchange.HTTP_METHOD, constant(""POST"")).
to(""http4:localhost:8080/path?authenticationPreemptive=true&authUsername=myUser&authPassword=myPass"");




The output from apache httpclient logging is showing the Authorization header being correctly set



2015-12-07 11:29:51,139 [main] DEBUG org.apache.http.headers - http-outgoing-0 >> POST /path HTTP/1.1
2015-12-07 11:29:51,140 [main] DEBUG org.apache.http.headers - http-outgoing-0 >> Authorization: Basic bXlVc2VyOm15UGFzcw==




Now we do the same but use Exchange.HTTP_URI



from(""direct:start"").
setHeader(Exchange.HTTP_METHOD, constant(""POST"")).
setHeader(Exchange.HTTP_URI, constant(""http4://localhost:8080/newPath?authenticationPreemptive=true&authUsername=myUser&authPassword=myPass"")).
// deliberately changed settings here to verify we are not hitting it
to(""https4:host:80/path"");




This is the output of apache httpclient logs



2015-12-07 11:32:19,595 [main] DEBUG org.apache.http.headers - http-outgoing-0 >> POST /newPath?authenticationPreemptive=true&authUsername=myUser&authPassword=myPass HTTP/1.1




Notice the missing Authorization header and the path includes the uri options as well","davsclaus:1449440477:2015-12-07T06:21:17.003+0000:1449440477:2015-12-07T06:21:17.003+0000:Use the user forum to get help first
davsclaus:1449440791:2015-12-07T06:26:31.168+0000:1449440791:2015-12-07T06:26:31.168+0000:This uri is the uri of the http server to call. Its not the same as the Camel endpoint uri, where you can configure endpoint options such as security etc. This header does not support that, its only the uri of the http server.
mtran:1449495786:2015-12-07T21:43:06.062+0000:1449495786:2015-12-07T21:43:06.062+0000:Sorry for creating a jira here first instead of putting it on the mailing list. I was pretty certain it was a bug but now I see that I have misunderstood the feature. Thanks for the clarification."
0,CAMEL-9395,Improvement,Minor,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Claus Ibsen,0,1,2015-12-05 16:56:10+00:00,2015-12-06 08:59:52+00:00,"There is a number of services that are enlisted in JMX under services that do not bring any value. 


We should introduce a NonManagedService marker interface so its easy to mark those to not be enlisted.",
0,CAMEL-9364,New Feature,Major,None,2.17.0,"

patch

",Resolved,Fixed,2.17.0,Claus Ibsen,Pavlo Kletsko,0,3,2015-11-25 15:20:52+00:00,2015-11-26 11:17:13+00:00,"There is a case when I need to maintain my own map (websocket session key, user object). Consequently I need to receive events from onOpen/onClose/onError methods of websocket protocol and add/remove item from my map. 


To achieve this :


1) I will add special servlet parameter, let's call it ""events"" with value ""true"". Which will enable this feature. By default it will be ""false"" (no parameter needed) and current functionality will not be influenced any how.


<servlet>
		<servlet-name>CamelWsServlet</servlet-name>
		<servlet-class>org.apache.camel.component.atmosphere.websocket.CamelWebSocketServlet</servlet-class>
		<init-param>
			<param-name>events</param-name>
			<param-value>true</param-value>
		</init-param>
		<load-on-startup>2</load-on-startup>
	</servlet>


2) I will change WebsocketHandler sending exchange message with header key such as ""websocket.eventType"" and possible values :
ONOPEN_EVENT_TYPE = 1;
ONCLOSE_EVENT_TYPE = 0;
ONERROR_EVENT_TYPE = -1;


to camel rout each time when we trigger onOpen/onClose/onError methods. In addition to this header parameter session key will be send as well. 


3) Rout on client side will filter messages by header to distinguish events and their purposes.","githubbot:1448501577:2015-11-26T09:32:57.731+0000:1448501577:2015-11-26T09:32:57.731+0000:GitHub user pkletsko opened a pull request:

    https://github.com/apache/camel/pull/697

    [CAMEL-9364] Add ability to receive onOpen/onClose/onError websocket …

    …events through camel rout.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/pkletsko/camel CAMEL-9364

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/697.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #697
    
----
commit 011482b4f8c22de5713dc85c8b7ae9f9b613cca2
Author: Pavlo Kletsko <pkletsko@gmail.com>
Date:   2015-11-26T09:30:04Z

    [CAMEL-9364] Add ability to receive onOpen/onClose/onError websocket events through camel rout.

----

davsclaus:1448505038:2015-11-26T10:30:38.070+0000:1448505038:2015-11-26T10:30:38.070+0000:Thanks for the PR
githubbot:1448507692:2015-11-26T11:14:52.768+0000:1448507692:2015-11-26T11:14:52.768+0000:Github user pkletsko closed the pull request at:

    https://github.com/apache/camel/pull/697

pkletsko:1448507833:2015-11-26T11:17:13.418+0000:1448507833:2015-11-26T11:17:13.418+0000:Super, thanks. "
0,CAMEL-9363,Test,Minor,None,None,"
None
",Resolved,Not A Problem,None,Dhiraj Sureshkumar Bokde,Thomas Diesler,0,2,2015-11-25 13:53:41+00:00,2016-02-26 08:06:19+00:00,"Please provide basic camel-linkedin integration testing. 


Perhaps a linkedin server can locally be stubbed or an actual connection to a remote server must be made. This can be driven by a maven profile that is activated when external security credentials are provided.


CrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/673","dhirajsb:1456445070:2016-02-26T08:04:30.808+0000:1456445070:2016-02-26T08:04:30.808+0000:Integration tests for the component can be run using the profile {{linkedin-test}} as follows:
{code}
mvn -Plinkedin-test
{code}

The user must provide credentials in {{camel-linkedin-api/src/test/resources/test-options.properties}} and {{camel-linkedin-component/src/test/resources/test-options.properties}} files for running tests for the api and component modules. Note that the files use the following default LinkedIn scopes:
{code}
scope=r_basicprofile,r_fullprofile,r_emailaddress,r_network,r_contactinfo,rw_nus,rw_company_admin,rw_groups,w_messages
{code}

For testing unverified LinkedIn applications, the scope should be changed to the following default permissions. Some integration tests may have to be marked {{@Ignored}}. 
{code}
scope=r_basicprofile,r_emailaddress,rw_company_admin,w_share
{code}

Providing public LinkedIn account credentials is a security and operations risk, since anyone could modify such an account and break integration tests. 
dhirajsb:1456445179:2016-02-26T08:06:19.191+0000:1456445179:2016-02-26T08:06:19.191+0000:Integration tests have existed in the component, but were missing instructions on how to run them. 

BTW, this is a common integration test pattern for all components developed using the Camel API Component Framework. "
0,CAMEL-9362,Bug,Major,2.16.1,"2.16.2, 2.17.0","
None
",Resolved,Fixed,"2.16.2, 2.17.0",Antonin Stefanutti,Antonin Stefanutti,0,3,2015-11-25 13:08:28+00:00,2015-11-25 13:54:38+00:00,The Camel CDI extension requires the PAX CDI Camel CDI extension capability (itself) which leads to having an empty CDI container started by PAX CDI when the camel-cdi bundle is installed in Karaf.,"githubbot:1448429365:2015-11-25T13:29:25.966+0000:1448429365:2015-11-25T13:29:25.966+0000:GitHub user astefanutti opened a pull request:

    https://github.com/apache/camel/pull/696

    CAMEL-9362: Camel CDI component should not require the PAX CDI Camel …

    …capability

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/astefanutti/camel CAMEL-9362

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/696.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #696
    
----
commit ef0625216f51e44675779a29c716ed1fde0e4eb1
Author: Antonin Stefanutti <antonin@stefanutti.fr>
Date:   2015-11-25T13:26:38Z

    CAMEL-9362: Camel CDI component should not require the PAX CDI Camel capability

----

davsclaus:1448429898:2015-11-25T13:38:18.950+0000:1448429898:2015-11-25T13:38:18.950+0000:Thanks for the PR
githubbot:1448430878:2015-11-25T13:54:38.652+0000:1448430878:2015-11-25T13:54:38.652+0000:Github user astefanutti closed the pull request at:

    https://github.com/apache/camel/pull/696
"
0,CAMEL-9361,Task,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Andrea Cosentino,James Netherton,0,4,2015-11-25 08:11:16+00:00,2015-12-04 11:23:54+00:00,"Kafka 0.9.0 is now available. It'd be nice if we could upgrade the camel component to use this. 


There are some fixes that make Kafka play better in modular runtime environments that I'm interested in trying on WildFly.","acosentino:1448411878:2015-11-25T08:37:58.280+0000:1448411878:2015-11-25T08:37:58.280+0000:Good idea. I'll submit a PR on Servicemix-bundles creating the related bundle.

Would you like to work on this? :-)
jamesnetherton:1448412525:2015-11-25T08:48:45.375+0000:1448412525:2015-11-25T08:48:45.375+0000:Yes, I can take a look. 

I'm no Kafka expert but I'll try to get the component working 'as is' for the first step. If you can create the related servicemix bundles, that'd be great! 
davsclaus:1448412742:2015-11-25T08:52:22.779+0000:1448412742:2015-11-25T08:52:22.779+0000:I think they got rid of the zookeeper in the kafka client now, so the osgi guys need to be aware that the import packages is likely less now.
acosentino:1448413431:2015-11-25T09:03:51.852+0000:1448413431:2015-11-25T09:03:51.852+0000:In the Kafka client there isn't zookeeper, but in Kafka_2.10 there is a Zookeeper 3.4.6 dependency.
acosentino:1448442055:2015-11-25T17:00:55.791+0000:1448442055:2015-11-25T17:00:55.791+0000:PR for the kafka bundles created.
jamesnetherton:1448516190:2015-11-26T13:36:30.937+0000:1448516190:2015-11-26T13:36:30.937+0000:After a couple of small tweaks, the existing codebase seems to work fine with the updated Kafka library (the old API will remain supported for some time).  

This gives us a lazy route for upgrading.

If we're wanting to support the newer Kafka producer / consumer APIs, then I'll leave that to someone who has a better understanding of Kafka. 
acosentino:1448516417:2015-11-26T13:40:17.738+0000:1448516417:2015-11-26T13:40:17.738+0000:For the moment, I think we can just upgrade the version and leave the new Kafka Producer/Consumer APIs support for the future. 
githubbot:1449193262:2015-12-04T09:41:02.347+0000:1449193262:2015-12-04T09:41:02.347+0000:GitHub user jamesnetherton opened a pull request:

    https://github.com/apache/camel/pull/709

    [CAMEL-9361] Upgrade kafka to 0.9.0.0

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jamesnetherton/camel CAMEL-9361

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/709.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #709
    
----
commit 94d2d15e78d1892a903b006d36fda4908702977f
Author: James Netherton <jamesnetherton@gmail.com>
Date:   2015-11-26T13:59:48Z

    [CAMEL-9361] Upgrade kafka to 0.9.0.0

----

acosentino:1449193385:2015-12-04T09:43:05.479+0000:1449193385:2015-12-04T09:43:05.479+0000:Thank you James. I will merge your PR this afternoon :-)
githubbot:1449199434:2015-12-04T11:23:54.873+0000:1449199434:2015-12-04T11:23:54.873+0000:Github user jamesnetherton closed the pull request at:

    https://github.com/apache/camel/pull/709
"
0,CAMEL-9360,Task,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Andrea Cosentino,Claus Ibsen,0,2,2015-11-25 07:45:58+00:00,2017-10-11 07:58:03+00:00,No Desc,"acosentino:1449404484:2015-12-06T20:21:24.602+0000:1449404484:2015-12-06T20:21:24.602+0000:- Upgraded Elasticsearch to version 2.0.0
- Upgraded Lucene to version 5.2.1 (used by Elasticsearch 2.0.0)
- Upgraded Solr to version 5.2.1 (related to Lucene)

Camel-solr will require a little bit of refactoring in his tests. Actually schema.xml and solrconfig.xml are related to older versions and the tests doesn't work, for the moment I annotated those tests with ignore. Anyway the component work. I'll create a new JIRA related to the Solr tests refactoring.
acosentino:1449404957:2015-12-06T20:29:17.369+0000:1449404957:2015-12-06T20:29:17.369+0000:In Elasticsearch 2.0.0 the async replication has been removed [1].

So I've removed the option from endpoint and I've edited the docs.

[1] https://www.elastic.co/guide/en/elasticsearch/reference/current/breaking_20_crud_and_routing_changes.html"
0,CAMEL-9359,Improvement,Trivial,2.16.1,"2.16.2, 2.17.0","
None
",Resolved,Fixed,"2.16.2, 2.17.0",Claus Ibsen,Marco Zapletal,0,1,2015-11-24 18:13:04+00:00,2015-11-25 13:33:52+00:00,"As described on this post on the mailing list (http://camel.465427.n5.nabble.com/DefaultExchangeHolder-marshal-produces-a-lot-of-warnings-CAMEL-8415-td5773927.html) DefaultExchangeHolder.marshal() logs NULL header values to WARN (since Camel 2.16).
Some standard components such as camel-activemq, however, write a lot of headers being mostly NULL such as JMSDestination, JMSCorrelationID, etc.


Hence, I would suggest to change the log level from WARN to INFO in line https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/impl/DefaultExchangeHolder.java#L358.",
0,CAMEL-9358,Improvement,Major,2.16.1,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Alexandre Cartapanis,0,3,2015-11-24 14:07:19+00:00,2015-11-25 08:48:07+00:00,"Please add the support for UPDATE request in elasticsearch component.
Here is my usecase :
I send a first message with a lot of data, that i want to index by id, and then I periodically sends a limited amount of data, that I want to use to update one or two fields in the previously indexed data.","githubbot:1448351054:2015-11-24T15:44:14.063+0000:1448351054:2015-11-24T15:44:14.063+0000:GitHub user acartapanis opened a pull request:

    https://github.com/apache/camel/pull/694

    Camel 9358

    Improvement [CAMEL-9358] (https://issues.apache.org/jira/browse/CAMEL-9358)

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/acartapanis/camel CAMEL-9358

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/694.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #694
    
----
commit 54c4ea1e86e4f4772b10582cdd5af05f00722b5f
Author: acartapanis <acs@diginext.fr>
Date:   2015-11-24T15:30:50Z

    Adds support for UPDATE request, see [CAMEL-9358]

commit 77426f898a7c6a98f6f1f1a4f01ebdcad91bc320
Author: acartapanis <acs@diginext.fr>
Date:   2015-11-24T15:33:11Z

    Adds support for UPDATE request, see [CAMEL-9358]

commit 1c63733637f0dc821bc1742748cda1968ccb34da
Author: acartapanis <acs@diginext.fr>
Date:   2015-11-24T15:42:11Z

    Adds support for UPDATE request, see [CAMEL-9358]

----

davsclaus:1448412480:2015-11-25T08:48:00.625+0000:1448412480:2015-11-25T08:48:00.625+0000:Thanks for the PR
githubbot:1448412487:2015-11-25T08:48:07.427+0000:1448412487:2015-11-25T08:48:07.427+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/694
"
0,CAMEL-9357,Improvement,Major,2.16.0,None,"
None
",Resolved,Fixed,2.17.0,Henryk Konsek,Henryk Konsek,0,1,2015-11-24 08:38:56+00:00,2015-11-24 08:44:12+00:00,KuraRouter can be configured via XML and OSGi Configuration Admin. In such cases there is no need to implement configure() method.,hekonsek:1448325852:2015-11-24T08:44:12.193+0000:1448325852:2015-11-24T08:44:12.193+0000:Fixed in f13b8851c61e6a08405903b9608d3ef0994af53b.
0,CAMEL-9356,Improvement,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Anshu Avinash,0,2,2015-11-24 06:28:42+00:00,2015-11-25 13:36:21+00:00,"According to the SMPP 3.4 documentation, the short_message field can be empty and ESME’s can use the optional message_payload parameter.",davsclaus:1448429781:2015-11-25T13:36:21.741+0000:1448429781:2015-11-25T13:36:21.741+0000:Thanks for reporting and the patch.
0,CAMEL-9355,Improvement,Major,2.16.0,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Aaron Whiteside,0,2,2015-11-24 01:09:10+00:00,2015-12-14 08:48:55+00:00,"Current Throttler implementation is not accurate and is even more inaccurate in a multi-threaded route (think sjms....consumerCount=100).


The delay to sleep cannot be calculated ahead of time in a multi-threaded environment, to this end the Throttler should not extend DelayProcessorSupport.


Attached is a patch that changes throttler to use a Semaphore to do accurate and multi-thread safe throttling.


The code I think is much cleaner, smaller and easier to understand. Than it used to be before.


Unit tests still pass, I had to make some changes to ThrottlerTest as it made assumptions about the implementation and was doing bad things like adding a 750ms buffer to validating the minimum throttle delay.. ThrottlerTest is now very sane.


I've also implemented support to allow the throttler construct to be used without any nested outputs. For example the follow code is now valid.



<throttle><constant>100</constant></throttle> 




If you want to disable this feature it can be done in ThrottlerDefinition::createProcessor() line 82 changing false to true.


I think this allows more flexible usage of the throttler, in my use case I want to delay the further execution of the route, and I don't want to have to split my routes up into separate sub-routes to be able to do that.","davsclaus:1448495671:2015-11-26T07:54:31.169+0000:1448495671:2015-11-26T07:54:31.169+0000:I dont think the code is easier, before it was reusing existing code.

A problem is that this code introduced a background thread per throttler that does the release.
Another problem is the async delated task is not scheduled, but submit so the task can run repeatedly which can suck up CPU cycles. in case it keeps looping trying to acquire a semaphore, which is not granted, and then its re-added to the async task, which then re-run this again, over and over.

davsclaus:1448502013:2015-11-26T09:40:13.843+0000:1448502013:2015-11-26T09:40:13.843+0000:The throttler wasn't designed to be 100% cut-off accurate, or trying to spread out load more evenly over a time slot period.

I wonder if its the async delayed that is a hard nut to crack with your patch? Also can the semaphore be released without using extra threads?
aaronjwhiteside:1448531817:2015-11-26T17:56:57.626+0000:1448531817:2015-11-26T17:56:57.626+0000:You are right, there is an extra thread per throttler to release the permits, we could make this shared, but then we would need to size the pool size correctly to handle any number of throttles using it.

There is actually no re-queuing happening, if a permit cannot be obtained and isAsyncDelayed() is enabled then the exchange is queued, the async executor thread pool will process the exchange's FIFO making the ""async"" requests block just like any normal thread calling the throttler with isAsyncDelayed() disabled. If you turn on TRACE logging you'll see how much time a exchange spent being queued vs blocking for a permit. But definitely async exchange's are not retried in any sort of loop.
aaronjwhiteside:1448533713:2015-11-26T18:28:33.509+0000:1448533713:2015-11-26T18:28:33.509+0000:The problem we are seeing with the current throttler, is that with a single thread we are never quite able to reach the actual throttle limit, and with multiple threads in a route we end up going over the throttle limit. For our business use-case this is disastrous, we're not able to meeting any of our SLAs. 

With the semaphore based implementation requests are not actually spread evenly over the time period, as you can consume say a throttle rate of 100/s in the first 1ms then be blocked for the remaining 999ms.

Another benefit of the semaphore implementation is that it's not based on a relative point of time reference. For example: the senders time slot starts at 6 seconds past the minute, vs the receivers time slot starts at 4 seconds past the minute- assuming the clocks are synchronized. This can lead to the receiver rejecting requests because they exceed his throttle, when from the senders point of view he has not exceeded the throttle.

Of course this depends on how the receiver calculates received throughput. But it is always better to use a rolling window of the last ""time period"" (Eg. 1s), relative to the current time/current request. It may not be obvious at first but the semaphore is a rolling window of time.

When using a semaphore it's not really possible to have the permit be released without using another thread. There are other approaches but they suffer from the problem of assuming the time period window starts at some fixed time relative to them and have the issues mentioned above, or have very high overheads.

Such an approach, that was not a semaphore, we were using a few years ago was a throttling implementation based on a sentinel (head and tail are the same object) linked list. Where we would add items to this queue with a timestamp and then when checking if we exceeded the throttle, we would count back through the items until we exceeded our throttle or reached a timestamp outside our time period (again relative to the current time of the request). This achieved the goal but was quite expensive, as we could end up looping over o(throttle_rate) items, per requesting thread, to see if we were within our throttle rate. With a high throttle rate and high concurrency this became a bottle neck. Not to mention that you cannot just let the list grow unchecked, it had to be pruned either with a dedicated thread or delegating the work to each calling thread, slowing them down even more.

If this change is too radical, would you consider a throttler2 implementation, living along side the original throttler?


aaronjwhiteside:1448654661:2015-11-28T04:04:21.284+0000:1448654661:2015-11-28T04:04:21.284+0000:Actually I think you're right, there is a better way, after a some investigation I believe I can achieve the same thing without using a dedicated thread to release permits, I should be able to use a DelayQueue in place of a Semaphore. 

I'll work on the updating patch...
aaronjwhiteside:1449578902:2015-12-08T20:48:22.651+0000:1449578902:2015-12-08T20:48:22.651+0000:New patch that replaces the Sempahore+dedicated thread throttler implementation with a DelayQueue based one.

This implementation has a much higher overhead (DelayQueue is thread-safe but not concurrent), I was not able to achieve more than 4000 requests per second, reliability. But I guess for most day to day uses this won't be a problem. And in my use-case is also not a concern.

If this is a concern, we could look at using a skip list data structure (lock-free prioritized queue). Or maybe provide plugable strategies/implementations of the Throttler, so once can choose say a Semaphore based approach.
davsclaus:1449702325:2015-12-10T07:05:25.497+0000:1449702325:2015-12-10T07:05:25.497+0000:Please dont change the behavior of the child behavior of throttler with that true -> false. And please keep the existing code formatting, that is the formatting we use.

The time taken is only used for trace logging, can you make it so that we don't capture that detail if you do not use trace logging.

Also there is some code comment that says semaphore, i guess you should change that. And maybe add a bit of code comment or class javadoc comment about the idea of this implementation using a delayed queue. The logic that removes permits and whatnot is a bit complicated to understand at first glance, so we need to help new users to this as the entire community should be able to maintain the code ;)

But great work, good to see a better throttler implementation.
aaronjwhiteside:1449849947:2015-12-12T00:05:47.276+0000:1449849947:2015-12-12T00:05:47.276+0000:Patch attached addressing the issues/comments raised.

Thanks for the feedback!
davsclaus:1450054135:2015-12-14T08:48:55.505+0000:1450054135:2015-12-14T08:48:55.505+0000:Thanks for the work."
0,CAMEL-9354,Bug,Trivial,None,,"
None
",Resolved,Not A Problem,None,Claus Ibsen,Thiago Martins,0,2,2015-11-23 19:48:36+00:00,2015-11-24 04:41:39+00:00,AggregationStrategy should not be called when exchange gets done while splitting or filtered,"davsclaus:1448311299:2015-11-24T04:41:39.979+0000:1448311299:2015-11-24T04:41:39.979+0000:This is as designed, stop will stop routing, not aggregating. "
0,CAMEL-9353,Test,Major,2.15.2,,"
None
",Resolved,Invalid,None,Claus Ibsen,Varanasi Aditya Kumar,0,2,2015-11-23 17:16:48+00:00,2015-11-24 04:37:19+00:00,"[javax.xml.bind.PropertyException: property ""com.sun.xml.bind.characterEscapeHandler"" must be an instance of type com.sun.xml.bind.marshaller.CharacterEscapeHandler, not com.test.jaxb.util.ExampleTransform$1
	at com.sun.xml.bind.v2.runtime.MarshallerImpl.setProperty(MarshallerImpl.java:492)
	at com.test.jaxb.util.ExampleTransform.toXML(ExampleTransform.java:301)
	at com.test.jaxb.util.ExampleTransform.toXML(ExampleTransform.java:275)
	at com.test.jaxb.util.ExampleTransform.transform(ExampleTransform.java:147)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.apache.camel.component.bean.MethodInfo.invoke(MethodInfo.java:408)
	at org.apache.camel.component.bean.MethodInfo$1.doProceed(MethodInfo.java:279)
	at org.apache.camel.component.bean.MethodInfo$1.proceed(MethodInfo.java:252)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:171)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:68)
	at org.apache.camel.component.bean.BeanProducer.process(BeanProducer.java:38)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:129)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:448)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.LoopProcessor.process(LoopProcessor.java:109)
	at org.apache.camel.processor.LoopProcessor.process(LoopProcessor.java:79)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:448)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)
	at org.apache.camel.processor.Pipeline.access$100(Pipeline.java:43)
	at org.apache.camel.processor.Pipeline$1.done(Pipeline.java:136)
	at org.apache.camel.processor.ThreadsProcessor$ProcessCall.run(ThreadsProcessor.java:83)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
]","davsclaus:1448311039:2015-11-24T04:37:19.103+0000:1448311039:2015-11-24T04:37:19.103+0000:Please use the user mailing list / user forum to get help first
http://camel.apache.org/support.html"
0,CAMEL-9352,Improvement,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Claus Ibsen,0,2,2015-11-23 13:09:54+00:00,2015-11-23 13:40:11+00:00,"So you can transfer the fault flag over JMS if for example you call a CXF / Spring-WS endpoint that returns a SOAP fault. Then you may want to have that fault returned over JMS so Camel can react on the other side.


We have transferException already for similar functionality.",
0,CAMEL-9351,Improvement,Major,2.16.0,None,"
None
",Resolved,Fixed,2.17.0,Henryk Konsek,Henryk Konsek,0,1,2015-11-23 09:25:40+00:00,2015-11-23 09:34:51+00:00,"Currently KuraRouter offers only BundleActivator programming model. As Kura promotes SCR for managable objects, KuraRouter should be easily deployed as SCR as well.",hekonsek:1448242491:2015-11-23T09:34:51.628+0000:1448242491:2015-11-23T09:34:51.628+0000:Fixed in b914c04ccfb0a16020bd4eb0396d51a08804eaa7. Added {{activate}} and {{deactivate}} SCR-friendly methods.
0,CAMEL-9350,Improvement,Major,2.16.0,,"
None
",Resolved,Implemented,None,Claus Ibsen,Jonas Stein,0,2,2015-11-23 08:07:18+00:00,2016-05-03 08:20:57+00:00,"Currently it is a bit complicated to test webservices, created with camel and spring boot. The main problem is to run up the whole spring/camel context with its configuration. I would like to use some annotations in the test-class and be sure that camel recognized all its routes and properties, also the possibility to use the CamelContextLifecycle would be great.


The annotation @PropertySource should also work in JUnit-Tests to inject every property sucessfully into the 
""two curly braces""someProperty""two curly braces"" syntax. 


Last but not least, I rather would be able to use the method whenAnyExchangeReceived of the class MockEndpoint with an exchange object as a parameter, instead of a processor.","yuncil:1448238155:2015-11-23T08:22:35.966+0000:1448238195:2015-11-23T08:23:15.408+0000:Link to topic in camel user forum: http://camel.465427.n5.nabble.com/How-to-get-properties-working-in-camelTest-and-spring-td5774102.html


davsclaus:1462234857:2016-05-03T08:20:57.325+0000:1462234857:2016-05-03T08:20:57.325+0000:Try with latest version. camel-spring-boot is integrated with spring property placeholders."
0,CAMEL-9349,Improvement,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Claus Ibsen,0,2,2015-11-22 13:43:41+00:00,2015-11-28 07:59:49+00:00,"Some components uses this to load resources from file / classpath / http etc. But we should also allow to use ref: to lookup in the registry and read that content as a input stream
org.apache.camel.util.ResourceHelper#resolveResourceAsInputStream",davsclaus:1448668783:2015-11-28T07:59:43.250+0000:1448668783:2015-11-28T07:59:43.250+0000:You can now use ref: as prefix to refer to a bean in the registry that holds the resource as convertable to a String type.
0,CAMEL-9348,Bug,Major,"2.16.0, 2.15.4, 2.17.0","2.16.2, 2.17.0","
None
",Resolved,Fixed,"2.16.2, 2.17.0",Claus Ibsen,Ton Swieb,0,3,2015-11-21 20:40:15+00:00,2015-11-22 17:42:40+00:00,"Having multiple routes with the same websocket consumer/producer causes only the first route to initialize correctly when the endpoint parameters are different per used consumer/producer endpoint URI.


In the following example only the first route to register the websocket endpoint will work. The second route will not work.



                from(""websocket://localhost:"" + port + ""/bar"")
                    .transform().simple(""The bar has ${body}"")
                    .to(""websocket://localhost:"" + port + ""/bar"");

                from(""timer://foo?fixedRate=true&period=12000"")
	        	.setBody(constant(""Broadcasting to Bar""))
	                .to(""websocket://localhost:"" + port + ""/bar?sendToAll=true"");




When the endpoint parameters are the same and a header value is used for broadcasting then both routes will work as expected:



                from(""websocket://localhost:"" + port + ""/bar"")
                    .transform().simple(""The bar has ${body}"")
                    .to(""websocket://localhost:"" + port + ""/bar"");

                from(""timer://foo?fixedRate=true&period=12000"")
	        	.setBody(constant(""Broadcasting to Bar""))
.setHeader(WebsocketConstants.SEND_TO_ALL,constant(true))
	                .to(""websocket://localhost:"" + port + ""/bar"");




The NodeSynchronization / WebSocketStore which contains all registered clients is maintained per endpoint and only the NodeSynchronization of the 1st registered endpoint is linked to the WeboscketServlet. The NodeSynchronization of all subsequent endpoints are not linked to the WebsocketServlet and are unaware of the connected websocket clients.
The endpoints URI /bar and /bar?sendToAll=true are treated as different endpoints, but belong to the same websocket.


I created a fix and will make a PR for it.","githubbot:1448110051:2015-11-21T20:47:31.646+0000:1448110051:2015-11-21T20:47:31.646+0000:GitHub user tonswieb opened a pull request:

    https://github.com/apache/camel/pull/688

    Moved WebSocketStore and NodeSynchronization from the Endpoint to the…

    https://issues.apache.org/jira/browse/CAMEL-9348

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tonswieb/camel CAMEL-9348

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/688.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #688
    
----
commit 8a65a5d1db3332ceb6ad5fb658c3d54a202b2db1
Author: Ton Swieb <ton.swieb@finalist.nl>
Date:   2015-11-21T20:44:30Z

    Moved WebSocketStore and NodeSynchronization from the Endpoint to the Connector

----

githubbot:1448112603:2015-11-21T21:30:03.386+0000:1448112603:2015-11-21T21:30:03.386+0000:GitHub user tonswieb opened a pull request:

    https://github.com/apache/camel/pull/689

    Moved WebSocketStore and NodeSynchronization from the Endpoint to the…

    https://issues.apache.org/jira/browse/CAMEL-9348

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tonswieb/camel camel-2.15.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/689.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #689
    
----
commit 288c6d63999adf231d9aba6569aa67cafccf8081
Author: Ton Swieb <ton.swieb@finalist.nl>
Date:   2015-11-21T20:44:30Z

    Moved WebSocketStore and NodeSynchronization from the Endpoint to the Connector
    
    Conflicts:
    	components/camel-websocket/src/main/java/org/apache/camel/component/websocket/WebsocketComponent.java
    	components/camel-websocket/src/main/java/org/apache/camel/component/websocket/WebsocketEndpoint.java

----

githubbot:1448114526:2015-11-21T22:02:06.863+0000:1448114526:2015-11-21T22:02:06.863+0000:GitHub user tonswieb opened a pull request:

    https://github.com/apache/camel/pull/690

    Moved WebSocketStore and NodeSynchronization from the Endpoint to the…

    https://issues.apache.org/jira/browse/CAMEL-9348

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tonswieb/camel camel-2.16.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/690.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #690
    
----
commit ee69801ec6062f0ff23e72419b329cbaffd1eca0
Author: Ton Swieb <ton.swieb@finalist.nl>
Date:   2015-11-21T20:44:30Z

    Moved WebSocketStore and NodeSynchronization from the Endpoint to the Connector

----

davsclaus:1448159861:2015-11-22T10:37:41.859+0000:1448159861:2015-11-22T10:37:41.859+0000:Thanks for reporting and the PR
githubbot:1448185309:2015-11-22T17:41:49.126+0000:1448185309:2015-11-22T17:41:49.126+0000:Github user tonswieb closed the pull request at:

    https://github.com/apache/camel/pull/690

githubbot:1448185342:2015-11-22T17:42:22.829+0000:1448185342:2015-11-22T17:42:22.829+0000:Github user tonswieb closed the pull request at:

    https://github.com/apache/camel/pull/689

githubbot:1448185360:2015-11-22T17:42:40.379+0000:1448185360:2015-11-22T17:42:40.379+0000:Github user tonswieb closed the pull request at:

    https://github.com/apache/camel/pull/688
"
0,CAMEL-9347,Bug,Major,2.16.1,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Claus Ibsen,0,1,2015-11-21 14:52:55+00:00,2015-11-21 15:23:54+00:00,"When using <transacted> in blueprint then you need to setup a <bean> with the transaction propagation policy. Even if you just want to use the default.


In spring this works out of the box.


It fails in blueprint due classloading, we need to open camel-core manifest to allow blueprint to find those optional packages.",davsclaus:1448090551:2015-11-21T15:22:31.698+0000:1448090551:2015-11-21T15:22:31.698+0000:As this is a change in OSGi manifest on camel-core lets leave this as a change for new minor release only.
0,CAMEL-9346,Improvement,Major,None,"2.16.2, 2.17.0","
None
",Resolved,Fixed,"2.16.2, 2.17.0",Claus Ibsen,Claus Ibsen,0,1,2015-11-21 10:59:57+00:00,2015-11-21 11:13:35+00:00,If starting from sql in a transaction then we should eager rollback on first failure.,
0,CAMEL-9345,Improvement,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Greg A.,Claus Ibsen,0,2,2015-11-21 08:59:19+00:00,2015-12-18 15:17:48+00:00,"This example
https://github.com/apache/camel/tree/master/examples/camel-example-restlet-jdbc


Uses a mix of old school and has some rest-dsl in there but not really exposed.","githubbot:1450422085:2015-12-18T15:01:25.097+0000:1450422085:2015-12-18T15:01:25.097+0000:GitHub user gautric opened a pull request:

    https://github.com/apache/camel/pull/736

    CAMEL-9345 , Migrate example to rest-dsl

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gautric/camel CAMEL-9345

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/736.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #736
    
----
commit 1950e7785b9a5744d6fd7bebbfaf7255f8ee656c
Author: gautric <gautric@redhat.com>
Date:   2015-12-18T14:57:47Z

    CAMEL-9345 , Migrate example to rest-dsl

----

githubbot:1450422885:2015-12-18T15:14:45.010+0000:1450422885:2015-12-18T15:14:45.010+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/736
"
0,CAMEL-9344,Bug,Major,2.16.0,,"
None
",Resolved,Invalid,None,Akitoshi Yoshida,John Yin,0,2,2015-11-20 17:27:50+00:00,2016-02-03 18:54:40+00:00,"The error is listed below along with a setup (camel, cxf, wsdl, maven pom) that can reproduce the issue.  This ONLY affects 2.16.0 (not 2.15.x).


org.apache.camel.InvalidPayloadException: No body available of type: java.lang.String but has value: org.apache.camel.component.cxf.CxfPayload@2ff1ea33 of type: org.apache.camel.component.cxf.CxfPayload on: Message: org.apache.camel.component.cxf.CxfPayload@2ff1ea33. Caused by: Error during type conversion from type: java.lang.String to the required type: java.lang.String with value org.apache.camel.component.cxf.CxfPayload@2ff1ea33 due java.lang.IllegalStateException: StAXSource(XMLStreamReader) with XMLStreamReadernot in XMLStreamConstants.START_DOCUMENT or XMLStreamConstants.START_ELEMENT state. Exchange[ID-John-PCI-55819-1447771175585-0-2][Message: org.apache.camel.component.cxf.CxfPayload@2ff1ea33]. Caused by: [org.apache.camel.TypeConversionException - Error during type conversion from type: java.lang.String to the required type: java.lang.String with value org.apache.camel.component.cxf.CxfPayload@2ff1ea33 due java.lang.IllegalStateException: StAXSource(XMLStreamReader) with XMLStreamReadernot in XMLStreamConstants.START_DOCUMENT or XMLStreamConstants.START_ELEMENT state]


                    at org.apache.camel.impl.MessageSupport.getMandatoryBody(MessageSupport.java:101)


                    at org.apache.camel.processor.ConvertBodyProcessor.process(ConvertBodyProcessor.java:91)


                    at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)


                    at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)


                    at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:460)


                    at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190)


                    at org.apache.camel.processor.Pipeline.process(Pipeline.java:121)


                    at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)


                    at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190)


                    at org.apache.camel.component.cxf.CxfConsumer$1.asyncInvoke(CxfConsumer.java:95)


                    at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:75)


                    at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:59)


                    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)


                    at java.util.concurrent.FutureTask.run(FutureTask.java:266)


                    at org.apache.cxf.interceptor.ServiceInvokerInterceptor$2.run(ServiceInvokerInterceptor.java:126)


                    at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)


                    at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:131)


                    at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:308)


                    at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:121)


                    at org.apache.cxf.transport.http.AbstractHTTPDestination.invoke(AbstractHTTPDestination.java:251)


                    at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:234)


                    at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:70)


                    at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1129)


                    at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1065)


                    at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)


                    at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:215)


                    at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)


                    at org.eclipse.jetty.server.Server.handle(Server.java:499)


                    at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:310)


                    at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257)


                    at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:540)


                    at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)


                    at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)


                    at java.lang.Thread.run(Thread.java:745)


Caused by: org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: java.lang.String with value org.apache.camel.component.cxf.CxfPayload@2ff1ea33 due java.lang.IllegalStateException: StAXSource(XMLStreamReader) with XMLStreamReadernot in XMLStreamConstants.START_DOCUMENT or XMLStreamConstants.START_ELEMENT state


                    at org.apache.camel.impl.converter.BaseTypeConverterRegistry.createTypeConversionException(BaseTypeConverterRegistry.java:610)


                    at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:177)


                    at org.apache.camel.impl.MessageSupport.getMandatoryBody(MessageSupport.java:99)


                    ... 33 more


Caused by: org.apache.camel.RuntimeCamelException: java.lang.IllegalStateException: StAXSource(XMLStreamReader) with XMLStreamReadernot in XMLStreamConstants.START_DOCUMENT or XMLStreamConstants.START_ELEMENT state


                    at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1642)


                    at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:1247)


                    at org.apache.camel.impl.converter.StaticMethodFallbackTypeConverter.convertTo(StaticMethodFallbackTypeConverter.java:62)


                    at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:333)


                    at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:168)


                    ... 34 more


Caused by: java.lang.IllegalStateException: StAXSource(XMLStreamReader) with XMLStreamReadernot in XMLStreamConstants.START_DOCUMENT or XMLStreamConstants.START_ELEMENT state


                    at javax.xml.transform.stax.StAXSource.<init>(StAXSource.java:155)


                    at org.apache.camel.component.cxf.converter.CxfPayloadConverter.convertTo(CxfPayloadConverter.java:209)


                    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)


                    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)


                    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)


                    at java.lang.reflect.Method.invoke(Method.java:497)


                    at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:1243)


                    ... 37 more


[              qtp1541232265-21] PhaseInterceptorChain          WARN  Application 

{urn:pci:OneWayService:v1}

PciOneWayService#

{urn:pci:OneWayService:v1}

GetMessage has thrown exception, unwinding now


org.apache.cxf.interceptor.Fault: No body available of type: java.lang.String but has value: org.apache.camel.component.cxf.CxfPayload@2ff1ea33 of type: org.apache.camel.component.cxf.CxfPayload on: Message: org.apache.camel.component.cxf.CxfPayload@2ff1ea33. Caused by: Error during type conversion from type: java.lang.String to the required type: java.lang.String with value org.apache.camel.component.cxf.CxfPayload@2ff1ea33 due java.lang.IllegalStateException: StAXSource(XMLStreamReader) with XMLStreamReadernot in XMLStreamConstants.START_DOCUMENT or XMLStreamConstants.START_ELEMENT state. Exchange[ID-John-PCI-55819-1447771175585-0-2][Message: org.apache.camel.component.cxf.CxfPayload@2ff1ea33]. Caused by: [org.apache.camel.TypeConversionException - Error during type conversion from type: java.lang.String to the required type: java.lang.String with value org.apache.camel.component.cxf.CxfPayload@2ff1ea33 due java.lang.IllegalStateException: StAXSource(XMLStreamReader) with XMLStreamReadernot in XMLStreamConstants.START_DOCUMENT or XMLStreamConstants.START_ELEMENT state]


                    at org.apache.camel.component.cxf.CxfConsumer$1.checkFailure(CxfConsumer.java:235)


                    at org.apache.camel.component.cxf.CxfConsumer$1.setResponseBack(CxfConsumer.java:209)


                    at org.apache.camel.component.cxf.CxfConsumer$1.asyncInvoke(CxfConsumer.java:110)


                    at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:75)


                    at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:59)


                    at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:96)


                    at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:308)


                    at org.apache.cxf.phase.PhaseInterceptorChain.resume(PhaseInterceptorChain.java:278)


                    at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:78)


                    at org.apache.cxf.transport.http.AbstractHTTPDestination.invoke(AbstractHTTPDestination.java:251)


                    at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:234)


                    at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:70)


                    at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1129)


                    at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1065)


                    at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)


                    at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:189)


                    at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)


                    at org.eclipse.jetty.server.Server.handleAsync(Server.java:549)


                    at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:317)


                    at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257)


                    at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:540)


                    at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)


                    at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)


                    at java.lang.Thread.run(Thread.java:745)


Caused by: org.apache.camel.InvalidPayloadException: No body available of type: java.lang.String but has value: org.apache.camel.component.cxf.CxfPayload@2ff1ea33 of type: org.apache.camel.component.cxf.CxfPayload on: Message: org.apache.camel.component.cxf.CxfPayload@2ff1ea33. Caused by: Error during type conversion from type: java.lang.String to the required type: java.lang.String with value org.apache.camel.component.cxf.CxfPayload@2ff1ea33 due java.lang.IllegalStateException: StAXSource(XMLStreamReader) with XMLStreamReadernot in XMLStreamConstants.START_DOCUMENT or XMLStreamConstants.START_ELEMENT state. Exchange[ID-John-PCI-55819-1447771175585-0-2][Message: org.apache.camel.component.cxf.CxfPayload@2ff1ea33]. Caused by: [org.apache.camel.TypeConversionException - Error during type conversion from type: java.lang.String to the required type: java.lang.String with value org.apache.camel.component.cxf.CxfPayload@2ff1ea33 due java.lang.IllegalStateException: StAXSource(XMLStreamReader) with XMLStreamReadernot in XMLStreamConstants.START_DOCUMENT or XMLStreamConstants.START_ELEMENT state]


                    at org.apache.camel.impl.MessageSupport.getMandatoryBody(MessageSupport.java:101)


                    at org.apache.camel.processor.ConvertBodyProcessor.process(ConvertBodyProcessor.java:91)


                    at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)


                    at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)


                    at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:460)


                    at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190)


                    at org.apache.camel.processor.Pipeline.process(Pipeline.java:121)


                    at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)


                    at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190)


                    at org.apache.camel.component.cxf.CxfConsumer$1.asyncInvoke(CxfConsumer.java:95)


                    at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:75)


                    at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:59)


                    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)


                    at java.util.concurrent.FutureTask.run(FutureTask.java:266)


                    at org.apache.cxf.interceptor.ServiceInvokerInterceptor$2.run(ServiceInvokerInterceptor.java:126)


                    at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)


                    at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:131)


                    at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:308)


                    at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:121)


                    at org.apache.cxf.transport.http.AbstractHTTPDestination.invoke(AbstractHTTPDestination.java:251)


                    at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:234)


                    at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:70)


                    at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1129)


                    at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1065)


                    at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)


                    at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:215)


                    at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)


                    at org.eclipse.jetty.server.Server.handle(Server.java:499)


                    at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:310)


                    ... 5 more


Caused by: org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: java.lang.String with value org.apache.camel.component.cxf.CxfPayload@2ff1ea33 due java.lang.IllegalStateException: StAXSource(XMLStreamReader) with XMLStreamReadernot in XMLStreamConstants.START_DOCUMENT or XMLStreamConstants.START_ELEMENT state


                    at org.apache.camel.impl.converter.BaseTypeConverterRegistry.createTypeConversionException(BaseTypeConverterRegistry.java:610)


                    at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:177)


                    at org.apache.camel.impl.MessageSupport.getMandatoryBody(MessageSupport.java:99)


                    ... 33 more


Caused by: org.apache.camel.RuntimeCamelException: java.lang.IllegalStateException: StAXSource(XMLStreamReader) with XMLStreamReadernot in XMLStreamConstants.START_DOCUMENT or XMLStreamConstants.START_ELEMENT state


                    at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1642)


                    at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:1247)


                    at org.apache.camel.impl.converter.StaticMethodFallbackTypeConverter.convertTo(StaticMethodFallbackTypeConverter.java:62)


                    at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:333)


                    at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:168)


                    ... 34 more


Caused by: java.lang.IllegalStateException: StAXSource(XMLStreamReader) with XMLStreamReadernot in XMLStreamConstants.START_DOCUMENT or XMLStreamConstants.START_ELEMENT state


                    at javax.xml.transform.stax.StAXSource.<init>(StAXSource.java:155)


                    at org.apache.camel.component.cxf.converter.CxfPayloadConverter.convertTo(CxfPayloadConverter.java:209)


                    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)


                    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)


                    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)


                    at java.lang.reflect.Method.invoke(Method.java:497)


                    at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:1243)


                    ... 37 more


Camel config:
<beans xmlns=""http://www.springframework.org/schema/beans""
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
       xsi:schemaLocation=""
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd"">


  <import resource=""classpath:META-INF/spring/camel-cxf.xml"" />


  <camelContext xmlns=""http://camel.apache.org/schema/spring"" trace=""true"">
    <!-- here is a sample which processes the input files
         (leaving them in place - see the 'noop' flag)
         then performs content based routing on the message using XPath -->
    <route>
      <from uri=""cxf:bean:oneWayTtEndpoint""/>
      <log message=""request received""/>
      <convertBodyTo type=""java.lang.String""/>
    </route>
  </camelContext>


</beans>


CXF config:


<beans xmlns=""http://www.springframework.org/schema/beans""
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
       xmlns:http=""http://cxf.apache.org/transports/http/configuration""
       xmlns:cxf=""http://camel.apache.org/schema/cxf""
       xsi:schemaLocation=""
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://cxf.apache.org/transports/http/configuration
http://cxf.apache.org/schemas/configuration/http-conf.xsd
http://camel.apache.org/schema/cxf
http://camel.apache.org/schema/cxf/camel-cxf.xsd
       "">


    <import resource=""classpath:META-INF/cxf/cxf.xml"" />


    <cxf:cxfEndpoint id=""oneWayTtEndpoint""
                     address=""http://0.0.0.0:9003/test""
                     serviceName=""ns1:PciOneWayService"" endpointName=""ns1:PciOneWayService""
                     xmlns:ns1=""urn:pci:OneWayService:v1"">
        <cxf:properties>
            <entry key=""dataFormat"" value=""PAYLOAD"" />
            <entry key=""schema-validation-enabled"" value=""false"" />
            <entry key=""exceptionMessageCauseEnabled"" value=""false"" />
            <entry key=""faultStackTraceEnabled"" value=""false"" />
            <entry key=""wsdlURL"" value=""wsdl/oneway/MessageServiceV1.wsdl"" />
            <entry key=""loggingFeatureEnabled"" value=""true"" />
        </cxf:properties>
    </cxf:cxfEndpoint>


</beans>


WSDL: 


<?xml version=""1.0"" encoding=""utf-8""?>
<wsdl:definitions
   xmlns:wsdl=""http://schemas.xmlsoap.org/wsdl/""
   xmlns:http=""http://schemas.xmlsoap.org/wsdl/http/""
   xmlns:xsd=""http://www.w3.org/2001/XMLSchema""
   xmlns:tns=""urn:pci:OneWayService:v1""
   xmlns:soap=""http://schemas.xmlsoap.org/wsdl/soap/""
   xmlns:soapenc=""http://schemas.xmlsoap.org/soap/encoding/""
   targetNamespace=""urn:pci:OneWayService:v1"">
   <wsdl:types>
      <xsd:schema elementFormDefault=""qualified"" targetNamespace=""urn:pci:OneWayService:v1"">
         <xsd:element name=""Context"">
            <xsd:complexType>
               <xsd:sequence>
                  <xsd:element name=""TransactionId"" type=""xsd:string"" minOccurs=""0"" />
                  <xsd:element name=""TransactionType"" type=""tns:transactionTypeType"" />
                  <xsd:element name=""RefTransactionId"" type=""xsd:string"" minOccurs=""0"" />
                  <xsd:element name=""SourceAccountId"" type=""xsd:string"" minOccurs=""0""/>
                  <xsd:element name=""DestinationAccountId"" type=""xsd:string"" minOccurs=""0""/>
               </xsd:sequence>
            </xsd:complexType>
         </xsd:element>
         <xsd:element name=""Data"">
            <xsd:complexType>
               <xsd:sequence>
                  <xsd:element name=""Record"" maxOccurs=""unbounded"">
                     <xsd:complexType>
                        <xsd:sequence>
                           <xsd:element name=""Item"" maxOccurs=""unbounded"">
                              <xsd:complexType>
                                 <xsd:simpleContent>
                                    <xsd:extension base=""xsd:string"">
                                       <xsd:attribute name=""name"" use=""required""/>
                                       <xsd:attribute name=""type"" use=""optional""/>
                                    </xsd:extension>
                                 </xsd:simpleContent>
                              </xsd:complexType>
                           </xsd:element>
                        </xsd:sequence>
                        <xsd:attribute name=""name"" use=""optional""/>
                        <xsd:attribute name=""id"" use=""optional""/>
                     </xsd:complexType>
                  </xsd:element>
               </xsd:sequence>
            </xsd:complexType>
         </xsd:element>
         <xsd:simpleType name=""returnEnum"">
            <xsd:restriction base=""xsd:string"">
               <xsd:enumeration value=""Ok""/>
               <xsd:enumeration value=""Error""/>
               <xsd:enumeration value=""More""/>
               <xsd:enumeration value=""None""/>
            </xsd:restriction>
         </xsd:simpleType>
         <xsd:simpleType name=""transactionTypeType"">
            <xsd:restriction base=""xsd:string"">
               <xsd:minLength value=""1""/>
            </xsd:restriction>
         </xsd:simpleType>
         <!-- Operations -->
         <xsd:element name=""SubmitMessage"">
            <xsd:complexType>
               <xsd:sequence>
                  <xsd:element ref=""tns:Context""/>
                  <xsd:element ref=""tns:Data""/>
               </xsd:sequence>
            </xsd:complexType>
         </xsd:element>
         <xsd:element name=""SubmitMessageResponse"">
            <xsd:complexType>
               <xsd:sequence>
                  <xsd:element name=""ReturnCode"" type=""tns:returnEnum""/>
                  <xsd:element name=""ReturnMessage"" type=""xsd:string"" minOccurs=""0""/>
               </xsd:sequence>
            </xsd:complexType>
         </xsd:element>
         <xsd:element name=""GetMessage"">
            <xsd:complexType>
               <xsd:sequence>
                  <xsd:element name=""Remove"" type=""xsd:boolean"" minOccurs=""0""/>
               </xsd:sequence>
            </xsd:complexType>
         </xsd:element>
         <xsd:element name=""GetMessageResponse"">
            <xsd:complexType>
               <xsd:sequence>
                  <xsd:element name=""ReturnCode"" type=""tns:returnEnum""/>
                  <xsd:element name=""ReturnMessage"" type=""xsd:string"" minOccurs=""0""/>
                  <xsd:element name=""AckId"" type=""xsd:string"" minOccurs=""0"" />
                  <xsd:element ref=""tns:Context"" minOccurs=""0""/>
                  <xsd:element ref=""tns:Data"" minOccurs=""0""/>
               </xsd:sequence>
            </xsd:complexType>
         </xsd:element>
         <xsd:element name=""AcknowledgeMessage"">
            <xsd:complexType>
               <xsd:sequence>
                  <xsd:element name=""AckId"" type=""xsd:string"" />
               </xsd:sequence>
            </xsd:complexType>
         </xsd:element>
         <xsd:element name=""AcknowledgeMessageResponse"">
            <xsd:complexType>
               <xsd:sequence>
                  <xsd:element name=""ReturnCode"" type=""tns:returnEnum""/>
                  <xsd:element name=""ReturnMessage"" type=""xsd:string"" minOccurs=""0""/>
               </xsd:sequence>
            </xsd:complexType>
         </xsd:element>
      </xsd:schema>
   </wsdl:types>
   <wsdl:message name=""SubmitMessageSoapIn"">
      <wsdl:part name=""parameters"" element=""tns:SubmitMessage"" />
   </wsdl:message>
   <wsdl:message name=""SubmitMessageSoapOut"">
      <wsdl:part name=""parameters"" element=""tns:SubmitMessageResponse"" />
   </wsdl:message>
   <wsdl:message name=""GetMessageSoapIn"">
      <wsdl:part name=""parameters"" element=""tns:GetMessage"" />
   </wsdl:message>
   <wsdl:message name=""GetMessageSoapOut"">
      <wsdl:part name=""parameters"" element=""tns:GetMessageResponse"" />
   </wsdl:message>
   <wsdl:message name=""AcknowledgeMessageSoapIn"">
      <wsdl:part name=""parameters"" element=""tns:AcknowledgeMessage"" />
   </wsdl:message>
   <wsdl:message name=""AcknowledgeMessageSoapOut"">
      <wsdl:part name=""parameters"" element=""tns:AcknowledgeMessageResponse"" />
   </wsdl:message>
   <wsdl:portType name=""OneWayServiceSoap"">
      <wsdl:operation name=""SubmitMessage"">
         <wsdl:input message=""tns:SubmitMessageSoapIn"" />
         <wsdl:output message=""tns:SubmitMessageSoapOut"" />
      </wsdl:operation>
      <wsdl:operation name=""GetMessage"">
         <wsdl:input message=""tns:GetMessageSoapIn"" />
         <wsdl:output message=""tns:GetMessageSoapOut"" />
      </wsdl:operation>
      <wsdl:operation name=""AcknowledgeMessage"">
         <wsdl:input message=""tns:AcknowledgeMessageSoapIn"" />
         <wsdl:output message=""tns:AcknowledgeMessageSoapOut"" />
      </wsdl:operation>
   </wsdl:portType>
   <wsdl:binding name=""OneWayServiceBinding"" type=""tns:OneWayServiceSoap"">
      <soap:binding style=""document"" transport=""http://schemas.xmlsoap.org/soap/http"" />
      <wsdl:operation name=""SubmitMessage"">
         <soap:operation soapAction=""urn:pci:OneWayService:v1/SubmitMessage"" />
         <wsdl:input>
            <soap:body use=""literal"" />
         </wsdl:input>
         <wsdl:output>
            <soap:body use=""literal"" />
         </wsdl:output>
      </wsdl:operation>
      <wsdl:operation name=""GetMessage"">
         <soap:operation soapAction=""urn:pci:OneWayService:v1/GetMessage"" />
         <wsdl:input>
            <soap:body use=""literal"" />
         </wsdl:input>
         <wsdl:output>
            <soap:body use=""literal"" />
         </wsdl:output>
      </wsdl:operation>
      <wsdl:operation name=""AcknowledgeMessage"">
         <soap:operation soapAction=""urn:pci:OneWayService:v1/AcknowledgeMessage"" />
         <wsdl:input>
            <soap:body use=""literal"" />
         </wsdl:input>
         <wsdl:output>
            <soap:body use=""literal"" />
         </wsdl:output>
      </wsdl:operation>
   </wsdl:binding>
   <wsdl:service name=""PciOneWayService"">
      <wsdl:port name=""PciOneWayService"" binding=""tns:OneWayServiceBinding"">
         <soap:address location=""http://localhost:9003/test/MessageServiceV1"" />
      </wsdl:port>
   </wsdl:service>
</wsdl:definitions>


Maven POM:


<?xml version=""1.0"" encoding=""UTF-8""?>
<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">


  <modelVersion>4.0.0</modelVersion>


  <groupId>com.pci</groupId>
  <artifactId>TestCxfWs</artifactId>
  <packaging>jar</packaging>
  <version>1.0-SNAPSHOT</version>


  <name>A Camel Spring Route</name>
  <url>http://www.myorganization.org</url>


  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
  </properties>


  <dependencies>
    <dependency>
      <groupId>org.apache.cxf</groupId>
      <artifactId>cxf-rt-transports-http-jetty</artifactId>
      <version>3.1.3</version>
    </dependency>
    <dependency>
      <groupId>org.apache.cxf</groupId>
      <artifactId>cxf-rt-ws-security</artifactId>
      <version>3.1.3</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-core</artifactId>
      <version>2.16.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-spring</artifactId>
      <version>2.16.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-cxf</artifactId>
      <version>2.16.0</version>
    </dependency>


    <!-- logging -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>1.7.12</version>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-log4j12</artifactId>
      <version>1.7.12</version>
    </dependency>
    <dependency>
      <groupId>log4j</groupId>
      <artifactId>log4j</artifactId>
      <version>1.2.17</version>
    </dependency>


    <!-- testing -->
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-test-spring</artifactId>
      <version>2.16.0</version>
      <scope>test</scope>
    </dependency>


  </dependencies>


  <build>
    <defaultGoal>install</defaultGoal>


    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.3</version>
        <configuration>
          <source>1.7</source>
          <target>1.7</target>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <version>2.6</version>
        <configuration>
          <encoding>UTF-8</encoding>
        </configuration>
      </plugin>


      <!-- allows the route to be ran via 'mvn camel:run' -->
      <plugin>
        <groupId>org.apache.camel</groupId>
        <artifactId>camel-maven-plugin</artifactId>
        <version>2.16.0</version>
      </plugin>
    </plugins>
  </build>


</project>","bocamel:1449926242:2015-12-12T21:17:22.000+0000:1449926242:2015-12-12T21:17:22.000+0000:Just tried the new 2.16.1 release.  This error still occurs in 2.16.1.  The attached zip file contains a maven project that can reproduce this error.
bocamel:1449926324:2015-12-12T21:18:44.954+0000:1449926324:2015-12-12T21:18:44.954+0000:This zip file contains a maven project that can reproduce the issue.
ay:1454314004:2016-02-01T16:06:44.898+0000:1454314004:2016-02-01T16:06:44.898+0000:this is likely caused by the side-effect from the changed default behavior in came-cxf (i.e., the payload is not instantiated as a memory object like DOM by default anymore). So you can consume the data only once or you will need to cache the stream data for multiple consumption.
At a quick glance, I am not sure what is consuming your data. I'll look at it again later. But in any case, activating the stream caching option should avoid this issue.

<route streamCache=""true"">

regards, aki
ay:1454378125:2016-02-02T09:55:25.936+0000:1454378125:2016-02-02T09:55:25.936+0000:I see you activated the trace option in your camel context.
that will trigger a call to extract/consume the payload data for tracing, consequently the converter will not find the data unless the stream caching is activated.

bocamel:1454496880:2016-02-03T18:54:40.613+0000:1454496880:2016-02-03T18:54:40.613+0000:Aki,

Thank you very much!  After adding the streamCache='true"" as you suggested, it worked!

Thanks,
John

"
0,CAMEL-9343,Bug,Major,2.16.0,2.17.0,"

CORS

",Resolved,Fixed,2.17.0,Claus Ibsen,Morten Lynge,1,2,2015-11-20 13:47:34+00:00,2016-03-23 08:34:28+00:00,"With CORS enabled the preflight request for services using path params fails. I reproduced the issue by building the camel-example-swagger-java example in the source bundle and deploying to a local tomcat server.


Eg.:
$ curl -I -X OPTIONS http://localhost:8080/camel-example-swagger-java/rest/user/123
HTTP/1.1 404 Not Found
Server: Apache-Coyote/1.1
Access-Control-Allow-Origin: *
Access-Control-Allow-Methods: GET, HEAD, POST, PUT, DELETE, TRACE, OPTIONS, CONNECT, PATCH
Access-Control-Max-Age: 3600
Access-Control-Allow-Headers: Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers


However, "".../

{id}

"" works:


$ curl -I -X OPTIONS http://localhost:8080/camel-example-swagger-java/rest/user/%7Bid%7D
HTTP/1.1 200 OK
Server: Apache-Coyote/1.1
Access-Control-Allow-Origin: *
Access-Control-Allow-Methods: GET, HEAD, POST, PUT, DELETE, TRACE, OPTIONS, CONNECT, PATCH
Access-Control-Max-Age: 3600
Access-Control-Allow-Headers: Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers
Allow: OPTIONS,GET
Content-Length: 0


The issue was not present in 2.14.","davsclaus:1458693082:2016-03-23T08:31:22.664+0000:1458693082:2016-03-23T08:31:22.664+0000:Can you try with 2.17.0 as we improved CORS there.
davsclaus:1458693220:2016-03-23T08:33:40.181+0000:1458693220:2016-03-23T08:33:40.181+0000:Works now just run mvn jetty:run in that example

davsclaus:~/$ curl -I -X OPTIONS http://localhost:8080/camel-example-swagger-xml/rest/user/123
HTTP/1.1 200 OK
Date: Wed, 23 Mar 2016 08:33:11 GMT
Accept: */*
Access-Control-Allow-Headers: Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers
Access-Control-Allow-Methods: GET, HEAD, POST, PUT, DELETE, TRACE, OPTIONS, CONNECT, PATCH
Access-Control-Allow-Origin: *
Access-Control-Max-Age: 3600
breadcrumbId: ID-davsclaus-air-51473-1458721963823-0-3
id: 123
User-Agent: curl/7.43.0
Content-Length: 0
Server: Jetty(9.2.15.v20160210)
davsclaus:1458693268:2016-03-23T08:34:28.419+0000:1458693268:2016-03-23T08:34:28.419+0000:It may also be fixed in 2.16.3 but I have not tried."
0,CAMEL-9342,Improvement,Minor,None,"2.16.2, 2.17.0","
None
",Resolved,Fixed,"2.16.2, 2.17.0",Andrea Cosentino,James Netherton,0,2,2015-11-20 08:31:29+00:00,2015-11-25 16:29:42+00:00,"The metrics component does the following:



 final Slf4jReporter reporter = Slf4jReporter.forRegistry(registry)
                .outputTo(LOG)
                .convertRatesTo(TimeUnit.SECONDS)
                .convertDurationsTo(TimeUnit.MILLISECONDS)
                .build();




This results in quite a bit of noise in application log files, as some (not particularly useful) log output is generated each time the metrics thread runs. It'd be better to force the log level for this output to DEBUG.


Adding something like the following should be sufficient:



.withLoggingLevel(Slf4jReporter.LoggingLevel.DEBUG)",davsclaus:1448068369:2015-11-21T09:12:49.604+0000:1448068381:2015-11-21T09:13:01.997+0000:Yeah and maybe add an option on the component to allow to configure the logging level and set it to DEBUG by default.
0,CAMEL-9341,Bug,Major,2.16.0,2.16.1,"
None
",Resolved,Fixed,2.16.1,Claus Ibsen,Zeeshan Ahmad,0,2,2015-11-20 07:16:56+00:00,2015-12-25 10:19:48+00:00,Netty consumer reconnect fails after TCP server resart.,"davsclaus:1447975384:2015-11-20T07:23:04.986+0000:1447975384:2015-11-20T07:23:04.986+0000:I think its fixed in 2.16.1 - give it a test when its released
zeeshan949:1447998046:2015-11-20T13:40:46.562+0000:1447998046:2015-11-20T13:40:46.562+0000:ok I will test this again.
"
0,CAMEL-9340,Bug,Trivial,2.16.0,"2.15.6, 2.16.2, 2.17.0","
None
",Resolved,Fixed,"2.15.6, 2.16.2, 2.17.0",Claus Ibsen,Ken Geis,0,3,2015-11-20 00:40:12+00:00,2015-11-28 08:51:43+00:00,"I create a FileIdempotentRepository like this:



.idempotentConsumer(fileIdempotentRepository(new File('ids'))) {
    it.in.body.id
}




I get an error, and I traced it to:



Caused by: java.lang.NullPointerException: null
	at org.apache.camel.processor.idempotent.mpotentRepository.loadStore(FileIdempotentRepository.java:293) ~[camel-core-2.16.0.jar:2.16.0]
	at org.apache.camel.processor.idempotent.FileIdempotentRepository.doStart(FileIdempotentRepository.java:328) ~[camel-core-2.16.0.jar:2.16.0]




The FileIdempotentRepository is trying to create the parent directory of the file that was specified for the file store. If a path to the file is not specified, then getParentFile() returns null. Calling .mkdirs() on that bombs.


This route works the second time it runs because then the file exists. It also works if I specify my file name as ""./ids"" instead of ""ids"".","davsclaus:1447972379:2015-11-20T06:32:59.749+0000:1447972379:2015-11-20T06:32:59.749+0000:Contribution of a patch / PR is welcome
http://camel.apache.org/contributing
githubbot:1448528373:2015-11-26T16:59:33.737+0000:1448528373:2015-11-26T16:59:33.737+0000:GitHub user snurmine opened a pull request:

    https://github.com/apache/camel/pull/698

    CAMEL-9340: Using user.dir as default dir for fileStore file when fil…

    CAMEL-9340: Using user.dir as default dir for fileStore file when fileStore when file has no parent dir.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/snurmine/camel CAMEL-9340

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/698.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #698
    
----

----

githubbot:1448531997:2015-11-26T17:59:57.719+0000:1448531997:2015-11-26T17:59:57.719+0000:Github user snurmine closed the pull request at:

    https://github.com/apache/camel/pull/698

githubbot:1448533909:2015-11-26T18:31:49.689+0000:1448533909:2015-11-26T18:31:49.689+0000:GitHub user snurmine opened a pull request:

    https://github.com/apache/camel/pull/699

    CAMEL-9340

    CAMEL-9340: Using file from user.dir as default parent file for fileStore file when fileStore file has no parent file.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/snurmine/camel CAMEL-9340

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/699.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #699
    
----

----

githubbot:1448616782:2015-11-27T17:33:02.940+0000:1448616782:2015-11-27T17:33:02.940+0000:Github user snurmine closed the pull request at:

    https://github.com/apache/camel/pull/699

githubbot:1448623712:2015-11-27T19:28:32.166+0000:1448623712:2015-11-27T19:28:32.166+0000:GitHub user snurmine opened a pull request:

    https://github.com/apache/camel/pull/700

    CAMEL-9340: 

    Using working dir as default parent file for fileStore file when fileStore file has no parent file given.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/snurmine/camel CAMEL-9340

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/700.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #700
    
----
commit 911f2fc3c5dfa7457c675923f80841db36085fe6
Author: Sami Nurminen <snurmine@gmail.com>
Date:   2015-11-26T18:27:38Z

    CAMEL-9340: Using working dir as default parent file for fileStore file when fileStore file has no parent file given.

----

githubbot:1448671903:2015-11-28T08:51:43.432+0000:1448671903:2015-11-28T08:51:43.432+0000:Github user snurmine closed the pull request at:

    https://github.com/apache/camel/pull/700
"
0,CAMEL-9339,Improvement,Minor,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Unassigned,Claus Ibsen,0,3,2015-11-19 15:20:48+00:00,2016-02-19 13:31:25+00:00,"If you run camel-cdi main and there is no Camel, maybe something is wrong etc. Then log a WARN so the end user better knows the Camel is missing.","davsclaus:1455846599:2016-02-19T09:49:59.400+0000:1455846599:2016-02-19T09:49:59.400+0000:[~antonin.stefanutti] wonder if you could take a look?
githubbot:1455853001:2016-02-19T11:36:41.688+0000:1455853001:2016-02-19T11:36:41.688+0000:GitHub user astefanutti opened a pull request:

    https://github.com/apache/camel/pull/850

    CAMEL-9339: If starting camel-cdi main and no camel found then log a …

    …WARN

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/astefanutti/camel CAMEL-9339

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/850.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #850
    
----
commit 451b10509dbe3412184dbc99bf2dcf348d61f6ce
Author: Antonin Stefanutti <antonin@stefanutti.fr>
Date:   2016-02-19T11:34:12Z

    CAMEL-9339: If starting camel-cdi main and no camel found then log a WARN

----

antonin.stefanutti:1455853168:2016-02-19T11:39:28.001+0000:1455853168:2016-02-19T11:39:28.001+0000:[~davsclaus] ah yes, I forgot about that one :)

I've just pushed a PR. Let me know if that's what you had in mind.
githubbot:1455859682:2016-02-19T13:28:02.556+0000:1455859682:2016-02-19T13:28:02.556+0000:Github user astefanutti closed the pull request at:

    https://github.com/apache/camel/pull/850
"
0,CAMEL-9338,Task,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Claus Ibsen,0,2,2015-11-19 07:20:38+00:00,2015-12-10 09:32:15+00:00,"Should be updated to latest release as we are far behind on this one.


It may no longer work in OSGi and that is fine, just remove the feature","githubbot:1449407073:2015-12-06T21:04:33.812+0000:1449407073:2015-12-06T21:04:33.812+0000:GitHub user PascalSchumacher opened a pull request:

    https://github.com/apache/camel/pull/715

    CAMEL-9338: Upgrade Spring Integration to version 4.2.2

    `<camel.osgi.import.before.defaults>` is most probably incorrect, because lacking the required knowledge, I just took a guess at what value it should have.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/PascalSchumacher/camel CAMEL-9338

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/715.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #715
    
----
commit 75d967a0ec4624fe4dfa1a6823dfde82280b836d
Author: Pascal Schumacher <pascalschumacher@gmx.net>
Date:   2015-12-06T21:02:14Z

    CAMEL-9338: Upgrade Spring Integration to version 4.2.2

----

githubbot:1449711135:2015-12-10T09:32:15.021+0000:1449711135:2015-12-10T09:32:15.021+0000:Github user PascalSchumacher closed the pull request at:

    https://github.com/apache/camel/pull/715
"
0,CAMEL-9337,Task,Major,None,2.17.0,"
None
",Closed,Fixed,2.17.0,Greg A.,Claus Ibsen,0,3,2015-11-18 16:59:54+00:00,2015-12-10 18:08:05+00:00,"We should add a short readme to all the examples that tells the user a bit what it does, and how to run them. And if its a web url, then what url to use etc.","davsclaus:1447839525:2015-11-18T17:38:45.573+0000:1447839525:2015-11-18T17:38:45.573+0000:People in the community is surely welcome to help with this.

You can basically just browse at github and find the ones without an example as then there is nothing shown
https://github.com/apache/camel/tree/master/examples
gautric:1449566881:2015-12-08T17:28:01.567+0000:1449566881:2015-12-08T17:28:01.567+0000:Hi, 

we could also provide markdown style readme too.

what do you think about ?

Greg.

davsclaus:1449615293:2015-12-09T06:54:53.513+0000:1449615293:2015-12-09T06:54:53.513+0000:Yeah sure readme.md files is likely even better, then they look nicer when viewing from github etc.
githubbot:1449655286:2015-12-09T18:01:26.905+0000:1449655286:2015-12-09T18:01:26.905+0000:GitHub user gautric opened a pull request:

    https://github.com/apache/camel/pull/718

    [CAMEL-9337] Add readme.txt to all examples

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gautric/camel CAMEL-9337

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/718.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #718
    
----
commit 806fd4909d5ce81812fb6d679e2c253d2d0cc36f
Author: gautric <gautric@redhat.com>
Date:   2015-10-05T10:45:06Z

    Merge remote-tracking branch 'apache/master'

commit 2393b7f9b21fc64a2f050fb25a82905a781da205
Author: gautric <gautric@redhat.com>
Date:   2015-10-15T08:48:02Z

    Merge remote-tracking branch 'apache/master'

commit 8cba36542699de00fad5bc89d6be99c3d8690218
Author: gautric <gautric@redhat.com>
Date:   2015-11-17T16:21:04Z

    Merge remote-tracking branch 'apache/master'

commit d20b2fc05be0e919532fa2b684b002f1c21e510e
Author: gautric <gautric@redhat.com>
Date:   2015-11-19T08:48:59Z

    Merge remote-tracking branch 'apache/master'

commit c749bdd1952e5029b26f9418c54e43540144de1d
Author: gautric <gautric@redhat.com>
Date:   2015-11-25T20:50:51Z

    Merge remote-tracking branch 'apache/master'

commit 2cb5433eaec76ce69877e7c08856772aafb8fa31
Author: gautric <gautric@redhat.com>
Date:   2015-12-02T12:03:23Z

    Merge remote-tracking branch 'apache/master'

commit b9b7b46e5924af784e3a7505b8d8163c76ccf32f
Author: gautric <gautric@redhat.com>
Date:   2015-12-09T17:36:30Z

    CAMEL-9337 Add readme.txt to all examples

commit e70fbdb7b34aac9c4dcbc701c01d077536fc0f35
Author: gautric <gautric@redhat.com>
Date:   2015-12-09T17:43:39Z

    CAMEL-9337 Add readme.txt to all examples

commit 80dcf3490c4219812b9ca8c36d6f476e50753da8
Author: gautric <gautric@redhat.com>
Date:   2015-12-09T17:47:24Z

    CAMEL-9337 Add readme.txt to all examples

commit cb8be5cc1594c263bbbae98fff7c17d2ce1de03f
Author: gautric <gautric@redhat.com>
Date:   2015-12-09T17:51:46Z

    CAMEL-9337 Add readme.txt to all examples

commit 9f6277755de98954bbbe6e7ecc0fd309030d32b1
Author: gautric <gautric@redhat.com>
Date:   2015-12-09T17:58:57Z

    CAMEL-9337 Add readme.txt to all examples

----

davsclaus:1449701369:2015-12-10T06:49:29.328+0000:1449701369:2015-12-10T06:49:29.328+0000:We should likely improve this readme as well
https://github.com/apache/camel/blob/master/examples/README.md

I wonder if we could try to list all the examples, and maybe categorize them somehow? And be able to have a beginner section where new users can try the examples that are the easiest to get started with, such as the camel-example-console, and there is a few others as well.

And then a section for examples for osgi/karaf etc. And another section for spring-boot, and one about WAR etc.

But first we need readme.md files for ALL the examples, so thanks Greg for helping out.
gautric:1449708387:2015-12-10T08:46:27.181+0000:1449708387:2015-12-10T08:46:27.181+0000:Hi Claus,

I didn't commit yet all my work, all-in-one approach.
I notice our idea, until now I have several categorizes :
- easy
- osgi 
- spring
- WS-SOAP
- JMS
- social

what do you think about ?
gautric:1449727616:2015-12-10T14:06:56.686+0000:1449727616:2015-12-10T14:06:56.686+0000:I think it is resolved and we can close it
githubbot:1449730142:2015-12-10T14:49:02.183+0000:1449730142:2015-12-10T14:49:02.183+0000:GitHub user gautric opened a pull request:

    https://github.com/apache/camel/pull/721

    CAMEL-9337 Add readme.txt to all examples

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gautric/camel refactor-example-doc

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/721.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #721
    
----
commit dc596aec4f7783d3f29a48b92f2316be3152539c
Author: gautric <gautric@redhat.com>
Date:   2015-12-10T14:47:25Z

    CAMEL-9337 Add readme.txt to all examples

----

githubbot:1449730587:2015-12-10T14:56:27.864+0000:1449730587:2015-12-10T14:56:27.864+0000:Github user gautric closed the pull request at:

    https://github.com/apache/camel/pull/718

githubbot:1449730651:2015-12-10T14:57:31.954+0000:1449730651:2015-12-10T14:57:31.954+0000:Github user gautric closed the pull request at:

    https://github.com/apache/camel/pull/721

githubbot:1449731563:2015-12-10T15:12:43.102+0000:1449731563:2015-12-10T15:12:43.102+0000:GitHub user gautric opened a pull request:

    https://github.com/apache/camel/pull/722

    CAMEL-9337 Update README.md -p1

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gautric/camel patch-1

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/722.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #722
    
----
commit 0f5d72d4e475bbab30967294eec5bd0356854969
Author: Greg. A <gautric@users.noreply.github.com>
Date:   2015-12-10T15:12:22Z

    CAMEL-9337 Update README.md -p1

----

githubbot:1449742085:2015-12-10T18:08:05.264+0000:1449742085:2015-12-10T18:08:05.264+0000:Github user gautric closed the pull request at:

    https://github.com/apache/camel/pull/722
"
0,CAMEL-9336,Bug,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Antonin Stefanutti,Claus Ibsen,0,2,2015-11-18 16:57:55+00:00,2016-01-26 08:48:22+00:00,"The order of when RouteBuilder is added to CdiCamelContext is after it has been started.


You can see this from running 


    mvn camel:run


in the examples/camel-example-cdi


Then it says 0 of 0 routes started.



2015-11-18 17:57:20,045 [weld-worker-3  ] WARN  Validator                      - WELD-001473: javax.enterprise.inject.spi.Bean implementation org.apache.camel.cdi.internal.CamelContextBean@73690a3e declared a normal scope but does not implement javax.enterprise.inject.spi.PassivationCapable. It won't be possible to inject this bean into a bean with a passivating scope (@SessionScoped, @ConversationScoped). This can be fixed by assigning the Bean implementation a unique id by implementing the PassivationCapable interface.
2015-11-18 17:57:20,394 [cdi.Main.main()] INFO  CdiCamelContext                - Apache Camel 2.17-SNAPSHOT (CamelContext: camel-1) is starting
2015-11-18 17:57:20,395 [cdi.Main.main()] INFO  ManagedManagementStrategy      - JMX is enabled
2015-11-18 17:57:20,573 [cdi.Main.main()] INFO  DefaultTypeConverter           - Loaded 182 type converters
2015-11-18 17:57:20,613 [cdi.Main.main()] INFO  DefaultRuntimeEndpointRegistry - Runtime endpoint registry is in extended mode gathering usage statistics of all incoming and outgoing endpoints (cache limit: 1000)
2015-11-18 17:57:20,624 [cdi.Main.main()] INFO  CdiCamelContext                - AllowUseOriginalMessage is enabled. If access to the original message is not needed, then its recommended to turn this option off as it may improve performance.
2015-11-18 17:57:20,624 [cdi.Main.main()] INFO  CdiCamelContext                - StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
2015-11-18 17:57:20,624 [cdi.Main.main()] INFO  CdiCamelContext                - Total 0 routes, of which 0 is started.
2015-11-18 17:57:20,626 [cdi.Main.main()] INFO  CdiCamelContext                - Apache Camel 2.17-SNAPSHOT (CamelContext: camel-1) started in 0.231 seconds
2015-11-18 17:57:20,805 [cdi.Main.main()] INFO  CdiCamelContext                - Route: route1 started and consuming from: Endpoint[timer://foo?period=5000]
2015-11-18 17:57:20,872 [cdi.Main.main()] INFO  Bootstrap                      - WELD-ENV-002003: Weld SE container STATIC_INSTANCE initialized
2015-11-18 17:57:21,841 [0 - timer://foo] INFO  output                         - Exchange[ExchangePattern: InOnly, BodyType: String, Body: Saying Hello World 1 times]
2015-11-18 17:57:26,808 [0 - timer://foo] INFO  output                         - Exchange[ExchangePattern: InOnly, BodyType: String, Body: Saying Hello World 2 times]




It should say .. 1 of 1 routes started.",davsclaus:1447838375:2015-11-18T17:19:35.211+0000:1447838375:2015-11-18T17:19:35.211+0000:This also setup the routes and whatnot differently than others as they would be part of the starting Camel process. Where as with cdi they are started after which has some drawbacks.
0,CAMEL-9335,Improvement,Major,2.16.0,"2.15.5, 2.16.2, 2.17.0","
None
",Resolved,Fixed,"2.15.5, 2.16.2, 2.17.0",Claus Ibsen,Claus Ibsen,0,1,2015-11-18 07:49:59+00:00,2015-11-18 08:37:04+00:00,Due to various reasons a remote connection may close and you can end up having WARN logs on the netty http server side. We should suppress these logs and do them on a DEBUG level instead.,"davsclaus:1447804234:2015-11-18T07:50:34.380+0000:1447804234:2015-11-18T07:50:34.380+0000:{code}
2015-11-13 07:48:18,601 [ntExecutorGroup] WARN  NettyHttpConsumer              - Closing channel as an exception was thrown from Netty
java.io.IOException: Connection reset by peer
	at sun.nio.ch.FileDispatcherImpl.read0(Native Method)
	at sun.nio.ch.SocketDispatcher.read(SocketDispatcher.java:39)
	at sun.nio.ch.IOUtil.readIntoNativeBuffer(IOUtil.java:223)
	at sun.nio.ch.IOUtil.read(IOUtil.java:192)
	at sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:380)
	at io.netty.buffer.UnpooledUnsafeDirectByteBuf.setBytes(UnpooledUnsafeDirectByteBuf.java:447)
	at io.netty.buffer.AbstractByteBuf.writeBytes(AbstractByteBuf.java:881)
	at io.netty.channel.socket.nio.NioSocketChannel.doReadBytes(NioSocketChannel.java:241)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:119)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:511)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:468)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:382)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:354)
	at io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:111)
	at java.lang.Thread.run(Thread.java:745)
{code}"
0,CAMEL-9334,Task,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Claus Ibsen,0,1,2015-11-18 06:35:08+00:00,2015-11-18 08:21:35+00:00,We should upgrade to spring 4.2.x as the default for Camel 2.17,
0,CAMEL-9333,Improvement,Major,2.16.0,None,"
None
",Resolved,Fixed,2.17.0,Henryk Konsek,Henryk Konsek,0,1,2015-11-17 10:26:54+00:00,2015-11-17 10:29:29+00:00,KuraRouter should try to read XML routes definition from ConfigAdmin when starting. That would allow to modify the routing rules at runtime with a text editor only or using the MQTT updates.,hekonsek:1447727369:2015-11-17T10:29:29.329+0000:1447727369:2015-11-17T10:29:29.329+0000:Done in 5068678c43695ed3811b4c1f2edea8f0b2b0a59c.
0,CAMEL-9332,Improvement,Major,2.16.0,"2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.17.1, 2.18.0",Claus Ibsen,Minh Tran,0,3,2015-11-16 21:46:38+00:00,2017-01-09 23:35:37+00:00,"My route looks like


from(“direct:start”).to(“direct:end”)


My unit test looks like



@RunWith(SpringJUnit4ClassRunner.class)
@SpringApplicationConfiguration(classes = Config.class)
@MockEndpoints
public class MyUnitTest {

 @Produce(uri=“direct:start”)
 private ProducerTemplate producer;

 @EndpointInject(uri=“mock:direct:end”)
 private MockEndpoint end;

	@Test
	public void testMock() throws InterruptedException {
		end.expectedBodiesReceived(""blah"");
		producerTemplate.sendBody(""blah"");
		end.assertIsSatisfied();
	}

}




It looks like the direct:end bit is never mocked so the assertion fails. It’s like @MockEndpoints is completely ignored. 


There are workarounds described here http://camel.465427.n5.nabble.com/spring-boot-test-mocks-td5773902.html


There are disadvantages to these workarounds as listed in that thread. Thanks","davsclaus:1460695474:2016-04-15T12:44:34.742+0000:1460695474:2016-04-15T12:44:34.742+0000:You can now do
{code}
@RunWith(CamelSpringBootJUnit4ClassRunner.class)
@MockEndpoints
@SpringBootApplication
@SpringApplicationConfiguration({MockEndpointsTest.class})
public class MockEndpointsTest {

 ...
}
{code}

Notice the CamelSpringBootJUnit4ClassRunner you use as run with, and then the rest is spring-boot annotations, and you can then use the Camel annotations for mock, mock skip and so on.
chikim79:1483976137:2017-01-09T23:35:37.919+0000:1483976137:2017-01-09T23:35:37.919+0000:Above example doesn't work with SpringBoot 1.4.x

For Spring-Boot 1.4.x
Use Camel 2.18.x with
{code}
@RunWith(CamelSpringBootRunner.class)
@MockEndpoints
@SpringBootTest(classes = {TestConfig.class})
public class SomeTest {
...
}
{code}"
0,CAMEL-9331,Bug,Major,2.16.0,"2.16.2, 2.17.0","
None
",Resolved,Fixed,"2.16.2, 2.17.0",Claus Ibsen,Aaron Whiteside,0,2,2015-11-16 19:16:28+00:00,2015-11-18 08:28:52+00:00,"Thread leak in Http4Endpoint, doStop() does not close() the httpClient


Also when using a shared client connection manager the builder must be told of this so it does not close() a shared connection manager when the http client is closed.",davsclaus:1447806532:2015-11-18T08:28:52.454+0000:1447806532:2015-11-18T08:28:52.454+0000:Thanks for the patch.
0,CAMEL-9330,Improvement,Minor,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Luca Burgazzoli,Claus Ibsen,0,3,2015-11-16 09:54:37+00:00,2016-01-15 12:35:04+00:00,"We should enable this out of the box as people really always should enable that so on JVM termination we trap that and do a graceful shutdown attempt.


We can add a disableHandupSupport method to turn it off if people need it off in rare cases.","davsclaus:1451010032:2015-12-25T10:20:32.916+0000:1451010032:2015-12-25T10:20:32.916+0000:Contributions is welcome
http://camel.apache.org/contributing
githubbot:1452674121:2016-01-13T16:35:21.273+0000:1452674121:2016-01-13T16:35:21.273+0000:GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/765

    CAMEL-9330 : Main - enableHangupSupport should be default enabled

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel CAMEL-9330

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/765.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #765
    
----
commit 1e3ebee1f889462948ae770f3c2dc9c500d6ded9
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-01-13T16:34:59Z

    CAMEL-9330 : Main - enableHangupSupport should be default enabled

----

githubbot:1452832249:2016-01-15T12:30:49.352+0000:1452832249:2016-01-15T12:30:49.352+0000:Github user lburgazzoli closed the pull request at:

    https://github.com/apache/camel/pull/765

davsclaus:1452832356:2016-01-15T12:32:36.775+0000:1452832356:2016-01-15T12:32:36.775+0000:Thanks for the PR.

Btw Luca you can now assign jira tickets yourself
lb:1452832504:2016-01-15T12:35:04.667+0000:1452832504:2016-01-15T12:35:04.667+0000:thank you Claus"
0,CAMEL-9329,Improvement,Major,2.16.0,None,"
None
",Resolved,Fixed,2.17.0,Henryk Konsek,Henryk Konsek,0,1,2015-11-16 09:21:29+00:00,2015-11-16 09:23:32+00:00,"For the current version end user has to provide an OSGi compendium dependency in the proper version in the client project. It is annoying and error prone process of guessing the right version, so we should import it on the behalf of the user.",hekonsek:1447637006:2015-11-16T09:23:26.942+0000:1447637006:2015-11-16T09:23:26.942+0000:Fixed in dc0b730f68ece9d593fcd6f3c65d146f9e05c31f.
0,CAMEL-9328,Improvement,Major,2.16.0,None,"
None
",Resolved,Fixed,2.17.0,Henryk Konsek,Henryk Konsek,0,1,2015-11-16 08:34:40+00:00,2015-11-16 09:30:56+00:00,"Current service(Class) method returns NPE for OSGi services not available in Kura. We should provide two methods instead:



service(Class)
requiredService(Class)



Where the first method can return null.",hekonsek:1447637085:2015-11-16T09:24:45.145+0000:1447637085:2015-11-16T09:24:45.145+0000:Fixed in 005df4cb73063d19ae11e79a4106ba30c235f24c.
0,CAMEL-9327,Improvement,Minor,None,2.17.0,"
None
",Resolved,Cannot Reproduce,2.17.0,Claus Ibsen,Claus Ibsen,0,1,2015-11-15 13:13:12+00:00,2016-02-22 09:16:54+00:00,"You may ned up with


tx begin 123
tx commit 123
tx rollback 123
tx commit 123


As the rollback overrule the commit the tx is really rolled back. 


We should defer to commit/rollback logging till the end of the tx boundary so we only get the logging once.",
0,CAMEL-9326,Improvement,Minor,2.16.1,"2.16.2, 2.17.0","
None
",Resolved,Fixed,"2.16.2, 2.17.0",Claus Ibsen,Claus Ibsen,0,1,2015-11-15 07:38:12+00:00,2015-11-15 08:04:28+00:00,"You will get errors like



	at org.apache.camel.impl.JndiRegistry.bind(JndiRegistry.java:126)
	at camelinaction.JndiRegistryTest.setUp(JndiRegistryTest.java:25)
	at junit.framework.TestCase.runBare(TestCase.java:139)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:252)
	at junit.framework.TestSuite.run(TestSuite.java:247)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:86)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:117)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:234)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:74)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)
Caused by: javax.naming.NoInitialContextException: Need to specify class name in environment or system property, or as an applet parameter, or in an application resource file:  java.naming.factory.initial




If using JndiRegistry manually.",
0,CAMEL-9325,Improvement,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Claus Ibsen,0,1,2015-11-15 06:55:10+00:00,2015-12-25 10:39:38+00:00,We should make it easier to use camel-spring-boot where users use existing xml files with either <camelContext> or <routes> eg so its easier for them to migrate.,"davsclaus:1447541745:2015-11-15T06:55:45.616+0000:1447541745:2015-11-15T06:55:45.616+0000:See SO
http://stackoverflow.com/questions/33702518/moving-camel-spring-xml-to-spring-boot"
0,CAMEL-9324,Improvement,Major,None,4.x,"
None
",Open,Unresolved,4.x,Unassigned,Claus Ibsen,0,2,2015-11-14 10:42:16+00:00,2023-08-09 09:27:54+00:00,"See nabble
http://camel.465427.n5.nabble.com/sftp-endpoint-is-not-as-performant-as-expected-tp5773654p5773879.html


Yeah the current changed read-lock afair don't keep state between
polls. So we could look into one that does that, and do a full scan of
all the files, and then do a change detect on all files all together
and make up which ones hasn't changed. And that way can react faster
than currently.


Now that may require doing more file directory listings to gather all
those files and their timestamps / size to see which one has changed,
instead of monitoring a single file one by one. Also it may mean that
files can be processed out of order, if a file sort isn't must be
strictly followed.","davsclaus:1577926382:2020-01-02T08:53:02.388+0000:1577926382:2020-01-02T08:53:02.388+0000:See also SO
https://stackoverflow.com/questions/53780257/how-can-we-combine-readlockcheckinterval-and-maxmessagesperpoll-in-camel-file-co?noredirect=1#comment105287183_53780257"
0,CAMEL-9323,Improvement,Minor,None,Future,"
None
",Resolved,Won't Fix,Future,Unassigned,Thiago Martins,0,2,2015-11-13 21:08:29+00:00,2017-02-24 13:43:55+00:00,"Writting the route attached to this issue will not work once splitter creates new exchanges and sets only the body


Actual Splitter code could verify if body is a GroupedExchangeList then it should propagate the entire exchange instead of body only","rogue.thiago@gmail.com:1447658131:2015-11-16T15:15:31.442+0000:1447659300:2015-11-16T15:35:00.140+0000:I tried to analyze Splitter source code (https://goo.gl/rMwrLp)... then the attachment should solve (barely)
davsclaus:1451009662:2015-12-25T10:14:22.072+0000:1451009662:2015-12-25T10:14:22.072+0000:See CAMEL-9252
rogue.thiago@gmail.com:1453363952:2016-01-21T16:12:32.749+0000:1453363952:2016-01-21T16:12:32.749+0000:[~davsclaus] I think they are not related... maybe I am wrongly using splitter processor
I think it would be helpful if we could split a group of exchanges (instead of group of messages)
Actually it's hard to retrieve properties set inside the splitter"
0,CAMEL-9322,Improvement,Major,None,3.0.0,"
None
",Resolved,Won't Fix,3.0.0,Unassigned,Claus Ibsen,0,1,2015-11-13 16:43:44+00:00,2019-07-31 09:20:07+00:00,"So we have it like for getComponent(name) getEndpoint(uri) so you can lookup an existing data format to reuse, or create a default dataformat based on the name.


Today there is a resolveDataFormat that creates a new instance if none has explicit added to the registry beforehand. But an end user may want to share a dataformat in a CamelContext like you can do with component / endpoints.


See CAMEL-9320","davsclaus:1447404296:2015-11-13T16:44:56.360+0000:1447404296:2015-11-13T16:44:56.360+0000:We can potentially look at adding this sooner than 3.0, but so far there hasn't be so many people asking about this. 

You can use the JIRA voting."
0,CAMEL-9321,Bug,Major,2.16.0,"2.16.1, 2.17.0","
None
",Resolved,Fixed,"2.16.1, 2.17.0",Claus Ibsen,Antonin Stefanutti,0,3,2015-11-13 14:52:04+00:00,2015-11-13 15:13:06+00:00,"When running mvn camel:run in the camel-example-sql-blueprint module or in a generate project with the camel-archetype-blueprint Maven archetype, the following error occurs:



[ERROR] *************************************
[ERROR] Error occurred while running main from: org.apache.camel.test.blueprint.Main
[ERROR] 
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.camel.maven.RunMojo$1.run(RunMojo.java:455)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Gave up waiting for service (objectClass=org.apache.camel.CamelContext)
	at org.apache.camel.test.blueprint.CamelBlueprintHelper.getOsgiService(CamelBlueprintHelper.java:265)
	at org.apache.camel.test.blueprint.CamelBlueprintHelper.getOsgiService(CamelBlueprintHelper.java:226)
	at org.apache.camel.test.blueprint.Main.doStart(Main.java:107)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:124)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:353)
	at org.apache.camel.test.blueprint.Main.main(Main.java:81)
	... 6 more
[ERROR] *************************************




This is due to a missing dependency on org.apache.aries.blueprint.core.","githubbot:1447397823:2015-11-13T14:57:03.153+0000:1447397823:2015-11-13T14:57:03.153+0000:GitHub user astefanutti opened a pull request:

    https://github.com/apache/camel/pull/680

    CAMEL-9321: Blueprint example and archetype does not work when execut…

    …ed with camel:run

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/astefanutti/camel CAMEL-9321

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/680.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #680
    
----
commit 29072aeca63f1b774096c22cf5973249a1622b12
Author: Antonin Stefanutti <antonin@stefanutti.fr>
Date:   2015-11-13T14:53:35Z

    CAMEL-9321: Blueprint example and archetype does not work when executed with camel:run

----

davsclaus:1447397932:2015-11-13T14:58:52.175+0000:1447397932:2015-11-13T14:58:52.175+0000:Thanks for the PR
githubbot:1447398786:2015-11-13T15:13:06.722+0000:1447398786:2015-11-13T15:13:06.722+0000:Github user astefanutti closed the pull request at:

    https://github.com/apache/camel/pull/680
"
0,CAMEL-9320,Bug,Major,None,2.16.1,"
None
",Resolved,Won't Fix,2.16.1,Unassigned,Thomas Diesler,0,3,2015-11-13 11:16:20+00:00,2015-11-27 07:28:11+00:00,"One would expect to set xstream permissions on the DataFormat associated with a given CamelContext like this



        XStreamDataFormat dataFormat = (XStreamDataFormat) camelctx.resolveDataFormat(""xstream"");
        dataFormat.setPermissions(""+"" + Customer.class.getName());




This approach fails however because the DefaultDataFormatResolver does not cache the DataFormat instances it creates","githubbot:1447386983:2015-11-13T11:56:23.582+0000:1447386983:2015-11-13T11:56:23.582+0000:GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/677

    [CAMEL-9320] Cannot set XStream permissions on a per CamelContext basis

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-9320

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/677.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #677
    
----
commit 57f94f4c0a80e16f7d765289d91c7a309afb2b86
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2015-11-13T11:53:14Z

    [CAMEL-9320] Cannot set XStream permissions on a per CamelContext basis

----

githubbot:1447388280:2015-11-13T12:18:00.115+0000:1447388280:2015-11-13T12:18:00.115+0000:GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/678

    [CAMEL-9320] Cannot set XStream permissions on a per CamelContext basis

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-9320m

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/678.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #678
    
----
commit c4bc88d31958118028339b5cc85b84b6f1a6ce10
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2015-11-13T11:53:14Z

    [CAMEL-9320] Cannot set XStream permissions on a per CamelContext basis

----

davsclaus:1447396734:2015-11-13T14:38:54.509+0000:1447396734:2015-11-13T14:38:54.509+0000:The tests of camel+xstream was lacking to specify the types they are using, this has been updated and you should do like they do. 
githubbot:1448580491:2015-11-27T07:28:11.198+0000:1448580491:2015-11-27T07:28:11.198+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/677

githubbot:1448580491:2015-11-27T07:28:11.268+0000:1448580491:2015-11-27T07:28:11.268+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/678
"
0,CAMEL-9319,Bug,Minor,"2.16.0, 2.15.4","2.15.5, 2.16.2, 2.17.0","
None
",Resolved,Fixed,"2.15.5, 2.16.2, 2.17.0",Andrea Cosentino,Daniel Gruszczyk,0,3,2015-11-13 10:50:36+00:00,2015-11-16 17:02:41+00:00,"When using ProducerTemplate for execution of an ssh command (i.e. producerTemplate.requestBody(""ssh://..."", String.class)), 11 threads are being created, that are never killed. Any subsequent calls create new threads, eventually this exhausts memory and thread resources on the machine.
These threads are not being killed even when explicitly stopping the ProducerTemplate.
Here is a more detailed discussion, together with profiler results and code to reproduce the issue:


http://stackoverflow.com/questions/33671567/spring-boot-camel-producertemplate-thousands-of-threads


http://camel.465427.n5.nabble.com/Spring-Boot-Camel-producerTemplate-ssh-spawning-thousands-of-threads-td5773741.html","davsclaus:1447542292:2015-11-15T07:04:52.562+0000:1447542309:2015-11-15T07:05:09.538+0000:[~ancosen] do you want to give this a try?

The client should be moved to the consumer / producer so its not stored on the endpoint
https://github.com/apache/camel/blob/master/components/camel-ssh/src/main/java/org/apache/camel/component/ssh/SshEndpoint.java#L47

And the endpoint should be singleton=true
https://github.com/apache/camel/blob/master/components/camel-ssh/src/main/java/org/apache/camel/component/ssh/SshEndpoint.java#L78

The sendExecCommand can likely be moved to a SshHelper method as a public static and take in the client as parameter, then the producer/consumer can reuse it
https://github.com/apache/camel/blob/master/components/camel-ssh/src/main/java/org/apache/camel/component/ssh/SshEndpoint.java#L81

That means we can keep the endpoint nice and simple as it should.

And double check in the sendExecCommand that all the resources are closed properly, eg as those memory/thread leaks reported in the SO link.
acosentino:1447546680:2015-11-15T08:18:00.505+0000:1447546680:2015-11-15T08:18:00.505+0000:Hi Claus,
Yes, I'll work on this :-)
acosentino:1447663088:2015-11-16T16:38:08.360+0000:1447663088:2015-11-16T16:38:08.360+0000:Now it should be ok. I've attached a five minutes Junit Producer Test with 500 messages. It looks good."
0,CAMEL-9318,Bug,Major,2.16.0,"2.16.2, 2.17.0","
None
",Resolved,Fixed,"2.16.2, 2.17.0",Claus Ibsen,Vaclav Chalupa,0,2,2015-11-13 09:03:06+00:00,2015-11-13 14:49:30+00:00,"There is issue with streaming endpoint and type=event.



from(""twitter://streaming/user?type=event"")




It is working for type=polling.


Reproducer:


Just run test for camel-twitter:



mvn test -P twitter-test




Stack trace:



java.lang.ClassCastException: org.apache.camel.component.twitter.TwitterEndpointEvent cannot be cast to org.apache.camel.component.direct.DirectEndpoint
	at org.apache.camel.component.direct.DirectConsumer.<init>(DirectConsumer.java:37)
	at org.apache.camel.component.twitter.consumer.TwitterConsumerEvent.<init>(TwitterConsumerEvent.java:32)
	at org.apache.camel.component.twitter.TwitterEndpointEvent.createConsumer(TwitterEndpointEvent.java:40)
	at org.apache.camel.impl.EventDrivenConsumerRoute.addServices(EventDrivenConsumerRoute.java:68)
	at org.apache.camel.impl.DefaultRoute.onStartingServices(DefaultRoute.java:98)
	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:158)
	at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:3439)
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:3369)
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:3146)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3002)
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:175)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2798)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2794)
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:2817)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:2794)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:2763)
	at org.apache.camel.test.junit4.CamelTestSupport.startCamelContext(CamelTestSupport.java:544)
	at org.apache.camel.test.junit4.CamelTestSupport.doSetUp(CamelTestSupport.java:334)
	at org.apache.camel.test.junit4.CamelTestSupport.setUp(CamelTestSupport.java:238)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)",davsclaus:1447397370:2015-11-13T14:49:30.040+0000:1447397370:2015-11-13T14:49:30.040+0000:Thanks it should extend the default component instead.
0,CAMEL-9317,Improvement,Major,2.16.0,"2.16.1, 2.15.5, 2.17.0","
None
",Resolved,Fixed,"2.16.1, 2.15.5, 2.17.0",Akitoshi Yoshida,Akitoshi Yoshida,0,1,2015-11-12 21:46:09+00:00,2015-11-12 22:17:28+00:00,Introduce the same system property based configuration introduced in camel-xstream to camel-salesforce to control its XStream's deserialization.,
0,CAMEL-9316,Bug,Minor,2.15.3,"2.15.5, 2.16.2, 2.17.0","
None
",Resolved,Fixed,"2.15.5, 2.16.2, 2.17.0",Claus Ibsen,Justin Heesemann,0,2,2015-11-12 17:10:31+00:00,2015-11-21 09:34:38+00:00,"When using an aggregator with a LevelDBAggregationRepository and you are sending events, that are already complete by themselves (i.e. the fulfill the completionPredicate and they were never really aggregated), there is a lot of warning logging like



Nov 12, 2015 6:00:57 PM org.apache.camel.component.leveldb.LevelDBAggregationRepository confirm
WARNUNG: Unable to confirm exchangeId [ID-LPNB2331-59378-1447347654170-0-939 from repository collectionNotifications: Not Found]




My guess is that calling confirm on the repository in such cases is unnecessary, but I'm not sure, if it is easy to detect wether confirm should be called or not.","davsclaus:1447542366:2015-11-15T07:06:06.324+0000:1447542366:2015-11-15T07:06:06.324+0000:Ah so the aggregation completion is just size=1 etc so there wasn't any previous aggregated message?
convoi:1447637729:2015-11-16T09:35:29.359+0000:1447637729:2015-11-16T09:35:29.359+0000:I'm using completionTimeout(getTimeout()).completionPredicate(isFinished())

So when a message enters the aggregation step, it may a) be complete already because of the completionPredicate or b) it will complete another message

Think of a simple string concatenating aggregator and a completionPredicate that says string.length > 3.
when you send a string ""abcd"" it is already complete by itself.
if you send ""ab"" and never something that matches, it will timeout somewhen..
"
0,CAMEL-9315,Improvement,Major,2.16.0,None,"
None
",Resolved,Fixed,2.17.0,Henryk Konsek,Henryk Konsek,0,1,2015-11-12 14:55:30+00:00,2015-11-12 14:59:49+00:00,KuraRouter should provide ConsumerTemplate instance.,hekonsek:1447311589:2015-11-12T14:59:49.408+0000:1447311589:2015-11-12T14:59:49.408+0000:Fixed in d16c52f5820c162be78625c65735a743cf76546e.
0,CAMEL-9284,Bug,Minor,2.16.0,"2.16.1, 2.17.0","
None
",Resolved,Fixed,"2.16.1, 2.17.0",Claus Ibsen,Minh Tran,0,2,2015-11-02 22:03:01+00:00,2015-11-23 06:45:54+00:00,"After upgrading to Camel 2.16.0, I’m starting to get warning messages appear in my logs whenever a route is using a propertyplaceholder with the prop prefix,


eg <aggregate prop:completionInterval=""pricing.rrp.aggregation.timeout"" strategyRef=""useLatestAggregationStrategy"">


The warning is



2015-11-02 16:28:53,261 [main] WARN  org.apache.camel.model.ProcessorDefinitionHelper - Could not restore definition properties
java.lang.IllegalArgumentException: Could not find a suitable setter for property: completionInterval as there isn't a setter method with same type: java.lang.String nor type conversion possible: For input string: ""{{pricing.rrp.aggregation.timeout}}""
	at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:567) ~[camel-core-2.16.0.jar:2.16.0]
	at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:577) ~[camel-core-2.16.0.jar:2.16.0]
	at org.apache.camel.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:456) ~[camel-core-2.16.0.jar:2.16.0]
	at org.apache.camel.model.ProcessorDefinitionHelper$1.run(ProcessorDefinitionHelper.java:629) ~[camel-core-2.16.0.jar:2.16.0]
	at org.apache.camel.model.ProcessorDefinitionHelper$RestoreAction.run(ProcessorDefinitionHelper.java:578) [camel-core-2.16.0.jar:2.16.0]
	at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:498) [camel-core-2.16.0.jar:2.16.0]
	at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:219) [camel-core-2.16.0.jar:2.16.0]
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:1069) [camel-core-2.16.0.jar:2.16.0]
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:196) [camel-core-2.16.0.jar:2.16.0]
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:944) [camel-core-2.16.0.jar:2.16.0]
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:3245) [camel-core-2.16.0.jar:2.16.0]
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:2968) [camel-core-2.16.0.jar:2.16.0]
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:172) [camel-core-2.16.0.jar:2.16.0]
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2799) [camel-core-2.16.0.jar:2.16.0]
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2795) [camel-core-2.16.0.jar:2.16.0]
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:2818) [camel-core-2.16.0.jar:2.16.0]
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:2795) [camel-core-2.16.0.jar:2.16.0]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) [camel-core-2.16.0.jar:2.16.0]
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:2764) [camel-core-2.16.0.jar:2.16.0]
	at org.apache.camel.test.spring.CamelSpringTestContextLoader$7.execute(CamelSpringTestContextLoader.java:515) [camel-test-spring-2.16.0.jar:2.16.0]
	at org.apache.camel.test.spring.CamelSpringTestHelper.doToSpringCamelContexts(CamelSpringTestHelper.java:92) [camel-test-spring-2.16.0.jar:2.16.0]
	<snip>





The unit tests I have written still all pass but this warning appears whenever camel is starting up. Should I be worried or can I ignore it? Thanks","davsclaus:1448175301:2015-11-22T14:55:01.627+0000:1448175301:2015-11-22T14:55:01.627+0000:I cannot reproduce this on master branch. Can you try with 2.16.1 release when its out.
davsclaus:1448175370:2015-11-22T14:56:10.477+0000:1448175370:2015-11-22T14:56:10.477+0000:If you still can, can you attach a zip with your unit test that does this. 
mtran:1448211590:2015-11-23T00:59:50.558+0000:1448211590:2015-11-23T00:59:50.558+0000:I can confirm the bug is fixed on 2.16.1
davsclaus:1448232354:2015-11-23T06:45:54.110+0000:1448232354:2015-11-23T06:45:54.110+0000:Ah great thanks for reporting and testing it on the new release."
0,CAMEL-9283,New Feature,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Stephan Siano,0,2,2015-11-02 15:54:29+00:00,2015-11-24 06:40:14+00:00,"This data format that can convert a Camel message with attachments into a Camel message having a MIME-Multipart message as message body (and no attachments).
The use case for this is to enable the user to send attachments over endpoints that do not directly support attachments, either as special protocol implementation (e.g. send a MIME-multipart over an HTTP endpoint) or as a kind of tunneling solution (e.g. because camel-jms does not support attachments but by marshalling the message with attachments into a MIME-Multipart, sending that to a JMS queue,
Receiving the message from the JMS queue and unmarshalling it again (into a message body with attachments).","siano:1447212522:2015-11-11T11:28:42.342+0000:1447212522:2015-11-11T11:28:42.342+0000:The new patch fixes checkstyle issues and changes logging
davsclaus:1447398885:2015-11-13T15:14:45.355+0000:1447398885:2015-11-13T15:14:45.355+0000:Thanks will get it merged into the code base.
davsclaus:1447403657:2015-11-13T16:34:17.289+0000:1447403657:2015-11-13T16:34:17.289+0000:Thanks the code has been merged to master. Do you mind helping with the documentation?
siano:1447626564:2015-11-16T06:29:24.780+0000:1447626564:2015-11-16T06:29:24.780+0000:No Problem, however I am not sure how that is supposed to work technically. I would guess that a new page with a link under misc data formats is the way to go?

Is there some kind of review process for it?
davsclaus:1447631593:2015-11-16T07:53:13.062+0000:1447631593:2015-11-16T07:53:13.062+0000:There is some details here
http://camel.apache.org/how-do-i-edit-the-website.html

Yeah a new page linked from the dataformat page
http://camel.apache.org/data-format.html

Just edit the page and people take a look and comment/edit the page too.

Alternative you can attach a .txt file with some docs and one of us can add it as a wiki.
siano:1447631959:2015-11-16T07:59:19.596+0000:1447631959:2015-11-16T07:59:19.596+0000:Does this description make sense?
davsclaus:1448318414:2015-11-24T06:40:14.313+0000:1448318414:2015-11-24T06:40:14.313+0000:Thanks for the docs"
0,CAMEL-9282,Bug,Minor,2.16.0,"2.16.2, 2.17.0","
None
",Resolved,Fixed,"2.16.2, 2.17.0",Claus Ibsen,Augus Topor,0,1,2015-11-02 06:24:45+00:00,2015-11-22 15:02:49+00:00,"After upgrade from 1.4.1, I encountered below error when receiving web service message where SoapAction is blank. Below is the trace log and error log.


13:12:39,526 TRACE [org.apache.camel.component.cxf.DefaultCxfBinding] (default-workqueue-2) Populate header from CXF header=accept-encoding value=[gzip,deflate]
13:12:46,769 TRACE [org.apache.camel.component.cxf.DefaultCxfBinding] (default-workqueue-2) Populate header from CXF header=connection value=[keep-alive]
13:12:57,869 TRACE [org.apache.camel.component.cxf.DefaultCxfBinding] (default-workqueue-2) Populate header from CXF header=content-type value=[text/xml;charset=UTF-8]
13:12:59,803 TRACE [org.apache.camel.component.cxf.DefaultCxfBinding] (default-workqueue-2) Populate header from CXF header=Host value=[localhost:8088]
13:13:00,786 TRACE [org.apache.camel.component.cxf.DefaultCxfBinding] (default-workqueue-2) Populate header from CXF header=SoapAction value=[]


13:17:21,407 WARN  [org.apache.cxf.phase.PhaseInterceptorChain] (default-workqueue-2) Interceptor for 

{http://member.ws.com}

WsMemberService#

{http://member.ws.com}

receivedMemberMessage has thrown exception, 
unwinding now: java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
		at java.util.ArrayList.rangeCheck(ArrayList.java:635) [rt.jar:1.7.0_71]
	at java.util.ArrayList.get(ArrayList.java:411) [rt.jar:1.7.0_71]
	at org.apache.camel.component.cxf.DefaultCxfBinding.propagateHeadersFromCxfToCamel(DefaultCxfBinding.java:552) [camel-cxf-2.16.0.jar:2.16.0]
	at org.apache.camel.component.cxf.DefaultCxfBinding.populateExchangeFromCxfRequest(DefaultCxfBinding.java:247) [camel-cxf-2.16.0.jar:2.16.0]
	at org.apache.camel.component.cxf.CxfConsumer$1.prepareCamelExchange(CxfConsumer.java:187) [camel-cxf-2.16.0.jar:2.16.0]
	at org.apache.camel.component.cxf.CxfConsumer$1.syncInvoke(CxfConsumer.java:132) [camel-cxf-2.16.0.jar:2.16.0]
	at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:78) [camel-cxf-2.16.0.jar:2.16.0]
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:59) [cxf-core-3.1.2.jar:3.1.2]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471) [rt.jar:1.7.0_71]
	at java.util.concurrent.FutureTask.run(FutureTask.java:262) [rt.jar:1.7.0_71]
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor$2.run(ServiceInvokerInterceptor.java:126) [cxf-core-3.1.2.jar:3.1.2]
	at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37) [cxf-core-3.1.2.jar:3.1.2]
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:131) [cxf-core-3.1.2.jar:3.1.2]
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:308) [cxf-core-3.1.2.jar:3.1.2]
	at org.apache.cxf.phase.PhaseInterceptorChain.resume(PhaseInterceptorChain.java:278) [cxf-core-3.1.2.jar:3.1.2]
	at org.apache.cxf.interceptor.OneWayProcessorInterceptor$1.run(OneWayProcessorInterceptor.java:137) [cxf-core-3.1.2.jar:3.1.2]
	at org.apache.cxf.workqueue.AutomaticWorkQueueImpl$3.run(AutomaticWorkQueueImpl.java:428) [cxf-core-3.1.2.jar:3.1.2]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) [rt.jar:1.7.0_71]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) [rt.jar:1.7.0_71]
	at org.apache.cxf.workqueue.AutomaticWorkQueueImpl$AWQThreadFactory$1.run(AutomaticWorkQueueImpl.java:353) [cxf-core-3.1.2.jar:3.1.2]
	at java.lang.Thread.run(Thread.java:745) [rt.jar:1.7.0_71]",
0,CAMEL-9281,Bug,Major,"2.15.4, 2.16.1","2.16.2, 2.17.0","
None
",Resolved,Fixed,"2.16.2, 2.17.0",Claus Ibsen,Edward Welch,0,2,2015-11-01 15:21:51+00:00,2016-01-09 14:38:09+00:00,"I have created a scenario which seems to exploit a bug in the HttpHelper createURL method.


My use case:


Using http4 component in an http proxy with bridgeEndpoint true


Send a request such as http://somesite/contextpath


Request is forwarded by my proxy to a tomcat server.  Tomcat will reply with a 302 and a new Location of http://somesite/contextpath/ as this is a built in behavior of tomcat to redirect the caller to the contextpath INCLUDING the trailing slash


I have http client configured with httpClient.redirectsEnabled=false
Therefore the 302 is sent back through my proxy to the caller.


The caller then makes the call to http://somesite/contextpath/


This is where the problem occurs,  within the createUrl method:



        String path = exchange.getIn().getHeader(Exchange.HTTP_PATH, String.class);
        // NOW the HTTP_PATH is just related path, we don't need to trim it
        if (path != null) {
            if (path.startsWith(""/"")) {
                path = path.substring(1);
            }
            if (path.length() > 0) {
                // make sure that there is exactly one ""/"" between HTTP_URI and
                // HTTP_PATH
                if (!uri.endsWith(""/"")) {
                    uri = uri + ""/"";
                }
                uri = uri.concat(path);
            }
        }




When the second request is made with the trailing slash, the string ""path"" is / (just a single forward slash)


This hits the first conditional and results in true, which the following substring then removes this slash.


Now path.length() is not > 0 so the second conditional evaluates false.


And we end up with a uri returned that no longer has the trailing slash.


This is sent to Tomcat, Tomcat then promptly returns another 302 and a redirect loop is created.


I think the intent of this block of code is to combine the uri and path and make sure there isn't a duplicate forward slash?


So the simplest fix I can suggest would be something like



        String path = exchange.getIn().getHeader(Exchange.HTTP_PATH, String.class);
        // NOW the HTTP_PATH is just related path, we don't need to trim it
        if (path != null && ! path.equals(""/"")) {
            if (path.startsWith(""/"")) {
                path = path.substring(1);
            }
            if (path.length() > 0) {
                // make sure that there is exactly one ""/"" between HTTP_URI and
                // HTTP_PATH
                if (!uri.endsWith(""/"")) {
                    uri = uri + ""/"";
                }
                uri = uri.concat(path);
            }
        }




Where we would just check for this case explicitly with:


if (path != null && ! path.equals(""/"")) {


Thoughts?


I could probably put together a PR and add some test cases","erwelch:1446456123:2015-11-02T17:22:03.324+0000:1446456123:2015-11-02T17:22:03.324+0000:My initial suggestion will not work, this is what I'm thinking now:

{code}
        if (path != null) {
            // if both the path and the uri have slashes, remove a slash from the uri
            // we don't remove it from ""path"" to handle the case where the path is equal to ""/""
            if (path.startsWith(""/"") && uri.endsWith(""/"")) {
                uri = uri.substring(0, uri.length());
            }
            if (path.length() > 0) {
                // make sure that there is exactly one ""/"" between HTTP_URI and
                // HTTP_PATH
                if (!uri.endsWith(""/"") && !path.startsWith(""/"")) {
                    uri = uri + ""/"";
                }
                uri = uri.concat(path);
            }
        }
{code}

I haven't tested all the cases yet, just wanted to get some opinions if this solution looks workable?

Also, if I were going to make a PR, is it ok if I make my PR branch from 2.15.x?  I get a lot more build errors from master and would be easier to work with 2.15.x branch
erwelch:1446618173:2015-11-04T14:22:53.074+0000:1446618173:2015-11-04T14:22:53.074+0000:Was doing some more digging, realized this block of code was changed to address [CAMEL-9104] in version 2.16.0, but was not backported to 2.15.x because of some refactoring.

Looking at the code in 2.16.0, I have come up with this solution:

{code}
        if (path != null && path.length() > 0) {

            //Find a ? indicating there are query params
            int idx = uri.indexOf(""?"");

            //Break apart the uri into base and queryParams
            String base;
            String queryParams;
            if (idx == -1) {
                //No query params
                base = uri;
                queryParams = """";
            } else {
                base = uri.substring(0, idx);
                queryParams = uri.substring(idx);
            }

            // if the base ends with a / and the path starts with a /, remove a slash from the path
            if (base.endsWith(""/"") && path.startsWith(""/"")) {
                path = path.substring(1);
            }
            // if the neither the base ends with a / or the path starts with a /, add one to the base
            if (!base.endsWith(""/"") && !path.startsWith(""/"") ) {
                base = base + ""/"";
            }

            // add everything together;
            uri = base.concat(path).concat(queryParams);

        }
{code}

Unfortunately, the patch for this is a little complicated, because the HttpHelper tests were not refactored into camel-http-common when HttpHelper was moved.  Also, I noticed this code is copied and pasted in the NettyHttpHelper class which exists in both the netty and netty4 components.

Not sure the best place to put unit tests for this?
davsclaus:1451007721:2015-12-25T09:42:01.420+0000:1451007721:2015-12-25T09:42:01.420+0000:There has been some new changes in the code. 

I assume the fix can be as simple as 

{code}
            if (path.startsWith(""/"")) {
                path = path.substring(1);
            }
{code}

-->
{code}
            if (path.length() > 1 && path.startsWith(""/"")) {
                path = path.substring(1);
            }
{code}

to only clip the trailing / if its not just a slash.

Can you take a look again with latest source code and give it a test on your system?
erwelch:1451886992:2016-01-04T13:56:32.020+0000:1451886992:2016-01-04T13:56:32.020+0000:Hi Claus, sorry, was away from computers for a couple weeks.  Will try to take a look at this today or tomorrow!
erwelch:1451892427:2016-01-04T15:27:07.105+0000:1451892427:2016-01-04T15:27:07.105+0000:I ran your proposed solution and still found an issue with this block, it adds a duplicate trailing slash:

{code}
 if (idx == -1) {
      // make sure that there is exactly one ""/"" between HTTP_URI and HTTP_PATH
      uri = uri.endsWith(""/"") ? uri : uri + ""/"";
      uri = uri.concat(path);
  } else {
{code}

What happens now is we end up with two trailing slashes, uri does not end with a slash, so one is added, but path contains ""/"" which is also concatenated giving use two trailing slashes

I think this could be remedied by adding one more check like so:

{code}
// if there are no query params
if (idx == -1) {
    // make sure that there is exactly one ""/"" between HTTP_URI and HTTP_PATH
    uri = uri.endsWith(""/"") || path.startsWith(""/"") ? uri : uri + ""/"";
    uri = uri.concat(path);
} else {
{code}



BTW, These are the test cases I had added regarding this issue:

{code}
@Test
public void createURLShouldNotRemoveTrailingSlash() throws Exception {
    String url = HttpHelper.createURL(
            createExchangeWithOptionalCamelHttpUriHeader(null, ""/""),
            createHttpEndpoint(true, ""http://www.google.com""));
    assertEquals(""http://www.google.com/"", url);
}
@Test
public void createURLShouldAddPathAndQueryParamsAndSlash() throws Exception {
    String url = HttpHelper.createURL(
            createExchangeWithOptionalCamelHttpUriHeader(null, ""search""),
            createHttpEndpoint(true, ""http://www.google.com/context?test=true""));
    assertEquals(""http://www.google.com/context/search?test=true"", url);
}
@Test
public void createURLShouldAddPathAndQueryParamsAndRemoveDuplicateSlash() throws Exception {
    String url = HttpHelper.createURL(
            createExchangeWithOptionalCamelHttpUriHeader(null, ""/search""),
            createHttpEndpoint(true, ""http://www.google.com/context/?test=true""));
    assertEquals(""http://www.google.com/context/search?test=true"", url);
}
{code}

davsclaus:1452321041:2016-01-09T14:30:41.639+0000:1452321041:2016-01-09T14:30:41.639+0000:Thanks Edward, working on your patch now."
0,CAMEL-9280,New Feature,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Anshu Avinash,0,2,2015-10-30 18:08:00+00:00,2016-03-04 09:55:54+00:00,We have a requirement were we need to pass a custom header to our proxy-server.,"aavinash:1446199898:2015-10-30T18:11:38.994+0000:1446199898:2015-10-30T18:11:38.994+0000:My current implementation adds a new Map<String, String> in SmppConfiguration. Since it would be difficult to serialize/deserialize it if passed as uri param, I have not added support for setting it through uri.
aavinash:1457053959:2016-03-04T09:12:39.508+0000:1457053959:2016-03-04T09:12:39.508+0000:[~davsclaus] can you take a look at this patch?
davsclaus:1457056552:2016-03-04T09:55:52.118+0000:1457056552:2016-03-04T09:55:52.118+0000:Thanks for the patch"
0,CAMEL-9279,Bug,Major,"2.15.2, 2.16.0","2.16.1, 2.17.0","
None
",Resolved,Fixed,"2.16.1, 2.17.0",Gregor Zurowski,Jay Lapham,0,3,2015-10-30 17:13:21+00:00,2015-10-31 09:29:44+00:00,see: https://github.com/apache/camel/pull/665,"githubbot:1446207019:2015-10-30T20:10:19.974+0000:1446207019:2015-10-30T20:10:19.974+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/665

gzurowski:1446208209:2015-10-30T20:30:09.785+0000:1446208209:2015-10-30T20:30:09.785+0000:@[~jaylapham]: I have merged your PR.  Can you please update the documentation at https://cwiki.apache.org/confluence/display/CAMEL/ElasticSearch?
jaylapham:1446221986:2015-10-31T00:19:46.885+0000:1446222158:2015-10-31T00:22:38.385+0000:Love to, but I do not actually have edit rights on the wiki. I'm not ASF, only suggesting a fix for something that was making my day awful. 

If copy and paste is sufficient, all the wiki needs is another row in the Endpoint Options table: 
name: parent
description: optionally used with INDEX operations for Elasticsearch <a href=""https://www.elastic.co/guide/en/elasticsearch/guide/current/parent-child.html"">Parent-Child relationships</a> to specify the ID of the parent record
gzurowski:1446254969:2015-10-31T09:29:29.487+0000:1446254969:2015-10-31T09:29:29.487+0000:Thanks [~jaylapham] for your contribution, I updated the documentation."
0,CAMEL-9278,Improvement,Major,2.16.0,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Claus Ibsen,0,2,2015-10-30 14:02:16+00:00,2015-11-18 08:23:25+00:00,For example change the component to undertow in camel-swagger-cdi example and all three rest services should be accessible from undertow.,"githubbot:1447652047:2015-11-16T13:34:07.292+0000:1447652047:2015-11-16T13:34:07.292+0000:GitHub user jamesnetherton opened a pull request:

    https://github.com/apache/camel/pull/683

    [CAMEL-9278] camel-undertow REST DSL support

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jamesnetherton/camel CAMEL-9278

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/683.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #683
    
----
commit 16d4af036733e13cfa8e6abfec7699d3a6c3b0ce
Author: James Netherton <jamesnetherton@gmail.com>
Date:   2015-11-13T11:27:55Z

    [CAMEL-9278] camel-undertow REST DSL support

----

githubbot:1447750443:2015-11-17T16:54:03.671+0000:1447750443:2015-11-17T16:54:03.671+0000:Github user jamesnetherton closed the pull request at:

    https://github.com/apache/camel/pull/683

davsclaus:1447806197:2015-11-18T08:23:17.635+0000:1447806197:2015-11-18T08:23:17.635+0000:Thanks James for the PR"
0,CAMEL-9277,Bug,Major,2.16.0,"2.16.2, 2.17.0","
None
",Resolved,Fixed,"2.16.2, 2.17.0",Claus Ibsen,Augus Topor,0,2,2015-10-30 10:58:09+00:00,2015-11-23 07:20:22+00:00,"I recently upgrade from camel 2.14.1 to 2.16.1 and discover following issue: Unable to catch the Exception on startup if throwExceptionOnConnectFailed=true and autoCreate=true or autoCreate not declared.


If at the time of startup, the FTP site was down or unreachable, the Exception cannot be handled by any means I currently know which are onException route and doTry-doCatch method.


Following are my FTP parameters:
&maximumReconnectAttempts=0&stepwise=false&disconnect=true&throwExceptionOnConnectFailed=true&consumer.bridgeErrorHandler=true""


The only workaround without compromising error log functionality is by adding parameter ""autoCreate=false"".


Based on Camel-FTP documentation: ""
For Camel 2.16, autoCreate option is supported. When consumer starts, before polling is scheduled, there's additional FTP operation performed to create the directory configured for endpoint. The default value for autoCreate is true.
""


In my opinion, the exception should be able to be caught, instead shutdown the whole Camel context. And description for throwExceptionOnConnectFailed need to be updated so unaware developer does not suffer the same as I did.",davsclaus:1448176189:2015-11-22T15:09:49.689+0000:1448176189:2015-11-22T15:09:49.689+0000:Yeah I am changing this to log a WARN if failed but startup the consumer as before. That option you refer to is during regular routing.
0,CAMEL-9276,Bug,Major,None,"2.16.1, 2.15.5, 2.17.0","
None
",Resolved,Fixed,"2.16.1, 2.15.5, 2.17.0",Claus Ibsen,Darshan Sundaresh,0,2,2015-10-30 10:28:43+00:00,2015-11-06 14:40:34+00:00,"I have a netty4 tcp consumer on the from route i am able to start multiple instances of this route and there is no ""address already in use/ bind exception "" being raised by camel, changing the ""reuseAddress"" to ""false"" doesnt seem to make a difference.


Sample config
<from uri=""netty4:tcp://0.0.0.0:3010?sync=false&textline=true&reuseAddress=false""/>
<to uri=""log://org.dx.com?level=DEBUG""/>","dsundaresh:1446673201:2015-11-05T05:40:01.305+0000:1446673201:2015-11-05T05:40:01.305+0000:The problem seems to be because of the channelFuture.awaitUninterruptibly() for the bind in startServerBootstrap() of SingleTCPNettyServerBootstrapFactory. I was mistaken in thinking that it is allowing you to bind to the same address, while what is actually happening is because of the awaitUniterruptibly the bind exception is being discarded. The netty documentation states ""ChannelFuture awaitUninterruptibly()

Waits for this future to be completed without interruption. This method catches an InterruptedException and discards it silently"". 

Perhaps this needs to be changed to syncUninterruptibly() ??
dsundaresh:1446677734:2015-11-05T06:55:34.330+0000:1446677734:2015-11-05T06:55:34.330+0000:Fix for issue 9276. Changed awaitUninterruptibly() to syncUninterruptibly() as the former discards the exceptions.
davsclaus:1446789543:2015-11-06T13:59:03.395+0000:1446789543:2015-11-06T13:59:03.395+0000:Thanks for diving into this and finding the problem and providing a patch - that is lovely work.
davsclaus:1446792034:2015-11-06T14:40:34.562+0000:1446792034:2015-11-06T14:40:34.562+0000:There were a few other bind places that needed the same. And netty has a sync() shorthand they use in their examples."
0,CAMEL-9275,Improvement,Minor,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Claus Ibsen,0,3,2015-10-30 07:06:28+00:00,2017-09-27 08:36:27+00:00,"People may configure a ObjectMapper instance themselves and want to use that with the data format.


See SO
http://stackoverflow.com/questions/33397359/how-to-configure-jackson-objectmapper-for-camel-in-spring-boot","panjacek:1506472136:2017-09-27T08:28:56.083+0000:1506472136:2017-09-27T08:28:56.083+0000:how do we make use of the fix?
davsclaus:1506472587:2017-09-27T08:36:27.916+0000:1506472587:2017-09-27T08:36:27.916+0000:Look at the commits"
0,CAMEL-9274,Improvement,Major,2.16.0,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Aaron Whiteside,0,2,2015-10-29 21:44:10+00:00,2016-02-18 15:50:00+00:00,"StreamCache does not work correctly with MarshalProcessor and pretty much all DataFormats



Documentation states that stream caching can be turned on, on a per route basis. The places were we actually try and utilize stream caching only checks if the global option is turned on (MarshalProcessor + PGPKeyAccessDataFormat, I can't find any other meaningful attempts to use stream caching anywhere else) not the per route setting.
Secondly, if we ignore the first problem, only one data formatter tries to use stream caching for unmarshaling: PGPKeyAccessDataFormat. If you try and unzip a large zip file it's contents will be decompressed into memory. The same goes for any other large data formatter conversion (unmarshaling, only).



Attached is a patch that corrects the first problem and part of the second problem (ZipFileDataFormat, ZipDataFormat and PGPKeyAccessDataFormat).


A separate issue should probably be opened to fix all the remaining DataFormat implementation to support Stream Caching.","davsclaus:1446171513:2015-10-30T10:18:33.509+0000:1446171513:2015-10-30T10:18:33.509+0000:I wonder if we can hide the complexity a bit in a builder that the data format implementation uses

{code}
OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);

   ... code that writes to osb
   osb.write(...)

// and then call a build method or something that returns the wrapped stream instance
Object answer = osb.build();
return answer;
{code}

Then you dont need to have logic if its stream cache or not etc. Just use the builder and it facade it. The facade would have to delete the OutputStream api to the underlying whether its the stream cached or the byte array. Then the builder supports stream caching and fallback to a in memory byte array based.

Just a though

The builder can also have withStreamCaching, witeByteArray so the end user can use it in other cases where an exchange is not avaiable.

aaronjwhiteside:1446199080:2015-10-30T17:58:00.427+0000:1448297619:2015-11-24T00:53:39.464+0000:I was thinking the same thing, but your idea is much better than what I was thinking!

Will work on it when I have some time. 

Can we at least back-port the ExchangeHelper changes to the 2.16.x release?
davsclaus:1446250436:2015-10-31T08:13:56.348+0000:1446250436:2015-10-31T08:13:56.348+0000:Yeah lets see how invasive the changes are and whether that would be safe to backport to 2.16.x
aaronjwhiteside:1446567475:2015-11-04T00:17:55.295+0000:1446567475:2015-11-04T00:17:55.295+0000:New patch with OutputStreamBuilder
davsclaus:1446698042:2015-11-05T12:34:02.150+0000:1446698042:2015-11-05T12:34:02.150+0000:Thanks for the v2 patch. You are welcome to work on the other data formats so we can get them to use the builder also.
aaronjwhiteside:1447424335:2015-11-13T22:18:55.640+0000:1447424335:2015-11-13T22:18:55.640+0000:additional DataFormat changes
aaronjwhiteside:1447426220:2015-11-13T22:50:20.040+0000:1447426398:2015-11-13T22:53:18.880+0000:I've noticed a lot of inconsistency, some DataFormat's just return a InputStream others that could return an InputStream read it into a buffer then return that buffer, and then we have StreamCaching, which is intended to solve the issue of buffering too much data in memory/heap. But a lot of those places we use StreamCaching we could also just return the InputStream in question..

I've been thinking of adding support to the DataFormat's I care about to configure the desired behavior, return byte[], raw InputStream or stream cached InputStream.

And I must admit I was tempted to change the behavior of existing DataFormat's to return their raw InputStream's instead of fixing StreamCaching, but I figured that might break someone else.

What are your thoughts?  

My use case is, decrypt, unzip, and split file content using a streaming iterator. So having a bunch of wrapped InputStreams would be much more efficient than buffering things in a StreamCache twice (decrypt, unzip).
davsclaus:1447890555:2015-11-19T07:49:15.838+0000:1447890555:2015-11-19T07:49:15.838+0000:Thanks P3 applied to master"
0,CAMEL-9273,Improvement,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Arno Noordover,Moulliard Charles,0,6,2015-10-29 18:36:37+00:00,2016-05-25 15:12:48+00:00,"Many others queries are supported by the weather Api - http://openweathermap.org/api.
We should update the component to support more options



WEATHER

Access current weather data for any location on Earth including over 200,000 cities! Current weather is frequently updated based on global models and data from more than 40,000 weather stations. Data is available in JSON, XML, or HTML format.

api.openweathermap.org/data/2.5/weather?q={city name}
api.openweathermap.org/data/2.5/weather?q={city name},{country code}

api.openweathermap.org/data/2.5/weather?id=2172797

api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}

api.openweathermap.org/data/2.5/weather?zip={zip code},{country code}

api.openweathermap.org/data/2.5/box/city?bbox=12,32,15,37,10&cluster=yes

api.openweathermap.org/data/2.5/find?lat=55.5&lon=37.5&cnt=10

api.openweathermap.org/data/2.5/group?id=524901,703448,2643743&units=metric

FORECAST - 5d

5 day forecast is available at any location or city. It includes weather data every 3 hours. Forecast is available in JSON, XML, or HTML format.

api.openweathermap.org/data/2.5/forecast?q={city name},{country code}
api.openweathermap.org/data/2.5/forecast?id={city ID}
api.openweathermap.org/data/2.5/forecast?lat={lat}&lon={lon}

FORECAST - 16d

16 day forecasts is available at any location or city. Forecasts include daily weather and available in JSON, XML, or HTML format.

api.openweathermap.org/data/2.5/forecast/daily?q={city name},{country code}&cnt={cnt}
api.openweathermap.org/data/2.5/forecast/daily?id={city ID}&cnt={cnt}
api.openweathermap.org/data/2.5/forecast/daily?lat={lat}&lon={lon}&cnt={cnt}

HISTORY

http://api.openweathermap.org/data/2.5/history/city?id={id}&type=hour&start={start}&end={end}
http://api.openweathermap.org/data/2.5/history/city?id={id}&type=hour&start={start}&cnt={cnt}

start start date (unix time, UTC time zone), e.g. start=1369728000
end end date (unix time, UTC time zone), e.g. end=1369789200
cnt amount of returned data (one per hour, can be used instead of 'end')

http://api.openweathermap.org/data/2.5/history/city?q={city ID},{country code}&type=hour&start={start}&end={end}

http://api.openweathermap.org/data/2.5/history/city?q={city ID},{country code}&type=hour&start={start}&cnt={cnt}

http://api.openweathermap.org/data/2.5/history/city?lat={lat}&lon={lon}&type=hour&start={start}&end={end}
http://api.openweathermap.org/data/2.5/history/city?lat={lat}&lon={lon}&type=hour&start={start}&cnt={cnt}

http://api.openweathermap.org/data/2.5/history/station?id={id}&type=tick
http://api.openweathermap.org/data/2.5/history/station?id={id}&type=hour
http://api.openweathermap.org/data/2.5/history/station?id={id}&type=day

STATION

http://api.openweathermap.org/data/2.5/station?id={id}
http://api.openweathermap.org/data/2.5/box/station?cluster={yes/no}&cnt={cnt}&bbox={bbox}
http://api.openweathermap.org/data/2.5/station/find?lat=55&lon=37&cnt=30","cmoulliard:1446119016:2015-10-29T19:43:36.841+0000:1446119016:2015-10-29T19:43:36.841+0000:Use HttpURLConnection class instead of calling the HTTP Server (Weather API) when the URL(q) is converted into a String.
That will allow to specify the method to be used, to define a timeout, to handle the response code
anoordover:1462013965:2016-04-30T18:59:25.055+0000:1462013965:2016-04-30T18:59:25.055+0000:Introduced HttpClient
davsclaus:1462404209:2016-05-05T07:23:29.532+0000:1462404209:2016-05-05T07:23:29.532+0000:Thanks Arno, have merged your patch.


davsclaus:1462404265:2016-05-05T07:24:25.493+0000:1462404265:2016-05-05T07:24:25.493+0000:The component would still need to make it easier for the end user to chose history/forecast etc. And then the component need to be lenient if we should support dynamic options as well.
anoordover:1462441765:2016-05-05T17:49:25.591+0000:1462441765:2016-05-05T17:49:25.591+0000:Do you have any advice on how to proceed with this feature?
Should we use the ""UriPath"" to let the user choose which part of the API he would like to use or should we use an ""UriParam""?
When we choose to use the ""UriPath"" as a way to let the user choose the part of the API is it acceptable that it must match the context that is used by the API?
Is it needed to be backward compatible?
I guess that with dynamic you mean that the current implementation only has support to provide a location in a header.
Should we use more headers as a way to replace the UriParam's?
Should the choice of which part of the API to use also be dynamic?
Should we implement changes in small steps. For example:
* let the user choose a language for the response;
* let the user use a boxed query by providing rightLon, topLat and zoom as well;
* let the user use the find functionality by providing a count;
* validate the configuration (how can we implement it?);
* ...
anoordover:1462442066:2016-05-05T17:54:26.856+0000:1462442066:2016-05-05T17:54:26.856+0000:When we provide dynamic options is it an idea to provide a header that can be filled with a HashMap.
When we do that we could add the keys in an enumeration or add them as constants in an interface.
If we do that should we use a String representation of the enumeration as the key or the enumeration itself?
I suppose the String representation as to take care that the user isn't forced to import the enumeration.
anoordover:1462445005:2016-05-05T18:43:25.328+0000:1462445005:2016-05-05T18:43:25.328+0000:* Some refactoring (WeatherConfiguration has to much responsibility)
* added rightLon, topLat and zoom for boxed query
* added language parameter with enumeration
davsclaus:1462491968:2016-05-06T07:46:08.173+0000:1462491968:2016-05-06T07:46:08.173+0000:Arno, great work.

Can you fix the checkstyle on the patch file, you can run

mvn compile -Psourcecheck

Then it reports some errors.
davsclaus:1462492000:2016-05-06T07:46:40.828+0000:1462492000:2016-05-06T07:46:40.828+0000:And yeah you are welcome to make an interface for the current geo location so you can plugin different, and maybe also turn it off.
anoordover:1462493497:2016-05-06T08:11:37.647+0000:1462493497:2016-05-06T08:11:37.647+0000:New patch replacing the last one with the checkstyle fixes.
davsclaus:1462513387:2016-05-06T13:43:07.928+0000:1462513387:2016-05-06T13:43:07.928+0000:Yeah we could have an enum for the context-path to chose among forecast, history, etc. Then it also stand out what action you are requesting.


anoordover:1462515528:2016-05-06T14:18:48.764+0000:1462515528:2016-05-06T14:18:48.764+0000:add interface for GeoLocationProvider and a default implementation. Added unittest on WeatherQuery
davsclaus:1462577597:2016-05-07T07:33:17.236+0000:1462577597:2016-05-07T07:33:17.236+0000:Thanks last patch merged
anoordover:1462695068:2016-05-08T16:11:08.695+0000:1462695068:2016-05-08T16:11:08.695+0000:How can I see the impact of the changes I made in the FuseIDE in the properties-tab?
davsclaus:1462751653:2016-05-09T07:54:13.581+0000:1462751653:2016-05-09T07:54:13.581+0000:That requires a new Camel release and also that Fuse IDE is updated to support that release.
jamesnetherton:1462922919:2016-05-11T07:28:39.809+0000:1462922919:2016-05-11T07:28:39.809+0000:Slightly out of scope in regards to this ticket, but, the move to HttpClient has broken the ability for this component to hook up with a proxy server.

Can we address this problem here or shall I file another ticket for this?
acosentino:1462923037:2016-05-11T07:30:37.518+0000:1462923037:2016-05-11T07:30:37.518+0000:[~jamesnetherton], I think it is better to raise another JIRA :-)

Thanks.
anoordover:1462923248:2016-05-11T07:34:08.383+0000:1462923248:2016-05-11T07:34:08.383+0000:Can you describe how you used to provide proxy information? 
jamesnetherton:1462924080:2016-05-11T07:48:00.014+0000:1462924080:2016-05-11T07:48:00.014+0000:[~anoordover] It was actually via a testing framework to record and replay HTTP interactions. It sets system properties http.proxyHost and http.proxyPort, but I believe these are ignored by HttpClient. Seems there's some additional configuration required for HttpClient...

https://hc.apache.org/httpcomponents-client-ga/httpclient/examples/org/apache/http/examples/client/ClientExecuteProxy.java

https://hc.apache.org/httpcomponents-client-ga/httpclient/examples/org/apache/http/examples/client/ClientProxyAuthentication.java
anoordover:1462925920:2016-05-11T08:18:40.287+0000:1462925920:2016-05-11T08:18:40.287+0000:Will I have the same ntlm problem as in Eclipse (org.eclipse.ecf.provider.filetransfer.httpclient4). Is there a workaround? Is there a standard solution in Camel? 
jamesnetherton:1462934744:2016-05-11T10:45:44.986+0000:1462934744:2016-05-11T10:45:44.986+0000:Not sure if there's a standard solution as such. I think camel-geocoder uses HttpClient and implements proxy config options.
anoordover:1463145201:2016-05-13T21:13:21.270+0000:1463145201:2016-05-13T21:13:21.270+0000:Added proxy config for the route like geocoder component.
anoordover:1463145540:2016-05-13T21:19:00.635+0000:1463145540:2016-05-13T21:19:00.635+0000:As before + checkstyle correction
davsclaus:1463272045:2016-05-15T08:27:25.350+0000:1463272045:2016-05-15T08:27:25.350+0000:Thanks Arno, the proxy patch has been merged.
githubbot:1464003880:2016-05-23T19:44:40.108+0000:1464003880:2016-05-23T19:44:40.108+0000:GitHub user anoordover opened a pull request:

    https://github.com/apache/camel/pull/995

    CAMEL-9273:Support all free api methods

    CAMEL-9273: I think all free API methods are supported after this commit.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/anoordover/camel CAMEL-9273SupportAllFreeApiMethods

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/995.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #995
    
----
commit 6df185af2892da0c39493f7f812f16fd82fb23f9
Author: Arno Noordover <arno@noordover.net>
Date:   2016-05-23T19:42:12Z

    CAMEL-9273:Support all free api methods

----

githubbot:1464160158:2016-05-25T15:09:18.737+0000:1464160158:2016-05-25T15:09:18.737+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/995

davsclaus:1464160368:2016-05-25T15:12:48.721+0000:1464160368:2016-05-25T15:12:48.721+0000:Thanks Arno for all the PRs.

I have granted your JIRA user karma to self assign tickets."
0,CAMEL-9272,Bug,Major,None,"2.16.1, 2.15.5, 2.17.0","
None
",Resolved,Fixed,"2.16.1, 2.15.5, 2.17.0",Claus Ibsen,Moulliard Charles,0,2,2015-10-29 14:22:12+00:00,2016-11-14 08:53:22+00:00,"Code must be updated as openweathermap.org requires an APPID id since 09/10/2015 & by consequence, the component can't be used anymore as we will get a HTTP 401 error.



Caused by: org.apache.camel.TypeConversionException: Error during type conversion from type: java.net.URL to the required type: java.lang.String with value http://api.openweathermap.org/data/2.5/weather?q=Paris,France due java.io.IOException: Server returned HTTP response code: 401 for URL: http://api.openweathermap.org/data/2.5/weather?q=Paris,France
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.createTypeConversionException(BaseTypeConverterRegistry.java:610)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:177)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:156)
	at org.apache.camel.component.weather.WeatherProducer.process(WeatherProducer.java:48)","cmoulliard:1446108816:2015-10-29T16:53:36.750+0000:1446108816:2015-10-29T16:53:36.750+0000:Can somebody backport the modification to 2.15.x & 2.16.x branches please ?
davsclaus:1446158599:2015-10-30T06:43:19.885+0000:1446158599:2015-10-30T06:43:19.885+0000:Just backported.


davsclaus:1446158617:2015-10-30T06:43:37.217+0000:1446158617:2015-10-30T06:43:37.217+0000:Also marked that new option as required"
0,CAMEL-9271,Improvement,Trivial,2.16.0,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Hans Orbaan,0,2,2015-10-29 13:59:16+00:00,2015-10-30 07:32:59+00:00,"Extending RouteDefinition gives issues because of 1 line in the ProcessorDefinition. RouteDefinition should be made final or the attached patch is needed. changing:
boolean parentIsRoute = this.getClass().isAssignableFrom(RouteDefinition.class.);
to
boolean parentIsRoute = RouteDefinition.class.isAssignableFrom(this.getClass());","davsclaus:1446159248:2015-10-30T06:54:08.266+0000:1446159248:2015-10-30T06:54:08.266+0000:End users is not really intended to extend the Camel model classes.

Do you have an use case where you do that?"
0,CAMEL-9270,Bug,Major,2.16.0,"2.16.2, 2.17.0","
None
",Resolved,Fixed,"2.16.2, 2.17.0",Claus Ibsen,Anton Koscejev,0,3,2015-10-29 08:42:38+00:00,2015-11-30 15:45:22+00:00,"camel-restlet has upgraded to Restlet 2.3 (nice!), but this broke rest-dsl CORS support, because Restlet 2.3 no longer supports setting CORS headers via attributes. There are now API methods for these headers and attributes are ignored with a warning.


Example of the new API method:
http://restlet.com/technical-resources/restlet-framework/javadocs/2.3/jse/api/org/restlet/Response.html#setAccessControlAllowOrigin%28java.lang.String%29","koscejev:1446080000:2015-10-29T08:53:20.781+0000:1446081756:2015-10-29T09:22:36.233+0000:Warnings in log: 
{code}
2015-10-29 09:44:16,762 WARN [Restlet-1916677384] o.r.C.LogFilter [Slf4jLogger.java:283] Addition of the standard header ""Access-Control-Allow-Headers"" is not allowed. Please use the equivalent property in the Restlet API.
2015-10-29 09:44:16,762 WARN [Restlet-1916677384] o.r.C.LogFilter [Slf4jLogger.java:283] Addition of the standard header ""Access-Control-Allow-Methods"" is not allowed. Please use the equivalent property in the Restlet API.
2015-10-29 09:44:16,762 WARN [Restlet-1916677384] o.r.C.LogFilter [Slf4jLogger.java:283] Addition of the standard header ""Access-Control-Allow-Origin"" is not allowed. Please use the equivalent property in the Restlet API.
{code}

Workaround using custom RestletBinding:
{code}
import com.google.common.base.Splitter;
import org.restlet.data.Header;
import org.restlet.data.Method;
import org.restlet.util.Series;
import static com.google.common.collect.Sets.newHashSet;
import static org.restlet.engine.header.HeaderConstants.ATTRIBUTE_HEADERS;
...
public class CustomRestletBinding extends DefaultRestletBinding {
	private static final Splitter headerValueSplitter = Splitter.on(',').trimResults().omitEmptyStrings();

	@Override
	public void populateRestletResponseFromExchange(Exchange exchange, Response response) throws Exception {
		super.populateRestletResponseFromExchange(exchange, response);
		convertHeadersSupportedByRestletAPI(response);
	}

	/**
	 * Some headers are now supported by Restlet API and Restlet ignores them, if not set via API.
	 * This method sets them to Restlet Response via API and then removes these headers.
	 */
	private void convertHeadersSupportedByRestletAPI(Response response) {
		Iterator<Header> iterator = response.getHeaders().iterator();
		while (iterator.hasNext()) {
			Header header = iterator.next();
			if (""Access-Control-Allow-Origin"".equals(header.getName())) {
				response.setAccessControlAllowOrigin(header.getValue());
			} else if (""Access-Control-Allow-Methods"".equals(header.getName())) {
				response.setAccessControlAllowMethods(asMethods(header.getValue()));
			} else if (""Access-Control-Allow-Headers"".equals(header.getName())) {
				response.setAccessControlAllowHeaders(asHeaders(header.getValue()));
			} else {
				continue; // do not remove all other headers
			}
			iterator.remove();
		}
	}

	@NotNull
	private Set<Method> asMethods(@NotNull String value) {
		return StreamSupport.stream(headerValueSplitter.split(value).spliterator(), false)
				.map(Method::valueOf)
				.collect(toSet());
	}

	@NotNull
	private HashSet<String> asHeaders(@NotNull String value) {
		return newHashSet(headerValueSplitter.split(value));
	}
}
{code}
koscejev:1446081829:2015-10-29T09:23:49.858+0000:1446081829:2015-10-29T09:23:49.858+0000:Proper solution should probably involve org.restlet.service.CorsService or org.restlet.engine.application.CorsFilter. Some non-camel example: http://stackoverflow.com/questions/28988671/how-to-use-cors-in-restlet-2-3-1


koscejev:1448861237:2015-11-30T13:27:17.101+0000:1448861237:2015-11-30T13:27:17.101+0000:[~davsclaus], current fix is flawed (details below). I have a solution that I can provide a PR - should I create a new issue or reopen this one?

I found this out while trying to implement CAMEL-9371, which should've been a tiny fix. Restlet rejects headers that are not trimmed, and there's a small bug where Access-Control-Expose-Headers is actually treated as a Set of Method. The result is that Restlet's internal StringWriter fails with IllegalArgumentException at HeaderWriter.java:286 (because header is not trimmed and space is not allowed), and this results in HTTP status code being 500 instead of 200 with no details regarding what happened (pretty bad restlet behavior, btw).
davsclaus:1448861775:2015-11-30T13:36:15.219+0000:1448861775:2015-11-30T13:36:15.219+0000:A new PR is fine
githubbot:1448866187:2015-11-30T14:49:47.975+0000:1448866187:2015-11-30T14:49:47.975+0000:GitHub user koscejev opened a pull request:

    https://github.com/apache/camel/pull/702

    CAMEL-9270 trim headers before setting them via Restlet API

    As discussed in CAMEL-9270, providing a PR with CORS header trimming and minor related fixes.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/koscejev/camel CAMEL-9270

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/702.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #702
    
----
commit e6a8e156556c1bc698508f102aad867fe3879ed6
Author: Anton Koscejev <anton.koscejev@zoomint.com>
Date:   2015-11-30T14:27:09Z

    CAMEL-9270 trim headers before setting them via Restlet API

----

githubbot:1448869522:2015-11-30T15:45:22.576+0000:1448869522:2015-11-30T15:45:22.576+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/702
"
0,CAMEL-9269,Bug,Major,2.16.0,"2.16.1, 2.17.0","
None
",Resolved,Fixed,"2.16.1, 2.17.0",Gert Vanthienen,Gert Vanthienen,0,1,2015-10-29 08:42:34+00:00,2015-10-29 08:59:32+00:00,"NotifyBuilder.fromRoute() does not work if the endpoint uri in the from() clause for a route does not match the actual endpoint uri the exchange was sent to. Because we also have the route id itself available in the exchange, we can use that as a fallback when the match on from endpoint uri doesn't work.","gertvanthienen:1446080372:2015-10-29T08:59:32.805+0000:1446080372:2015-10-29T08:59:32.805+0000:Fixed for master in https://git-wip-us.apache.org/repos/asf?p=camel.git;a=commit;h=62b2042b2fa9388aab16d5cee1385000a81a6a6b
Fixed for camel-2.16.x branch in https://git-wip-us.apache.org/repos/asf?p=camel.git;a=commit;h=2d83364ac60d3cd5c1d30ae0b6c95dc0a73bdd5e"
0,CAMEL-9268,New Feature,Major,None,None,"
None
",Resolved,Won't Fix,Future,Unassigned,Claus Ibsen,0,5,2015-10-29 07:38:45+00:00,2022-09-02 09:05:17+00:00,"A camel-okhttp component that uses the okhttp client
http://square.github.io/okhttp/
http://square.github.io/okhttp/","gautric:1449567190:2015-12-08T17:33:10.957+0000:1449567190:2015-12-08T17:33:10.957+0000:Okhttp lib uses ASF compliant license 

http://square.github.io/okhttp/#license
gautric:1449579167:2015-12-08T20:52:47.054+0000:1449579167:2015-12-08T20:52:47.054+0000:Okio a sub lib uses ASF too

https://github.com/square/okio/blob/master/LICENSE.txt
dbajic:1601210602:2020-09-27T20:43:22.855+0000:1601210602:2020-09-27T20:43:22.855+0000:[~davsclaus] is this still desireable feature? I would like to give it a shot.
davsclaus:1601247165:2020-09-28T06:52:45.239+0000:1601247165:2020-09-28T06:52:45.239+0000:Yeah sure, although camel-http-vertx is also a great client especially for microservices and with camel-quarkus.
dbajic:1601251351:2020-09-28T08:02:31.570+0000:1601251351:2020-09-28T08:02:31.570+0000:Okay, will try to create a component. Thanks [~davsclaus] !
alexandre.zanelatto:1642764024:2022-01-21T19:20:24.572+0000:1642764024:2022-01-21T19:20:24.572+0000:[~davsclaus] I've created this component to use with our integration platform, i did only the async http call mode, and now I'm finishing some unit tests.

I used the camel-ahc component as a reference to do my okhttp client implementation.

Should I implement the sync http call mode of the client to be able to submmit my component or can I submmit with only async?
davsclaus:1642771551:2022-01-21T21:25:51.114+0000:1642771551:2022-01-21T21:25:51.114+0000:async only is fine"
0,CAMEL-9267,New Feature,Major,None,None,"
None
",Resolved,Fixed,2.17.0,Andrea Cosentino,Claus Ibsen,0,3,2015-10-29 06:52:59+00:00,2016-03-22 13:19:57+00:00,"It would be good with a camel-nats component that uses the java client to be able to send / consume from nats


The client is here:
https://github.com/tyagihas/java_nats


And more about nats
http://nats.io/","rajdavies:1452219786:2016-01-08T10:23:06.531+0000:1452219786:2016-01-08T10:23:06.531+0000:https://github.com/nats-io/jnats - might be a better java client to use ?
acosentino:1452222731:2016-01-08T11:12:11.794+0000:1452222731:2016-01-08T11:12:11.794+0000:Hi [~rajdavies], I'll try to switch from java_nast to jnats.

I think Jnats is better.
acosentino:1452226347:2016-01-08T12:12:27.114+0000:1452226347:2016-01-08T12:12:27.114+0000:Jnats actually is not released but only snapshot.

I will try anyway.
acosentino:1452228753:2016-01-08T12:52:33.099+0000:1452228753:2016-01-08T12:52:33.099+0000:Maybe we can start with java_nats and then switch to jnats when it will be released on Maven Central. What do you think about, [~rajdavies], [~davsclaus]?
davsclaus:1452230418:2016-01-08T13:20:18.571+0000:1452230418:2016-01-08T13:20:18.571+0000:Maybe wait until that other library is more mature and has a release. Though the basics of the component can be written regardless of what nats library is used. But still there can be other stuff to have fun with you can do.
acosentino:1452230910:2016-01-08T13:28:30.979+0000:1452230910:2016-01-08T13:28:30.979+0000:[~davsclaus] ok, then I'll go with java_nats for the beginning and switch if and then jnats has a release.
acosentino:1452496416:2016-01-11T15:13:36.238+0000:1452496416:2016-01-11T15:13:36.238+0000:[~davsclaus], [~rajdavies] It seems we will have a stable release of Jnats: https://github.com/nats-io/jnats/issues/4

I'll switch directly before merging the new component. Yay! :-)
acosentino:1453095239:2016-01-18T13:33:59.340+0000:1453095239:2016-01-18T13:33:59.340+0000:First version with java_nats as client commited. I leave this ticket open for docs.

When it will be available a jnats stable release we can switch. This can be done in a transparent manner for end user.
davsclaus:1453166000:2016-01-19T09:13:20.973+0000:1453166000:2016-01-19T09:13:20.973+0000:Andrea, I would assume we should un-subscribe here
https://github.com/apache/camel/blob/e50136b7d9ed6f217346ec4a6b4f13e2fa17e52b/components/camel-nats/src/main/java/org/apache/camel/component/nats/NatsConsumer.java#L66

You get back the id when you subscribe. I think you need to call the unsubscribe method with that id in the doStop method. And put that in a try .. catch block so the thread pool is also stopped.
acosentino:1453167342:2016-01-19T09:35:42.671+0000:1453167342:2016-01-19T09:35:42.671+0000:Yes, you're right. Sorry. Stupid mistake.

I will do, and I'll switch the client too, since it's out now.
acosentino:1453194534:2016-01-19T17:08:54.281+0000:1453194534:2016-01-19T17:08:54.281+0000:Done. I'll wait to switch to jnats. It's not mature as I believed.
davsclaus:1456272237:2016-02-24T08:03:57.519+0000:1456272237:2016-02-24T08:03:57.519+0000:What is the status of this. Should we post pone this for Camel 2.18 as we want to close down for releasing 2.17.
acosentino:1456272371:2016-02-24T08:06:11.085+0000:1456272371:2016-02-24T08:06:11.085+0000:This is done. Just need to add docs in confluence, but the component is ok.

We will need to switch to jnats in the future, but for 2.17.0 we can go with java_nats (I've pushed the OSGi bundle on SMX too).
davsclaus:1456272478:2016-02-24T08:07:58.272+0000:1456272478:2016-02-24T08:07:58.272+0000:Okay then just mention that in the docs that we will switch the library in the future and therefore the component may change and the end user may need to migrate when upgrading.
acosentino:1456272624:2016-02-24T08:10:24.356+0000:1456272624:2016-02-24T08:10:24.356+0000:I think the migration can be transparent, but I'll add a note :-)
davsclaus:1457311558:2016-03-07T08:45:58.622+0000:1457311558:2016-03-07T08:45:58.622+0000:We need a document page about camel-nats at the components list
http://camel.apache.org/component-list


acosentino:1457311819:2016-03-07T08:50:19.875+0000:1457311819:2016-03-07T08:50:19.875+0000:Yes! It is on my todo-list :-)"
0,CAMEL-9266,Bug,Minor,2.14.3,,"

test

",Resolved,Invalid,None,Claus Ibsen,Frederic Gendebien,0,2,2015-10-28 14:42:08+00:00,2015-11-04 08:13:28+00:00,"GIVEN: a mock endpoint : mock
WHEN: I do this
  mock.expectedMessageCount(1);
  mock.expectedBodiesReceived(""expected output"");
  mock.assertIsSatisfied();
THEN: I get ""expected <expected output> but was <null>""
BUT: when I do this:
  mock.expectedMessageCount(1);
  mock.expectedMessagesMatches(body().isEqualTo(""expected output""));
  mock.assertIsSatisfied();
THEN: it works...","davsclaus:1446073831:2015-10-29T07:10:31.297+0000:1446073831:2015-10-29T07:10:31.297+0000:Please use the mailing list / user forum to get help with this first.

frederic.gendebien:1446596008:2015-11-04T08:13:28.268+0000:1446596008:2015-11-04T08:13:28.268+0000:Sorry, I'll do that in the future. I just saw It has been resolved?"
0,CAMEL-9265,Task,Minor,2.16.0,"2.16.1, 2.17.0","
None
",Resolved,Fixed,"2.16.1, 2.17.0",Claus Ibsen,Thomas Cunningham,0,3,2015-10-28 12:21:47+00:00,2015-10-28 14:09:55+00:00,"jsr311-api's FindFactory class causes classloading problems in OSGI.     Should substitute the servicemix-specs version of the jsr311-api for jsr311-api in the three places it is used :


camel-jclouds
camel-olingo2
camel-swagger","davsclaus:1446007419:2015-10-28T12:43:39.134+0000:1446007419:2015-10-28T12:43:39.134+0000:This should only be in the features file. You are welcome to work on a patch in the features.xml file.
githubbot:1446011541:2015-10-28T13:52:21.245+0000:1446011541:2015-10-28T13:52:21.245+0000:GitHub user cunningt opened a pull request:

    https://github.com/apache/camel/pull/664

    CAMEL-9265 Use servicemix-specs version of jsr311-api

    https://issues.apache.org/jira/browse/CAMEL-9265

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/cunningt/camel CAMEL-9265

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/664.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #664
    
----
commit 04b7d55cf6d91e470c67af4d6aeb7b6ef203d3ec
Author: cunningt <tcunning@redhat.com>
Date:   2015-10-28T13:50:57Z

    CAMEL-9265 Use servicemix-specs version of jsr311-api

----

githubbot:1446012572:2015-10-28T14:09:32.693+0000:1446012572:2015-10-28T14:09:32.693+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/664

davsclaus:1446012595:2015-10-28T14:09:55.045+0000:1446012595:2015-10-28T14:09:55.045+0000:Thanks for the PR"
0,CAMEL-9264,Improvement,Major,2.16.0,"2.16.1, 2.17.0","
None
",Resolved,Fixed,"2.16.1, 2.17.0",Andrea Cosentino,James Lindstorff,0,2,2015-10-28 11:08:29+00:00,2015-11-07 10:31:47+00:00,"Currently version 1.10.12 is used which, at least for S3, results in an extra request because the default request signing algorithm is changed. Therefore the latest version 1.10.29 should be used.


Upgrading to that does not break any tests in the camel-aws component.","acosentino:1446001897:2015-10-28T11:11:37.290+0000:1446001897:2015-10-28T11:11:37.290+0000:Hi James,

Thank you.

We are waiting for the release of AWS sdk bundle to upgrade version.

I'll take care of your patch when the bundle will be available :-)

Andrea"
0,CAMEL-9263,Improvement,Major,2.16.0,"2.16.1, 2.17.0","
None
",Resolved,Fixed,"2.16.1, 2.17.0",Claus Ibsen,Claus Ibsen,0,1,2015-10-28 10:03:46+00:00,2016-01-06 15:13:36+00:00,"You can easily mis configure servlet endpoint because it must start with a leading slash to match the incoming requests.


We should make that optional how its configured as



servlet:hello
servlet:/hello
servlet:///hello",davsclaus:1445998983:2015-10-28T10:23:03.155+0000:1445998983:2015-10-28T10:23:03.155+0000:Also the component doc for servlet was wrong which is also fixed now
0,CAMEL-9262,Improvement,Minor,None,,"
None
",Resolved,Won't Fix,None,Claus Ibsen,Jyrki Ruuskanen,0,2,2015-10-27 14:18:41+00:00,2015-10-29 07:11:12+00:00,"Let's say we have an endpoint where we should send a message and if sending fails there are a number of fallback endpoints we should try stopping after the first successful sending (=no exception thrown during sending).


This sounds like a case for doTry..doCatch, but then we can't use defaultErrorHander and friends.


I think it would look quite right if we could say .stopOnSuccess() or .shortCircuit() on multicast and have it stop after the first successful send.","yuruki:1445932706:2015-10-27T15:58:26.363+0000:1445933571:2015-10-27T16:12:51.205+0000:This seems to be possible with nested doTrys, but the nesting will quickly get deep. Also, handled(false) in doCatch, which allows us to fall back to context level error handler, seems to be deprecated.

{code:title=Nested doTry example}
.doTry()
   .log(""connecting #1"")
   .to(""ftp://localhost"")
.doCatch(Exception.class)
   .doTry()
      .log(""connecting #2"")
      .to(""ftp://localhost/2"")
   .doCatch(Exception.class)
      .handled(false)
   .end()
.end();
{code}

I guess handled(false) can be replaced with something like: {{.throwException(new Exception(""All producers failed""))}}, but it's not quite the same.
davsclaus:1446012671:2015-10-28T14:11:11.833+0000:1446012671:2015-10-28T14:11:11.833+0000:Maybe take a look at the failover load balancer. Its intended for those use-cases to failover
yuruki:1446013648:2015-10-28T14:27:28.245+0000:1446013648:2015-10-28T14:27:28.245+0000:Thanks man, that is exactly what I need. I should have guessed that such a pattern has been generalized in Camel a long time ago ;)

I'll take a look at the wiki if maybe the error handling section should mention the failover load balancer pattern.
davsclaus:1446073851:2015-10-29T07:10:51.836+0000:1446073851:2015-10-29T07:10:51.836+0000:Yeah you are very welcome to help improve the docs"
0,CAMEL-9261,New Feature,Major,None,Future,"
None
",Open,Unresolved,Future,Unassigned,Claus Ibsen,0,2,2015-10-27 10:58:20+00:00,2015-10-27 10:58:20+00:00,"We should consider a ClaimCheckRepository API (or potentially allow to reuse aggregate repository) and add into the DSL to make it easy to store / claim.


A blog about this
http://www.javaprocess.com/2015/10/distributed-services-with-apache-camel-part2.html


And the eip
http://camel.apache.org/claim-check.html


Likely the aggregator repository is the best suited to reuse/extend from as its to store with a key -> exchange. And have apis to remove as well.


But we need to give it a bit more thought. The idea is for the implementations to make them reusable so we do not have to implement this again for JDBC, hazelcast and what else we have today for repositories.",
0,CAMEL-9260,New Feature,Minor,None,None,"

gsoc2019

",Resolved,Fixed,"3.0.0.RC2, 3.0.0",Andrea Cosentino,Greg A.,0,5,2015-10-27 09:59:00+00:00,2019-08-28 09:25:15+00:00,"Apache Any23 is the official Microformat lib.
We could implements this lib as a Dataformat feature.


I am working to understand what we could include for the first release.


http://any23.apache.org/
http://any23.apache.org/getting-started.html","davsclaus:1462234949:2016-05-03T08:22:29.355+0000:1462234949:2016-05-03T08:22:29.355+0000:Is the project active anymore?

The last release is from oct 2014.
ricardozanini:1513567419:2017-12-18T11:23:39.666+0000:1513567419:2017-12-18T11:23:39.666+0000:[~davsclaus] they released a version in [September, 17|https://mvnrepository.com/artifact/org.apache.any23/apache-any23-core]. I may work on a PR.
ricardozanini:1514878979:2018-01-02T15:42:59.074+0000:1514878979:2018-01-02T15:42:59.074+0000:[~gautric] are you still working on this? Do you mind to share your ideas or what have you been doing, so I may work with you?
betoflowv93:1553157579:2019-03-21T16:39:39.255+0000:1553157579:2019-03-21T16:39:39.255+0000:Hi .
 I am Roberto Flores, a student at University of Cuenca and I'd like to apply for this project as a Google summer of code student. I have worked a little bit with Any23 for RDF extraction from websites as part of my homework at the university and I know the Java programming language and Maven.

I suppose that this new component will be similar to other DataFormats [1] and that there must be some interfaces within Camel in order to integrate new formats in the project. Am I right?.
 Regarding to microformat, as far as I understand, after processing, Any23 produces RDF data as result, so the beans in the unmarshal/marshal operations are intended to be RDF Models?.

Please help me with some resources so as to get started in the summer of code program and the Camel community.

Regards,

[1] [http://camel.apache.org/data-format.html]
dmvolod:1553158482:2019-03-21T16:54:42.359+0000:1553158482:2019-03-21T16:54:42.359+0000:Hi [~betoflowv93]!

Welcome to the Apache Camel community.

To be faithful with the common data format development model, you can look at  already implemented components with complex marshaling/unmarshaling mechanisms. You can look at the camel-thrift or other data formats and see separate commits which are implementing formats, adding new features or creating from scratch.

Don't hesitate to ask questions here or in dev mail list as well as in the gitter chat room. You can also submit a PR for community review and feedback's.

Good luck!
betoflowv93:1553675361:2019-03-27T16:29:21.077+0000:1553675361:2019-03-27T16:29:21.077+0000:Hi [~dmvolod]

I have created a first draft of my proposal. 

[Proposal|https://docs.google.com/document/d/1G15iL3dCs1pfsLZ04WaImK8ZgFnijHMZhQnkAKCBkI0/edit?usp=sharing]

Please could you check it out and give some thoughts, in order to improve it. BTW, I have also shared it on the Developers ML.

 

 "
0,CAMEL-9259,Bug,Minor,2.15.3,"2.16.1, 2.15.5, 2.17.0","
None
",Resolved,Fixed,"2.16.1, 2.15.5, 2.17.0",Claus Ibsen,Moulliard Charles,0,3,2015-10-27 06:13:21+00:00,2015-11-25 23:01:28+00:00,"The enableTrace() method of the Camel Main class doesn't work.
When we setup the code as such



    public static void main(String... args) throws Exception {
        Main main = new Main();
        main.enableHangupSupport();
        main.addRouteBuilder(new MyRouteBuilder());
        main.enableTrace();
        main.run(args);




and launch the Main class, than the messages reported by the route in the log are not traced at all.


If we debug, we can see that there is not CamelContext object when this method of the MainSupport class is called



    public void enableTrace() {
        this.trace = true;
        for (CamelContext context : camelContexts) { // EMPTY
            context.setTracing(true);
        }
    }




The workaround is to enable the tracing within the route definition



    public void configure() {

        getContext().setTracing(true);","cmoulliard:1445901692:2015-10-27T07:21:32.926+0000:1445901692:2015-10-27T07:21:32.926+0000:Fix required. Add the trace option if the boolean is true when the postProcess method is called

{code}
protected void postProcessContext() throws Exception {
        Map<String, CamelContext> map = getCamelContextMap();
        Set<Map.Entry<String, CamelContext>> entries = map.entrySet();
        int size = entries.size();
        for (Map.Entry<String, CamelContext> entry : entries) {
            String name = entry.getKey();
            CamelContext camelContext = entry.getValue();
{code}
davsclaus:1445903129:2015-10-27T07:45:29.114+0000:1445903129:2015-10-27T07:45:29.114+0000:Yeah good catch, that fix seems correct to do it in the post process.
mgeis:1448463688:2015-11-25T23:01:28.443+0000:1448463688:2015-11-25T23:01:28.443+0000:Running 2.16.1, and the bug seem to still exist. The workaround provided (of turning tracing on during route definition) works."
0,CAMEL-9258,Improvement,Major,2.16.0,2.17.0,"
None
",Resolved,Fixed,2.17.0,Andrea Cosentino,Khaled Daham,0,3,2015-10-26 15:07:52+00:00,2015-12-28 12:17:35+00:00,"Any thoughts on how to add support for list, maps of pojos.
I did a simple patch that mimicked the behaviour of camel-jackson and added a useList method on BoonDataFormat to tell the component that a List was to be expected.


ps. camel-boon is missing as a choosable component when creating issues. .ds","davsclaus:1445903175:2015-10-27T07:46:15.182+0000:1445903175:2015-10-27T07:46:15.182+0000:Sounds good a patch is welcome.
davsclaus:1451271604:2015-12-28T11:00:04.599+0000:1451271604:2015-12-28T11:00:04.599+0000:Data formats is a bit special when you add a new option, you need to add the option in camel-core too, there is a xxxDataFormatModel class in there where you need to add it.
acosentino:1451271721:2015-12-28T11:02:01.845+0000:1451271721:2015-12-28T11:02:01.845+0000:Thank you. I'm going to add it :-)
acosentino:1451276255:2015-12-28T12:17:35.291+0000:1451276255:2015-12-28T12:17:35.291+0000:Now it should be ok. Thanks for the hint! Good for the next time or for future dataformat :-)"
0,CAMEL-9257,Bug,Major,2.17.0,"2.16.1, 2.17.0","
None
",Resolved,Fixed,"2.16.1, 2.17.0",Claus Ibsen,Tomohisa Igarashi,0,3,2015-10-26 13:28:01+00:00,2015-10-28 10:51:50+00:00,"If you just add stopRoute()&startRoute() at the beginning of WebsocketProducerRouteExampleTest#testWSHttpCall(), it fails with 404 not found.



java.util.concurrent.ExecutionException"">java.util.concurrent.ExecutionException: java.lang.IllegalStateException: Invalid Status Code 404
        at com.ning.http.client.providers.netty.future.NettyResponseFuture.done(NettyResponseFuture.java:220)
        at com.ning.http.client.providers.netty.handler.WebSocketProtocol.handle(WebSocketProtocol.java:102)
        at com.ning.http.client.providers.netty.handler.Processor.messageReceived(Processor.java:88)
..........","igarashitm:1445837342:2015-10-26T13:29:02.989+0000:1445837342:2015-10-26T13:29:02.989+0000:Attaching a testcase
davsclaus:1445906869:2015-10-27T08:47:49.111+0000:1445906869:2015-10-27T08:47:49.111+0000:Try with suspend/resume to see if that works better.
githubbot:1445998927:2015-10-28T10:22:07.614+0000:1445998927:2015-10-28T10:22:07.614+0000:GitHub user igarashitm opened a pull request:

    https://github.com/apache/camel/pull/663

    CAMEL-9257 route stop/start doesn't work for camel-websocket producer

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igarashitm/camel CAMEL-9257

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/663.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #663
    
----
commit fa085465194c05529996d38b89167a6303de53d7
Author: Tomohisa Igarashi <tm.igarashi@gmail.com>
Date:   2015-10-28T10:15:10Z

    CAMEL-9257 route stop/start doesn't work for camel-websocket producer

----

igarashitm:1445999249:2015-10-28T10:27:29.335+0000:1445999249:2015-10-28T10:27:29.335+0000:So the root cause is that the WebsocketComponentServlet is not removed from the Map even when the ConnectorRef is removed due to reference count=0. The pull request I submitted contains a fix and some testcases for it.
davsclaus:1445999496:2015-10-28T10:31:36.491+0000:1445999496:2015-10-28T10:31:36.491+0000:Thanks for the PR
githubbot:1446000710:2015-10-28T10:51:50.406+0000:1446000710:2015-10-28T10:51:50.406+0000:Github user igarashitm closed the pull request at:

    https://github.com/apache/camel/pull/663
"
0,CAMEL-9256,Improvement,Major,None,"2.16.1, 2.17.0","
None
",Resolved,Fixed,"2.16.1, 2.17.0",Henryk Konsek,Henryk Konsek,0,1,2015-10-26 10:57:59+00:00,2015-10-26 11:02:04+00:00,"In a current version of Paho, a current directory is used as a based for the file persistence. This should be configurable, like:



from(""paho:topic?persistence=file&filePersistenceDirectory=/var/mqtt"")...",hekonsek:1445828524:2015-10-26T11:02:04.228+0000:1445828524:2015-10-26T11:02:04.228+0000:Fixed in 0f393b668ee87961d3f66bf300eb4ffcfb9c49ea and backported in 8ad3673577846167376a6fe18d7fec853ec4e703.
0,CAMEL-9255,Bug,Minor,"2.14.3, 2.15.3, 2.16.0","2.16.1, 2.15.5, 2.17.0","
None
",Resolved,Fixed,"2.16.1, 2.15.5, 2.17.0",Claus Ibsen,Stephan Siano,0,2,2015-10-26 09:11:32+00:00,2015-10-27 07:51:07+00:00,the documentType paramter is not used for XPath predicates in XML DSL. It works for XPath expression and in Java DSL,"siano:1445822558:2015-10-26T09:22:38.572+0000:1445822558:2015-10-26T09:22:38.572+0000:The issue as such is a bit hard to verify: First of all the fix istself is in camel-core, but it cannot be tested there (because it only applies to camel-spring and camel-blueprint). Furthermore even without honoring the documentType, DOM is selected as default, which means that the expressions can be evaluated just fine.

The actual use case is with saxon as parser where the documentType can be set to SAXSource, in this case large messages can be used with XPath predicates which would go OOM with a DOMSource (because Saxon will parse the SAXSource into a TinyTree which consumes less memory than a DOM).
davsclaus:1445903467:2015-10-27T07:51:07.237+0000:1445903467:2015-10-27T07:51:07.237+0000:Thanks for the patch."
0,CAMEL-9254,Bug,Major,2.15.3,None,"
None
",Resolved,Cannot Reproduce,None,Claus Ibsen,Christian Bauer,0,2,2015-10-25 11:23:21+00:00,2016-03-23 08:35:03+00:00,"Broken:



rest(""/foo"")
    .get()
    .route()
    .transacted()
    .bean(getContext().hasService(SomeService.class), ""someMethod"");




Workaround:



rest(""/foo"")
    .get()
    .route()
    .to(""direct:foo"");

from(""direct:foo"")
    .transacted()
    .bean(getContext().hasService(SomeService.class), ""someMethod"");",davsclaus:1448176439:2015-11-22T15:13:59.843+0000:1448176439:2015-11-22T15:13:59.843+0000:Can you try with 2.16.x as I could not reproduce this
0,CAMEL-9253,New Feature,Major,2.16.0,,"
None
",Resolved,Won't Fix,None,Unassigned,Howard Nguyen,0,2,2015-10-24 23:44:04+00:00,2019-07-31 09:17:22+00:00,Non-singleton instance ObjectName has identity hash in the name. Make it difficult for monitoring infrastructure or documentation to identify which JMX interface to monitor / operate.,"githubbot:1445701611:2015-10-24T23:46:51.143+0000:1445701611:2015-10-24T23:46:51.143+0000:GitHub user khaing211 opened a pull request:

    https://github.com/apache/camel/pull/657

    CAMEL-9253 Adding spi ManagementNamingStrategyAware

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/khaing211/camel management-naming-strategy

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/657.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #657
    
----
commit d7b21efd35324a67d2564580e95f0833b7c422cc
Author: khaing211 <khaing211@gmail.com>
Date:   2015-10-24T17:39:10Z

    CAMEL-9252 add GroupedMessageAggregationStrategy

commit 2560432f5a51304e848bf4612495020878f60bac
Author: khaing211 <khaing211@gmail.com>
Date:   2015-10-24T23:44:19Z

    CAMEL-9253 Adding spi ManagementNamingStrategyAware

----

githubbot:1445701673:2015-10-24T23:47:53.030+0000:1445701673:2015-10-24T23:47:53.030+0000:Github user khaing211 closed the pull request at:

    https://github.com/apache/camel/pull/657

githubbot:1445702138:2015-10-24T23:55:38.773+0000:1445702138:2015-10-24T23:55:38.773+0000:GitHub user khaing211 opened a pull request:

    https://github.com/apache/camel/pull/658

    CAMEL-9253 Adding spi ManagementNamingStrategyAware

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/khaing211/camel CAMEL-9253

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/658.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #658
    
----
commit ab684ccd0b638d7e25c710025a8ebcaac559dc04
Author: khaing211 <khaing211@gmail.com>
Date:   2015-10-24T23:54:32Z

    CAMEL-9253-Adding-spi-ManagementNamingStrategyAware

----

githubbot:1480057391:2016-11-25T15:03:11.210+0000:1480057391:2016-11-25T15:03:11.210+0000:Github user khaing211 closed the pull request at:

    https://github.com/apache/camel/pull/658
"
0,CAMEL-9252,New Feature,Minor,2.16.0,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Howard Nguyen,0,3,2015-10-24 17:29:50+00:00,2015-12-18 17:02:45+00:00,"This is a new feature to batch camel messages.



	<bean id=""groupMessageAggregationStrategy"" class=""org.apache.camel.processor.aggregate.GroupedMessageAggregationStrategy"" />
	
    <route>
        <from uri=""direct:order""/>
        <aggregate strategyRef=""groupMessageAggregationStrategy"" completionSize=""500"" completionTimeout=""3000"">
            <correlationExpression>
                <simple>${header[some.thing]}</simple>
            </correlationExpression>
			
            <to uri=""direct:aggregatedOrders""/>
        </aggregate>
    </route>

    <route>
        <from uri=""direct:aggregated""/>
  		<bean ref=""externalResource"" method=""batchOrders""/>
		<split>
            <xpath>/invoice/lineItems</xpath>
			<to uri=""mock:result"" />
        </split>
    </route>




This is different from GroupedExchangeAggregationStrategy, because Splitter supports org.camel.Message.","githubbot:1445679594:2015-10-24T17:39:54.306+0000:1445679594:2015-10-24T17:39:54.306+0000:GitHub user khaing211 opened a pull request:

    https://github.com/apache/camel/pull/656

    CAMEL-9252 add GroupedMessageAggregationStrategy

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/khaing211/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/656.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #656
    
----
commit d7b21efd35324a67d2564580e95f0833b7c422cc
Author: khaing211 <khaing211@gmail.com>
Date:   2015-10-24T17:39:10Z

    CAMEL-9252 add GroupedMessageAggregationStrategy

----

davsclaus:1450429236:2015-12-18T17:00:36.881+0000:1450429236:2015-12-18T17:00:36.881+0000:Thanks for the PR
githubbot:1450429365:2015-12-18T17:02:45.289+0000:1450429365:2015-12-18T17:02:45.289+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/656
"
0,CAMEL-9251,Improvement,Minor,None,"2.16.1, 2.17.0","
None
",Resolved,Fixed,"2.16.1, 2.17.0",Claus Ibsen,Claus Ibsen,0,1,2015-10-24 10:34:47+00:00,2015-10-24 10:39:45+00:00,"You may want to be able to specify a route id as by default its an auto assigned route id.


There is a new apiContextRouteId option you can use to configure this.",
0,CAMEL-9250,Improvement,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,2,2015-10-24 09:51:03+00:00,2016-05-07 13:21:43+00:00,"When people start Camel they set this INFO log:


AllowUseOriginalMessage is enabled. If access to the original message is not needed, then its recommended to turn this option off as it may improve performance.


As the most normal use case is to not use this, then we should flip the default to let it be disabled out of the box, unless the error handler has been configured to access it.


And then on the Java api on UoW where you can access it we will throw an exception if the option is disabled.","davsclaus:1462598503:2016-05-07T13:21:43.503+0000:1462598503:2016-05-07T13:21:43.503+0000:Its disabled by default, and auto enabled if needed, such as configured on error handlers."
0,CAMEL-9249,Improvement,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Andrea Cosentino,Claus Ibsen,0,2,2015-10-23 15:11:51+00:00,2015-10-25 10:05:23+00:00,"If you want to let a route trigger as fast as possible, then by settinh


from timer:fast?delay=-1
   to http blah


then with the timer we can detect its a delay < 0 and then instead of using a timer, then do a processor that's in a while loop and then keep routing



while (isRunAllowed) {
   create exchange
   process exchange
}","acosentino:1445650475:2015-10-24T09:34:35.266+0000:1445650475:2015-10-24T09:34:35.266+0000:In this scenario we also need to check if repeatCount is set. Isn't it?
davsclaus:1445650813:2015-10-24T09:40:13.566+0000:1445650813:2015-10-24T09:40:13.566+0000:Yes good point. You are welcome to try to take a look how to implement this.

acosentino:1445659921:2015-10-24T12:12:01.767+0000:1445660226:2015-10-24T12:17:06.837+0000:What I think we can do is something like this.

{code}
	@Override
	public void onCamelContextStarted(CamelContext context,
			boolean alreadyStarted) throws Exception {
		if (task != null && !configured && endpoint.getDelay() >= 0) {
			Timer timer = endpoint.getTimer(this);
			configureTask(task, timer);
		} else {
			final AtomicLong counter = new AtomicLong();
			long count = counter.incrementAndGet();
			while (count <= endpoint.getRepeatCount()) {
				sendTimerExchange(count);
				count = counter.incrementAndGet();
			}
		}
	}
{code}

In this case (delay < 0) you'll simply create Exchanges (with all the timer headers) and process it, without registering a task.

This approach require a repeatCount parameter specified.

If we don't specified a repeatCount we can simply check isRunAllowed() 

{code}
	@Override
	public void onCamelContextStarted(CamelContext context,
			boolean alreadyStarted) throws Exception {
		if (task != null && !configured && endpoint.getDelay() >= 0) {
			Timer timer = endpoint.getTimer(this);
			configureTask(task, timer);
		} else {
			if (endpoint.getRepeatCount() > 0) {
				final AtomicLong counter = new AtomicLong();
				long count = counter.incrementAndGet();
				while (count <= endpoint.getRepeatCount()) {
					System.err.println(count);
					sendTimerExchange(count);
					count = counter.incrementAndGet();
				}
			} else {
				final AtomicLong counter = new AtomicLong();
				long count = counter.incrementAndGet();
				while (isRunAllowed()) {
					sendTimerExchange(count);
					count = counter.incrementAndGet();
				}
			}
		}
	}
{code}

But in this case the loop will go forever.

Maybe we can check the presence of RepeatCount if a negative delay is specified.

What do you think about?
davsclaus:1445660834:2015-10-24T12:27:14.518+0000:1445660834:2015-10-24T12:27:14.518+0000:Ah sorry we need a background thread to do the looping, you cannot do this in the event listener.

You can use
org.apache.camel.spi.ExecutorServiceManager#newSingleThreadExecutor

And take a look at how some of the existing source uses that.

Also the loop need to check for isRunAllowed() in case the route is stopped, then the loop has to break out.

For example take a look at
org.apache.camel.component.dataset.DataSetConsumer
acosentino:1445661735:2015-10-24T12:42:15.161+0000:1445661965:2015-10-24T12:46:05.106+0000:Thanks.

I'll try to implement this.. Maybe we can check in the doStart: if delay is >= 0 then we use a TimerTask, while if delay < 0, we can use a SingleThreadExecutor that do the same proposed logic, but faster."
0,CAMEL-9248,Bug,Major,2.16.0,"2.16.1, 2.17.0","
None
",Resolved,Fixed,"2.16.1, 2.17.0",Claus Ibsen,Jimmy Selgen Nielsen,0,2,2015-10-23 14:19:40+00:00,2018-03-21 18:00:55+00:00,"The change linked below causes camel-jms throws an exception when a message is received where JMSDestination is null (when used with WebSphere MQ). 
This works as expected in 2.15.3.


The message looks like this (anonymized)
  JMSMessage class: jms_text
  JMSType:          null
  JMSDeliveryMode:  2
  JMSExpiration:    0
  JMSPriority:      5
  JMSMessageID:     ID:c3e2d840e3d4d8d44040404040404040cfbd668a5f4f4261
  JMSTimestamp:     1445609217800
  JMSCorrelationID: null
  JMSDestination:   null
  JMSReplyTo:       queue://TEST/INPUT.QUEUE?targetClient=1
  JMSRedelivered:   false
    JMSXAppID: ilities\RFHUtil\rfhutilc.exe
    JMSXDeliveryCount: 1
    JMSXUserID: MQXPLO      
    JMS_IBM_Character_Set: IBM277
    JMS_IBM_Encoding: 785
    JMS_IBM_Format: MQSTR   
    JMS_IBM_MsgType: 8
    JMS_IBM_PutApplType: 11
    JMS_IBM_PutDate: 20151023
    JMS_IBM_PutTime: 14065780


The following is a link to the troublesome patch included in 2.16.0:
https://fisheye6.atlassian.com/browse/camel-git/components/camel-jms/src/main/java/org/apache/camel/component/jms/EndpointMessageListener.java?r2=812fa060bfeac5b320624b5d6d4833ac441d42c9&r1=e00e0d6599b01733c270f3053e23118d35ea0881",davsclaus:1445644816:2015-10-24T08:00:16.033+0000:1445644816:2015-10-24T08:00:16.033+0000:Thanks for reporting
0,CAMEL-9247,Bug,Major,2.16.0,"2.16.1, 2.17.0","
None
",Resolved,Fixed,"2.16.1, 2.17.0",Claus Ibsen,Claus Ibsen,0,2,2015-10-23 05:25:34+00:00,2016-01-07 11:38:24+00:00,"See SO
http://stackoverflow.com/questions/33291657/how-to-have-multiple-camel-rest-dsl-definitions-with-swagger


The api-doc endpoint should merge multiple rest's together.","davsclaus:1445551879:2015-10-23T06:11:19.856+0000:1445551879:2015-10-23T06:11:19.856+0000:This is a camel-spring-boot / spring-boot issue, which seems to start the routes multiple times.

This works fine out of the box in CDI / standalone etc.
jnupponen:1445560968:2015-10-23T08:42:48.473+0000:1445562123:2015-10-23T09:02:03.672+0000:Here is the example project for reproducing the problem: https://github.com/jnupponen/camel-spring-boot-swagger-problem
jnupponen:1445603166:2015-10-23T20:26:06.946+0000:1445603166:2015-10-23T20:26:06.946+0000:Please say if I can be of any further assistance.
davsclaus:1445652766:2015-10-24T10:12:46.260+0000:1445652766:2015-10-24T10:12:46.260+0000:Thanks for the example I am able to reproduce the issue and working on a fix.
davsclaus:1445654464:2015-10-24T10:41:04.794+0000:1445654464:2015-10-24T10:41:04.794+0000:As a work around just define 1 rest, instead of 2 or more
jnupponen:1445910717:2015-10-27T09:51:57.699+0000:1445910717:2015-10-27T09:51:57.699+0000:Thanks for the fix! I updated your answer in SO to show the workaround."
0,CAMEL-9246,Bug,Minor,2.15.1,"2.15.5, 2.16.2, 2.17.0","
None
",Resolved,Fixed,"2.15.5, 2.16.2, 2.17.0",Freeman Yue Fang,Joe Luo,0,2,2015-10-22 18:45:29+00:00,2015-11-16 07:45:09+00:00,"I have a camel-cxf proxy test case with MTOM enabled. The WSDL used in the project is RPC/Literal style. However, I was unable to get attachment back via response. Please take a look at the test case for more detail.


After some debugging, it looks like that camel-cxf producer did get attachment back. However, there were two attachment related parts. One part had no attachment (empty) but had correct ""Content-ID"". The other part did contain entire attachment but had a rather different ""Content-ID"". For instance:



19:30:47,110 | INFO  | qtp565617691-367 | IMtomExample                     | 118 - org.apache.cxf.cxf-core - 3.0.4.redhat-620133 | Outbound Message
---------------------------
ID: 63
Response-Code: 200
Encoding: UTF-8
Content-Type: multipart/related; type=""application/xop+xml""; boundary=""uuid:f108bc3f-549a-4baa-ab00-757ff837aacf""; start=""<root.message@cxf.apache.org>""; start-info=""text/xml""
Headers: {accept-encoding=[gzip,deflate], breadcrumbId=[ID-jluomac-52985-1445511717614-11-8], Host=[localhost:7777], Server=[Jetty(8.1.15.v20140411)], User-Agent=[Apache-HttpClient/4.1.1 (java 1.5)]}
Payload: --uuid:f108bc3f-549a-4baa-ab00-757ff837aacf
Content-Type: application/xop+xml; charset=UTF-8; type=""text/xml""
Content-Transfer-Encoding: binary
Content-ID: <root.message@cxf.apache.org>

<soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/""><soap:Body><ns1:doMtomResponse xmlns:ns1=""http://cxf.example.com/""><parameters xmlns:ns2=""http://cxf.example.com/""><output>soapui-splash.png</output><dataLength>27186</dataLength><data><xop:Include xmlns:xop=""http://www.w3.org/2004/08/xop/include"" href=""cid:15839364-d75d-4cbe-a163-40838bca762a-31@cxf.apache.org""/></data></parameters></ns1:doMtomResponse></soap:Body></soap:Envelope>
--uuid:f108bc3f-549a-4baa-ab00-757ff837aacf
Content-Type: image/png
Content-Transfer-Encoding: binary
Content-ID: <e4b4a36a-b07a-481d-8bf8-82df5b57f40b-1@cxf.apache.org>
Content-Disposition: attachment;name=""soapui-splash.png""

<-- soapui-splash.png binary attachment starts here -->
...
...
<-- soapui-splash.png binary attachment ends here -->

--uuid:f108bc3f-549a-4baa-ab00-757ff837aacf
Content-Type: image/png
Content-Transfer-Encoding: binary
Content-ID: <15839364-d75d-4cbe-a163-40838bca762a-31@cxf.apache.org>
Content-Disposition: attachment;name=""soapui-splash.png""

<-- no binary attachment here. empty -->

--uuid:f108bc3f-549a-4baa-ab00-757ff837aacf--
--------------------------------------




And the response message returned was:



<soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"">
   <soap:Body>
      <ns1:doMtomResponse xmlns:ns1=""http://cxf.example.com/"">
         <parameters xmlns:ns2=""http://cxf.example.com/"">
            <output>soapui-splash.png</output>
            <dataLength>27186</dataLength>
            <data>
               <xop:Include href=""cid:15839364-d75d-4cbe-a163-40838bca762a-31@cxf.apache.org"" xmlns:xop=""http://www.w3.org/2004/08/xop/include""/>
            </data>
         </parameters>
      </ns1:doMtomResponse>
   </soap:Body>
</soap:Envelope>




Because the response pointed to the ""Content-ID"" of 



<xop:Include href=""cid:15839364-d75d-4cbe-a163-40838bca762a-31@cxf.apache.org"" xmlns:xop=""http://www.w3.org/2004/08/xop/include""/>




and the parts identified by the ""Content-ID: <15839364-d75d-4cbe-a163-40838bca762a-31@cxf.apache.org>"" was actually empty. Therefore, client can not get the attachment back.","joeluo:1445512665:2015-10-22T19:17:45.560+0000:1445512665:2015-10-22T19:17:45.560+0000:Run the test case by ""mvn test"".
joeluo:1445513161:2015-10-22T19:26:01.408+0000:1445513161:2015-10-22T19:26:01.408+0000:I also tested using a Doc/literal wrapped style WSDL and it worked fine. Again there were two attachment related parts with different ""Content-ID"". However both parts had the same file attached (duplicated attachments). Therefore, client side was able to get the attachment back.
ffang:1447631109:2015-11-16T07:45:09.951+0000:1447631109:2015-11-16T07:45:09.951+0000:commit fix
http://git-wip-us.apache.org/repos/asf/camel/commit/b471d78f for camel-2.15.x
http://git-wip-us.apache.org/repos/asf/camel/commit/378344ba for camel-2.16.x
http://git-wip-us.apache.org/repos/asf/camel/commit/ba848035 for master"
0,CAMEL-9245,Bug,Minor,2.16.0,"2.16.1, 2.17.0","
None
",Resolved,Fixed,"2.16.1, 2.17.0",Unassigned,Jaume Teixi,0,3,2015-10-22 17:59:21+00:00,2015-10-25 20:49:00+00:00,"If endpoint doesn't match exactly paho: it fails to publish to the correct topic.


Once should be able in Spring to @Autowired two different PahoComponent pointing to different Application Context defined PahoComponent bean id'S.


Currently if bean id is not named exactly paho it fails to publish to the correct topic and for example instead of input/1 publishes to t://input/1 when id is mypaho instead of paho","davsclaus:1445550584:2015-10-23T05:49:44.547+0000:1445550584:2015-10-23T05:49:44.547+0000:Can you explain this in more details what you mean?
teixi:1445560700:2015-10-23T08:38:20.184+0000:1445560700:2015-10-23T08:38:20.184+0000:Define two broker connections with PahoComponent bean id's in your Spring's Application Context
{code:xml}
	<bean id=""paho"" class=""org.apache.camel.component.paho.PahoComponent"">
		<property name=""brokerUrl"" value=""tcp://broker.local:1883"" />				
  		<property name=""connectOptions"">
			<bean class=""org.eclipse.paho.client.mqttv3.MqttConnectOptions"">
  				<property name=""userName"" value=""user@broker"" />
  				<property name=""password"" value=""password"" />
			</bean>
		</property>  		
	</bean>
	
	<bean id=""paho2"" class=""org.apache.camel.component.paho.PahoComponent"">
		<property name=""brokerUrl"" value=""tcp://broker2.local:1883"" />				
  		<property name=""connectOptions"">
			<bean class=""org.eclipse.paho.client.mqttv3.MqttConnectOptions"">
  				<property name=""userName"" value=""user@broker2"" />
  				<property name=""password"" value=""password2"" />
			</bean>
		</property>  		
	</bean>	
{code}

Autowire the PahoComponent in your Java class. 
And implement two different methods for publishing to different topics for each one.

{code:java}
	@Autowired
	private ApplicationContext appContext;
	
	@Autowired
	private PahoComponent paho;
	
	@Autowired
	private PahoComponent paho2;

	public void publish() {
		try {
			CamelContext camelContext = new SpringCamelContext(appContext);
			camelContext.setAllowUseOriginalMessage(false);
			camelContext.addComponent(""paho"", paho);
			camelContext.start();
			ProducerTemplate producer = camelContext.createProducerTemplate();
			String payload = ""just a message"";
			String clientId = ""pub-paho-"" + System.nanoTime();
			producer.sendBodyAndHeaders(""paho:input/1?qos=1&clientId="" + clientId, payload.toString(), null);
			camelContext.stop();
		} catch (Exception e) {
			LOG.error(""publish exception: {}"", e.getMessage());
		}
	}
	
	public void publish2() {
		try {
			CamelContext camelContext = new SpringCamelContext(appContext);
			camelContext.setAllowUseOriginalMessage(false);
			camelContext.addComponent(""paho2"", paho2);
			camelContext.start();
			ProducerTemplate producer = camelContext.createProducerTemplate();
			String payload = ""just a message 2"";
			String clientId = ""pub-paho2-"" + System.nanoTime();
			producer.sendBodyAndHeaders(""paho2:input/2?qos=1&clientId="" + clientId, payload.toString(), null);
			camelContext.stop();
		} catch (Exception e) {
			LOG.error(""publish2 exception: {}"", e.getMessage());
		}		
	}
{code}

First method message: *just a message*
Is published +correctly+ into topic: *input/1*

Second method message: *just a message 2* 
Is published _wrongly_ into topic: */input/2*
hekonsek:1445569190:2015-10-23T10:59:50.594+0000:1445569190:2015-10-23T10:59:50.594+0000:Actually publishing to {{input/2}} is what I would expect to happen. You are sending a message to the {{input/2}}, so this is published to {{input/2}} :) . BTW a component naming is handled by the Camel Core and is outside of the scope of the component.

Are you sure it behaves wrong?
teixi:1445577459:2015-10-23T13:17:39.332+0000:1445577459:2015-10-23T13:17:39.332+0000:When the *PahoComponent* is named *paho2* it is wrong because it is posting to the topic {noformat}/input/2{noformat} (note the first slash) instead of {noformat}input/2{noformat} 
And if you name the *PahoComponent* to *mypaho* it will post to the wrong topic {noformat}t://input/2{noformat}
This does not happens with other components like *camel-jms* or *camel-mqtt* only with *camel-paho* so it seems not related to the Camel Core and maybe to the Endpoint format definition or to the handling of it.
davsclaus:1445577777:2015-10-23T13:22:57.407+0000:1445577777:2015-10-23T13:22:57.407+0000:The bug is here
https://github.com/apache/camel/blob/master/components/camel-paho/src/main/java/org/apache/camel/component/paho/PahoEndpoint.java#L79
eg the hardcoded 7 index which is wrong.

The topic is really the remainder parameter in the component which it should use to set as topic.

davsclaus:1445577833:2015-10-23T13:23:53.882+0000:1445577833:2015-10-23T13:23:53.882+0000:Here
https://github.com/apache/camel/blob/master/components/camel-paho/src/main/java/org/apache/camel/component/paho/PahoComponent.java#L36

you grab the remainder and use that as the topic

endpoint.setTopic(remainder);

and then you dont need that other logic.
hekonsek:1445776890:2015-10-25T20:41:30.281+0000:1445776890:2015-10-25T20:41:30.281+0000:Oh shit! Did I really commit that? What was on my mind to assume fixed component name? :|

Anyway - I have fixed that in 2.17.0 (1) and 2.16.1 (2).

Thanks for reporting (and sorry for a stupid mistake)! 

(1) 14e9236aca9e1cd93f180158767d7e102257f1b6
(2) e791fc27756fddce2eaa759c86250c8c5e7f9a0f
hekonsek:1445777340:2015-10-25T20:49:00.256+0000:1445777340:2015-10-25T20:49:00.256+0000:As a workaround hack for the older versions you can also use the component name with the length == 4."
0,CAMEL-9244,Improvement,Major,2.16.0,,"
None
",Resolved,Fixed,None,Greg A.,Jaume Teixi,0,4,2015-10-22 17:50:49+00:00,2015-12-14 16:52:05+00:00,"Currently PahoEndpoint allows to set the QoS option.


But the boolean retained is a basic MQTT protocol feature that should be implemented.


Like in the Paho publish method:


org.eclipse.paho.client.mqttv3.MqttClient
#publish(String topic, byte[] payload, int qos, boolean retained) 


Additionally it would be nice to have the MqttConnectOptions of setWill as also ""Last Will and Testament"" (LWT) is a basic protocol feature.","hekonsek:1449835307:2015-12-11T20:01:47.275+0000:1449835307:2015-12-11T20:01:47.275+0000:[~gautric] Would you like to handle this or should I do it?
githubbot:1449837733:2015-12-11T20:42:13.261+0000:1449837733:2015-12-11T20:42:13.261+0000:GitHub user gautric opened a pull request:

    https://github.com/apache/camel/pull/728

    [CAMEL-9244] camel-paho - Endpoint must implement publishing of retained

    messages option

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gautric/camel CAMEL-9244

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/728.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #728
    
----
commit 7713fcf603f31fc500e6581c841d2f11eb44929b
Author: gautric <gautric@redhat.com>
Date:   2015-12-11T20:15:40Z

    [CAMEL-9244] camel-paho - Endpoint must implement publishing of retained
    messages option

----

gautric:1449837757:2015-12-11T20:42:37.097+0000:1449837757:2015-12-11T20:42:37.097+0000:The commit is almost ready
githubbot:1450083125:2015-12-14T16:52:05.015+0000:1450083125:2015-12-14T16:52:05.015+0000:Github user gautric closed the pull request at:

    https://github.com/apache/camel/pull/728
"
0,CAMEL-9243,Bug,Major,2.15.3,"2.16.1, 2.15.5, 2.17.0","
None
",Resolved,Fixed,"2.16.1, 2.15.5, 2.17.0",Claus Ibsen,Alex Paransky,0,2,2015-10-22 17:15:51+00:00,2015-10-24 14:01:02+00:00,"The issue described here does NOT exist in 2.15.2 and only manifests in 2.15.3.


With the following definition of a Bean:



    public interface MyBaseInterface {
        @Handler
        String hello(@Body String hi);
    }

    public abstract static class MyAbstractBean implements MyBaseInterface {
        public String hello(@Body String hi) {
            return ""Hello "" + hi;
        }
        public String doCompute(String input) {
            fail(""Should not invoke me"");
            return null;
        }
    }

    public static class MyConcreteBean extends MyAbstractBean {
    }





The following test case will fail to invoke the proper method:



public class BeanHandlerMethodTest extends ContextTestSupport {

    public void testInterfaceBeanMethod() throws Exception {
        BeanInfo info = new BeanInfo(context, MyConcreteBean.class);

        Exchange exchange = new DefaultExchange(context);
        MyConcreteBean pojo = new MyConcreteBean();
        MethodInvocation mi = info.createInvocation(pojo, exchange);
        assertNotNull(mi);
        assertEquals(""hello"", mi.getMethod().getName());
    }




The issue is how BeanInfo.introspect determines which methods are available to be invoked.


At line 344, if the class is public, the interface methods are added to the list:



        if (Modifier.isPublic(clazz.getModifiers())) {
            // add additional interface methods
            List<Method> extraMethods = getInterfaceMethods(clazz);
            for (Method target : extraMethods) {
                for (Method source : methods) {
                    if (ObjectHelper.isOverridingMethod(source, target, false)) {
                        overrides.add(target);
                    }
                }
            }
            // remove all the overrides methods
            extraMethods.removeAll(overrides);
            methods.addAll(extraMethods);
        }




However, all the methods from the interface are ""abstract"".  Later, when the real implementation is encountered as the code crawls up the tree, the abstract method is not replaced:


Line 390:



        MethodInfo existingMethodInfo = overridesExistingMethod(methodInfo);
        if (existingMethodInfo != null) {
            LOG.trace(""This method is already overridden in a subclass, so the method from the sub class is preferred: {}"", existingMethodInfo);
            return existingMethodInfo;
        }




Finally, during the invocation, the following was added as part of 2.15.3 release:


Line 561:



        removeAllAbstractMethods(localOperationsWithBody);
        removeAllAbstractMethods(localOperationsWithNoBody);
        removeAllAbstractMethods(localOperationsWithCustomAnnotation);
        removeAllAbstractMethods(localOperationsWithHandlerAnnotation);




As a result, the abstract method is removed and not invoked.


I think the fix should be to see if the existingMethodInfo references an ""abstract' method and if it does and methodInfo does not, replace the existingMethodInfo with methodInfo in the collection.


This would preserve the preferences implied with the rest of the code while properly replacing the abstract method with their proper implementations.","apara:1445505686:2015-10-22T17:21:26.342+0000:1445505686:2015-10-22T17:21:26.342+0000:Here is a modified BeanHandlerMethodTest.java which fails with with 2.15.3.
davsclaus:1445666462:2015-10-24T14:01:02.913+0000:1445666462:2015-10-24T14:01:02.913+0000:Thanks for reporting and with the unit test"
0,CAMEL-9242,Task,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Claus Ibsen,0,1,2015-10-22 11:34:05+00:00,2015-11-24 06:28:37+00:00,"We have been on 1.6 for a long time, and many others are on 1.7 which can cause problems such as from karaf / pax-logging



Caused by: java.lang.NoSuchMethodError: org.apache.log4j.Logger.<init>(Ljava/lang/String;)V
	at org.apache.log4j.spi.RootLogger.<init>(RootLogger.java:45)
	at org.apache.log4j.LogManager.<clinit>(LogManager.java:82)
	at org.ops4j.pax.logging.service.internal.PaxLoggingServiceImpl.configureDefaults(PaxLoggingServiceImpl.java:299)
	at org.ops4j.pax.logging.service.internal.PaxLoggingServiceImpl.<init>(PaxLoggingServiceImpl.java:70)
	at org.ops4j.pax.logging.service.internal.Activator.start(Activator.java:117)
	at org.apache.felix.connect.PojoSRBundle.start(PojoSRBundle.java:153)
	... 20 more",
0,CAMEL-9241,Improvement,Minor,None,,"
None
",Resolved,Incomplete,None,Unassigned,Chad Durovec,0,3,2015-10-20 16:55:52+00:00,2016-04-09 08:48:32+00:00,"Grouping delimiter for regex tokenization uses the regex expression and does not allow for overriding the group delimiting token with another token.


This could prove problematic since identifying individual items requires splitting grouped results using the regex expression.
e.g. tokenization phrase ""rcdtype=099."" results in an individual result being delimited with ""rcdtype=099.""","davsclaus:1458693348:2016-03-23T08:35:48.509+0000:1458693348:2016-03-23T08:35:48.509+0000:Can you explain this again what is the problem and maybe provide an example?
davsclaus:1460162912:2016-04-09T08:48:32.936+0000:1460162912:2016-04-09T08:48:32.936+0000:No response and cannot understand what is explained"
0,CAMEL-9240,Improvement,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Thomas Diesler,0,2,2015-10-20 14:47:54+00:00,2015-10-20 15:00:03+00:00,No Desc,"githubbot:1445323776:2015-10-20T14:49:36.819+0000:1445323776:2015-10-20T14:49:36.819+0000:GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/652

    [CAMEL-9240] Abstract CXF endpoint creation for WildFly integration

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel wfc370

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/652.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #652
    
----
commit 4a3ef79db66dfe9f3aaf731d9444e23236bf3638
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2015-10-15T09:13:13Z

    [CAMEL-9240] Abstract CXF endpoint creation for WildFly integration

----

githubbot:1445324403:2015-10-20T15:00:03.360+0000:1445324403:2015-10-20T15:00:03.360+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/652
"
0,CAMEL-9239,Improvement,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Claus Ibsen,0,1,2015-10-20 13:41:17+00:00,2016-02-21 10:02:59+00:00,"Add new completionInterval option to 
http://camel.apache.org/sjms-batch.html


That works like the aggreagator eip
http://camel.apache.org/aggregator2


Note you can only set either completionTimeout or completionInterval","davsclaus:1445320302:2015-10-20T13:51:42.570+0000:1445320302:2015-10-20T13:51:42.570+0000:Also add option sendEmptyMessageWhenIdle so in case of new new messages within the timeout period, an empty message can be routed."
0,CAMEL-9238,Bug,Major,"2.15.2, 2.15.3","2.16.1, 2.15.5, 2.17.0","
None
",Resolved,Fixed,"2.16.1, 2.15.5, 2.17.0",Claus Ibsen,Adi König,0,2,2015-10-20 06:23:12+00:00,2015-11-03 10:57:15+00:00,"If a relative file path is specified for the move or moveFailed Attribute of the file2 component, a NullPointerException is thrown while processing the onCompletion commit resp. rollback strategy.


And because the processed file cannot be moved away, the processing is restarted again and so on...


Wrong code line (GenericFile.java:203 in camel-core V2.15.3):



ObjectHelper.after(newFileName, newEndpointPath + File.separatorChar);




when newFileName and newEndpointPath are both relative paths.


Stacktrace:



java.lang.NullPointerException
	at java.io.File.<init>(File.java:277) ~[?:1.8.0_60]
	at org.apache.camel.component.file.GenericFile.changeFileName(GenericFile.java:207) ~[camel-core-2.15.3.jar:2.15.3]
	at org.apache.camel.component.file.strategy.GenericFileExpressionRenamer.renameFile(GenericFileExpressionRenamer.java:41) ~[camel-core-2.15.3.jar:2.15.3]
	at org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy.commit(GenericFileRenameProcessStrategy.java:87) ~[camel-core-2.15.3.jar:2.15.3]
	at org.apache.camel.component.file.GenericFileOnCompletion.processStrategyCommit(GenericFileOnCompletion.java:124) [camel-core-2.15.3.jar:2.15.3]
	at org.apache.camel.component.file.GenericFileOnCompletion.onCompletion(GenericFileOnCompletion.java:80) [camel-core-2.15.3.jar:2.15.3]
	at org.apache.camel.component.file.GenericFileOnCompletion.onComplete(GenericFileOnCompletion.java:54) [camel-core-2.15.3.jar:2.15.3]
	at org.apache.camel.util.UnitOfWorkHelper.doneSynchronizations(UnitOfWorkHelper.java:104) [camel-core-2.15.3.jar:2.15.3]
	at org.apache.camel.impl.DefaultUnitOfWork.done(DefaultUnitOfWork.java:229) [camel-core-2.15.3.jar:2.15.3]
	at org.apache.camel.util.UnitOfWorkHelper.doneUow(UnitOfWorkHelper.java:65) [camel-core-2.15.3.jar:2.15.3]
	at org.apache.camel.processor.CamelInternalProcessor$UnitOfWorkProcessorAdvice.after(CamelInternalProcessor.java:637) [camel-core-2.15.3.jar:2.15.3]
	at org.apache.camel.processor.CamelInternalProcessor$UnitOfWorkProcessorAdvice.after(CamelInternalProcessor.java:605) [camel-core-2.15.3.jar:2.15.3]
	at org.apache.camel.processor.CamelInternalProcessor$InternalCallback.done(CamelInternalProcessor.java:239) [camel-core-2.15.3.jar:2.15.3]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:106) [camel-core-2.15.3.jar:2.15.3]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190) [camel-core-2.15.3.jar:2.15.3]
	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:439) [camel-core-2.15.3.jar:2.15.3]
	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:211) [camel-core-2.15.3.jar:2.15.3]
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:175) [camel-core-2.15.3.jar:2.15.3]
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:174) [camel-core-2.15.3.jar:2.15.3]
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:101) [camel-core-2.15.3.jar:2.15.3]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_60]
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308) [?:1.8.0_60]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_60]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294) [?:1.8.0_60]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_60]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_60]","davsclaus:1445320459:2015-10-20T13:54:19.683+0000:1445320459:2015-10-20T13:54:19.683+0000:Can you tell us your file endpoint configuration
Anchialas:1445377180:2015-10-21T05:39:40.351+0000:1445377220:2015-10-21T05:40:20.247+0000:Yes, sure:
{code}
from(""file:{{src.uri}}"")
{code}
with properties
{noformat}
file.polling.delay=5000
import.dir=./import/data
src.uri={{import.dir}}?delay={{file.polling.delay}}\
   &move=${file:parent}.bak/${date:now:yyyyMMdd}/${file:onlyname}\
   &moveFailed=${file:parent}.err/${date:now:yyyyMMdd}/${file:onlyname}
{noformat}
davsclaus:1445911579:2015-10-27T10:06:19.703+0000:1445911579:2015-10-27T10:06:19.703+0000:If your intention is to store the files in the parent directory then use .., eg 

{code}
move=../input.bak/${date:now:yyyyMMdd}/${file:onlyname}
{code}
davsclaus:1445916966:2015-10-27T11:36:06.120+0000:1445916966:2015-10-27T11:36:06.120+0000:Thanks for reporting.
Anchialas:1446519435:2015-11-03T10:57:15.422+0000:1446519435:2015-11-03T10:57:15.422+0000:Our intention is to store the backup or failed files in subdirectories ""parallel"" to the source folder, e.g.
* /path/to/import/data/file1.txt
* /path/to/import/data.bak/20151103/file1.txt
* /path/to/import/data.err/20151103/file1.txt
"
0,CAMEL-9237,Bug,Minor,2.16.0,,"
None
",Resolved,Cannot Reproduce,None,Unassigned,Chris Ribble,0,2,2015-10-19 22:15:58+00:00,2016-04-25 18:34:51+00:00,"Dynamically adding or removing routes in multiple threads can cause a ConcurrentModificationException. For example, in my project's tests, we dynamically mock out a large number of routes. When we run these tests serially it works fine, but in parallel we almost always see a ConcurrentModificationException when DefaultCamelContext passes the routeDefinitions list to RouteDefinitionHelper.validateUniqueIds


I propose that we fix this by making routeDefinitions (in DefaultCamelContext) a CopyOnWriteArrayList instead of an ArrayList. Apparently this was already done for the lifecycleStrategies list, presumably for the same reason.


It's also curious that the accessors for this list are marked synchronized. Since the references are final, there's no reason to use volatile instead, so it seems like the synchronized here is pointless.


I also think we should consider doing the same for restDefinitions, since there is nothing preventing this list from being modified in multiple threads.","davsclaus:1445412068:2015-10-21T15:21:08.846+0000:1445412068:2015-10-21T15:21:08.846+0000:Are you running a set of independent tests in parallel and for each test you add/remove routes dynamically, all on a single shared CamelContext ?
You are not able to use a private camel context per test so they run in isolation and can be safely parallelized?

But sure you are welcome to work on a patch about the ConcurrentModificationException. But mind that adding / removing routes takes a fair bit of logic so its not trivial to make it parallel."
0,CAMEL-9236,Bug,Minor,None,"2.16.1, 2.15.5, 2.17.0","
None
",Closed,Fixed,"2.16.1, 2.15.5, 2.17.0",Claus Ibsen,Chad Durovec,0,3,2015-10-19 16:36:19+00:00,2015-10-20 17:00:52+00:00,"Looks like a copy/paste error is preventing the grouping functionality from being executed by the helper object. 
group should be passed to the delegate's tokenize method. 


camel-core/src/main/java/org/apache/camel/builder/ExpressionClause.java 


    /** 



Evaluates a token expression on the message body

@param token the token
@param regex whether the token is a regular expression or not
@param group to group by the given number
@return the builder to continue processing the DSL
     */ 
    public T tokenize(String token, boolean regex, int group) 
{ 
        return delegate.tokenize(token, regex); 
    }","githubbot:1445243978:2015-10-19T16:39:38.741+0000:1445243978:2015-10-19T16:39:38.741+0000:GitHub user duro1 opened a pull request:

    https://github.com/apache/camel/pull/651

    CAMEL-9236 Bug fix to pass group to the helper delegate

    Issue resolved by passing the group parameter to the helper object.
    
    Note: The splitter will use the token passed in as the delimiter between items in the group.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/duro1/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/651.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #651
    
----
commit b4df911cf3d9e5ceecb7e3485127999dfae69ff1
Author: unknown <durowreck@yahoo.com>
Date:   2015-10-16T16:08:01Z

    Bug fix to pass group to the helper delegate

----

davsclaus:1445251428:2015-10-19T18:43:48.002+0000:1445251428:2015-10-19T18:43:48.002+0000:Thanks for the PR
githubbot:1445331652:2015-10-20T17:00:52.336+0000:1445331652:2015-10-20T17:00:52.336+0000:Github user duro1 closed the pull request at:

    https://github.com/apache/camel/pull/651
"
0,CAMEL-9235,Bug,Minor,None,"2.16.1, 2.17.0","
None
",Resolved,Fixed,"2.16.1, 2.17.0",Claus Ibsen,Thomas Diesler,0,3,2015-10-19 10:48:31+00:00,2015-10-19 18:48:50+00:00,No Desc,"githubbot:1445223006:2015-10-19T10:50:06.974+0000:1445223006:2015-10-19T10:50:06.974+0000:GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/649

    [CAMEL-9235] No type converter available when destination is super typ

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-9235

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/649.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #649
    
----
commit 5be6591244c7e050117a1f1847550457b26b10e7
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2015-10-19T10:48:59Z

    [CAMEL-9235] No type converter available when destination is super typ

----

githubbot:1445223175:2015-10-19T10:52:55.980+0000:1445223175:2015-10-19T10:52:55.980+0000:GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/650

    [CAMEL-9235] No type converter available when destination is super typ

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-9235m

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/650.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #650
    
----
commit 223609d27555a0a2ee9a06f51101e44b40c1b2ed
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2015-10-19T10:48:59Z

    [CAMEL-9235] No type converter available when destination is super typ

----

githubbot:1445224750:2015-10-19T11:19:10.726+0000:1445224750:2015-10-19T11:19:10.726+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/650

githubbot:1445233053:2015-10-19T13:37:33.160+0000:1445233053:2015-10-19T13:37:33.160+0000:Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/649

davsclaus:1445251730:2015-10-19T18:48:50.912+0000:1445251730:2015-10-19T18:48:50.912+0000:Thanks for the PR"
0,CAMEL-9204,Improvement,Major,None,None,"
None
",Resolved,Fixed,"2.16.1, 2.17.0",Henryk Konsek,Henryk Konsek,0,1,2015-10-09 07:31:28+00:00,2015-10-09 08:16:14+00:00,"Currently our documentation says that we should configure topic prefix when working with AMQP 1.0.



<bean id=""amqpConnection"" class=""org.apache.camel.component.jms.JmsComponent"" >
       <property name=""connectionFactory"">
         <bean class=""org.apache.qpid.amqp_1_0.jms.impl.ConnectionFactoryImpl"" factory-method=""createFromURL"">
                       <constructor-arg index=""0"" type=""java.lang.String"" value=""amqp://localhost:5672"" />
           <property name=""topicPrefix"" value=""topic://"" />  <!-- only necessary when connecting to ActiveMQ over AMQP 1.0 -->
          </bean>
       </property>
   </bean>




We should provide factory method which creates pre-configured component that can be used with AMQP 1.0.","hekonsek:1444349209:2015-10-09T08:06:49.584+0000:1444349209:2015-10-09T08:06:49.584+0000:Fixed in 8b4b19faffd17f281db1a24ad5d32e497d35e940.

Users can now call the {{AMQPComponent#amqp10Component(String uri)}} method to create the pre-configured AMQP 1.0 component."
0,CAMEL-9203,Improvement,Major,None,None,"
None
",Resolved,Fixed,"2.16.1, 2.17.0",Henryk Konsek,Henryk Konsek,0,1,2015-10-09 07:11:06+00:00,2015-10-09 08:16:06+00:00,"Currently Qpid dependencies are marked as optional:



    <dependency>
      <groupId>org.apache.qpid</groupId>
      <artifactId>qpid-amqp-1-0-client-jms</artifactId>
      <version>${qpid-version}</version>
      <optional>true</optional>
    </dependency>
    <dependency>
        <groupId>org.apache.qpid</groupId>
        <artifactId>qpid-client</artifactId>
        <version>${qpid-version}</version>
        <optional>true</optional>
    </dependency>




Those should not be optional, as the component is unusable without those two jars.",hekonsek:1444346640:2015-10-09T07:24:00.469+0000:1444346640:2015-10-09T07:24:00.469+0000:Fixed in 015532438780c84fa46cb8e9bc9b353662177712.
0,CAMEL-9202,Bug,Major,2.14.3,"2.15.5, 2.16.2, 2.17.0","
None
",Resolved,Fixed,"2.15.5, 2.16.2, 2.17.0",Claus Ibsen,MykhailoVlakh,0,2,2015-10-08 15:38:16+00:00,2015-11-26 12:21:48+00:00,"Hello Camel team,


First of all I want to thank you for all great work you do to provide such a powerful tool as Camel. I really enjoy using it in my work. 


Currently I am working on an application that requires delimited and fixed width parsing tools and I decided to use Camel Flatpack because we already use some other Camel stuff. We use Camel 2.14.3 which is not the latest one but forks fine. During my work with Flatpack consumer I found several issues and some room for improvements and I decided to share my thoughts/findings with you. Our team have plans to migrate to the latest version of Camel in near future and we all will be happy if the new version includes fixes/improvements that I am goint to suggest.


The main issue that I found is that flatpack endpoint does not close body reader if an exception is thrown during parser creation step. As a result the related resource remains opened forever. For example in my cases when PZMAP files was missing my data file (csv file) was locked and my file consumer ended in endless loop in which it was trying to move a file to .error folder but was not able to do this because the file was opened for read.


Another problem that I noticed is that I cannot use allowShortLines and ignoreExtraColumns attributes if my parser uses inline headers from files. Flatpack simply ignores them in this case.


Finally I think that there is some  room for improvements:



It would be nice to have a possibility to provide PZMAP as a bean via JNDI context instead of having to generate a file. This feature will be very useful and content parsing should work faster because the XML will be read from memory instead of reading it from a file each time you parse some content;
It would be nice to have a possibility to provide content format as an URI attribute instead of using these ugly URI prefixes that we should use right now. With such possibility in plase URI will look the same all the time and developers won't need to reformat URI differently for different content types.



I attached a patch file with code fragments and comments to them that illustrate my findings/thoughts. Unformtunatelly I don't have enough time to provide real fixes and unit tests so please excuse me for this. 


Please let me know if something is unclear or require more details.


Looking forward for your feedback,
Mykhailo","mvlakh:1444290011:2015-10-08T15:40:11.030+0000:1444290011:2015-10-08T15:40:11.030+0000:Please note that the provided code changes are just for illustration of the found issues and you should not expect to compile and run this code.
davsclaus:1448170401:2015-11-22T13:33:21.026+0000:1448170401:2015-11-22T13:33:21.026+0000:Please only provide a patch for closing the reader. Please do not add in other functionality in the same patch. 
davsclaus:1448171138:2015-11-22T13:45:38.282+0000:1448171138:2015-11-22T13:45:38.282+0000:The reader is now closed. Thanks for that part of the patch.

I logged another ticket to allow reading the resource from the registry, then you can just refer to that using the existing option, and no need to introduce a new option for that.
mvlakh:1448244056:2015-11-23T10:00:56.876+0000:1448244056:2015-11-23T10:00:56.876+0000:Thank you for the fix. Good to hear that the possibility to read PZMAP from registry will be added. 

The only question which is left unanswered is - Will you fix the issue with isAllowShortLines and isIgnoreExtraColumns attributes that are taken into account only if user provides PZMAP resource? My patch includes a fix for this problem as well so could you please take a look at let me know what do you think? Thank you.
davsclaus:1448244319:2015-11-23T10:05:19.311+0000:1448244319:2015-11-23T10:05:19.311+0000:Can you provide a new patch based on latest code for master to fix that other issue you mention?
mvlakh:1448508007:2015-11-26T11:20:07.365+0000:1448508007:2015-11-26T11:20:07.365+0000:Added a new patch with a fix for the issue in the delimited content parser creation code which does not allow to use isAllowShortLines and isIgnoreExtraColumns if PZMAP is not used.
mvlakh:1448508110:2015-11-26T11:21:50.612+0000:1448508110:2015-11-26T11:21:50.612+0000:Sorry for a delay. Attached a new diff file with the necessary changes.
davsclaus:1448511708:2015-11-26T12:21:48.037+0000:1448511708:2015-11-26T12:21:48.037+0000:Thanks for the 2nd patch."
0,CAMEL-9201,Improvement,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Antonin Stefanutti,Antonin Stefanutti,1,3,2015-10-08 08:50:44+00:00,2016-02-24 13:40:54+00:00,"Since version 2.10.0 of Camel, the Camel CDI component hasn't been actively maintained and suffers from few design flaws that impede improvements and new features.


Over the last couple of months, work has been done to refactor and improve the existing Camel CDI component. However, given that a redesign was required to make it more CDI spirit, the heavy work has been done in a separate project and the rational for an overhaul and the contribution list documented here: https://github.com/astefanutti/camel-cdi.


As people started using and contributing to it, it'd be better to have that improved version contributed back to the project as soon as possible to avoid diverging to much.


That new version of the Camel CDI component provides the following:


New features



CDI events Camel endpoint
Camel events to CDI events bridge
Type converter beans
OSGi integration



Improvements



Better Camel context customisation and lifecycle
Better multiple Camel contexts support
@Uri and @Mock Endpoint Qualifiers Unification
Dependency on DeltaSpike has been removed (only remaining for Main support)



Compatibility



CDI 1.0, 1.1, 1.2
Java SE: Weld 1.x, Weld 2.x, OpenWebBeans 1.2.x, 1.6.x
Java EE: WildFly 8.x, 9.x, WildFly Camel
OSGi: Karaf 4



Test coverage



100+ test cases
90% test coverage
Profiles for (Weld, OpenWebBeans) x (CDI 1.0, CDI 1.2)



Non-backward compatibility


Compile time



The @ContextName qualifier does not have a default empty value anymore as it is irrelevant
The CdiPropertiesComponent class has been removed, the standard PropertiesComponent can be used instead



Run time



DeltaSpike is not used anymore for the sourcing of the configuration properties. This new version is agnostic to any configuration sourcing mechanism and delegates that concern to the application so that it can declare a custom PropertiesComponent bean whose sourcing is tailored to its need. DeltaSpike can still be easily used by the application by declaring a PropertiesComponent bean configured with a PropertiesResolver / PropertiesParser relying on DeltaSpike. See https://github.com/apache/camel/tree/83d0d1b01db6a6df7953a2a14342367d0775a80c/examples/camel-example-cdi-properties for an example.



More details can be found in https://github.com/astefanutti/camel-cdi#contribution.","githubbot:1452752972:2016-01-14T14:29:32.861+0000:1452752972:2016-01-14T14:29:32.861+0000:GitHub user astefanutti opened a pull request:

    https://github.com/apache/camel/pull/769

    CAMEL-9201: Improved Camel CDI component

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/astefanutti/camel camel-cdi-pr

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/769.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #769
    
----
commit b58b0d3b57e888b903aca7ca14216cc612b72f1b
Author: Antonin Stefanutti <antonin@stefanutti.fr>
Date:   2015-08-03T15:54:34Z

    CAMEL-9201: Improved Camel CDI component

----

davsclaus:1452836580:2016-01-15T13:43:00.133+0000:1452836580:2016-01-15T13:43:00.133+0000:Thanks for all this hard work. The code has been pushed to master branch.

I noticed the examples/camel-example-cdi do not shutdown graceful if pressing ctrl + c. I wonder if the hangup interceptor is not enabled? You can reproduce by running the example according to its readme file.
antonin.stefanutti:1452836997:2016-01-15T13:49:57.429+0000:1452836997:2016-01-15T13:49:57.429+0000:[~davsclaus] I did just that after rebase and before pushing, that was working fine to me. I'm giving it a second try right away.
antonin.stefanutti:1452837567:2016-01-15T13:59:27.365+0000:1452837567:2016-01-15T13:59:27.365+0000:[~davsclaus] that works for me. Is there anything I could be missing?
davsclaus:1452837764:2016-01-15T14:02:44.302+0000:1452837764:2016-01-15T14:02:44.302+0000:Let me rebuild all the code and try again.
antonin.stefanutti:1452838005:2016-01-15T14:06:45.932+0000:1452838015:2016-01-15T14:06:55.498+0000:Yes, I rebuilt {{camel-core}} to have it working.
davsclaus:1452840923:2016-01-15T14:55:23.102+0000:1452840923:2016-01-15T14:55:23.102+0000:Yep it shutdown graceful now.
githubbot:1452841997:2016-01-15T15:13:17.087+0000:1452841997:2016-01-15T15:13:17.087+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/769

githubbot:1456073426:2016-02-22T00:50:26.693+0000:1456073426:2016-02-22T00:50:26.693+0000:GitHub user johnament opened a pull request:

    https://github.com/apache/camel/pull/854

    CAMEL-9201 - Minor fixes to the project structure.

    The changes introduced no longer depend on DeltaSpike Core, so removed that dependency and upgraded to the latest patch version (v1.5.4)
    Updated some docs, they were referring to RoutesBuilder and extending it, however its an interface so that doesn't work well.
    
    I used the origin ticket that Antonin worked on, since thats the most relevant piece.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/johnament/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/854.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #854
    
----
commit f700c859feea4f2435970e4fbb316f2d1fa45978
Author: John D. Ament <johndament@apache.org>
Date:   2016-02-22T00:49:22Z

    CAMEL-9201 - Minor fixes to the project structure.
    
    The changes introduced no longer depend on DeltaSpike Core, so removed that dependency and upgraded to the latest patch version (v1.5.4)
    Updated some docs, they were referring to RoutesBuilder and extending it, however its an interface so that doesn't work well.

----

githubbot:1456115570:2016-02-22T12:32:50.511+0000:1456115570:2016-02-22T12:32:50.511+0000:Github user johnament closed the pull request at:

    https://github.com/apache/camel/pull/854
"
0,CAMEL-9200,Bug,Minor,2.15.3,"2.16.4, 2.17.1, 2.18.0","
None
",Resolved,Fixed,"2.16.4, 2.17.1, 2.18.0",Claus Ibsen,Aaron Birkland,0,3,2015-10-08 04:27:03+00:00,2016-04-28 15:20:53+00:00,"The context component experiences clashes between endpoints with the same local name, but from different contexts.  If two contexts both contain a local endpoint ""direct:out"", any route involving both endpoints will fail to start due to a FailedToStartRouteException; ""Multiple consumers for the same endpoint is not allowed: Endpoint[direct://out].""


As an example, the following set of routes will fail due to this issue:
from(""direct:in"").to(""blackBox:in"");
from(""blackBox:out"").to(""direct:out"");
from(""direct:out"").to(""mock:results"");


See  thread:
http://camel.465427.n5.nabble.com/Context-Component-issue-td5770975.html","birkland:1444251603:2015-10-08T05:00:03.956+0000:1444251718:2015-10-08T05:01:58.119+0000:Patch against master 34bcd6cf8b234633a0fd92154174d413efbdbb6f

See also:
https://github.com/birkland/camel/commit/68e1ccf5b196839252b33f703aed0cd149faf9d1
davsclaus:1461813657:2016-04-28T11:20:57.117+0000:1461813657:2016-04-28T11:20:57.117+0000:The camel-context component is depreacted
davsclaus:1461828053:2016-04-28T15:20:53.067+0000:1461828053:2016-04-28T15:20:53.067+0000:Thanks for the patch. Sorry for the delay of merging."
0,CAMEL-9199,Bug,Major,2.16.0,"2.16.1, 2.17.0","
None
",Resolved,Fixed,"2.16.1, 2.17.0",Claus Ibsen,Brad Reitmeyer,0,3,2015-10-07 21:14:44+00:00,2015-10-08 12:36:07+00:00,"The RabbitMQ consumer thread crashes when sending an object that implements Serializable but contains non Serializable objects. 


I will have PR very soon to fix this and add tests.","githubbot:1444224152:2015-10-07T21:22:32.277+0000:1444224152:2015-10-07T21:22:32.277+0000:GitHub user brreitme opened a pull request:

    https://github.com/apache/camel/pull/632

    CAMEL-9199 RabbitMQ Consumer threads crash when sending partially ser…

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/brreitme/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/632.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #632
    
----
commit 2235e69ab7138f37ee491f894a50ce49dbbfedf6
Author: Brad Reitmeyer <github@bradreitmeyer.com>
Date:   2015-10-07T21:15:45Z

    CAMEL-9199 RabbitMQ Consumer threads crash when sending partially serializable objects

----

davsclaus:1444254128:2015-10-08T05:42:08.203+0000:1444254128:2015-10-08T05:42:08.203+0000:Thanks for the PR. Do you mind closing it at github
githubbot:1444278967:2015-10-08T12:36:07.480+0000:1444278967:2015-10-08T12:36:07.480+0000:Github user brreitme closed the pull request at:

    https://github.com/apache/camel/pull/632
"
0,CAMEL-9198,Bug,Minor,2.15.3,,"

documentation

",Resolved,Cannot Reproduce,None,Unassigned,Paolo Antinori,0,2,2015-10-07 20:14:56+00:00,2015-10-08 04:56:47+00:00,"http://camel.apache.org/component.html


shows



Unable to render {include} The included page could not be found.","davsclaus:1444251407:2015-10-08T04:56:47.089+0000:1444251407:2015-10-08T04:56:47.089+0000:Must be a temporary glitch.

Works fine now
"
0,CAMEL-9197,Bug,Major,"2.14.2, 2.14.3, 2.15.0, 2.15.1, 2.15.2, 2.15.3",None,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Luca Quintarelli,0,2,2015-10-07 10:35:55+00:00,2016-02-01 20:38:01+00:00,"from(""file:src/data?noop=true"")
        .split().tokenizeXML(""Item"").streaming().stopOnException()
            .unmarshal(jaxb)
            .marshal().json(JsonLibrary.Jackson) 
// This line causes a memory leak if stream caching enabled
            .log(""File ${in.header.CamelFileName} token ${in.header.CamelSplitIndex}"")
        .end();","davsclaus:1454330281:2016-02-01T20:38:01.580+0000:1454330281:2016-02-01T20:38:01.580+0000:We have improved the data format marshal to better support stream caching. It may be improved in the latest 2.16.2 release. I tested with master.

On a JVM with 64mb limit I can find run this example and not eat up any memory. In older versions the GC would also reclaim the memory but it could use 200-300mb during processing one of those files."
0,CAMEL-9196,Bug,Minor,2.15.3,"2.15.4, 2.16.1, 2.17.0","
None
",Resolved,Invalid,"2.15.4, 2.16.1, 2.17.0",Claus Ibsen,Mykola Pavluchynskyi,0,3,2015-10-06 20:37:07+00:00,2015-10-08 03:30:57+00:00,"A timeout of 0 won't timeout in the instant, the time will go negative. 


camelcontext.stopRoute(routeId, 0, TimeUnit.SECONDS, false); 


[org.apache.camel.impl.DefaultShutdownStrategy] : Waiting as there are still 3 inflight and pending exchanges to complete, timeout in -1 seconds.
[org.apache.camel.impl.DefaultShutdownStrategy] : Waiting as there are still 3 inflight and pending exchanges to complete, timeout in -2 seconds.
[org.apache.camel.impl.DefaultShutdownStrategy] : Waiting as there are still 3 inflight and pending exchanges to complete, timeout in -3 seconds. 


Found a post related to it there : http://camel.465427.n5.nabble.com/Forcefully-shutting-down-routes-td5722447.html


Original issue was marked as fixed so I create clone:
I'm using 2.15.3 and still have the same promlem - negative timeout and don't stop.


12:48:59,864 INFO [org.apache.camel.impl.DefaultShutdownStrategy] (Camel (interprocCamelContext) thread #56904 - timer://InteractiveAppRetryProcessor) Waiting as there are still 1 inflight and pending exchanges to complete, timeout in -25754 seconds. Inflights per route: [InteractiveProcessor_Retry_4 = 1]
12:49:00,865 INFO [org.apache.camel.impl.DefaultShutdownStrategy] (Camel (interprocCamelContext) thread #56904 - timer://InteractiveAppRetryProcessor) Waiting as there are still 1 inflight and pending exchanges to complete, timeout in -25755 seconds. Inflights per route: [InteractiveProcessor_Retry_4 = 1]
12:49:01,865 INFO [org.apache.camel.impl.DefaultShutdownStrategy] (Camel (interprocCamelContext) thread #56904 - timer://InteractiveAppRetryProcessor) Waiting as there are still 1 inflight and pending exchanges to complete, timeout in -25756 seconds. Inflights per route: [InteractiveProcessor_Retry_4 = 1]
12:49:02,866 INFO [org.apache.camel.impl.DefaultShutdownStrategy] (Camel (interprocCamelContext) thread #56904 - timer://InteractiveAppRetryProcessor) Waiting as there are still 1 inflight and pending exchanges to complete, timeout in -25757 seconds. Inflights per route: [InteractiveProcessor_Retry_4 = 1]
12:49:03,866 INFO [org.apache.camel.impl.DefaultShutdownStrategy] (Camel (interprocCamelContext) thread #56904 - timer://InteractiveAppRetryProcessor) Waiting as there are still 1 inflight and pending exchanges to complete, timeout in -25758 seconds. Inflights per route: [InteractiveProcessor_Retry_4 = 1]
12:49:04,866 INFO [org.apache.camel.impl.DefaultShutdownStrategy] (Camel (interprocCamelContext) thread #56904 - timer://InteractiveAppRetryProcessor) Waiting as there are still 1 inflight and pending exchanges to complete, timeout in -25759 seconds. Inflights per route: [InteractiveProcessor_Retry_4 = 1]
12:49:05,867 INFO [org.apache.camel.impl.DefaultShutdownStrategy] (Camel (interprocCamelContext) thread #56904 - timer://InteractiveAppRetryProcessor) Waiting as there are still 1 inflight and pending exchanges to complete, timeout in -25760 seconds. Inflights per route: [InteractiveProcessor_Retry_4 = 1]
When using hawtio it simply hangs when I try to view properties of Camel Contexts
I am using camel with activemq, but there are no inflight messages in activemq...","davsclaus:1444165346:2015-10-07T05:02:26.892+0000:1444165346:2015-10-07T05:02:26.892+0000:You cannot use timeout value of 0, use a positive value, such as 1 second. But ideally you should allow the route time to shutdown graceful such as 30 seconds or more.
davsclaus:1444166068:2015-10-07T05:14:28.924+0000:1444166068:2015-10-07T05:14:28.924+0000:Must use a positive timeout value
mykolap:1444167325:2015-10-07T05:35:25.092+0000:1444167325:2015-10-07T05:35:25.092+0000:Timeout in my case was 180 sec.

This is the code of initialization my context:

            camelContext = new DefaultCamelContext();
            camelContext.setName(""interprocCamelContext"");

            camelContext.getShutdownStrategy().setTimeout(180); //300 sec is to long, wait only 180 sec instead

            camelContext.addRoutes(this);
            camelContext.start();

And usually it stop earlier than in 180 sec (from 0 to 2 seconds).
But in that case there was a long lasting operation, and it didn't stop.

Code for the route
        from(""activemq:queue:InteractiveProcessor_Retry_4?concurrentConsumers=2)
                .routeId(""InteractiveProcessor_Retry_4"")
                .autoStartup(false)
                .recipientList(simple(""${header.originalAmqDestination}""));

Обычно лог завершения выглядит так:
08:32:14,441 INFO  [org.apache.camel.impl.DefaultShutdownStrategy] (Camel (interprocCamelContext) thread #107 - timer://InteractiveAppRetryProcessor) Starting to graceful shutdown 1 routes (timeout 180 seconds)
08:32:14,442 INFO  [org.apache.camel.impl.DefaultShutdownStrategy] (Camel (interprocCamelContext) thread #225 - ShutdownTask) Route: InteractiveProcessor_Retry_4 suspend complete, was consuming from: Endpoint[activemq://queue:InteractiveProcessor_Retry_4?concurrentConsumers=2]
08:32:14,442 INFO  [org.apache.camel.impl.DefaultShutdownStrategy] (Camel (interprocCamelContext) thread #107 - timer://InteractiveAppRetryProcessor) Graceful shutdown of 1 routes completed in 0 seconds
08:32:14,442 INFO  [org.apache.camel.impl.DefaultCamelContext] (Camel (interprocCamelContext) thread #107 - timer://InteractiveAppRetryProcessor) Route: InteractiveProcessor_Retry_4 is suspended, was consuming from: Endpoint[activemq://queue:InteractiveProcessor_Retry_4?concurrentConsumers=2]


davsclaus:1444167618:2015-10-07T05:40:18.467+0000:1444167618:2015-10-07T05:40:18.467+0000:You override that when calling
{code}
camelcontext.stopRoute(routeId, 0, TimeUnit.SECONDS, false);
{code}
davsclaus:1444167647:2015-10-07T05:40:47.661+0000:1444167647:2015-10-07T05:40:47.661+0000:I added an extra check for validating that in this case the timeout must be > 0

mykolap:1444168732:2015-10-07T05:58:52.723+0000:1444168732:2015-10-07T05:58:52.723+0000:In my case I stop route by using functions with one argument:
            context.stopRoute(routeName);
and
            context.suspendRoute(routeName);

And usually get info message that timeout is 180 (my camel context value)
njiang:1444246257:2015-10-08T03:30:57.642+0000:1444246257:2015-10-08T03:30:57.642+0000:Merged the patch into camel-2.16.x branch."
0,CAMEL-9195,Bug,Major,2.16.0,"2.16.1, 2.17.0","
None
",Resolved,Fixed,"2.16.1, 2.17.0",Claus Ibsen,James Netherton,0,2,2015-10-06 14:41:26+00:00,2015-10-08 03:35:29+00:00,"The UndertowProducer class leaks memory over time due to the repeated creation of ByteBufferSlicePool for each HTTP client request. My understanding of this class is that instances of it should be limited and cached if possible.


Here's an example RouteBuilder to replicate the issue. In a short time it will result in an OutOfMemoryError.  



public class UndertowRouteBuilder extends RouteBuilder {

    @Override
    public void configure() throws Exception {
        from(""undertow:http://localhost:8080/test"").to(""log:undertow?showAll=true"");

    	from(""timer:foo?period=5000"").transform(constant(""hello world"")).to(""undertow:http://localhost:8080/test"");
    }
}






org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[ID-worklaptop-50317-1444141557043-2-30][Message: hello world]
	at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1658)
	at org.apache.camel.impl.DefaultExchange.setException(DefaultExchange.java:345)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:156)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:460)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:121)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190)
	at org.apache.camel.component.timer.TimerConsumer.sendTimerExchange(TimerConsumer.java:165)
	at org.apache.camel.component.timer.TimerConsumer$1.run(TimerConsumer.java:73)
	at java.util.TimerThread.mainLoop(Timer.java:555)
	at java.util.TimerThread.run(Timer.java:505)
Caused by: java.lang.OutOfMemoryError: Direct buffer memory
	at java.nio.Bits.reserveMemory(Bits.java:658)
	at java.nio.DirectByteBuffer.<init>(DirectByteBuffer.java:123)
	at java.nio.ByteBuffer.allocateDirect(ByteBuffer.java:311)
	at org.xnio.BufferAllocator$2.allocate(BufferAllocator.java:57)
	at org.xnio.BufferAllocator$2.allocate(BufferAllocator.java:55)
	at org.xnio.ByteBufferSlicePool.allocate(ByteBufferSlicePool.java:143)
	at io.undertow.client.http.HttpRequestConduit.processWrite(HttpRequestConduit.java:98)
	at io.undertow.client.http.HttpRequestConduit.write(HttpRequestConduit.java:460)
	at io.undertow.conduits.AbstractFixedLengthStreamSinkConduit.write(AbstractFixedLengthStreamSinkConduit.java:106)
	at org.xnio.conduits.ConduitStreamSinkChannel.write(ConduitStreamSinkChannel.java:150)
	at io.undertow.channels.DetachableStreamSinkChannel.write(DetachableStreamSinkChannel.java:240)
	at org.apache.camel.component.undertow.UndertowProducer$UndertowProducerCallback.completed(UndertowProducer.java:166)
	at org.apache.camel.component.undertow.UndertowProducer$UndertowProducerCallback.completed(UndertowProducer.java:121)
	at io.undertow.client.http.HttpClientExchange.invokeReadReadyCallback(HttpClientExchange.java:190)
	at io.undertow.client.http.HttpClientConnection.initiateRequest(HttpClientConnection.java:293)
	at io.undertow.client.http.HttpClientConnection.sendRequest(HttpClientConnection.java:228)
	at org.apache.camel.component.undertow.UndertowProducer.process(UndertowProducer.java:102)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:141)
	... 10 more","davsclaus:1444167908:2015-10-07T05:45:08.003+0000:1444167908:2015-10-07T05:45:08.003+0000:Thanks for reporting. Sound like some buffer is not released or something.
davsclaus:1444175060:2015-10-07T07:44:20.166+0000:1444175060:2015-10-07T07:44:20.166+0000:Fixed the leak and need to merge to 2.16.x branch when its there.

There is also new options to configure the channel for keep alive and tcp no delay and so on."
0,CAMEL-9194,Improvement,Major,2.16.0,"2.16.1, 2.17.0","
None
",Resolved,Fixed,"2.16.1, 2.17.0",Willem Jiang,Willem Jiang,0,1,2015-10-06 09:24:31+00:00,2015-10-08 03:35:03+00:00,camel-elasticsearch search request converter should support more then just map object.,"njiang:1444095117:2015-10-06T09:31:57.779+0000:1444095117:2015-10-06T09:31:57.779+0000:Committed the patch into master branch, I will merge the patch into camel-2.16.x branch once it is created.
njiang:1444246452:2015-10-08T03:34:12.070+0000:1444246452:2015-10-08T03:34:12.070+0000:Merged the patch into camel-2.16.x branch."
0,CAMEL-9193,Improvement,Major,2.16.0,"2.16.1, 2.17.0","
None
",Resolved,Fixed,"2.16.1, 2.17.0",Claus Ibsen,Claus Ibsen,0,2,2015-10-06 08:14:31+00:00,2015-10-08 03:35:25+00:00,"Camel Aggregator's Pre-completion mode might not work correctly with option completionTimeout. 


Comment this line AggregatePreCompleteAwareStrategyTimeoutTest and test will fail. When the old exchange is marked as pre-complete, there is no timeout started for new group of aggregated messages.


https://github.com/apache/camel/blob/master/camel-core/src/test/java/org/apache/camel/processor/aggregator/AggregatePreCompleteAwareStrategyTimeoutTest.java#L38","davsclaus:1444092304:2015-10-06T08:45:04.176+0000:1444092304:2015-10-06T08:45:04.176+0000:Fixed on master, need to be cherry picked for 2.16.x branch when its there
njiang:1444246271:2015-10-08T03:31:11.226+0000:1444246271:2015-10-08T03:31:11.226+0000:Merged the patch into camel-2.16.x branch."
0,CAMEL-9192,Improvement,Major,2.16.0,"2.16.1, 2.17.0","
None
",Resolved,Fixed,"2.16.1, 2.17.0",Claus Ibsen,Claus Ibsen,0,1,2015-10-06 06:46:34+00:00,2015-10-09 16:18:49+00:00,"See ticket
https://github.com/OpenGamma/ElSql/issues/24


The reason is to allow to bind parameter values from POJOs etc where you can use simple language in an OGNL style to access getters and nested objects in the graph.


Also it would be nice to allow to bind to xml/json structures too.",davsclaus:1444253260:2015-10-08T05:27:40.885+0000:1444253260:2015-10-08T05:27:40.885+0000:The next release of elsql supports this
0,CAMEL-9191,Bug,Trivial,2.15.2,"2.15.4, 2.16.1, 2.17.0","

easyfix

",Resolved,Fixed,"2.15.4, 2.16.1, 2.17.0",Claus Ibsen,Tim,0,3,2015-10-05 21:28:59+00:00,2015-10-08 03:31:41+00:00,"The camel-example-spring-jms org.apache.camel.example.server.ServerRoutes contains an invalid URI parameter methodName (see exception below).


Fix - change 'methodName' to 'method' as below


//from(""jms:queue:numbers"").to(""bean:multiplier?methodName=multiply"");
  from(""jms:queue:numbers"").to(""bean:multiplier?method=multiply"");


Tests run: 2, Failures: 0, Errors: 2, Skipped: 0, Time elapsed: 2.031 sec <<< FAILURE! - in org.apache.camel.example.SpringJmsClientRemotingServerTest
org.apache.camel.example.SpringJmsClientRemotingServerTest  Time elapsed: 2.03 sec  <<< ERROR!
org.apache.camel.RuntimeCamelException: org.apache.camel.FailedToCreateRouteException: Failed to create route route1 at: >>> To[bean:multiplier?methodName=multiply] <<< in route: Route(route1)[[From[jms:queue:numbers]] -> [To[bean:multipli... because of Failed to resolve endpoint: bean://multiplier?methodName=multiply due to: Failed to resolve endpoint: bean://multiplier?methodName=multiply due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[

{methodName=multiply}

]
	at org.apache.camel.impl.DefaultComponent.validateParameters(DefaultComponent.java:183)
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:128)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:558)
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:79)
	at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:200)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:107)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:113)
	at org.apache.camel.model.SendDefinition.resolveEndpoint(SendDefinition.java:62)
	at org.apache.camel.model.SendDefinition.createProcessor(SendDefinition.java:56)
	at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:505)
	at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:217)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:1025)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:185)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:841)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:2895)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:2618)
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:167)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2467)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2463)
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:2486)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:2463)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:2432)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:255)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:121)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:332)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:151)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:128)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:331)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:773)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:483)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:93)
	at org.apache.camel.example.SpringJmsClientRemotingServerTest.setupFreePort(SpringJmsClientRemotingServerTest.java:46)


org.apache.camel.example.SpringJmsClientRemotingServerTest  Time elapsed: 2.031 sec  <<< ERROR!
java.lang.NullPointerException: null
	at org.apache.camel.example.SpringJmsClientRemotingServerTest.stopSpring(SpringJmsClientRemotingServerTest.java:52)","davsclaus:1444079594:2015-10-06T05:13:14.818+0000:1444079594:2015-10-06T05:13:14.818+0000:Thanks do you want to work on a patch or PR to fix this?
http://camel.apache.org/contributing
mit_jones:1444146607:2015-10-06T23:50:07.260+0000:1444146607:2015-10-06T23:50:07.260+0000:Attached patch
        //from(""jms:queue:numbers"").to(""bean:multiplier?methodName=multiply"");

now becomes

//from(""jms:queue:numbers"").to(""bean:multiplier?method=multiply"");
davsclaus:1444167581:2015-10-07T05:39:41.624+0000:1444167581:2015-10-07T05:39:41.624+0000:Need to merge to 2.16.x branch when its there
njiang:1444246301:2015-10-08T03:31:41.603+0000:1444246301:2015-10-08T03:31:41.603+0000:Merged the patch into camel-2.16.x branch."
0,CAMEL-9190,New Feature,Major,None,3.17.0,"
None
",Resolved,Won't Fix,3.17.0,Unassigned,Daniel Pocock,0,3,2015-10-05 19:40:00+00:00,2022-04-05 08:34:40+00:00,"The camel-sip component currently supports publish/subscribe functionality (SIP methods NOTIFY and SUBSCRIBE, RFC 6665)


SIP also has a method called MESSAGE for sending and receiving messages, it is in RFC 3428.  It is widely supported in softphones, some desk phones, WebRTC phones and most SIP proxies.


The RFC says the MESSAGE method can be used for any MIME type, although only text/plain must be supported


It should not be too hard to extend the existing camel-sip code to support this type of message.  It is supported by the javax.sip API:


https://android.googlesource.com/platform/external/nist-sip/+/618ef6b2f5a2d3c29e4a76faa5abc5ebd5fa6fe3/java/javax/sip/message/Request.java#15","nikv:1468113499:2016-07-10T09:18:19.723+0000:1468113499:2016-07-10T09:18:19.723+0000: https://github.com/apache/camel/pull/1056 
orpiske:1649118880:2022-04-05T08:34:40.181+0000:1649118880:2022-04-05T08:34:40.181+0000:This component was deprecated and removed on Camel 3.17.0, therefore closing as won't fix."
0,CAMEL-9189,New Feature,Minor,2.16.0,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Antoine Toulme,0,3,2015-10-04 09:02:31+00:00,2015-10-12 06:35:32+00:00,"This is a contribution of a new component that represents a XML data format backed by Jackson. Jackson offers XML databind capabilities.


See here the project for background: https://github.com/FasterXML/jackson-dataformat-xml


The motivation to bring in yet another XML data format is that this format is very easy to work with in ad hoc scenarios, with no schema or POJO in place. I also can profess that Woodstox and Jackson are of very high quality and very well maintained, and thus my tools of choice. Bringing them to Camel is a joy.


Dependencies:
jackson-dataformat-xml: ASL 2.0 licensed (see here: https://github.com/FasterXML/jackson-dataformat-xml/wiki)
woodstox: ASL 2.0 licensed


Patch:
https://github.com/apache/camel/pull/631


All dependencies are available as OSGi bundles.


Wiki page is still TODO.","githubbot:1443920672:2015-10-04T09:04:32.945+0000:1443920672:2015-10-04T09:04:32.945+0000:GitHub user atoulme opened a pull request:

    https://github.com/apache/camel/pull/631

    CAMEL-9189: Jackson XML Mapper Data format

    See https://issues.apache.org/jira/browse/CAMEL-9189

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/atoulme/camel CAMEL-9189

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/631.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #631
    
----
commit c9ca006dcdbe45fb67c565c4dfae46e420e8147e
Author: Antoine Toulme <antoine@lunar-ocean.com>
Date:   2015-10-04T09:03:51Z

    CAMEL-9189: Jackson XML Mapper Data format

----

toulmean:1443920877:2015-10-04T09:07:57.821+0000:1443920877:2015-10-04T09:07:57.821+0000:Note: this whole new component is a complete ripoff of the existing camel-jackson project. I renamed packages to avoid clashes.
I made all tests pass by changing the JSON payloads to XML, and that was it.

I selected to make this project separate so that camel-jackson doesn't pull in XML dependencies.

At this point, I have reviewed all contribution points and have made the build pass locally. Please review, hopefully this helps!
davsclaus:1444011718:2015-10-05T10:21:58.406+0000:1444011718:2015-10-05T10:21:58.406+0000:Thanks for this PR. Yeah this can be handy to use jackson for xml with JAXB and the POJO requirements.
davsclaus:1444015176:2015-10-05T11:19:36.116+0000:1444015176:2015-10-05T11:19:36.116+0000:Thanks Antonie, this is going into Camel 2.16.

Are you able to help with wiki documentation?

You can read about how to edit here
http://camel.apache.org/how-do-i-edit-the-website.html

Note that this requires a ICLA filed to ASF to be able to edit yourself.
toulmean:1444042999:2015-10-05T19:03:19.172+0000:1444042999:2015-10-05T19:03:19.172+0000:I can provide doc, I have a ICLA I think (I contributed the DNS component some time ago).
githubbot:1444123915:2015-10-06T17:31:55.912+0000:1444123915:2015-10-06T17:31:55.912+0000:Github user atoulme closed the pull request at:

    https://github.com/apache/camel/pull/631

davsclaus:1444339530:2015-10-09T05:25:30.592+0000:1444339530:2015-10-09T05:25:30.592+0000:Only doc is pending
toulmean:1444435177:2015-10-10T07:59:37.642+0000:1444435177:2015-10-10T07:59:37.642+0000:I have edited the following pages:
https://cwiki.apache.org/confluence/display/CAMEL/Data+Format+List
https://cwiki.apache.org/confluence/display/CAMEL/Jackson+XML

I'll do a second pass tomorrow to add the options of the Jackson component.
toulmean:1444574662:2015-10-11T22:44:22.058+0000:1444574662:2015-10-11T22:44:22.058+0000:I did a second pass, the doc is ready for review.
davsclaus:1444597065:2015-10-12T04:57:45.604+0000:1444597065:2015-10-12T04:57:45.604+0000:Looks good I just added that its from Camel 2.16 onwards.

Though maybe it would be good with a little info box talking a bit about what jackson xml is different than jaxb etc.
toulmean:1444602932:2015-10-12T06:35:32.158+0000:1444602932:2015-10-12T06:35:32.158+0000:I added a few lines."
0,CAMEL-9188,Bug,Minor,"2.14.0, 2.15.3","2.16.0, 2.14.4, 2.15.4","
None
",Resolved,Fixed,"2.16.0, 2.14.4, 2.15.4",Claus Ibsen,Dmitry Zolotukhin,0,1,2015-10-03 10:28:00+00:00,2015-10-04 09:28:06+00:00,"In Camel SNMP, the org.apache.camel.component.snmp.SnmpConverters
class has a static “getXmlSafeString” method which escapes unsafe
characters by replacing them. However, the order of applying
replacements is not correct:


    private static String getXmlSafeString(String string) 

{

        return string.replaceAll(""<"", ""<"").replaceAll("">"",
"">"").replaceAll(""&"", ""&"").replaceAll(""\"""",
"""""").replaceAll(""'"", ""'"");

    }


It replaces “<” with “<” at first, then the “&” is replaced with
“&”. This means that a “<” character in the input string will be
changed to “<”, and then into “&lt;”, which is not the intended
behavior.


This could be fixed by applying the “replaceAll(""&"", ""&"")”
transformation first.",
0,CAMEL-9187,New Feature,Minor,2.16.0,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Doug Tung,0,3,2015-10-02 17:26:50+00:00,2015-10-04 18:32:11+00:00,"component/camel-splunk:
add eventHost parameter to endpoint to support splunk host override per: http://docs.splunk.com/Documentation/Splunk/6.2.6/Data/Aboutdefaultfields#Override_host_assignment


https://github.com/apache/camel/pull/630","dwtung:1443778089:2015-10-02T17:28:09.290+0000:1443778089:2015-10-02T17:28:09.290+0000:I am submitting a patch/pull request for this issue
githubbot:1443779969:2015-10-02T17:59:29.090+0000:1443779969:2015-10-02T17:59:29.090+0000:GitHub user drsquidop opened a pull request:

    https://github.com/apache/camel/pull/630

    CAMEL-9187  add eventHost parameter to endpoint to support splunk host override p…

    For your consideration:
    
    CAMEL-9187 add eventHost parameter to endpoint to support splunk host override per: http://docs.splunk.com/Documentation/Splunk/6.2.6/Data/Aboutdefaultfields#Override_host_assignment
    
    https://issues.apache.org/jira/browse/CAMEL-9187

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/drsquidop/camel CAMEL-9187

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/630.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #630
    
----
commit ef0096c332a844b6f9ff36e80d59966619a9ebbb
Author: Doug <dwtung@isg.la>
Date:   2015-10-02T15:02:51Z

    CAMEL-9187 add eventHost parameter to endpoint to support splunk host override per: http://docs.splunk.com/Documentation/Splunk/6.2.6/Data/Aboutdefaultfields#Override_host_assignment

----

davsclaus:1443830428:2015-10-03T08:00:28.525+0000:1443830428:2015-10-03T08:00:28.525+0000:Thanks for the PR
githubbot:1443954731:2015-10-04T18:32:11.873+0000:1443954731:2015-10-04T18:32:11.873+0000:Github user drsquidop closed the pull request at:

    https://github.com/apache/camel/pull/630
"
0,CAMEL-9186,New Feature,Minor,2.15.3,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Naresh Khalasi,0,2,2015-10-01 16:20:29+00:00,2015-10-03 08:06:32+00:00,"As a developer wanting to use quartz2 scheduler and wanting to use CronScheduledRoutePolicy to be able to configure the route start time, suspend time and resume time, I would like to do the following


routepolicysample.scala
val rpolicy = new CronScheduledRoutePolicy
rpolicy.setRouteStartTime(""0 30 * * *"")
from(""quartz2://mytest/test?cron=0+0/2+*+*+*+?"")
.routePolicy(rpolicy).noAutoStart()
.to(""log:foo"")","nkhalasi:1443687839:2015-10-01T16:23:59.147+0000:1443687839:2015-10-01T16:23:59.147+0000:Patch for introducing routePolicy capability in the scala dsl
davsclaus:1443830792:2015-10-03T08:06:32.900+0000:1443830792:2015-10-03T08:06:32.900+0000:Thanks for the patch."
0,CAMEL-9185,Bug,Major,None,None,"
None
",Closed,Invalid,None,Claus Ibsen,Sambit Mohanty,0,2,2015-10-01 04:49:19+00:00,2015-10-01 05:25:25+00:00,"Hi,


Currently we have an implementation of Camel 2.12.1 and quartz .
The job states are being persisted in the database using the trigger tables.


After a database outage the scheduler is not able to revive and throws jdbc connection exception. I have provided a stack trace below. Please advise what could be the resolution steps.


***********************************************************************************************************************************************************


QuartzScheduler_CSAClusteredScheduler-_ClusterManager ERROR o.q.i.j.JobStoreTX ClusterManager: Error managing cluster: Failed to obtain DB connection from data source 'csaDS': java.sql.SQLException: Could not retrieve datasource via JNDI url 'java:comp/env/jdbc/CSA' javax.naming.ConfigurationException: A JNDI operation on a ""java:"" name cannot be completed because the server runtime is not able to associate the operation's thread with any J2EE application component.  This condition can occur when the JNDI client using the ""java:"" name is not executed on the thread of a server application request.  Make sure that a J2EE application does not execute JNDI operations on ""java:"" names within static code blocks or in threads created by that J2EE application.  Such code does not necessarily run on the thread of a server application request and therefore is not supported by JNDI operations on ""java:"" names.


org.quartz.JobPersistenceException: Failed to obtain DB connection from data source 'csaDS': java.sql.SQLException: Could not retrieve datasource via JNDI url 'java:comp/env/jdbc/CSA' javax.naming.ConfigurationException: A JNDI operation on a ""java:"" name cannot be completed because the server runtime is not able to associate the operation's thread with any J2EE application component.  This condition can occur when the JNDI client using the ""java:"" name is not executed on the thread of a server application request.  Make sure that a J2EE application does not execute JNDI operations on ""java:"" names within static code blocks or in threads created by that J2EE application.  Such code does not necessarily run on the thread of a server application request and therefore is not supported by JNDI operations on ""java:"" names.


        at org.quartz.impl.jdbcjobstore.JobStoreSupport.getConnection(JobStoreSupport.java:777) ~[quartz-2.2.0.jar:na]


        at org.quartz.impl.jdbcjobstore.JobStoreTX.getNonManagedTXConnection(JobStoreTX.java:71) ~[quartz-2.2.0.jar:na]


        at org.quartz.impl.jdbcjobstore.JobStoreSupport.doCheckin(JobStoreSupport.java:3213) ~[quartz-2.2.0.jar:na]


        at org.quartz.impl.jdbcjobstore.JobStoreSupport$ClusterManager.manage(JobStoreSupport.java:3836) [quartz-2.2.0.jar:na]


        at org.quartz.impl.jdbcjobstore.JobStoreSupport$ClusterManager.run(JobStoreSupport.java:3873) [quartz-2.2.0.jar:na]


*************************************************************************************************************************************************************",davsclaus:1443648318:2015-10-01T05:25:18.922+0000:1443648318:2015-10-01T05:25:18.922+0000:Use the mailing list / user forum to get help with this kind of quesiton
0,CAMEL-9184,Improvement,Major,2.15.3,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Arno Noordover,0,2,2015-09-30 16:47:02+00:00,2015-11-07 09:36:46+00:00,"When a message gets rejected and rejectExecution is true, the rejected message is still assigned to the new time-slot.
When you use the throttler to secure against DOS going to the backend a DOS can fill up many time-slots.
I'm not sure whether this behaviour is the expected behaviour. My feeling says that the rejected message should not be assigned to a new time-slot.


Maybe the exception should be raised in the synchronized method that determines the starting of a new time-slot.","davsclaus:1443826775:2015-10-03T06:59:35.432+0000:1443826775:2015-10-03T06:59:35.432+0000:Yeah my first though would also be for a rejected to be rejecated asap. Wonder if you would like to dive into the source to see what can be changed?
anoordover:1443858361:2015-10-03T15:46:01.384+0000:1443858361:2015-10-03T15:46:01.384+0000:Patch attached
anoordover:1443858580:2015-10-03T15:49:40.648+0000:1443858580:2015-10-03T15:49:40.648+0000:Can you review the attached patch?
I added two test cases.
Btw. the isPast method in the class TimeSlot seemed to be reversed logic. I
have changed that as well.
Take care to check this as well.



davsclaus:1443924791:2015-10-04T10:13:11.717+0000:1443924791:2015-10-04T10:13:11.717+0000:Thanks for the patch.
anoordover:1446860206:2015-11-07T09:36:46.466+0000:1446860206:2015-11-07T09:36:46.466+0000:What is the criterium to backport changes to previous versions?
Could this be backported to 2.14?"
0,CAMEL-9183,Bug,Major,2.16.0,2.17.0,"
None
",Resolved,Won't Fix,2.17.0,Claus Ibsen,Moulliard Charles,0,3,2015-09-30 09:41:02+00:00,2016-01-14 16:45:04+00:00,"Version used of Blueprint Web : 1.0


I don't know if this example has ever work - https://github.com/apache/camel/blob/master/examples/camel-example-servlet-tomcat-blueprintweb/src/main/resources/META-INF/blueprint.xml but this is apparently not the longer case.


When we start mvn jetty:run within the project, we get this error


2015-09-30 10:37:29.054:WARN:/:Failed to startup blueprint container. java.lang.IllegalArgumentException: Unsupported namespaces: http://camel.apache.org/schema/blueprint
java.lang.IllegalArgumentException: Unsupported namespaces: http://camel.apache.org/schema/blueprint
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.init(BlueprintContainerImpl.java:99)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.<init>(BlueprintContainerImpl.java:73)
	at org.apache.aries.blueprint.web.BlueprintContextListener.contextInitialized(BlueprintContextListener.java:86)


Why, when the BlueprintContext is created, then it fails to load the camel namespace handler


We should upgrade to this version of Blueprint Web :


https://github.com/apache/aries/blob/trunk/blueprint/blueprint-web/src/main/java/org/apache/aries/blueprint/web/BlueprintContextListener.java#L55-L56


which allow to specify :


blueprintNamespaceHandlers OR META-INF/blueprint.handlers


and adapt the example to pass the blueprintNamespaceHandlers","cmoulliard:1443580137:2015-09-30T10:28:57.338+0000:1443580137:2015-09-30T10:28:57.338+0000:If we upgrade to Aries Blueprint Web 1.1.1 and add also as reference blueprint parser 1.3.1, then we will have again the same error as this part of the code of Aries Blueprint Web is not able to find the @Namespaces annotation 

{code}
NamespaceHandler nsHandler = (NamespaceHandler)instance;
            Namespaces namespaces = nsHandler.getClass().getAnnotation(Namespaces.class);
            if (namespaces != null) { // WE WILL GET NULL HERE
                for (String ns : namespaces.value()) {
                    nsSet.addNamespace(URI.create(ns), nsHandler.getSchemaLocation(ns), nsHandler);   
                }
            }
{code}
davsclaus:1443827070:2015-10-03T07:04:30.416+0000:1443827070:2015-10-03T07:04:30.416+0000:Yeah that example should be removed. The blueprint web is not recommended to use.
davsclaus:1443827085:2015-10-03T07:04:45.973+0000:1443827085:2015-10-03T07:04:45.973+0000:The example has been removed from next release.
ggrzybek:1452761104:2016-01-14T16:45:04.273+0000:1452761104:2016-01-14T16:45:04.273+0000:And I went even further ;)
I've extended one class:
{code:java}
public class BlueprintContextListener extends org.apache.aries.blueprint.web.BlueprintContextListener {

    @Override
    protected NamespaceHandlerSet getNamespaceHandlerSet(ClassLoader tccl) {
        SimpleNamespaceHandlerSet handlerSet = new SimpleNamespaceHandlerSet();
        handlerSet.addNamespace(URI.create(""http://camel.apache.org/schema/blueprint""),
                tccl.getResource(""camel-blueprint.xsd""),
                new CamelNamespaceHandler());
        return handlerSet;
    }
}
{code}
and used:
{code:xml}
    <listener>
        <listener-class>org.apache.camel.example.servlet.tomcat.blueprintweb.BlueprintContextListener</listener-class>
    </listener>

    <context-param>
        <param-name>blueprintNamespaceHandlers</param-name>
        <param-value>org.apache.camel.blueprint.handler.CamelNamespaceHandler</param-value>
    </context-param>
{code}

it started working until:
{noformat}
java.lang.IllegalArgumentException: OSGi references are not supported
	at org.apache.aries.blueprint.container.NoOsgiRecipeBuilder.createRecipe(NoOsgiRecipeBuilder.java:72)
	at org.apache.aries.blueprint.container.NoOsgiRecipeBuilder.createRepository(NoOsgiRecipeBuilder.java:51)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.init(BlueprintContainerImpl.java:150)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.init(BlueprintContainerImpl.java:131)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.<init>(BlueprintContainerImpl.java:101)
	at org.apache.aries.blueprint.web.BlueprintContextListener.contextInitialized(BlueprintContextListener.java:88)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4729)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5167)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:725)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:701)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:717)
	at org.apache.catalina.startup.HostConfig.manageApp(HostConfig.java:1648)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:300)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819)
	at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801)
	at org.apache.catalina.mbeans.MBeanFactory.createStandardContext(MBeanFactory.java:463)
	at org.apache.catalina.mbeans.MBeanFactory.createStandardContext(MBeanFactory.java:413)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:300)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819)
	at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801)
	at javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1487)
	at javax.management.remote.rmi.RMIConnectionImpl.access$300(RMIConnectionImpl.java:97)
	at javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1328)
	at javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1420)
	at javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImpl.java:848)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:322)
	at sun.rmi.transport.Transport$2.run(Transport.java:202)
	at sun.rmi.transport.Transport$2.run(Transport.java:199)
	at java.security.AccessController.doPrivileged(Native Method)
	at sun.rmi.transport.Transport.serviceCall(Transport.java:198)
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:567)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:828)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.access$400(TCPTransport.java:619)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler$1.run(TCPTransport.java:684)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler$1.run(TCPTransport.java:681)
	at java.security.AccessController.doPrivileged(Native Method)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:681)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:745)
{noformat}
because there was automatic bean recipe registered: {{ReferenceMetadata[id='.camelBlueprint.componentResolver.properties', activation=1, dependsOn=null, availability=1, interface='null', componentName='null', filter='(component=properties)', referenceListeners=null, timeout=0, additonalInterfaces=[]]}} [here|https://github.com/apache/camel/blob/camel-2.15.3/components/camel-blueprint/src/main/java/org/apache/camel/blueprint/handler/CamelNamespaceHandler.java#L715].

ergo: Camel's blueprint DSL can't be used outside of OSGi."
0,CAMEL-9182,Bug,Major,2.15.0,None,"
None
",Resolved,Later,None,Claus Ibsen,yogananth mahalingam,0,3,2015-09-29 03:25:55+00:00,2016-11-26 08:51:15+00:00,"Kafka Endpoint's Executor threadpool is expected to be created based on consumer count.
This would have enabled multiple consumers to be running concurrently.


Instead it is initialized based on ConsumerStreams.


With a configuration of consumer count = 10, consumer stream = 1, the messages are getting consumed sequentially.","githubbot:1443469506:2015-09-29T03:45:06.061+0000:1443469506:2015-09-29T03:45:06.061+0000:GitHub user yogamaha opened a pull request:

    https://github.com/apache/camel/pull/627

    CAMEL-9182 : Kafka Endpoint - threadpool created based on ConsumerCount

    camel-kafka : Kafka Endpoint executor threadpool is not initialized based on consumercount
    
    https://issues.apache.org/jira/browse/CAMEL-9182


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/yogamaha/camel camel-2.15.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/627.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #627
    
----
commit c47ecb20431c33d1d4687584b6a8ff3b881e3d8d
Author: ymahali <ymahalingam@walmartlabs.com>
Date:   2015-09-29T03:33:50Z

    CAMEL-9182 : Kafka Endpoint - Executor threadpool created based on ConsumerCount

----

ymahali:1443469570:2015-09-29T03:46:10.674+0000:1443469570:2015-09-29T03:46:10.674+0000:Hi,
Created a pull request with fix for this JIRA : https://github.com/apache/camel/pull/627
Can you please have a look at this.
davsclaus:1443476291:2015-09-29T05:38:11.825+0000:1443476291:2015-09-29T05:38:11.825+0000:You should configure consumerStreams=10 to have Camel process the messages in parallel. 

There are two options. One is for number of live connections to kafka broker, the other is in Camel the number of threads to process the incoming messages.


githubbot:1480120818:2016-11-26T08:40:18.160+0000:1480120818:2016-11-26T08:40:18.160+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/627

davsclaus:1480121475:2016-11-26T08:51:15.591+0000:1480121475:2016-11-26T08:51:15.591+0000:The kafka component has changed as part of the scala -> java change."
0,CAMEL-9181,Improvement,Minor,None,"2.16.0, 2.15.4","
None
",Resolved,Fixed,"2.16.0, 2.15.4",Claus Ibsen,Jyrki Ruuskanen,0,3,2015-09-28 14:32:41+00:00,2015-09-28 15:09:04+00:00,"Previous ScrHelper could break when there are certain XML libraries in the classpath (e.g. XOM or Saxon). Also, it doesn't work with component description files generated by the latest org.apache.felix/maven-scr-plugin version 1.21.0 (format has changed).


This is a simpler, less picky implementation using StAX.","githubbot:1443422122:2015-09-28T14:35:22.952+0000:1443422122:2015-09-28T14:35:22.952+0000:GitHub user yuruki opened a pull request:

    https://github.com/apache/camel/pull/625

    CAMEL-9181: Simplify ScrHelper

    CAMEL-9181 for 2.15.x branch.
    
    https://issues.apache.org/jira/browse/CAMEL-9181

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/yuruki/camel camel-scr-helper

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/625.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #625
    
----
commit 1f499f626291e47ab64c8fc5ab4c02e5784b8bfe
Author: Jyrki Ruuskanen <yuruki@kotikone.fi>
Date:   2015-09-28T14:23:47Z

    Simplify ScrHelper

----

githubbot:1443423521:2015-09-28T14:58:41.555+0000:1443423521:2015-09-28T14:58:41.555+0000:GitHub user yuruki opened a pull request:

    https://github.com/apache/camel/pull/626

    CAMEL-9181: Simplify ScrHelper

    CAMEL-9181 for master branch.
    
    https://issues.apache.org/jira/browse/CAMEL-9181

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/yuruki/camel camel-scr-helper-master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/626.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #626
    
----
commit 1b554669752f8d3cfec979db22eb4f8ef1eb2698
Author: Jyrki Ruuskanen <yuruki@kotikone.fi>
Date:   2015-09-28T14:56:12Z

    Simplify ScrHelper

----

githubbot:1443423966:2015-09-28T15:06:06.508+0000:1443423966:2015-09-28T15:06:06.508+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/626

githubbot:1443424018:2015-09-28T15:06:58.127+0000:1443424018:2015-09-28T15:06:58.127+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/625

davsclaus:1443424144:2015-09-28T15:09:04.284+0000:1443424144:2015-09-28T15:09:04.284+0000:Thanks for the PR"
0,CAMEL-9180,New Feature,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Luca Burgazzoli,Bart Veenstra,1,4,2015-09-28 13:05:44+00:00,2016-02-26 09:44:48+00:00,"When initializing the end point, the consumer already initialized the CMIS session on startup. This is undesired for when the CMIS server is located on the same server as the camel-context and might not have yet started preventing the startup of the camel-context.
The desired behaviour should be initializing the cmis session facade when it is first used (after complete server startup)","davsclaus:1443476713:2015-09-29T05:45:13.748+0000:1443476713:2015-09-29T05:45:13.748+0000:Contributions is welcome
githubbot:1456393586:2016-02-25T17:46:26.081+0000:1456393586:2016-02-25T17:46:26.081+0000:GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/869

    CAMEL-9180 - camel-cmis Lazy Initialize Session Facade

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel CAMEL-9180

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/869.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #869
    
----
commit c388218f6dbb9a76e87f31ec9a7bd56269b774c4
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-02-25T17:44:58Z

    CAMEL-9180 - camel-cmis Lazy Initialize Session Facade

----

lb:1456393698:2016-02-25T17:48:18.058+0000:1456393698:2016-02-25T17:48:18.058+0000:[~bart.veenstra] I've submitted a [PR|https://github.com/apache/camel/pull/869] in which I've delayed the session facade initialization to the first time it is needed. The side effect is that if any of the argument is wrong you won't get an ResolveEndpointFailedException but as example a CmisInvalidArgumentException
githubbot:1456450965:2016-02-26T09:42:45.746+0000:1456450965:2016-02-26T09:42:45.746+0000:Github user lburgazzoli closed the pull request at:

    https://github.com/apache/camel/pull/869
"
0,CAMEL-9179,Improvement,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,1,2015-09-28 08:53:25+00:00,2015-09-28 09:05:52+00:00,No Desc,"davsclaus:1443402315:2015-09-28T09:05:15.906+0000:1443402315:2015-09-28T09:05:15.906+0000:And the Camel commands now use that information also
{code}
karaf@root> route-list
 Context        Route          Status              Total #       Failed #     Inflight #   Uptime
 -------        -----          ------              -------       --------     ----------   ------
 foo            foo            Started                   2              0              0   8.819 seconds
karaf@root> route-stop foo
karaf@root> route-list
 Context        Route          Status              Total #       Failed #     Inflight #   Uptime
 -------        -----          ------              -------       --------     ----------   ------
 foo            foo            Stopped                   3              0              0
karaf@root> route-start foo
karaf@root> route-list
 Context        Route          Status              Total #       Failed #     Inflight #   Uptime
 -------        -----          ------              -------       --------     ----------   ------
 foo            foo            Started                   4              0              0   1.106 seconds
{code}"
0,CAMEL-9178,Improvement,Minor,"2.12.0, 2.14.0","2.15.4, 2.16.1, 2.17.0","
None
",Resolved,Fixed,"2.15.4, 2.16.1, 2.17.0",Claus Ibsen,MADHUMITA,0,2,2015-09-28 07:39:41+00:00,2015-10-15 10:09:52+00:00,"I used camel dozer and configured with a mapping.xml for dozer mapping.
Camel fails to do Dozer mapping for the elements mapped with map-id but does not throw any error.


In camel context file define DozerTypeConverterLoader and DozerBeanMapper as follows:


    <bean id=""dozerConverterLoader""
		class=""org.apache.camel.converter.dozer.DozerTypeConverterLoader"" />
	<!-- use bean mapping configuration -->
	<bean id=""mapper"" class=""org.dozer.DozerBeanMapper"">
		<property name=""mappingFiles"">
			<list>
				<value>dozer/mapping.xml</value>
			</list>
		</property>
	</bean>


	where mapping.xml is the file where the dozer mappings should be defined.


	Example:
	In camel-context camel will look for the mapping for conversion to PortInNotification as defined in the dozer/mapping.xml
	<setBody id=""setBodyNPOCIn"">
	<simple resultType=""x.y.NPOCType"">${body.getNPOOrNPOCOrNPOR.get(0)}</simple>
	</setBody>


	<convertBodyTo 	type=""a.b.v1.PortInNotification"" id=""convertToNPOCPortIn"" />


	In mapping.xml:


	<mapping map-id=""mapNPOCtoPortIn"">
		<class-a>a.b.v1.PortInNotification</class-a>
		<class-b>x.y.NPOCType</class-b>


		<field>
			<a>requestID.id</a>
			<b>requestId</b>
		</field>
		<field>
		    <a>referenceID.id</a>
			<b>referenceId</b>


		</field> 


	</mapping>


Camel-dozer is not able to trace this mapping,however it does not throw any error and simply returns an object of type PortInNotification with null attributes.
On removal of map-id attribute it is able to correctly lookup the mapping of PortInNotification from the mapping.xml","davsclaus:1443476945:2015-09-29T05:49:05.975+0000:1443476945:2015-09-29T05:49:05.975+0000:Can you provide more details such as some sample code or something.

I do not think its a Camel problem per see, as if dozer does not fail reporting this to Camel then there is likely nothing we can do.

madhumita12:1444526461:2015-10-11T09:21:01.047+0000:1444526461:2015-10-11T09:21:01.047+0000:Added in description hope it helps
davsclaus:1444602490:2015-10-12T06:28:10.495+0000:1444602490:2015-10-12T06:28:10.495+0000:Can you test and try with latest release, eg 2.16.0.
davsclaus:1444687344:2015-10-13T06:02:24.942+0000:1444687344:2015-10-13T06:02:24.942+0000:Thanks the type converted needed to lookup the map-id and provide as parameter to dozer. As dozer was not able to do this by itself."
0,CAMEL-9177,Bug,Minor,"2.15.2, 2.15.3","2.16.0, 2.15.4","
None
",Resolved,Fixed,"2.16.0, 2.15.4",Claus Ibsen,Pascal S.,0,2,2015-09-28 06:40:32+00:00,2015-09-29 06:16:49+00:00,"Hi,
I have found a problem regarding a wiretap and the camel-jpa component. I have a route with an async split through a wiretap. In each route, I use a jpa producer to persist an entity. The problem is, that the entitymanager was closed before the async routes can reach the end. The cause is, that the same entitymanager is used in the async routes. The main route reaches the end and closes the entitymanager.


E.g. like the following route:



<route id=""mainRoute>
    <from uri=""direct:restendpoint""/>
    ...
    <to uri=""jpa:MyEntity""/>
    ...
    <loop copy=""true"">
        ...
        <wireTap uri=""direct:asyncroute""/>
    </loop>
</route>

<route id=""asyncRoute"">
    <from uri=""direct:asyncroute""/>
    ...
    <to uri=""jpa:MyEntity""/>
    ...
</route>




I think a possible fix can be to check that the entitymanager is null or closed. If null or closed, create a new entitymanager.



public final class JpaHelper {
    ...
    public static EntityManager getTargetEntityManager(Exchange exchange, ...
        ...
        if (em == null || !em.isOpen()) {
            // create a new entity manager
            em = entityManagerFactory.createEntityManager();
        ...
        }
    }
    ...
}




Another solution can be in the wiretap. There where the exchange is copied, the ""CamelEntityManager"" property could be removed.


Currently, my quickfix is: At the beginning of the async route I remove the entitymanager from the exchange.",davsclaus:1443478609:2015-09-29T06:16:49.516+0000:1443478609:2015-09-29T06:16:49.516+0000:Thanks for reporting and the suggestion.
0,CAMEL-9176,Improvement,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,1,2015-09-27 14:19:35+00:00,2016-05-29 06:43:39+00:00,"Look into why its currently not singleton
https://github.com/apache/camel/blob/master/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsEndpoint.java#L205


Endpoints should ideally be singletons to allow reuse, and enlisting in JMX. The overhead of re-creating the endpoints can be high, and only in more rare cases should endpoints be non singleton.",davsclaus:1464475419:2016-05-29T06:43:39.455+0000:1464475419:2016-05-29T06:43:39.455+0000:Its singleton now
0,CAMEL-9175,Improvement,Minor,None,"2.16.1, 2.17.0","
None
",Resolved,Fixed,"2.16.1, 2.17.0",Andrea Cosentino,Claus Ibsen,0,1,2015-09-27 14:17:27+00:00,2015-10-08 15:32:36+00:00,"The random function takes one or two numbers as min/max range. But if you specify a space such as random(1, 10) then you get a NFE exception. We should add a trim() in the code so it trims spaces.",
0,CAMEL-9174,Improvement,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,1,2015-09-27 07:09:09+00:00,2015-09-27 07:22:34+00:00,So you can easier setup JMX and what else you may want. Today its a bit to cumbersome with the main.,
0,CAMEL-9173,Improvement,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,1,2015-09-26 06:19:43+00:00,2015-09-28 08:39:46+00:00,This archetype creates a few complicated routes. It should be simple example like we have for the other archetypes. For example as blueprint does.,
0,CAMEL-9172,New Feature,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Pontus Ullgren,0,4,2015-09-25 21:51:11+00:00,2015-11-08 10:30:48+00:00,"Create new transformation component for JOLT  (https://github.com/bazaarvoice/jolt)


http://camel.465427.n5.nabble.com/Camel-Template-solution-for-JSON2JSON-tc5758858.html","githubbot:1443189746:2015-09-25T22:02:26.836+0000:1443189746:2015-09-25T22:02:26.836+0000:GitHub user ullgren opened a pull request:

    https://github.com/apache/camel/pull/622

    CAMEL-9172 - Created camel-jolt component

    Created a initial version of a camel-jolt component. JOLT is a JSON to JSON transformation library written in Java where the ""specification"" for the transform is itself a JSON document. JOLT is licensed under Apache License Version 2.0.
    
    For more information see https://github.com/bazaarvoice/jolt

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ullgren/camel CAMEL-9172

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/622.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #622
    
----
commit fd77d9e7d34db4dd920912b13271fe22c2708064
Author: Pontus Ullgren <ullgren@gmail.com>
Date:   2015-09-25T21:57:44Z

    CAMEL-9172 - Created camel-jolt component

----

pontus.ullgren:1443189797:2015-09-25T22:03:17.496+0000:1443189797:2015-09-25T22:03:17.496+0000:Created pull request with the component on github https://github.com/apache/camel/pull/622

If accepted I can also contribute the wiki documentation for the component.
davsclaus:1443221207:2015-09-26T06:46:47.143+0000:1443221207:2015-09-26T06:46:47.143+0000:Thanks for the component, great work.

You are welcome to add the documentation, we will get this into the 2.16 release.
davsclaus:1443221684:2015-09-26T06:54:44.867+0000:1443221684:2015-09-26T06:54:44.867+0000:For OSGi we need bundles
https://issues.apache.org/jira/browse/SMX4-1976
davsclaus:1443221857:2015-09-26T06:57:37.192+0000:1443221857:2015-09-26T06:57:37.192+0000:I also asked the jolt team to do bundles
https://github.com/bazaarvoice/jolt/issues/149
githubbot:1443227710:2015-09-26T08:35:10.402+0000:1443227710:2015-09-26T08:35:10.402+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/622

pontus.ullgren:1443270116:2015-09-26T20:21:56.439+0000:1443270116:2015-09-26T20:21:56.439+0000:Added documentation http://camel.apache.org/jolt.html
acosentino:1446949848:2015-11-08T10:30:48.774+0000:1446949848:2015-11-08T10:30:48.774+0000:Camel-Jolt is now available as feature on master branch and 2.16.x branch."
0,CAMEL-9171,Bug,Minor,2.15.3,"2.15.4, 2.16.1, 2.17.0","
None
",Resolved,Fixed,"2.15.4, 2.16.1, 2.17.0",Christian Schneider,Achim Finke,0,3,2015-09-25 15:35:33+00:00,2015-10-08 13:06:52+00:00,"Camel XMPP communication is not working in version 2.15.3 when running in Karaf. The feature installation works fine but no messages are processed.


I guess this is potentially based on changing the Smack version from 3 to 4. 


Based on the existing Camel Karaf tests I created a simple test which passes with Camel Version 2.14.3 and fails with Camel Version 2.15.3. The test can be found here https://github.com/achim86/karaf-xmpp (remember to start the XMPPServer before running the test as described in the readme).","davsclaus:1443167232:2015-09-25T15:47:12.134+0000:1443167232:2015-09-25T15:47:12.134+0000:Can you try outside Karaf, from just a plain unit test or standalone Java.
afinke:1443168565:2015-09-25T16:09:25.098+0000:1443168565:2015-09-25T16:09:25.098+0000:Outside Karaf it works with version 2.15.3 tested it already.
davsclaus:1443168665:2015-09-25T16:11:05.532+0000:1443168665:2015-09-25T16:11:05.532+0000:Ah thanks yeah then it smells of OSGi bundle issue. Do you not see anyting in the logs or whatever? Are all the osgi bundles in started state?

And what Karaf version do you use?
afinke:1443168719:2015-09-25T16:11:59.875+0000:1443168817:2015-09-25T16:13:37.007+0000:I tryed it out with Karaf 2 and 4 both are not working. I cant see any error in the logs. Routes and Bundles are starting well.
cschneider:1444280741:2015-10-08T13:05:41.906+0000:1444280741:2015-10-08T13:05:41.906+0000:The problem seems to be that inside karaf the PacketExtensions are of type DefaultPacketExtension instead of JivePropertiesExtension. No idea why but I prepared a fix that an handle both."
0,CAMEL-9170,Improvement,Minor,None,Future,"

PatchAvailable

",Resolved,Abandoned,Future,Unassigned,Sergey Beryozkin,0,2,2015-09-25 15:25:21+00:00,2022-09-02 09:04:38+00:00,"SimpleCxfRsBinding should:



ensure the Camel In Message body is null when the body index is -1 and it is not multipart - the default binding which SimpleCxfRsBinding extends still sets the body to a CXF specific response even if no body is available - which causes side-effects when a RestDsl binding is enabled.
should work if a CXF RS model is used as opposed to the interface","davsclaus:1443168125:2015-09-25T16:02:05.858+0000:1443168125:2015-09-25T16:02:05.858+0000:Oh I wonder if some special CXF version is required. The patch gives me

{code}
[INFO] -------------------------------------------------------------
[ERROR] COMPILATION ERROR :
[INFO] -------------------------------------------------------------
[ERROR] /Users/davsclaus/workspace/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/SimpleCxfRsBinding.java:[367,44] error: cannot find symbol
[ERROR]   symbol:   method getModelResources()
  location: variable endpoint of type CxfRsEndpoint
/Users/davsclaus/workspace/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/SimpleCxfRsBinding.java:[368,60] error: cannot find symbol
[INFO] 2 errors
[INFO] -------------------------------------------------------------
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 21.560 s
[INFO] Finished at: 2015-09-25T18:03:16+02:00
[INFO] Final Memory: 41M/743M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.3:compile (default-compile) on project camel-cxf: Compilation failure: Compilation failure:
[ERROR] /Users/davsclaus/workspace/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/SimpleCxfRsBinding.java:[367,44] error: cannot find symbol
[ERROR] symbol:   method getModelResources()
[ERROR] location: variable endpoint of type CxfRsEndpoint
[ERROR] /Users/davsclaus/workspace/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/SimpleCxfRsBinding.java:[368,60] error: cannot find symbol
{code}
davsclaus:1443168229:2015-09-25T16:03:49.699+0000:1443168229:2015-09-25T16:03:49.699+0000:Ah maybe a code change is missing in the patch. Seems like a new method on the endpoint.

But would be nice to get this in 2.16.
sergey_beryozkin:1443168342:2015-09-25T16:05:42.841+0000:1443168342:2015-09-25T16:05:42.841+0000:Sorry, indeed, it depends on the other code, will prepare a patch soon, thanks"
0,CAMEL-9169,Improvement,Minor,None,2.17.0,"
None
",Resolved,Later,2.17.0,Unassigned,Sergey Beryozkin,0,2,2015-09-25 15:06:49+00:00,2016-02-21 08:11:05+00:00,Will help REST DSL jobs refer to individual multipart parts,davsclaus:1454331509:2016-02-01T20:58:29.301+0000:1454331509:2016-02-01T20:58:29.301+0000:Can you provide an example? The rest param type is for documenting the parameter?
0,CAMEL-9168,Bug,Major,2.15.3,,"
None
",Closed,Not A Problem,None,Unassigned,Alexey Markevich,0,4,2015-09-25 14:14:40+00:00,2015-09-29 11:37:50+00:00,"17:11:03,780 | WARN  | tenderThread-145 | .apache.cxf.resource.URIResolver  375 | 82 - org.apache.cxf.cxf-core - 3.1.2 | Resource classpath:DemoWsdl_0.1 was not found in the classloaders.","amarkevich:1443161804:2015-09-25T14:16:44.123+0000:1443161804:2015-09-25T14:16:44.123+0000:Attached bundle contains RoutesBuilder like
{noformat}
    <route id=""inside"">
        <from uri=""timer:cTimer_1?period=1&amp;repeatCount=1&amp;delay=1""/>
        <to uri=""cxf://http://localhost:8090/services/RouteResourceDemo?dataFormat=PAYLOAD&amp;wsdlURL=classpath:DemoWsdl_0.1&amp;serviceNameString={http://www.talend.org/service/}RouteResourceDemo&amp;endpointNameString={http://www.talend.org/service/}RouteResourceDemoPort&amp;defaultOperationNamespace=http://www.talend.org/service/&amp;defaultOperationName=RouteResourceDemoOperation""/>
    </route>
{noformat}

amarkevich:1443165127:2015-09-25T15:12:07.720+0000:1443165127:2015-09-25T15:12:07.720+0000:CXF 3.1.2
URIResolver failed even with local bean reference:
{noformat}
<camel:routeBuilder ref=""route"" />
{noformat}
In case route definition instide spring camel context the resource resolved at
org.apache.cxf.common.classloader.ClassLoaderUtils.getResource(String, Class<?>) L92
davsclaus:1443167153:2015-09-25T15:45:53.336+0000:1443167153:2015-09-25T15:45:53.336+0000:Is this not an Apache CXF issue, and thus better reporting in CXF issue tracker.

And did the same example work with an older CXF version?

amarkevich:1443400481:2015-09-28T08:34:41.800+0000:1443400481:2015-09-28T08:34:41.800+0000:Here is modified example which illustrates the problem
amarkevich:1443400642:2015-09-28T08:37:22.444+0000:1443400642:2015-09-28T08:37:22.444+0000:Samlpe work only in case
DynamicImport-Package =
        *
(<camel.osgi.dynamic>*</camel.osgi.dynamic> project setting)
dkulp:1443424680:2015-09-28T15:18:00.555+0000:1443424680:2015-09-28T15:18:00.555+0000:This is not really something I'd classify as a bug.   The ""classpath:"" URL in CXF really depends on there being a definition for what the classpath is.   In OSGi, there isn't a clear concept for that.  In addition, the fallback to relying on a Thread contextClassloader is also highly discouraged and unreliable.   Thus, the ""classpath:"" url really cannot be relied on within the context of OSGi.    The ""Dynamic-Import: *"" thing works as that pretty much creates a pseudo classloader that loads everything available.   You MAY be able to limit the scope a little bit by using a Require-Bundle: cxf-core, but I'm not 100% positive on that.

Ideally, the sample code should be updated to construct a proper ""deploy model independent"" URL for the WSDL that is passed in.   A simple way to do that would be something as simple as  ""getClass().getResource(""Foo.wsdl"").toString()"" or similar to grab the resource as a proper URL.   In OSGi, that would likely result in some sort of ""bundle:///"" URL.   Outside OSGi, likely a ""file:/blah.jar!/..."" kind of URL.    (In OSGi, you may need to make sure the WSDL is in a package that is exported from the bundle, not the root package, not really sure)

That said, digging through the stack trace, there MAY be a way to get this to work with some changes to both CXF's Spring handling and camel-cxf's handling.   Not 100% sure though.

One more note:  if deploying in OSGi:  I'd strongly strongly strongly recommend using Blueprint and not spring-dm.   
amarkevich:1443497870:2015-09-29T11:37:50.719+0000:1443497870:2015-09-29T11:37:50.719+0000:getClass().getResource(""Foo.wsdl"").toString()"
0,CAMEL-9167,Bug,Minor,"2.16.0, 2.15.4","2.16.0, 2.15.4","
None
",Resolved,Implemented,"2.16.0, 2.15.4",Claus Ibsen,Thomas Diesler,0,3,2015-09-25 10:23:29+00:00,2015-10-06 13:59:43+00:00,"12:22:01,305 INFO  [org.dozer.DozerBeanMapper] (pool-3-thread-3) Using the following xml files to load custom mappings for the bean mapper instance: [dozer-mappings.xml]
12:22:01,306 INFO  [org.dozer.DozerBeanMapper] (pool-3-thread-3) Trying to find xml mapping file: dozer-mappings.xml
12:22:01,307 INFO  [org.dozer.DozerBeanMapper] (pool-3-thread-3) Using URL [vfs:/content/csv-dataformat-tests/dozer-mappings.xml] to load custom xml mappings
12:22:01,308 ERROR [org.dozer.loader.xml.DozerResolver] (pool-3-thread-3) Could not resolve beanmapping XML Schema [http://dozer.sourceforge.net/schema/beanmapping.xsd]: not found in classpath: java.lang.NullPointerException
	at org.dozer.loader.xml.DozerResolver.resolveEntity(DozerResolver.java:50)
	at org.apache.xerces.util.EntityResolverWrapper.resolveEntity(EntityResolverWrapper.java:107)
	at org.apache.xerces.impl.XMLEntityManager.resolveEntity(XMLEntityManager.java:695)
	at org.apache.xerces.impl.xs.XMLSchemaLoader.resolveDocument(XMLSchemaLoader.java:624)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.findSchemaGrammar(XMLSchemaValidator.java:2699)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.handleStartElement(XMLSchemaValidator.java:2079)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.startElement(XMLSchemaValidator.java:788)
	at org.apache.xerces.impl.XMLNSDocumentScannerImpl.scanStartElement(XMLNSDocumentScannerImpl.java:283)
	at org.apache.xerces.impl.XMLNSDocumentScannerImpl$NSContentDispatcher.scanRootElementHook(XMLNSDocumentScannerImpl.java:733)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher.dispatch(XMLDocumentFragmentScannerImpl.java:1754)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:324)
	at org.apache.xerces.parsers.XML11Configuration.parse(XML11Configuration.java:875)
	at org.apache.xerces.parsers.XML11Configuration.parse(XML11Configuration.java:798)
	at org.apache.xerces.parsers.XMLParser.parse(XMLParser.java:108)
	at org.apache.xerces.parsers.DOMParser.parse(DOMParser.java:230)
	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(DocumentBuilderImpl.java:298)
	at javax.xml.parsers.DocumentBuilder.parse(DocumentBuilder.java:121)
	at org.dozer.loader.xml.MappingStreamReader.read(MappingStreamReader.java:50)
	at org.dozer.loader.xml.MappingFileReader.read(MappingFileReader.java:58)
	at org.dozer.DozerBeanMapper.loadFromFiles(DozerBeanMapper.java:227)
	at org.dozer.DozerBeanMapper.loadCustomMappings(DozerBeanMapper.java:209)
	at org.dozer.DozerBeanMapper.initMappings(DozerBeanMapper.java:315)
	at org.dozer.DozerBeanMapper.getMappingProcessor(DozerBeanMapper.java:192)
	at org.dozer.DozerBeanMapper.map(DozerBeanMapper.java:120)
	at org.apache.camel.converter.dozer.DozerTypeConverter.convertTo(DozerTypeConverter.java:69)




CrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/844","davsclaus:1443162605:2015-09-25T14:30:05.663+0000:1443162605:2015-09-25T14:30:05.663+0000:This looks like some classpath loading issues on wildfly. The NPE is in Dozer
jamesnetherton:1444107960:2015-10-06T13:06:00.154+0000:1444107960:2015-10-06T13:06:00.154+0000:I fixed this downstream in wildfly-camel so this issue is probably a candidate for closure now.
davsclaus:1444111183:2015-10-06T13:59:43.354+0000:1444111183:2015-10-06T13:59:43.354+0000:Thanks for letting us know."
0,CAMEL-9166,Bug,Major,"2.15.3, 2.16.0",2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Jyrki Ruuskanen,0,3,2015-09-25 10:23:20+00:00,2015-09-27 14:38:57+00:00,"Changes in Camel-8857 cause properties prefixing to not work for Camel context ID. See notes in https://github.com/apache/camel/commit/aa59cec696c46d4f9398ae91410998bd40fabbaa.


Also, backward compatibility to 2.12.0 is removed. See note in https://github.com/apache/camel/commit/c1b33e990ae5da7ca1e0268e79acc728393fd3ae.


Camel-8857 also had ABI changes that break existing bundles (requires rebuilding them all).","githubbot:1443148315:2015-09-25T10:31:55.987+0000:1443148315:2015-09-25T10:31:55.987+0000:GitHub user yuruki opened a pull request:

    https://github.com/apache/camel/pull/620

    CAMEL-9166: Some functionality broken in Camel-8857

    https://issues.apache.org/jira/browse/CAMEL-9166

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/yuruki/camel camel-scr-test

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/620.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #620
    
----
commit fcb02553ebbdb9cc5803ed7642c1f8c8d0528f8c
Author: Jyrki Ruuskanen <yuruki@kotikone.fi>
Date:   2015-09-25T10:27:05Z

    Camel-9166

----

githubbot:1443163887:2015-09-25T14:51:27.620+0000:1443163887:2015-09-25T14:51:27.620+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/620

davsclaus:1443163928:2015-09-25T14:52:08.311+0000:1443163928:2015-09-25T14:52:08.311+0000:The osgi range must be like the others.

And there is more love to this to make it better at starting/stopping as the shceduler that just tries every 5th seconds is not a good way.
yuruki:1443166289:2015-09-25T15:31:29.072+0000:1443166289:2015-09-25T15:31:29.072+0000:Thanks man for taking a look at this. The reason I'm interested in backward compatibility and avoiding ABI changes is the fact that we are using camel-scr in production with Fuse 6.x. The ability to use the same bundles (using camel-scr) across Fuse and Camel versions (Fuse 6.1 -> 6.2 -> 6.2.1 -> 6.?) makes things simpler. I don't know how far the Camel versions will be pushed in Fuse 6.x but I would hate to see breaking changes in Fuse 6.2.1 (Camel 2.15.3?).

In other words, in my opinion camel-scr ABI should not change within Camel 2.15 (as now happened with 2.15.3). In 2.16 it's fine, there are changes that could make the component better.

The current starting logic is a compromise between simple/silly and complex/correct. It doesn't actually try to start the Camel context every 5th second but 5 seconds after the last CamelComponent has been registered which typically only happens once. The correct way requires us to extract a complete list of required components from the routes in the context and wait for the list to be satisfied before starting. It's not clear to me how I can get that list.
davsclaus:1443167978:2015-09-25T15:59:38.734+0000:1443167978:2015-09-25T15:59:38.734+0000:For commercial products like JBoss Fuse you have to talk to the vendor. This is the ASF community where we have no vendor goal/affiliation.

All the components in the same release are what we support. If you want to use camel-scr with Camel 2.15.x then use a 2.15.x release of camel-scr, and so on.
yuruki:1443174329:2015-09-25T17:45:29.853+0000:1443174329:2015-09-25T17:45:29.853+0000:Okay, ignore the first paragraph.

OSGi wiring by convention considers minor releases until the next point release as compatible. Should we not strive to maintain binary compatibility within point releases if possible?
githubbot:1443234023:2015-09-26T10:20:23.198+0000:1443234023:2015-09-26T10:20:23.198+0000:GitHub user yuruki opened a pull request:

    https://github.com/apache/camel/pull/623

    CAMEL-9166 for 2.15.x

    Here's the same CAMEL-9166 prefixing and backward compatibility fix for 2.15.x branch.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/yuruki/camel camel-scr-compat

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/623.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #623
    
----
commit bf6d1b7c495a46788529e797873fbe25a950082d
Author: Jyrki Ruuskanen <yuruki@kotikone.fi>
Date:   2015-09-26T10:14:21Z

    CAMEL-9166 for 2.15.x

----

githubbot:1443335937:2015-09-27T14:38:57.923+0000:1443335937:2015-09-27T14:38:57.923+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/623
"
0,CAMEL-9165,Bug,Minor,2.15.4,2.15.4,"
None
",Resolved,Won't Fix,2.15.4,Claus Ibsen,Thomas Diesler,0,2,2015-09-25 10:15:46+00:00,2015-09-29 05:52:58+00:00,"This works on in 2.15.2 and the latest 2.16.x


https://github.com/wildfly-extras/wildfly-camel/blob/master/itests/standalone/basic/src/main/java/org/wildfly/camel/test/swagger/SwaggerIntegrationTest.java



java.lang.AssertionError: expected:<200> but was:<204>
	at org.junit.Assert.fail(Assert.java:88)
	at org.junit.Assert.failNotEquals(Assert.java:743)
	at org.junit.Assert.assertEquals(Assert.java:118)
	at org.junit.Assert.assertEquals(Assert.java:555)
	at org.junit.Assert.assertEquals(Assert.java:542)
	at org.wildfly.camel.test.swagger.SwaggerIntegrationTest.testRestDsl(SwaggerIntegrationTest.java:77)




CrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/884","davsclaus:1443147792:2015-09-25T10:23:12.426+0000:1443147792:2015-09-25T10:23:12.426+0000:What version does work and not work, its a bit confusing what you tell.

And are you using the camel-swagger scala based module? Then api-docs is setup using a servlet and you have to ensure you do that correctly.

From Camel 2.16 onwards use the new camel-swagger-java module, the scala based is deprecated. 
tdiesler:1443148021:2015-09-25T10:27:01.917+0000:1443148038:2015-09-25T10:27:18.357+0000:Migrating from 2.15.2 (which we use now) to 2.15.4 would break this functionality.
Migrating from 2.15.2 to 2.16.0 would work fine.

The issue only shows on the camel 2.15.x branch
davsclaus:1443154651:2015-09-25T12:17:31.169+0000:1443154651:2015-09-25T12:17:31.169+0000:Can you research on your side what happens, check logs and whatnot.
davsclaus:1443477178:2015-09-29T05:52:58.059+0000:1443477178:2015-09-29T05:52:58.059+0000:the scala module is deprecated - use the java module in 2.16 onwards."
0,CAMEL-9164,Bug,Minor,2.16.0,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Tomohisa Igarashi,0,1,2015-09-25 06:24:36+00:00,2015-09-25 14:28:52+00:00,"Specifying an errorHandlerRef on a route causes following WARN on uninstall



2015-09-25 06:16:45,058 | WARN  | l Console Thread | faultManagementLifecycleStrategy | 58 - org.apache.camel.camel-core - 2.16.0.SNAPSHOT | Could not unregister error handler: org.apache.camel.management.mbean.ManagedErrorHandler@27181de1 as ErrorHandler MBean.
org.apache.camel.NoSuchBeanException: No bean could be found in the registry for: myErrorHandler of type: org.apache.camel.builder.ErrorHandlerBuilder
	at org.apache.camel.util.CamelContextHelper.mandatoryLookup(CamelContextHelper.java:159)
	at org.apache.camel.impl.DefaultRouteContext.mandatoryLookup(DefaultRouteContext.java:151)
	at org.apache.camel.builder.ErrorHandlerBuilderRef.lookupErrorHandlerBuilder(ErrorHandlerBuilderRef.java:137)
	at org.apache.camel.management.DefaultManagementNamingStrategy.getObjectNameForErrorHandler(DefaultManagementNamingStrategy.java:168)
	at org.apache.camel.management.ManagedManagementStrategy.getManagedObjectName(ManagedManagementStrategy.java:108)
	at org.apache.camel.management.ManagedManagementStrategy.unmanageObject(ManagedManagementStrategy.java:147)
	at org.apache.camel.management.DefaultManagementLifecycleStrategy.unmanageObject(DefaultManagementLifecycleStrategy.java:844)
	at org.apache.camel.management.DefaultManagementLifecycleStrategy.onErrorHandlerRemove(DefaultManagementLifecycleStrategy.java:641)
	at org.apache.camel.impl.RouteService.stopChildService(RouteService.java:351)
	at org.apache.camel.impl.RouteService.doStop(RouteService.java:237)
	at org.apache.camel.support.ChildServiceSupport.stop(ChildServiceSupport.java:77)
	at org.apache.camel.support.ChildServiceSupport.stop(ChildServiceSupport.java:101)
	at org.apache.camel.util.ServiceHelper.stopService(ServiceHelper.java:141)
	at org.apache.camel.util.ServiceHelper.stopAndShutdownService(ServiceHelper.java:204)
	at org.apache.camel.impl.DefaultCamelContext.shutdownServices(DefaultCamelContext.java:3017)
	at org.apache.camel.impl.DefaultCamelContext.shutdownServices(DefaultCamelContext.java:3042)
	at org.apache.camel.impl.DefaultCamelContext.shutdownServices(DefaultCamelContext.java:3030)
	at org.apache.camel.impl.DefaultCamelContext.doStop(DefaultCamelContext.java:2865)
	at org.apache.camel.support.ServiceSupport.stop(ServiceSupport.java:102)
	at org.apache.camel.blueprint.BlueprintCamelContext.destroy(BlueprintCamelContext.java:122)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.7.0_79]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)[:1.7.0_79]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)[:1.7.0_79]
	at java.lang.reflect.Method.invoke(Method.java:606)[:1.7.0_79]
	at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:297)
	at org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:958)
	at org.apache.aries.blueprint.container.BeanRecipe.destroy(BeanRecipe.java:863)
	at org.apache.aries.blueprint.container.BlueprintRepository.destroy(BlueprintRepository.java:320)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.destroyComponents(BlueprintContainerImpl.java:723)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.tidyupComponents(BlueprintContainerImpl.java:917)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.destroy(BlueprintContainerImpl.java:867)
	at org.apache.aries.blueprint.container.BlueprintExtender$3.run(BlueprintExtender.java:319)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)[:1.7.0_79]
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)[:1.7.0_79]
	at org.apache.aries.blueprint.container.BlueprintExtender.destroyContainer(BlueprintExtender.java:340)
	at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:236)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:500)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:433)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:725)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:463)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:422)
	at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1127)
	at org.apache.felix.framework.util.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:696)
	at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:484)
	at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4429)
	at org.apache.felix.framework.Felix.stopBundle(Felix.java:2528)
	at org.apache.felix.framework.Felix.uninstallBundle(Felix.java:2640)
	at org.apache.felix.framework.BundleImpl.uninstall(BundleImpl.java:1043)
	at org.apache.karaf.shell.osgi.UninstallBundle.doExecute(UninstallBundle.java:34)
	at org.apache.karaf.shell.osgi.BundlesCommand.doExecute(BundlesCommand.java:37)
	at org.apache.karaf.shell.console.OsgiCommandSupport.execute(OsgiCommandSupport.java:38)
	at org.apache.felix.gogo.commands.basic.AbstractCommand.execute(AbstractCommand.java:35)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.7.0_79]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)[:1.7.0_79]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)[:1.7.0_79]
	at java.lang.reflect.Method.invoke(Method.java:606)[:1.7.0_79]
	at org.apache.aries.proxy.impl.ProxyHandler$1.invoke(ProxyHandler.java:54)[11:org.apache.aries.proxy.impl:1.0.4]
	at org.apache.aries.proxy.impl.ProxyHandler.invoke(ProxyHandler.java:119)[11:org.apache.aries.proxy.impl:1.0.4]
	at org.apache.karaf.shell.console.commands.$BlueprintCommand2105444579.execute(Unknown Source)[17:org.apache.karaf.shell.console:2.4.2]
	at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:78)[17:org.apache.karaf.shell.console:2.4.2]
	at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:477)[17:org.apache.karaf.shell.console:2.4.2]
	at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:403)[17:org.apache.karaf.shell.console:2.4.2]
	at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)[17:org.apache.karaf.shell.console:2.4.2]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)[17:org.apache.karaf.shell.console:2.4.2]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)[17:org.apache.karaf.shell.console:2.4.2]
	at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:92)[17:org.apache.karaf.shell.console:2.4.2]
	at org.apache.karaf.shell.console.jline.Console.run(Console.java:195)[17:org.apache.karaf.shell.console:2.4.2]
	at java.lang.Thread.run(Thread.java:745)[:1.7.0_79]",igarashitm:1443133610:2015-09-25T06:26:50.236+0000:1443133610:2015-09-25T06:26:50.236+0000:Here is a reproducer - [^camel-error-handler-not-found-on-uninstall.tgz]
0,CAMEL-9163,Improvement,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Franz Forsthofer,Franz Forsthofer,0,1,2015-09-24 14:24:01+00:00,2015-09-24 15:31:33+00:00,"The PGP Data format currently creates only PGP Messages with Compressed Data packet or can only decrypt/verify PGP Messages which have a Compressed Data packet. The Open PGP specification  (RFC4880), however, allows also PGP Messages without a Compressed Data packet. Therefore we make the Compressed Data packet optional. We introduce the new configuration option ""withCompressedDataPacket"" for the marshal method which can be set to false indicating that no Compressed Data packet must be created. The unmarshal method will be able decrypting PGP Messages without a Compressed Data packet","forsthofer:1443079814:2015-09-24T15:30:14.772+0000:1443079814:2015-09-24T15:30:14.772+0000:commit ecbbeb74f753ce81995171fb5d25f58930c22d26

wiki updated"
0,CAMEL-9162,New Feature,Minor,None,None,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,1,2015-09-24 13:51:47+00:00,2015-10-05 09:50:26+00:00,"Wonder if this SQL library would be handy for a Camel component
https://github.com/OpenGamma/ElSql",
0,CAMEL-9161,Bug,Major,"2.15.3, 2.16.0","2.16.1, 2.15.5, 2.17.0","
None
",Resolved,Fixed,"2.16.1, 2.15.5, 2.17.0",Henryk Konsek,Nicholas Stuart,1,6,2015-09-24 13:51:22+00:00,2015-11-13 10:09:57+00:00,"On startup Camel is not registering any routes annotated with @Component. Route is found and registered in Spring just fine. Switch to version 2.15.2 and it works fine. 


No errors are thrown, and everything says it's started, but no routes are active or reported as being found during startup. 


Application is being run through `mvn spring-boot:run` if that makes a difference.","davsclaus:1443075069:2015-09-24T14:11:09.067+0000:1443075069:2015-09-24T14:11:09.067+0000:Can you try 2.16-SNAPSHOT
hekonsek:1443088947:2015-09-24T18:02:27.207+0000:1443088947:2015-09-24T18:02:27.207+0000:So it works for 2.15.2 and doesn't for 2.15.3?
nstuart:1443104048:2015-09-24T22:14:08.654+0000:1443104048:2015-09-24T22:14:08.654+0000:Correct, it works fine on 2.15.2 with no changes.

I will try 2.16 when I get a chance to see if that works as well.
hekonsek:1443144598:2015-09-25T09:29:58.195+0000:1443144598:2015-09-25T09:29:58.195+0000:OK. Thanks! Please let us know what is result. Cheers!
nstuart:1446453540:2015-11-02T16:39:00.964+0000:1446453540:2015-11-02T16:39:00.964+0000:Ok, so it looks like I found the root cause, as it is also happening in 2.15.3. The culprit is in the changes in RoutesCollectors:

if (applicationContext.getParent() == null) {
...
}

https://github.com/apache/camel/commit/21107ffe44ff88828a4f8bcc777ec7797e885c5f#diff-dc33e1af06d90575702e3c156abde0c4

In my app, the application parent is indeed, not null. I'm not sure what the reasoning behind this parent check is (besides aforementioned double refresh). Will investigate further to see if I can come up with a solution for us, but just thought I would share my findings so far.

My parrent context, btw, is a AnnotationConfigApplicationContext which doesn't seem to out of the ordinary.

nstuart:1446455132:2015-11-02T17:05:32.168+0000:1446455132:2015-11-02T17:05:32.168+0000:Would a viable solution be to check the status of the CamelContext instead? Not sure what the caveats of this approach would be (race conditions, etc), but something like:

if(camelContext.getStatus() != ServiceStatus.Starting && camelContext.getStatus() != ServiceStatus.Started)

seems like it might work.
nstuart:1447132014:2015-11-10T13:06:54.587+0000:1447132014:2015-11-10T13:06:54.587+0000:Found out the difference and why it's not working correctly in our apps. If you include/use spring-cloud the ApplicationContext you create is no longer the root conext, and this causes issues with the patch mentioned above.

I'll attach a sample app that will show the issue. It also includes the use of FeignClients because we had to work around the double refresh issues with how the act so I wanted to make sure that use case was still supported as well. The app also includes a RoutesCollector that works with this setup.

Will produce a separate patch for this as well.
githubbot:1447137455:2015-11-10T14:37:35.980+0000:1447137455:2015-11-10T14:37:35.980+0000:GitHub user nstuart opened a pull request:

    https://github.com/apache/camel/pull/674

    CAMEL-9161 Change for dealing with parent contexts

    Changes to look at current status instead of just checking for parent context. Using spring cloud automatically adds a parent context which completely disables camel-spring-boot stuff from 2.15.3 onwards.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/nstuart/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/674.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #674
    
----
commit 4257aaba6dece76f0649bb5c263bbb6b6558e5cd
Author: Nick Stuart <nick@portlandwebworks.com>
Date:   2015-11-10T14:19:07Z

    CAMEL-9161 Change for dealing with parent contexts

----

githubbot:1447197406:2015-11-11T07:16:46.538+0000:1447197406:2015-11-11T07:16:46.538+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/674

davsclaus:1447197427:2015-11-11T07:17:07.480+0000:1447197427:2015-11-11T07:17:07.480+0000:Thanks for the PR
etienne.dethoor@gmail.com:1447380597:2015-11-13T10:09:57.726+0000:1447380597:2015-11-13T10:09:57.726+0000:Hello [~davsclaus],

Can you say when this fix will be available in the 2.16.1-SNAPSHOT version ?

Thanks."
0,CAMEL-9160,Improvement,Major,2.16.0,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,1,2015-09-24 12:11:55+00:00,2015-09-24 12:53:23+00:00,So we know its a language and not a component. In rare cases there is both with same name.,
0,CAMEL-9159,Bug,Major,2.16.0,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Thomas Diesler,0,2,2015-09-24 11:29:30+00:00,2015-09-24 11:55:43+00:00,"For 



        // do something in camel that is transactional
        CamelContext camelctx = new DefaultCamelContext();
        camelctx.addRoutes(new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(""direct:start"")
                .wireTap(""log:org.wildfly.camel.test.jpa?level=WARN"")
                .to(""sql:update Account set balance = :#${body} where id = 3?dataSource=java:jboss/datasources/ExampleDS"");
            }
        });




we get



Caused by: java.lang.IllegalArgumentException: No script engine could be created for: log
	at org.apache.camel.builder.script.ScriptBuilder.createScriptEngine(ScriptBuilder.java:334)
	at org.apache.camel.builder.script.ScriptBuilder.<init>(ScriptBuilder.java:111)
	at org.apache.camel.builder.script.ScriptBuilder.<init>(ScriptBuilder.java:90)
	at org.apache.camel.builder.script.ScriptLanguage.createExpression(ScriptLanguage.java:40)
	at org.apache.camel.model.ToDynamicDefinition.createExpression(ToDynamicDefinition.java:95)
	at org.apache.camel.model.ToDynamicDefinition.createProcessor(ToDynamicDefinition.java:70)
	at org.apache.camel.model.WireTapDefinition.createProcessor(WireTapDefinition.java:80)
	at org.apache.camel.model.ProcessorDefinition.makeProcessorImpl(ProcessorDefinition.java:534)
	at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:495)
	at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:219)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:1069)




CrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/882",davsclaus:1443066662:2015-09-24T11:51:02.051+0000:1443066662:2015-09-24T11:51:02.051+0000:Its because you have camel-script on the classpath that should not attempt to assume log is a scripting language.
0,CAMEL-9158,Improvement,Minor,2.16.0,None,"
None
",Resolved,Fixed,"2.16.1, 2.17.0",Andrea Cosentino,Claus Ibsen,0,1,2015-09-24 11:21:37+00:00,2015-10-23 15:30:46+00:00,Should do the init logic in doStart instead of the reset() dirty flat it does today.,
0,CAMEL-9157,New Feature,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,1,2015-09-24 09:08:21+00:00,2015-09-24 11:37:11+00:00,"Some data formats are listed in JMX such as jackson etc. Although they currently do not have any specialized information, but we can add that with the management annotations.


Today they clutter the services category. Instead we can group them under .dataformats, like we have for endpoints and so on.",davsclaus:1443065831:2015-09-24T11:37:11.066+0000:1443065831:2015-09-24T11:37:11.066+0000:Ideally DataFormat should extend Service but that is an API change that may break 3rd party data format implementations. However we should do this for Camel 3.0.
0,CAMEL-9156,New Feature,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,1,2015-09-24 08:09:04+00:00,2015-09-24 13:19:32+00:00,So the api can be reachable from JMX and also from the Camel commands in Karaf etc.,"davsclaus:1443068477:2015-09-24T12:21:17.110+0000:1443068477:2015-09-24T12:21:17.110+0000:There is a JMX operation now on the RestRegistry mbean.

"
0,CAMEL-9155,Bug,Major,2.15.3,,"
None
",Closed,Not A Problem,None,Claus Ibsen,Björn Paulsen,0,2,2015-09-24 07:41:31+00:00,2015-09-25 07:01:23+00:00,"Hello Together,


I wrote a custom component for Camel 2.15.3. This component extends from DefaultComponent and work if I put parameters in the URI, but without Parameters I get following Error Message:



org.apache.camel.component.bean.AmbiguousMethodCallException: Ambiguous method invocations possible: [public org.apache.camel.Endpoint org.apache.camel.impl.DefaultComponent.createEndpoint(java.lang.String) throws java.lang.Exception, public org.apache.camel.EndpointConfiguration org.apache.camel.impl.DefaultComponent.createConfiguration(java.lang.String) throws java.lang.Exception]. Exchange[Message: Header1;Header2;Header3;Header4;Header5;Header6;Header7;Header8;Header9;Header10 Value1_1;Value2_1;Value3_1;Value4_1;Value5_1;Value6_1;Value7_1;Value8_1;Value9_1;Value10_1 Value1_2;Value2_2;Value3_2;Value4_2;Value5_2;Value6_2;Value7_2;Value8_2;Value9_2;Value10_2 Value1_3;Value2_3;Value3_3;Value4_3;Value5_3;Value6_3;Value7_3;Value8_3;Value9_3;Value10_3 Value1_4;Value2_4;Value3_4;Value4_4;Value5_4;Value6_4;Value7_4;Value8_4;Value9_4;Value10_4 Value1_5;Value2_5;Value3_5;Value4_5;Value5_5;Value6_5;Value7_5;Value8_5;Value9_5;Value10_5 Value1_6;Value2_6;Value3_6;Value4_6;Value5_6;Value6_6;Value7_6;Value8_6;Value9_6;Value10_6 Value1_7;Value2_7;Value3_7;Value4_7;Value5_7;Value6_7;Value7_7;Value8_7;Value9_7;Value10_7 Value1_8;Value2_8;Value3_8;Value4_8;Value5_8;Value6_8;Value7_8;Value8_8;Value9_8;Value10_8 Value1_9;Value2_9;Value3_9;Value4_9;Value5_9;Value6_9;Value7_9;Value8_9;Value9_9;Value10_9 Value1_10;Value2_10;Value3_10;Value4_10;Value5_10;Value6_10;Value7_10;Value8_10;Value9_10;Value10_10... [Body clipped after 1000 chars, total length is 2012]]
    at org.apache.camel.component.bean.BeanInfo.chooseBestPossibleMethodInfo(BeanInfo.java:745)
    at org.apache.camel.component.bean.BeanInfo.chooseMethodWithMatchingBody(BeanInfo.java:676)
    at org.apache.camel.component.bean.BeanInfo.chooseMethod(BeanInfo.java:544)
    at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:273)
    at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:180)
    at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:149)
    at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)
    at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)
    at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)
    at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
    at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)
    at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
    at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
    at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:423)
    at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:211)
    at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:175)
    at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:187)
    at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:114)
    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
    at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)
    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)
    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    at java.lang.Thread.run(Thread.java:745)




It is possible to create a Component without Parameters?


This work:



from(""file:in/csv?noop=true"")
    .to(""cvsToXml:?delimiterChar=;"")
    .to(""file:out/csv"");




This don't work:



from(""file:in/csv?noop=true"")
    .to(""cvsToXml"")
    .to(""file:out/csv"");




Do you need my sources?","davsclaus:1443052610:2015-09-24T07:56:50.112+0000:1443052610:2015-09-24T07:56:50.112+0000:Please use the mailing list or user forum for this kind of question
burner:1443135322:2015-09-25T06:55:22.386+0000:1443135322:2015-09-25T06:55:22.386+0000:I ask in the Forum/mailing List. And they also say it is not possible to write
.to('csvToXml')

I must insert a parameter:
.to('csvToXml:foo')

But my Component don't need parameters, or the parameters are optional. So I think this is a bug. 

"
0,CAMEL-9124,Bug,Minor,2.15.3,"2.16.0, 2.15.4","
None
",Resolved,Fixed,"2.16.0, 2.15.4",Claus Ibsen,Claus Ibsen,0,1,2015-09-09 12:23:11+00:00,2015-09-09 12:32:29+00:00,"See nabble
http://camel.465427.n5.nabble.com/Can-t-configure-delayPattern-with-property-placeholders-tp5771356.html",
0,CAMEL-9123,Bug,Major,2.15.3,,"
None
",Closed,Invalid,None,Unassigned,Varun,0,2,2015-09-09 10:07:37+00:00,2015-09-14 06:36:21+00:00,"I have a CXF JAX-RS server talking to a CXF JAX-rs client in my camel route, The RS client inturn talks to REST API, both the server and client have been configured with custom JAX-RS providers to perform custom deserlization/serilizations. The JAX-RS server ""readFrom"" method is invoked followed by the clients ""writeTo"" which perfroms the  REST API call once the API rerurns the response , camel is not invoking CXF client providers readFrom/isReadable method, rather  its directly calling JAX-RS servers writeTO method where the Object is coming as LoadedByteArray instead of the actual Java POJO.","varun_srinath:1441765262:2015-09-09T10:21:02.566+0000:1441765262:2015-09-09T10:21:02.566+0000:{code}
<cxf:rsServer id=""rsCDSServer"" address=""/rest/v1""
		serviceClass=""com.service.ServerServiceImpl"" loggingFeatureEnabled=""true""
		loggingSizeLimit=""20"">
		<cxf:providers>
			<bean id=""sadsad"" class=""com.example.aaa.provider.XMLProvider"">
			</bean>
		</cxf:providers>
	</cxf:rsServer>

	<cxf:rsClient id=""rsCDSClient""
		address=""http://localhost:9090/sample-rest-svc/sampleservices""
		serviceClass=""com.service.ClientServiceImpl"" loggingFeatureEnabled=""true"">
	<cxf:providers>
			<bean id=""ss"" class=""com.example.aaa.provider.XMLProvider"">
			</bean>
		</cxf:providers>
	</cxf:rsClient>


	<camelContext id=""camel"" xmlns=""http://camel.apache.org/schema/spring"">

		<route>
			<from uri=""cxfrs://bean://rsCDSServer?bindingStyle=SimpleConsumer"" />
			<setHeader headerName=""CamelCxfRsUsingHttpAPI"">
				<constant>True</constant>
			</setHeader>
			<to uri=""cxfrs://bean://rsCDSClient"" />
		</route>
	</camelContext>
{code}
njiang:1441945368:2015-09-11T12:22:48.006+0000:1441945368:2015-09-11T12:22:48.006+0000:You are using the [SimpleConsumer binding style|https://camel.apache.org/cxfrs#CXFRS-ConsumingaRESTRequest-SimpleBindingStyle] which just provides a simple way for the camel route to access the RS request message data from the camel message. As it skip the some process of the original CXF RS.

varun_srinath:1442183735:2015-09-14T06:35:35.505+0000:1442183735:2015-09-14T06:35:35.505+0000:Thanks Willem, you were correct i was indeed using simple consumer binding style, and my service class was returning Resposn Objet instead of the actual POJO , which made it skip the regular process, below has been documented in the link which you have shared.


"" If the message body type is different to javax.ws.rs.core.Response (user-built response), a new Response is created and the message body is set as the entity (so long it's not null). The response status code is taken from the Exchange.HTTP_RESPONSE_CODE header, or defaults to 200 OK if not present.
If the message body type is equal to javax.ws.rs.core.Response, it means that the user has built a custom response, and therefore it is respected and it becomes the final response.""

you can close this ticket. Thanks."
0,CAMEL-9122,Bug,Major,None,,"
None
",Resolved,Fixed,None,Unassigned,Thomas Diesler,0,4,2015-09-08 14:06:48+00:00,2015-09-28 06:52:59+00:00,"with script



body = $request.getBody()
$request.setBody(""Hello "" + body);




we get 



uby: body = $request.getBody();
$request.setBody(""Hello "" + body);. Cause: org.jruby.embed.EvalFailedException: (NoMethodError) undefined method `getBody' for nil:NilClass
	at org.apache.camel.builder.script.ScriptBuilder.createScriptEvaluationException(ScriptBuilder.java:540)
	at org.apache.camel.builder.script.ScriptBuilder.evaluateScript(ScriptBuilder.java:409)
	at org.apache.camel.builder.script.ScriptBuilder.process(ScriptBuilder.java:181)
	at org.apache.camel.processor.DelegateSyncProcessor.process(DelegateSyncProcessor.java:63)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:460)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109)
	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:68)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:404)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:372)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:262)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:372)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:230)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:128)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:132)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:149)
	at org.apache.camel.impl.DefaultProducerTemplate.requestBody(DefaultProducerTemplate.java:301)
	at org.apache.camel.impl.DefaultProducerTemplate.requestBody(DefaultProducerTemplate.java:331)
	at org.wildfly.camel.test.script.ScriptIntegrationTest.scriptProcessing(ScriptIntegrationTest.java:100)
	at org.wildfly.camel.test.script.ScriptIntegrationTest.testRuby(ScriptIntegrationTest.java:75)




It seems that the scriptengine can load the script and that the request object is nil.
This used to work 2.15.2 and earlier 2.16 snapshots 


CrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/845","jamesnetherton:1441693852:2015-09-08T14:30:52.281+0000:1441693852:2015-09-08T14:30:52.281+0000:I think the recent JRuby version upgrades may be causing this. 

The code sample works fine with JRuby 1.7.18 but fails with the recent upgrades to 1.7.21 & 1.7.22.
acosentino:1441698024:2015-09-08T15:40:24.902+0000:1441698024:2015-09-08T15:40:24.902+0000:Hi Thomas,

For the moment I've reverted Jruby to version 1.7.18

I'll investigate why there is this problem.
davsclaus:1443392894:2015-09-28T06:28:14.611+0000:1443392894:2015-09-28T06:28:14.611+0000:Lets keep 1.7.18 on this release, and maybe there is a working jruby release in the future.
tdiesler:1443394379:2015-09-28T06:52:59.548+0000:1443394379:2015-09-28T06:52:59.548+0000:If we stick to a working jruby version, we can resolve this. Its no longer a bug."
0,CAMEL-9121,Bug,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Andrea Cosentino,Thomas Diesler,0,3,2015-09-08 10:42:20+00:00,2015-09-09 07:52:32+00:00,"wildfly-camel generates 



<module xmlns=""urn:jboss:module:1.1"" name=""org.apache.commons.pool2"">
  <resources>
    <artifact name=""org.apache.commons:commons-pool2:2.3"" />
  </resources>
  <dependencies>
    <module name=""javax.api"" />
  </dependencies>
</module>




although camel defines 2.4.2. This leads to 



type org.apache.commons.pool2.impl.DefaultEvictionPolicy
	at org.apache.commons.pool2.impl.BaseGenericObjectPool.setEvictionPolicyClassName(BaseGenericObjectPool.java:607)
	at org.apache.commons.pool2.impl.GenericKeyedObjectPool.setConfig(GenericKeyedObjectPool.java:257)
	at org.apache.commons.pool2.impl.GenericKeyedObjectPool.<init>(GenericKeyedObjectPool.java:111)
	at org.apache.commons.pool2.impl.GenericKeyedObjectPool.<init>(GenericKeyedObjectPool.java:86)
	at org.apache.activemq.jms.pool.PooledConnectionFactory.initConnectionsPool(PooledConnectionFactory.java:89)
	at org.apache.activemq.jms.pool.PooledConnectionFactory.getConnectionsPool(PooledConnectionFactory.java:496)
	at org.apache.activemq.jms.pool.PooledConnectionFactory.createConnection(PooledConnectionFactory.java:224)
	at org.apache.activemq.jms.pool.PooledConnectionFactory.createConnection(PooledConnectionFactory.java:209)
	at org.springframework.jms.support.JmsAccessor.createConnection(JmsAccessor.java:180)
	at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:483)
	at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.send(JmsConfiguration.java:243)","tdiesler:1441680162:2015-09-08T10:42:42.803+0000:1441680162:2015-09-08T10:42:42.803+0000:I'll take a look
githubbot:1441691281:2015-09-08T13:48:01.074+0000:1441691281:2015-09-08T13:48:01.074+0000:GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/606

    [CAMEL-9121] activemq-camel pulls in outdated version of commons-pool2

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-9121

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/606.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #606
    
----
commit b38bbda2dce6634f3ed0b6c4f7ed5417b552515e
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2015-09-08T13:27:16Z

    [CAMEL-9121] activemq-camel pulls in outdated version of commons-pool2

----

acosentino:1441699263:2015-09-08T16:01:03.238+0000:1441699263:2015-09-08T16:01:03.238+0000:Thank you Thomas. The code has been merged :-)
githubbot:1441756352:2015-09-09T07:52:32.367+0000:1441756352:2015-09-09T07:52:32.367+0000:Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/606
"
0,CAMEL-9120,Task,Major,None,,"
None
",Resolved,Fixed,None,Andrea Cosentino,Andrea Cosentino,0,1,2015-09-07 18:56:02+00:00,2015-09-11 15:16:21+00:00,Actually camel-undertow is not available as feature. I think we have to add it to features list.,
0,CAMEL-9119,Improvement,Major,2.14.3,"2.16.0, 2.15.4","
None
",Resolved,Fixed,"2.16.0, 2.15.4",Claus Ibsen,metatech,0,2,2015-09-07 13:33:15+00:00,2015-09-16 13:02:32+00:00,"Since CAMEL-4396, XSLT exceptions are not logged anymore on System.err.
Unfortunately, the XsltErrorHandler which was introduced does not behave as the default ErrorHandler which logs on System.err and re-throws exceptions (my mistake). 
The XsltErrorHandler should re-throw exceptions for ERROR or FATAL, otherwise they are ignored and the service is allowed to start, although the XSLT transformation is not successfully started.
Here is a small patch that fixes that.
The test ""XsltTestErrorListenerTest"" is still successful.","davsclaus:1441606974:2015-09-07T14:22:54.735+0000:1441606974:2015-09-07T14:22:54.735+0000:Thanks for the patch. I refined it a bit and added a new unit test
davsclaus:1442376102:2015-09-16T12:01:42.731+0000:1442376102:2015-09-16T12:01:42.731+0000:This causes side-effects - looking into reverting this
davsclaus:1442379389:2015-09-16T12:56:29.108+0000:1442379389:2015-09-16T12:56:29.108+0000:Okay seems it was another ticket that had a knock-on effect on this. JDK vs Saxon behaves different and report different errors etc."
0,CAMEL-9118,Improvement,Trivial,2.16.0,None,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,James Lindstorff,0,2,2015-09-07 10:03:08+00:00,2015-09-07 10:41:45+00:00,"In camel-pgevent use the pg_notify function via a callablestatement on postgres version 9.0 and above.


This is an add-on to the patch supplied for camel-9088","jlindstorff:1441591608:2015-09-07T10:06:48.151+0000:1441591608:2015-09-07T10:06:48.151+0000:Patch which checks that pg_notify is supported and then using that for sending events is attached.
davsclaus:1441593705:2015-09-07T10:41:45.006+0000:1441593705:2015-09-07T10:41:45.006+0000:Thanks for the patch"
0,CAMEL-9117,New Feature,Minor,2.15.3,,"
None
",Resolved,Duplicate,None,Unassigned,Alexey Markevich,0,2,2015-09-07 09:06:53+00:00,2019-07-18 23:12:56+00:00,"I have a RouteBuilder with endpoints like



cxfrs://bean://cCXFRS_1




To update CamelContext registry I used



final CamelContext camelContext = getContext();
final org.apache.camel.impl.SimpleRegistry registry = new org.apache.camel.impl.SimpleRegistry();
final org.apache.camel.impl.CompositeRegistry compositeRegistry = new org.apache.camel.impl.CompositeRegistry();
compositeRegistry.addRegistry(camelContext.getRegistry());
compositeRegistry.addRegistry(registry);
((org.apache.camel.impl.DefaultCamelContext) camelContext)
				.setRegistry(compositeRegistry);




and register cusom beans 



registry.put(""cCXFRS_1"", factory_cCXFRS_1);




org.apache.camel.spi.Registry doesn't support any put/bind which can be usefull for such case",bedla:1563462776:2019-07-18T23:12:56.333+0000:1563462776:2019-07-18T23:12:56.333+0000:This was resolved by CAMEL-10792. CompositeRegistry is removed in Camel 3 and DefaultRegistry supports bind method.
0,CAMEL-9116,Improvement,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,1,2015-09-07 07:29:53+00:00,2015-09-07 09:38:59+00:00,"This allows end users to switch between camel-jms and camel-sjms easier. Also camel-jms has been proven for a longer time, and would be better if camel-sjms supports and is more similar to some of the functions it has.


The binding between JMS and Camel should be a good start to make that the same/similar as in JMS.


See nabble
http://camel.465427.n5.nabble.com/Camel-SJMS-cannot-convert-Jetty-objects-to-JMS-object-tp5771193.html",
0,CAMEL-9115,Improvement,Major,2.15.3,"2.16.0, 2.15.4","
None
",Resolved,Fixed,"2.16.0, 2.15.4",Claus Ibsen,Claus Ibsen,0,1,2015-09-05 14:44:27+00:00,2015-09-05 14:47:00+00:00,"See nabble
http://camel.465427.n5.nabble.com/Stream-Cache-spool-file-deletion-when-marshaling-to-JSON-with-Jackson-tp5769699.html


To ensure we done the UoW after restlet is done sending the reply message.",
0,CAMEL-9114,Task,Minor,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Andrea Cosentino,Andrea Cosentino,0,1,2015-09-05 09:20:40+00:00,2016-01-13 08:44:02+00:00,"Jgroups 3.6.5.Final is out. We can upgrade.


I'm trying to test the new bundle and to install the camel-jgroups feature in karaf with camel-itest-karaf test.


The behaviour is weird:



ERROR: Bundle org.apache.camel.camel-jgroups [88] Error starting mvn:org.apache.camel/camel-jgroups/2.16-SNAPSHOT (org.osgi.framework.BundleException: Unresolved constraint in bundle org.apache.camel.camel-jgroups [88]: Unable to resolve 88.0: missing requirement [88.0] osgi.wiring.package; (&(osgi.wiring.package=org.jgroups)(version>=3.6.0)(!(version>=4.0.0))) [caused by: Unable to resolve 89.0: missing requirement [89.0] osgi.ee; (&(osgi.ee=Java2SE)(version=1.7.0))])
org.osgi.framework.BundleException: Unresolved constraint in bundle org.apache.camel.camel-jgroups [88]: Unable to resolve 88.0: missing requirement [88.0] osgi.wiring.package; (&(osgi.wiring.package=org.jgroups)(version>=3.6.0)(!(version>=4.0.0))) [caused by: Unable to resolve 89.0: missing requirement [89.0] osgi.ee; (&(osgi.ee=Java2SE)(version=1.7.0))]
	at org.apache.felix.framework.Felix.resolveBundleRevision(Felix.java:4002)
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2045)
	at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1299)
	at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:304)
	at java.lang.Thread.run(Thread.java:745)
org.osgi.framework.BundleException: Unresolved constraint in bundle org.jgroups [89]: Unable to resolve 89.0: missing requirement [89.0] osgi.ee; (&(osgi.ee=Java2SE)(version=1.7.0))ERROR: Bundle org.jgroups [89] Error starting mvn:org.jgroups/jgroups/3.6.5.Final (org.osgi.framework.BundleException: Unresolved constraint in bundle org.jgroups [89]: Unable to resolve 89.0: missing requirement [89.0] osgi.ee; (&(osgi.ee=Java2SE)(version=1.7.0)))

	at org.apache.felix.framework.Felix.resolveBundleRevision(Felix.java:4002)
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2045)
	at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1299)
	at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:304)
	at java.lang.Thread.run(Thread.java:745)
[org.ops4j.pax.exam.rbc.client.RemoteBundleContextClient] : Remote bundle context found after 4683 millis
ERROR: Bundle org.apache.camel.camel-jgroups [88] Error starting/stopping bundle. (org.osgi.framework.BundleException: Unresolved constraint in bundle org.apache.camel.camel-jgroups [88]: Unable to resolve 88.0: missing requirement [88.0] osgi.wiring.package; (&(osgi.wiring.package=org.jgroups)(version>=3.6.0)(!(version>=4.0.0))) [caused by: Unable to resolve 89.0: missing requirement [89.0] osgi.ee; (&(osgi.ee=Java2SE)(version=1.7.0))])
org.osgi.framework.BundleException: Unresolved constraint in bundle org.apache.camel.camel-jgroups [88]: Unable to resolve 88.0: missing requirement [88.0] osgi.wiring.package; (&(osgi.wiring.package=org.jgroups)(version>=3.6.0)(!(version>=4.0.0))) [caused by: Unable to resolve 89.0: missing requirement [89.0] osgi.ee; (&(osgi.ee=Java2SE)(version=1.7.0))]
	at org.apache.felix.framework.Felix.resolveBundleRevision(Felix.java:4002)
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2045)
	at org.apache.felix.framework.Felix.setBundleStartLevel(Felix.java:1491)
	at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:334)
	at java.lang.Thread.run(Thread.java:745)
ERROR: Bundle org.jgroups [89] Error starting/stopping bundle. (org.osgi.framework.BundleException: Unresolved constraint in bundle org.jgroups [89]: Unable to resolve 89.0: missing requirement [89.0] osgi.ee; (&(osgi.ee=Java2SE)(version=1.7.0)))
org.osgi.framework.BundleException: Unresolved constraint in bundle org.jgroups [89]: Unable to resolve 89.0: missing requirement [89.0] osgi.ee; (&(osgi.ee=Java2SE)(version=1.7.0))
	at org.apache.felix.framework.Felix.resolveBundleRevision(Felix.java:4002)
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2045)
	at org.apache.felix.framework.Felix.setBundleStartLevel(Felix.java:1491)
	at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:334)
	at java.lang.Thread.run(Thread.java:745)




Looking at the manifest.mf of Jgroups 3.6.4.Final I see this:



Bundle-RequiredExecutionEnvironment: J2SE-1.6




while in 3.6.5.Final we have 



Bundle-RequiredExecutionEnvironment: Java2SE-1.7




and this is normal.


I would have expected no problem with the camel-itest-karaf test, but it doesn't work.


Also if you take a look at the config.properties of camel-itest-karaf, at the following path src/test/resources/org/apache/camel/itest/karaf, you'll see the following row



org.osgi.framework.executionenvironment=J2SE-1.7,JavaSE-1.7,J2SE-1.6,JavaSE-1.6,J2SE-1.5,JavaSE-1.5,J2SE-1.4,JavaSE-1.4,J2SE-1.3,JavaSE-1.3,J2SE-1.2,,JavaSE-1.2,CDC-1.1/Foundation-1.1,CDC-1.0/Foundation-1.0,J2ME,OSGi/Minimum-1.1,OSGi/Minimum-1.0",acosentino:1442062083:2015-09-12T20:48:03.429+0000:1442062083:2015-09-12T20:48:03.429+0000:It should be fixed in the next release: 3.6.7.Final
0,CAMEL-9113,Task,Minor,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Andrea Cosentino,Andrea Cosentino,0,4,2015-09-03 16:32:26+00:00,2015-10-26 12:19:47+00:00,"Infinispan 8.0.0.Final is out. We have to upgrade our dependency and improve the component by using new features listed here: http://blog.infinispan.org/2015/08/infinispan-800final.html


We can do this when we switch to Java 8, since this new Infinispan version require Java 8.","jamesnetherton:1445296202:2015-10-20T07:10:02.743+0000:1445296202:2015-10-20T07:10:02.743+0000:{quote}
We can do this when we switch to Java 8
{quote}

Any idea when this is likely to be?
davsclaus:1445550788:2015-10-23T05:53:08.329+0000:1445550788:2015-10-23T05:53:08.329+0000:Some components require java 8 such as camel-spark-rest. The point is that the camel-xxx code should be able to compile as java 7, but only require java8 to run it at runtime. So if we can do that, we can upgrade sooner.

jamesnetherton:1445556347:2015-10-23T07:25:47.631+0000:1445556347:2015-10-23T07:25:47.631+0000:Yeah good point. Sounds doable to upgrade to 8.x then.

The ticket description mentions 'improve the component by using new features'. I'd say as a first step, we upgrade the Inifinispan libraries and get the current component code running 'as is'. Supporting any new 8.x features is a separate ticket IMO.

wildfly-camel will probably depend on this component upgrade so I can maybe take on this ticket if you're ok with that.

githubbot:1445830946:2015-10-26T11:42:26.138+0000:1445830946:2015-10-26T11:42:26.138+0000:GitHub user jamesnetherton opened a pull request:

    https://github.com/apache/camel/pull/661

    [CAMEL-9113] Upgrade infinispan to 8.0.1.Final

    This results in camel-infinispan requiring JDK 8 at runtime. So the component documentation will need updating to reflect this.  

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jamesnetherton/camel CAMEL-9113

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/661.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #661
    
----
commit 4816338dc4ba1976ae204bb2d6796295cee9e0d5
Author: James Netherton <jamesnetherton@gmail.com>
Date:   2015-10-26T11:36:04Z

    [CAMEL-9113] Upgrade infinispan to 8.0.1.Final

----

githubbot:1445832662:2015-10-26T12:11:02.819+0000:1445832662:2015-10-26T12:11:02.819+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/661

davsclaus:1445832738:2015-10-26T12:12:18.394+0000:1445832738:2015-10-26T12:12:18.394+0000:Thanks for the PR
acosentino:1445833187:2015-10-26T12:19:47.968+0000:1445833187:2015-10-26T12:19:47.968+0000:Thank you James :-)"
0,CAMEL-9112,Bug,Minor,2.14.3,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Michael Esmann,0,2,2015-09-03 09:27:14+00:00,2015-09-26 08:35:46+00:00,"I am trying to upgrade to Camel 2.14.3 from 2.14.1. We are using Karaf 3.0.4 as server. 


There is a problem with this, which can be reproduced this way: 



Make a clean Karaf 3.0.4 installation




Start Karaf and install features:



   feature:repo-add camel 2.14.3 
   feature:install camel 
   feature:install camel-script 



Stop Karaf and start it again.



Now there is a warning and stacktrace in the Karaf logfile, as seen below. 
I also tried to additionally install camel-script-jruby and camel-ruby but this didn't help 
This warning and stacktrace is not present when using Camel 2.14.1 !! 


--------------------------------------------------------------------- 


2015-09-01 09:49:01,277 | WARN  | FelixStartLevel  | Activator                        | 94 - org.apache.camel.camel-script - 2.14.3 | Cannot create the ScriptEngineFactory: java.lang.IllegalStateException 
java.lang.IllegalStateException: Invalid ScriptEngineFactory: org.jruby.embed.jsr223.JRubyEngineFactory 
        at org.apache.camel.script.osgi.Activator$BundleScriptEngineResolver.getFactory(Activator.java:231)[94:org.apache.camel.camel-script:2.14.3] 
        at org.apache.camel.script.osgi.Activator$BundleScriptEngineResolver.getScriptNames(Activator.java:210)[94:org.apache.camel.camel-script:2.14.3] 
        at org.apache.camel.script.osgi.Activator$BundleScriptEngineResolver.access$000(Activator.java:191)[94:org.apache.camel.camel-script:2.14.3] 
        at org.apache.camel.script.osgi.Activator.getAvailableScriptNames(Activator.java:118)[94:org.apache.camel.camel-script:2.14.3] 
        at org.apache.camel.script.osgi.Activator.updateAvailableScriptLanguages(Activator.java:138)[94:org.apache.camel.camel-script:2.14.3] 
        at org.apache.camel.script.osgi.Activator.serviceChanged(Activator.java:184)[94:org.apache.camel.camel-script:2.14.3] 
        at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:932)[org.apache.felix.framework-4.2.1.jar:] 
        at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:793)[org.apache.felix.framework-4.2.1.jar:] 
        at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:543)[org.apache.felix.framework-4.2.1.jar:] 
        at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4419)[org.apache.felix.framework-4.2.1.jar:] 
        at org.apache.felix.framework.Felix.registerService(Felix.java:3423)[org.apache.felix.framework-4.2.1.jar:] 
        at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:346)[org.apache.felix.framework-4.2.1.jar:] 
        at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:320)[org.apache.felix.framework-4.2.1.jar:] 
        at org.apache.camel.impl.osgi.Activator$BaseService.doRegister(Activator.java:456)[70:org.apache.camel.camel-core:2.14.3] 
        at org.apache.camel.impl.osgi.Activator$BaseService.doRegister(Activator.java:448)[70:org.apache.camel.camel-core:2.14.3] 
        at org.apache.camel.impl.osgi.Activator$BundleMetaLanguageResolver.register(Activator.java:238)[70:org.apache.camel.camel-core:2.14.3] 
        at org.apache.camel.impl.osgi.Activator.addingBundle(Activator.java:104)[70:org.apache.camel.camel-core:2.14.3] 
        at org.apache.camel.impl.osgi.tracker.BundleTracker$Tracked.customizerAdding(BundleTracker.java:431)[70:org.apache.camel.camel-core:2.14.3] 
        at org.apache.camel.impl.osgi.tracker.AbstractTracked.trackAdding(AbstractTracked.java:261)[70:org.apache.camel.camel-core:2.14.3] 
        at org.apache.camel.impl.osgi.tracker.AbstractTracked.track(AbstractTracked.java:234)[70:org.apache.camel.camel-core:2.14.3] 
        at org.apache.camel.impl.osgi.tracker.BundleTracker$Tracked.bundleChanged(BundleTracker.java:407)[70:org.apache.camel.camel-core:2.14.3] 
        at org.apache.felix.framework.util.EventDispatcher.invokeBundleListenerCallback(EventDispatcher.java:868)[org.apache.felix.framework-4.2.1.jar:] 
        at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:789)[org.apache.felix.framework-4.2.1.jar:] 
        at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:514)[org.apache.felix.framework-4.2.1.jar:] 
        at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4403)[org.apache.felix.framework-4.2.1.jar:] 
        at org.apache.felix.framework.Felix.startBundle(Felix.java:2092)[org.apache.felix.framework-4.2.1.jar:] 
        at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1291)[org.apache.felix.framework-4.2.1.jar:] 
        at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:304)[org.apache.felix.framework-4.2.1.jar:] 
        at java.lang.Thread.run(Thread.java:744)[:1.7.0_51]","davsclaus:1443227746:2015-09-26T08:35:46.594+0000:1443227746:2015-09-26T08:35:46.594+0000:Thanks for reporting. 

jruby is mistakenly installed by default in camel-script, you should use camel-script-jruby if you want ruby.
"
0,CAMEL-9111,New Feature,Major,None,None,"
None
",Resolved,Fixed,2.16.0,Raúl Kripalani,Sverker Abrahamsson,0,2,2015-09-03 08:46:07+00:00,2015-09-03 21:07:04+00:00,"I have created a tarfile component for Camel. The pull request is available here:
https://github.com/apache/camel/pull/599","raulvk:1441285312:2015-09-03T21:01:52.689+0000:1441285312:2015-09-03T21:01:52.689+0000:Hi [~sverker],

On behalf of the Camel PMC and the entire Camel community, I would like to thank you for your contribution.
I have applied the patch onto our master branch and it will be next released with Camel 2.16.0. Some changes were needed:

* Karaf feature (OSGi) was missing.
* Upgrade commons-compress dependency to 1.10.
* Checkstyle fixes.
* Changed the tarFileName header name to one that follows the Camel style, and added a public constant for it.
* Created the test .tar files, as they were not part of the patch (as they are binaries).

We would be very grateful if you'd find some time to document this component in the Camel website, so that users can discover and learn about it. Do you have access to the Wiki? If not, please let me know and we'll arrange that.

Thanks,
Raúl.
raulvk:1441285624:2015-09-03T21:07:04.550+0000:1441285624:2015-09-03T21:07:04.550+0000:camel-tarfile component added to JIRA and to release notes."
0,CAMEL-9110,Bug,Major,2.14.1,,"
None
",Resolved,Not A Problem,None,Claus Ibsen,Roy Truelove,0,2,2015-09-02 14:42:35+00:00,2015-09-05 14:28:07+00:00,"(Can reproduce using this repo: https://github.com/roytruelove/camelBug)


I have:



An interface ExternalService which I've proxied using camel:proxy, pointing to direct:start.
A class UsesExternalServiceDuringInit into which the proxy is injected. During its Spring afterPropertiesSet() initialization method, the proxy is used.
A route which defines the direct:start endpoint.



The full stack trace can be found below, but the core error that I get when starting Spring is



No consumers available on endpoint: Endpoint[direct://start]. Exchange[Message: BeanInvocation public abstract java.lang.String org.apache.camel.example.spring.ExternalService.someMethodOnExternalService() with null]]




What it looks like is happening (and feel free to correct!) is:



Because UsesExternalServiceDuringInit depends on the camel bean, afterPropertiesSet() is called on SpringCamelContext, but this does not start the routes.
afterPropertiesSet() is called on UsesExternalServiceDuringInit, expecting its instance of ExternalService to be ready to use.
The routes are not started, so direct:start is not yet consuming and the init fails.



From what I see the starting of the routes happens once the spring context is fully initialized, meaning that any calls to the proxy during spring's init will fail.


BTW I've tried this without a proxy, simply using a ProducerTemplate with the same issue.


I don't yet have an idea for a fix / workaround - will update if I find one.


Full stack trace if needed:



java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.camel.maven.RunMojo$1.run(RunMojo.java:488)
	at java.lang.Thread.run(Thread.java:744)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.apache.camel.example.spring.UsesExternalServiceDuringInit#0' defined in file [/Users/roytruelove/src/personal/camel-bugfix2/target/classes/META-INF/spring/camel-context.xml]: Invocation of init method failed; nested exception is java.lang.reflect.UndeclaredThrowableException
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1514)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:293)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:290)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:191)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:636)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:934)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:93)
	at org.apache.camel.spring.Main.createDefaultApplicationContext(Main.java:217)
	at org.apache.camel.spring.Main.doStart(Main.java:157)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:149)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:353)
	at org.apache.camel.spring.Main.main(Main.java:90)
	... 6 more
Caused by: java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy45.someMethodOnExternalService(Unknown Source)
	at org.apache.camel.example.spring.UsesExternalServiceDuringInit.afterPropertiesSet(UsesExternalServiceDuringInit.java:11)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1573)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1511)
	... 23 more
Caused by: org.apache.camel.component.direct.DirectConsumerNotAvailableException: No consumers available on endpoint: Endpoint[direct://start]. Exchange[Message: BeanInvocation public abstract java.lang.String org.apache.camel.example.spring.ExternalService.someMethodOnExternalService() with null]]
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:38)
	at org.apache.camel.component.bean.AbstractCamelInvocationHandler$1.call(AbstractCamelInvocationHandler.java:110)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at org.apache.camel.component.bean.AbstractCamelInvocationHandler.invokeWithBody(AbstractCamelInvocationHandler.java:128)
	at org.apache.camel.component.bean.CamelInvocationHandler.doInvokeProxy(CamelInvocationHandler.java:45)
	at org.apache.camel.component.bean.AbstractCamelInvocationHandler.invoke(AbstractCamelInvocationHandler.java:82)
	... 27 more","roytruelove@gmail.com:1441270280:2015-09-03T16:51:20.126+0000:1441270280:2015-09-03T16:51:20.126+0000:Made the ticket more generic as this issue is not only for proxies.
roytruelove@gmail.com:1441270301:2015-09-03T16:51:41.244+0000:1441270301:2015-09-03T16:51:41.244+0000:A user with the same issue: http://camel.465427.n5.nabble.com/SpringCamelContext-afterPropertiesSet-never-called-td5137267.html
davsclaus:1441326143:2015-09-04T08:22:23.011+0000:1441326143:2015-09-04T08:22:23.011+0000:Try with newer release such as latest 2.15.x or 2.16-SNAPSHOT as there has been some proxy lifecycle improvements
roytruelove@gmail.com:1441357663:2015-09-04T17:07:43.780+0000:1441357722:2015-09-04T17:08:42.043+0000:Thanks Claus.  I was able to recreate this with the tip of master (2.16-SNAPSHOT).

I changed the description a bit; it's actually a more general problem.  You can't seem to call any camel producers during any bean's afterPropertiesSet() method, which means that other beans that need camel during their init will fail.  This would be a common scenario for proxies.
davsclaus:1441408951:2015-09-05T07:22:31.687+0000:1441408951:2015-09-05T07:22:31.687+0000:As you use direct component then you can use its block option to wait until the consumer is ready a bit later.
roytruelove@gmail.com:1441429960:2015-09-05T13:12:40.633+0000:1441429960:2015-09-05T13:12:40.633+0000:I gave that a shot but the block causes the app to hang until timeout.  Seems Camel's init is in the same thread.


Sent from TypeMail




davsclaus:1441434487:2015-09-05T14:28:07.436+0000:1441434487:2015-09-05T14:28:07.436+0000:You can use seda instead of direct as its async if you can rely on a InOnly style.

But maybe consider a design that do not need message routing during init, eg init / startup. afterPropertiesSetup is not IMHO a good place to do business logic, but to do simple init logic.
"
0,CAMEL-9109,Bug,Major,2.16.0,,"
None
",Resolved,Not A Problem,None,Unassigned,Les Novell,0,2,2015-09-02 01:57:28+00:00,2015-09-04 08:23:54+00:00,"The AHC component seems to create worker threads on the thread pool for every (concurrent?) client request.  I assume, by design, it's expected that AHC is non-blocking and uses only a small number of threads even under low load.


I created a simple route to test asynchronous message passing in Camel.  When testing the route by creating 1000 simultaneous connections I see that around over 1000 threads are created to handle requests I'm forwarding on using AHC component.  


I am surprised, I thought that AHC component would use non-blocking asynchronous I/O, and a low number of threads. 


Basic Route: 
        restConfiguration().component(""jetty"").host(""localhost"").port(8081); 
        rest(""/ud"").get(""/wait/

{timeout}

"") 
                .to(""direct:mockEndpoint"").bindingMode(RestBindingMode.off); 
        from(""direct:mockEndpoint"") 
                .removeHeaders(""CamelHttpPath"") 
                .toD(""ahc:http://localhost:9000/wait/${headers.timeout}?bridgeEndpoint=true""); 


It appears that the AHC component is creating worker threads to manage outgoing connections to localhost:9000. One for every connection made to localhost:9090.  


Camel version is 2.16-SNAPSHOT",davsclaus:1441326234:2015-09-04T08:23:54.897+0000:1441326234:2015-09-04T08:23:54.897+0000:See the user forum where this is discussed
0,CAMEL-9108,Bug,Major,"2.15.0, 2.15.1, 2.15.2, 2.15.3",,"
None
",Resolved,Duplicate,None,Unassigned,Daniel Williams,0,2,2015-09-01 20:33:52+00:00,2015-09-09 14:47:49+00:00,"It was noticed in camel-kafka 2.15.3 that the KafkaProducer was reading the kafka.TOPIC off of the Exchange envelope instead of reading it off of the configured KafkaEndpoint/Configuration which subsequently breaks the ability to route messages from a Kafka topic to a Kafka topic based upon a Predicate.


```
from(""kafka:localhost:9092?topic=A&groupId=B...."").to(""kafka:localhost:9092?topic=B....."")
```


I've created a pull request on github that addresses this issue:
https://github.com/apache/camel/pull/597","githubbot:1441781269:2015-09-09T14:47:49.739+0000:1441781269:2015-09-09T14:47:49.739+0000:Github user williamd1618 closed the pull request at:

    https://github.com/apache/camel/pull/597
"
0,CAMEL-9107,Bug,Minor,2.15.2,Future,"
None
",Resolved,Workaround,Future,Claus Ibsen,Thierry Frossard,0,3,2015-09-01 09:07:54+00:00,2020-01-05 00:22:48+00:00,"Hi, 


I posted this issue in Camel users forum but unfortunately got no response.


I'm using Camel 2.15.2 with JDK 1.7 under Windows 7 and Eclipse 4.2.2 as development tool. 


My route reads from an IMAP server (IBM Lotus Notes). I have one big problem : when the route handles an email, which contains a PDF attached file with a semicolon in his name (for exemple my;pdf.pdf), then the route always throws this exception : 


Failed to extract body due to: Unable to load BODYSTRUCTURE. 


4.08.15 15:10:11:313 CEST] 00000172 SystemOut     O [15:10:11.313] WARN  [Camel (Mail vers Indexation) thread #0 - imap://myimapserver.ch] org.apache.camel.util.CamelLogger.log:224 : Caused by: [org.apache.camel.RuntimeCamelException - Failed to extract body due to: Unable to load BODYSTRUCTURE. Exchange: Exchange[MailMessage@0x862446e3]. Message: com.sun.mail.imap.IMAPMessage@16e6c70e] 
org.apache.camel.RuntimeCamelException: Failed to extract body due to: Unable to load BODYSTRUCTURE. Exchange: Exchange[MailMessage@0x862446e3]. Message: com.sun.mail.imap.IMAPMessage@16e6c70e 
        at org.apache.camel.component.mail.MailBinding.extractBodyFromMail(MailBinding.java:275) ~[camel-mail-2.15.2.jar:2.15.2] 
        at org.apache.camel.component.mail.MailMessage.createBody(MailMessage.java:103) ~[camel-mail-2.15.2.jar:2.15.2] 
        at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:41) ~[camel-core-2.15.2.jar:2.15.2] 
        at org.apache.camel.component.mail.MailConsumer.createExchanges(MailConsumer.java:326) ~[camel-mail-2.15.2.jar:2.15.2] 
        at org.apache.camel.component.mail.MailConsumer.poll(MailConsumer.java:121) ~[camel-mail-2.15.2.jar:2.15.2] 
        at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:174) [camel-core-2.15.2.jar:2.15.2] 
        at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:101) [camel-core-2.15.2.jar:2.15.2] 
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:482) [na:1.7.0] 
        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:315) [na:1.7.0] 
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:189) [na:1.7.0] 
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304) [na:1.7.0] 
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1156) [na:1.7.0] 
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:626) [na:1.7.0] 
        at java.lang.Thread.run(Thread.java:804) [na:1.7.0] 
Caused by: javax.mail.MessagingException: Unable to load BODYSTRUCTURE 
        at com.sun.mail.imap.IMAPMessage.loadBODYSTRUCTURE(IMAPMessage.java:1261) ~[com.ibm.ws.prereq.javamail.jar:na] 
        at com.sun.mail.imap.IMAPMessage.getDataHandler(IMAPMessage.java:597) ~[com.ibm.ws.prereq.javamail.jar:na] 
        at javax.mail.internet.MimeMessage.getContent(MimeMessage.java:1395) ~[com.ibm.ws.prereq.javamail.jar:na] 
        at org.apache.camel.component.mail.MailBinding.extractBodyFromMail(MailBinding.java:247) ~[camel-mail-2.15.2.jar:2.15.2] 
        ... 13 common frames omitted 


Here is the route (very simple) : 


  @Override 
  public void configure() throws Exception 

{ 
    from(getPropertiesUri()) 
    /**/.to(""log:dummy""); 
  }

 


  protected String getPropertiesUri() { 
    String prefix = Constants.MAIL.concat(provider); 
    StringBuilder uri = new StringBuilder(); 


    uri.append(getContext().getProperties().get(prefix.concat("".protocol""))).append(""://""); 
    uri.append(getContext().getProperties().get(prefix.concat("".host""))).append(""?""); 
    uri.append(""username="").append(getContext().getProperties().get(prefix.concat("".user""))); 
    uri.append(""&password="").append(getContext().getProperties().get(prefix.concat("".password""))); 
    uri.append(""&folderName="").append(getContext().getProperties().get(prefix.concat("".folder""))); 
    uri.append(""&unseen="").append(getContext().getProperties().get(prefix.concat("".unseen""))); 
    uri.append(""&consumer.delay="").append(getContext().getProperties().get(prefix.concat("".consuming.delay""))); 
    uri.append(""&delete="").append(getContext().getProperties().get(prefix.concat("".delete""))); 


    String options = getContext().getProperties().get(prefix.concat("".options"")); 


    if (StringUtils.isNotBlank(options)) 

{ 
      uri.append(""&"").append(getContext().getProperties().get(prefix.concat("".options""))); 
    }

 


    return uri.toString(); 
  } 


and the uri used to retrieve the mail : 


imap://myimapserver.ch?username=username&password=password&folderName=IMAP&unseen=true&consumer.delay=30000&delete=true 


I didn't find anywhere a similar problem with Camel mail component so I don't know if it's a bug or if I'm doing something wrong. 


Kind regards and thanks a lot for helping.","davsclaus:1443477352:2015-09-29T05:55:52.076+0000:1443477352:2015-09-29T05:55:52.076+0000:Can you try outside IBM server, such as from a Java unit test or java standalone and use the SUN java mail library. From the stacktrace you use IBM Java Mail and those may be different and the latter have a problem. Just to verify if you can get the same problem with the SUN java mail or not.
frossart:1444267367:2015-10-08T09:22:47.198+0000:1444267367:2015-10-08T09:22:47.198+0000:Hello Claus,

Thank you for your response. I've exactly the same problem within a simple unit test using Sun JDK 1.7.0_75 and Sun javamail. Here is the stacktrace :
---------------------------------------------------------------------------------------------------------------------------------------
org.apache.camel.RuntimeCamelException: Error populating the initial mail message attachments
	at org.apache.camel.component.mail.MailMessage.populateInitialAttachments(MailMessage.java:131) ~[camel-mail-2.15.2.jar:2.15.2]
	at org.apache.camel.impl.DefaultMessage.createAttachments(DefaultMessage.java:216) ~[camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.impl.DefaultMessage.getAttachments(DefaultMessage.java:281) ~[camel-core-2.15.2.jar:2.15.2]
	at ch.gma.nova.eip.mailtoindexation.processors.MailReader.process(MailReader.java:45) ~[classes/:na]
	at org.apache.camel.processor.DelegateSyncProcessor.process(DelegateSyncProcessor.java:63) ~[camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:448) ~[camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191) [camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118) [camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80) [camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191) [camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109) [camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:87) [camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.component.mail.MailConsumer.processExchange(MailConsumer.java:359) [camel-mail-2.15.2.jar:2.15.2]
	at org.apache.camel.component.mail.MailConsumer.processBatch(MailConsumer.java:220) [camel-mail-2.15.2.jar:2.15.2]
	at org.apache.camel.component.mail.MailConsumer.poll(MailConsumer.java:121) [camel-mail-2.15.2.jar:2.15.2]
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:174) [camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:101) [camel-core-2.15.2.jar:2.15.2]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471) [na:1.7.0_75]
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:304) [na:1.7.0_75]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:178) [na:1.7.0_75]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [na:1.7.0_75]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) [na:1.7.0_75]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) [na:1.7.0_75]
	at java.lang.Thread.run(Thread.java:745) [na:1.7.0_75]
Caused by: javax.mail.MessagingException: Unable to load BODYSTRUCTURE
	at com.sun.mail.imap.IMAPMessage.loadBODYSTRUCTURE(IMAPMessage.java:1306) ~[mail-1.4.7.jar:1.4.7]
	at com.sun.mail.imap.IMAPMessage.getDataHandler(IMAPMessage.java:639) ~[mail-1.4.7.jar:1.4.7]
	at javax.mail.internet.MimeMessage.getContent(MimeMessage.java:1395) ~[thinclient-8.5.0.jar:na]
	at org.apache.camel.component.mail.MailBinding.extractAttachmentsFromMail(MailBinding.java:291) ~[camel-mail-2.15.2.jar:2.15.2]
	at org.apache.camel.component.mail.MailMessage.populateInitialAttachments(MailMessage.java:128) ~[camel-mail-2.15.2.jar:2.15.2]
	... 23 common frames omitted


davsclaus:1461824737:2016-04-28T14:25:37.810+0000:1461824737:2016-04-28T14:25:37.810+0000:We could do a try .. catch to ignore when attempting to check the email for attachments. But this would cause that you cannot get the attachments from those invalid emails.

You cannot even read the mail body. What would you like to be able to do? That Camel has some option to ignore this so the route can process, and then at  the end mark the mail as SEEN so the consumer can pickup the next email?
frossart:1461883120:2016-04-29T06:38:40.642+0000:1461883120:2016-04-29T06:38:40.642+0000:Hello Claus,

That's exactly what we did : caught the exception and flagged the mail as
seen. Then we rename the attached files manually so that the mail can be
processed. The semicolon character is not a forbidden character in a file,
so isn't all this finally a bug in javamail ?

Best regards,

Thierry Frossard
Ingénieur de développement
Flux de données

Tél. 058/758.33.07
www.groupemutuel.ch

davsclaus:1461972588:2016-04-30T07:29:48.406+0000:1461972588:2016-04-30T07:29:48.406+0000:Yes its in java mail that has a bug
davsclaus:1461972629:2016-04-30T07:30:29.095+0000:1461972629:2016-04-30T07:30:29.095+0000:Not a bug in Camel and people can do that workaround as described.
sophie1:1578154968:2020-01-05T00:22:48.329+0000:1578154968:2020-01-05T00:22:48.329+0000:has this java mail bug been fixed?  Otherwise i`m afraid we still need do the same workaround to avoid this bug. Do u know? Thx."
0,CAMEL-9106,Bug,Major,2.15.3,"2.15.6, 2.16.2, 2.17.0","
None
",Resolved,Fixed,"2.15.6, 2.16.2, 2.17.0",Claus Ibsen,Jussi Nupponen,1,4,2015-08-30 15:01:15+00:00,2016-01-09 14:52:12+00:00,"URI option mapMailMessage=true as is the default with Mail Component fetches IMAP-messages without peek=true option. This results to faulty rollback logic since in case of an exception and rollback, messages are already marked with flag SEEN and won't be rolled back to UNSEEN.


Messages are marked with peek-option in processBatch-method but mapping mail messages to Camel messages happens before that method call in createExchanges-method.


I've attached a patch where peek option is set to the messages already in the poll-method which resolves the issue. Unfortunately I couldn't write a proper jUnit test for this scenario since org.jvnet.mock_javamail.Mailbox doesn't seem to support marking messages as SEEN even if they have been fetched.  However, I have attached traces of faulty and fixed run with a test route (that route is also included).","jnupponen:1440918154:2015-08-30T15:02:34.996+0000:1440918154:2015-08-30T15:02:34.996+0000:Patch, traces and example.
pascalschumacher:1451789482:2016-01-03T10:51:22.570+0000:1451789482:2016-01-03T10:51:22.570+0000:Any reasons why this patch was not applied yet?
tdietm:1451789560:2016-01-03T10:52:40.639+0000:1451789560:2016-01-03T10:52:40.639+0000:Sehr geehrte Damen und Herren,

ich bin ab Mo. 4. 1. wieder im Hause und kann Ihre Nachricht erst dann bearbeiten. Ihre Nachricht wird nicht weitergeleitet.

mfg
Thomas Dietmaier.


davsclaus:1452322332:2016-01-09T14:52:12.050+0000:1452322332:2016-01-09T14:52:12.050+0000:Thanks for the patch."
0,CAMEL-9105,Improvement,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Sergey Beryozkin,0,4,2015-08-28 15:56:31+00:00,2015-09-07 14:35:32+00:00,"This is related to CAMEL-9091 except that the optional transformation of Date and also Locale instances can be of use to all of Camel HTTP consumers depending on a Camel transport. It is also likely a cleaner solution because at the CXF component level the headers may be going out to JMS/etc flows


Note the use of type converters will still be possible, however installing a global type converter converting Date to HTTP-friendly rep is deemed sensitive.","sergey_beryozkin:1440748654:2015-08-28T15:57:34.081+0000:1440748654:2015-08-28T15:57:34.081+0000:Resolving this issue will invalidate CAMEL-9091. Patch is on the way
sergey_beryozkin:1441182113:2015-09-02T16:21:53.325+0000:1441182113:2015-09-02T16:21:53.325+0000:The patch:
- updates DefaultHttpBinding to convert Date and Locale instances locally by default
- if ""http.binding.date.locale.conversion"" is explicitly set to false then it delegates to TypeConverters as before.
- test added
- should work with CXF and non-CXF HTTP consumers depending on a Camel transport

The only possible sensitive issue is whether the local conversion should be enabled by default (as in the patch) or disabled by default.

I think reporting a Date value as Date.toString() in HTTP header is basically a bug given that HTTP dates have a different format compared to the one used by Date.toString(). It is also a bug for Locale (see a link in the patch to the relevant HTTP spec section)
If the users do want for some reasons use pure String representations for Date and Locale then they can definitely set headers as needed before they reach DefaultHttpBinding or indeed  enable it to delegate to TypeConverters as before.

So two options:
1. the local conversion should be enabled by default on the trunk given that in most cases it will be the right thing to do at the HTTP Binding level but disable the conversion by default on branches. Make Camel 2.16 migration note that  the local conversion will enabled by default.
2. Keep it disabled by default as before and let users directly enable it.

IMHO option 1 is better - less work for the majority of users. 

 
raulvk:1441201084:2015-09-02T21:38:04.253+0000:1441201084:2015-09-02T21:38:04.253+0000:Hey [~sergey_beryozkin],

Could you please review the attached patch? It only contains the Unit test...

Thanks!
Raúl.
davsclaus:1441595502:2015-09-07T11:11:42.825+0000:1441595502:2015-09-07T11:11:42.825+0000:The .patch file is only the unit test. Dont we need some code changes in the binding class too?
sergey_beryozkin:1441596021:2015-09-07T11:20:21.449+0000:1441596021:2015-09-07T11:20:21.449+0000:Did not use the right git option when both new and existing file context is available, this one is OK
sergey_beryozkin:1441597379:2015-09-07T11:42:59.833+0000:1441597379:2015-09-07T11:42:59.833+0000:And also sorry to Raul for missing on the same question Claus just asked but 4 days ago :-) Used --cached option and ignored the updates to the existing file, was a bit lame :-) 
davsclaus:1441600232:2015-09-07T12:30:32.434+0000:1441600232:2015-09-07T12:30:32.434+0000:Thanks for the patch.
sergey_beryozkin:1441602304:2015-09-07T13:05:04.997+0000:1441602304:2015-09-07T13:05:04.997+0000:Hi, thanks for applying it. I'm not sure if this fix is needed in Camel 2.15.x - 
perhaps it can be merged but the conversion property can be set to Boolean.FALSE by default (with minor related test updates - setting the property will need to be removed from 2 tests which test the default type conversion and but set to TRUE in two local conversion tests) ? That would be very safe...Not sure myself though how important to have this fix in 2.15.x. [~metatech], please comment if it is important or not 
metatech:1441607732:2015-09-07T14:35:32.628+0000:1441607732:2015-09-07T14:35:32.628+0000:Thanks [~sergey_beryozkin]. Regarding the priority of the fix, it is not really urgent, because there is a (temporary) workaround : it is possible to redefine the ""toString"" method on the Date object in the application code to write the date in the format previously used.
"
0,CAMEL-9104,Bug,Major,"2.14.3, 2.15.3",2.16.0,"
None
",Resolved,Fixed,2.16.0,Raúl Kripalani,Raúl Kripalani,0,1,2015-08-27 21:53:06+00:00,2015-08-28 00:16:06+00:00,".setHeader(Exchange.HTTP_PATH, constant(""/my/path""))
.to(""http4://myhost:80?abc=123"")




leads to Camel requesting the following URL:



http://myhost:80?abc=123/my/path




instead of:



http://myhost:80/my/path?abc=123",raulvk:1440690021:2015-08-27T23:40:21.031+0000:1440690021:2015-08-27T23:40:21.031+0000:Could not merge into 2.15.x or 2.14.x due to major differences in camel-http-common.
0,CAMEL-9103,Bug,Minor,2.15.3,,"
None
",Resolved,Information Provided,None,Freeman Yue Fang,Bjørn Hilstad,0,4,2015-08-27 10:26:16+00:00,2019-06-07 15:41:55+00:00,"I am invoking a SOAP 1.1 webservice with WS-Addressing using camel-cxf. When the webservice returns a soapfault that includes a ws-addressing header (<wsa:Action>http://www.w3.org/2005/08/addressing/soap/fault</wsa:Action>) which I believe is allowed per spec (ws-addressing) I can see in logs that cxf processes the response but the response never reaches Camel (would be handled by the DefaultErrorHandler). The thread just hangs forever.
I have been able to get the same test to work if I configure the camel endpoint for cxf to use synchronous=true.
I am attaching a maven project that contains a test that reproduces the issue. The test uses wiremock as a stub to return the response.
If the endpoint in the camelcontext is changed to use synchronous=true the test succeeds (it gets the soapfault that is expected).","bjorn.hilstad:1440642421:2015-08-27T10:27:01.791+0000:1440642421:2015-08-27T10:27:01.791+0000:Reproducer project. Run with ""mvn test""
bjorn.hilstad:1440642587:2015-08-27T10:29:47.260+0000:1440642587:2015-08-27T10:29:47.260+0000:Updated with valid archive.
davsclaus:1461813768:2016-04-28T11:22:48.012+0000:1461813768:2016-04-28T11:22:48.012+0000:Can you upload the attachment as a plain zip so anybody can download.
And try with newer release of Apache Camel.
davsclaus:1489110096:2017-03-10T09:41:36.890+0000:1489110096:2017-03-10T09:41:36.890+0000:Just tried with latest code and its still a problem with CXF 3.1.9
davsclaus:1489111886:2017-03-10T10:11:26.389+0000:1489111886:2017-03-10T10:11:26.389+0000:Its a bug in CXF somewhere where the ClientCallback does not trigger the handleException method to signal it failed
davsclaus:1489112325:2017-03-10T10:18:45.789+0000:1489112325:2017-03-10T10:18:45.789+0000:[~dkulp] I ran this today and it was still a bug. I debugged into ClientImpl of CXF where with synchronous=true it works, and with synchronous=false it does not as reported.

I wonder if the Apache CXF team can take a look
hadrian:1490170935:2017-03-22T16:22:15.507+0000:1490170935:2017-03-22T16:22:15.507+0000:I think I just hit this too in a different context ws-rm related. I'll dig into it.
ffang:1559637078:2019-06-04T16:31:18.255+0000:1559637078:2019-06-04T16:31:18.255+0000:I can still reproduce it with latest CXF 3.3.2, I'd like to take a close look
ffang:1559652424:2019-06-04T20:47:04.834+0000:1559652424:2019-06-04T20:47:04.834+0000:For the async mode, I believe the problem comes from the test soap response itself
currently it's
{code}
<?xml version=""1.0"" encoding=""UTF-8""?>
<env:Envelope xmlns:wsa=""http://www.w3.org/2005/08/addressing"" xmlns:env=""http://schemas.xmlsoap.org/soap/envelope/"">
        <env:Header>
                <wsa:Action>http://www.w3.org/2005/08/addressing/soap/fault</wsa:Action>
        </env:Header>
        <env:Body>
                <env:Fault>
                        <faultcode>env:Client</faultcode>
                        <faultstring>Rejected by policy.</faultstring>
                        <faultactor>urn:nav:ikt:plattform:samhandling:t5_pepgwsbs:OutboundPartnerSecurityGateway</faultactor>
                </env:Fault>
        </env:Body>
</env:Envelope>
{code}

and  per MAPCodec.markPartialResponse method, this message lack of RelatesTo ws-addressing header, so it's a partial response(empty message). And per the spec, reply message must have RelatesTo header, we can see more details from discussion CXF-3916.

If I add a
{code} 
<wsa:RelatesTo>1234567</wsa:RelatesTo>
{code}
header into soapfault.xml, the sync/async behavior are identical. So IMO, this is a testcase problem which uses invalid soap resp message.

Freeman

"
0,CAMEL-9102,Improvement,Trivial,2.15.3,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Bruno Marco Visioli,0,2,2015-08-26 12:38:26+00:00,2015-09-04 08:21:45+00:00,"When creating a CxfEndpoint, setting a loggingSizeLimit -1 to disable limiting payload logging cause no effect due to the code bellow. CXF own LoggingIn/OutInterceptor code accept -1 as unlimited.


org.apache.camel.component.cxf.CxfEndpoint



if (getLoggingSizeLimit() > 0) {
    sfb.getFeatures().add(new LoggingFeature(getLoggingSizeLimit()));
} else {
    sfb.getFeatures().add(new LoggingFeature());
}




org.apache.cxf.feature.LoggingFeature



private static final int DEFAULT_LIMIT = AbstractLoggingInterceptor.DEFAULT_LIMIT;
private static final LoggingInInterceptor IN = new LoggingInInterceptor(DEFAULT_LIMIT);
private static final LoggingOutInterceptor OUT = new LoggingOutInterceptor(DEFAULT_LIMIT);
int limit = DEFAULT_LIMIT;

public LoggingFeature() {}

protected void initializeProvider(InterceptorProvider provider, Bus bus) {
    if (limit == DEFAULT_LIMIT && inLocation == null && outLocation == null && !prettyLogging) {
        provider.getInInterceptors().add(IN);
        provider.getInFaultInterceptors().add(IN);
        provider.getOutInterceptors().add(OUT);
        provider.getOutFaultInterceptors().add(OUT);
    } else {
           //Creates and uses new Interceptors with specified limit
    }




org.apache.cxf.interceptor.LoggingInInterceptor



public LoggingInInterceptor(int lim) {
    this();
    limit = lim;
}

protected void logInputStream(Message message, InputStream is, LoggingMessage buffer, String encoding, String ct) {
(...)
    //only copy up to the limit since that's all we need to log
    //we can stream the rest
    IOUtils.copyAtLeast(bis, bos, limit == -1 ? Integer.MAX_VALUE : limit);","opendulo:1441177038:2015-09-02T14:57:18.468+0000:1441177038:2015-09-02T14:57:18.468+0000:Changed to trivial because using Integer.MAX_VALUE for setLoggingSizeLimit(int limit) has the same result as -1.
githubbot:1441198000:2015-09-02T20:46:40.790+0000:1441198000:2015-09-02T20:46:40.790+0000:GitHub user bmvisioli opened a pull request:

    https://github.com/apache/camel/pull/605

    CAMEL-9102: Changed CxfEndpoint to allow loggingSizeLimit=-1

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/bmvisioli/camel cxf-log-limit

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/605.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #605
    
----
commit e568527f8450071fabfdb33657207860bac7e2f4
Author: Bruno Marco Visioli <bvisioli@stefanini.com>
Date:   2015-09-02T20:21:21Z

    CAMEL-9102: Changed CxfEndpoint to allow loggingSizeLimit=-1 for unlimited log size

commit 538d2dfb1ab95d1301ea64e8382ce724d9c89d6d
Author: Bruno Marco Visioli <bvisioli@stefanini.com>
Date:   2015-09-02T20:40:42Z

    CAMEL-9102: Added loggingSizeLimit >= -1 validation in setLoggingSizeLimit() to avoid further errors

commit e6c08a33c1765d96740e436b74d1043cfed3d95c
Author: Bruno Marco Visioli <bvisioli@stefanini.com>
Date:   2015-09-02T20:45:51Z

    CAMEL-9102: Changed tabs to whitespace for identation

----

opendulo:1441198304:2015-09-02T20:51:44.112+0000:1441198304:2015-09-02T20:51:44.112+0000:Changed the CxfEndpoint to allow using -1 for creating LoggingFeature. Also added a validation for not allowing values less than -2 as that would throw an error inside CXF code.
githubbot:1441326078:2015-09-04T08:21:18.060+0000:1441326078:2015-09-04T08:21:18.060+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/605
"
0,CAMEL-9101,Bug,Major,2.15.2,"2.16.1, 2.17.0","
None
",Resolved,Fixed,"2.16.1, 2.17.0",Andrea Cosentino,Serge Smertin,0,1,2015-08-25 11:31:48+00:00,2015-10-24 08:29:13+00:00,"org.apache.camel.component.rabbitmq.RabbitMQProducer#buildProperties does not remove message headers from exchange after property is set, leading to message header pollution.


so constructs like 



final Object contentType = exchange.getIn().getHeader(RabbitMQConstants.CONTENT_TYPE);
        if (contentType != null) {
            properties.contentType(contentType.toString());
        }




must be rewritten as



final Object contentType = exchange.getIn().removeHeader(RabbitMQConstants.CONTENT_TYPE);
        if (contentType != null) {
            properties.contentType(contentType.toString());
        }




I don't think that these are used in business logic as this is solely transport specific.",
0,CAMEL-9100,Bug,Major,2.15.3,,"
None
",Resolved,Invalid,None,Unassigned,Pavlo Vasylchenko,0,4,2015-08-25 08:49:05+00:00,2015-09-06 12:45:38+00:00,"Class:



import org.apache.camel.test.blueprint.CamelBlueprintTestSupport;
import org.junit.Test;

public class mytest extends CamelBlueprintTestSupport {

    @Test
    public void testBasic() throws Exception {

    }

    @Override
    protected String getBlueprintDescriptor() {
        return this.getClass().getSimpleName() + "".xml"";
    }

}




Blueprint:



<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
	xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
	xsi:schemaLocation=""
       http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
    "">

</blueprint>




During starting test from my class, that extends CamelBlueprintTestSupport, I got exception:



[                          main] CamelBlueprintHelper           INFO  Using Blueprint XML file: /Users/pavlovasylchenko/bin/workspace/tesb-eventlogging/event-logging/event-logging-collector-direct/target/test-classes/mytest.xml
[                      Thread-0] RawBuilder                     INFO  Copy thread finished.
[                          main] mytest                         INFO  ********************************************************************************
[                          main] mytest                         INFO  Testing done: testBasic(org.talend.esb.eventlogging.collector.direct.mytest)
[                          main] mytest                         INFO  Took: 0.376 seconds (376 millis)
[                          main] mytest                         INFO  ********************************************************************************
[                          main] CamelBlueprintHelper           INFO  Deleting work directory target/bundles/1440504089416

java.lang.IncompatibleClassChangeError: Class org.apache.felix.connect.felix.framework.ServiceRegistrationImpl$ServiceReferenceImpl does not implement the requested interface org.osgi.resource.Capability
	at org.apache.felix.connect.felix.framework.capabilityset.CapabilitySet.addCapability(CapabilitySet.java:63)
	at org.apache.felix.connect.felix.framework.ServiceRegistry.registerService(ServiceRegistry.java:124)
	at org.apache.felix.connect.PojoSRBundleContext.registerService(PojoSRBundleContext.java:94)
	at org.apache.felix.connect.PojoSR.<init>(PojoSR.java:239)
	at org.apache.felix.connect.PojoSR.<init>(PojoSR.java:129)
	at org.apache.felix.connect.PojoServiceRegistryFactoryImpl.newPojoServiceRegistry(PojoServiceRegistryFactoryImpl.java:52)
	at org.apache.camel.test.blueprint.CamelBlueprintHelper.createBundleContext(CamelBlueprintHelper.java:143)
	at org.apache.camel.test.blueprint.CamelBlueprintHelper.createBundleContext(CamelBlueprintHelper.java:108)
	at org.apache.camel.test.blueprint.CamelBlueprintTestSupport.createBundleContext(CamelBlueprintTestSupport.java:94)
	at org.apache.camel.test.blueprint.CamelBlueprintTestSupport.setUp(CamelBlueprintTestSupport.java:199)
.....
Process finished with exit code 255","ay:1440479018:2015-08-25T13:03:38.106+0000:1440479018:2015-08-25T13:03:38.106+0000:i suspect your project is pulling osgi-core-4.x.x somehow and that is interfering with felix.connect that is expecting 5.x.


davsclaus:1441409399:2015-09-05T07:29:59.007+0000:1441409399:2015-09-05T07:29:59.007+0000:Please use the user forum / mailing list for help first"
0,CAMEL-9099,Bug,Major,2.15.3,"2.16.0, 2.15.4","
None
",Resolved,Fixed,"2.16.0, 2.15.4",Grzegorz Grzybek,Grzegorz Grzybek,0,1,2015-08-25 07:31:57+00:00,2015-08-25 07:55:05+00:00,"java.lang.ClassNotFoundException: # Licensed to the Apache Software Foundation (ASF) under one or more not found by groovy-all [228]
	at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1556)[org.apache.felix.framework-4.4.1.jar:]
	at org.apache.felix.framework.BundleWiringImpl.access$400(BundleWiringImpl.java:77)[org.apache.felix.framework-4.4.1.jar:]
	at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:1993)[org.apache.felix.framework-4.4.1.jar:]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)[:1.8.0_51]
	at org.apache.felix.framework.Felix.loadBundleClass(Felix.java:1853)[org.apache.felix.framework-4.4.1.jar:]
	at org.apache.felix.framework.BundleImpl.loadClass(BundleImpl.java:958)[org.apache.felix.framework-4.4.1.jar:]
	at org.apache.camel.script.osgi.Activator$BundleScriptEngineResolver.getFactory(Activator.java:229)[230:org.apache.camel.camel-script:2.15.1]
	at org.apache.camel.script.osgi.Activator$BundleScriptEngineResolver.getScriptNames(Activator.java:210)[230:org.apache.camel.camel-script:2.15.1]
	at org.apache.camel.script.osgi.Activator$BundleScriptEngineResolver.access$000(Activator.java:191)[230:org.apache.camel.camel-script:2.15.1]
	at org.apache.camel.script.osgi.Activator.getAvailableScriptNames(Activator.java:118)[230:org.apache.camel.camel-script:2.15.1]
	at org.apache.camel.script.osgi.Activator.updateAvailableScriptLanguages(Activator.java:138)[230:org.apache.camel.camel-script:2.15.1]
	at org.apache.camel.script.osgi.Activator.removedBundle(Activator.java:107)[230:org.apache.camel.camel-script:2.15.1]
	at org.apache.camel.impl.osgi.tracker.BundleTracker$Tracked.customizerRemoved(BundleTracker.java:455)[176:org.apache.camel.camel-core:2.15.1]
	at org.apache.camel.impl.osgi.tracker.AbstractTracked.untrack(AbstractTracked.java:346)[176:org.apache.camel.camel-core:2.15.1]
	at org.apache.camel.impl.osgi.tracker.BundleTracker$Tracked.bundleChanged(BundleTracker.java:413)[176:org.apache.camel.camel-core:2.15.1]
	at org.apache.felix.framework.util.EventDispatcher.invokeBundleListenerCallback(EventDispatcher.java:869)[org.apache.felix.framework-4.4.1.jar:]
	at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:790)[org.apache.felix.framework-4.4.1.jar:]
	at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:515)[org.apache.felix.framework-4.4.1.jar:]
	at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4429)[org.apache.felix.framework-4.4.1.jar:]
	at org.apache.felix.framework.Felix.stopBundle(Felix.java:2528)[org.apache.felix.framework-4.4.1.jar:]
	at org.apache.felix.framework.Felix$RefreshHelper.stop(Felix.java:4859)[org.apache.felix.framework-4.4.1.jar:]
	at org.apache.felix.framework.Felix.refreshPackages(Felix.java:4130)[org.apache.felix.framework-4.4.1.jar:]
	at org.apache.felix.framework.FrameworkWiringImpl.run(FrameworkWiringImpl.java:178)[org.apache.felix.framework-4.4.1.jar:]
	at java.lang.Thread.run(Thread.java:745)[:1.8.0_51]","ggrzybek:1440460505:2015-08-25T07:55:05.433+0000:1440460505:2015-08-25T07:55:05.433+0000:Resolved in:
* [master branch|https://github.com/apache/camel/commit/bc103e141cae698091a3ea2c36ec44471d926486]
* [camel-2.15.x branch|https://github.com/apache/camel/commit/644e013cfda43d67e411847832528c1c23fa5929]"
0,CAMEL-9098,New Feature,Major,None,None,"
None
",Resolved,Fixed,2.18.0,Raúl Kripalani,Raúl Kripalani,3,5,2015-08-25 00:52:00+00:00,2016-09-15 15:11:29+00:00,"Create a camel-hystrix component with the following features:



 Capable of wrapping processors.
 Capable of wrapping static endpoints:
	
 wrapping Endpoint objects.
 wrapping URIs.


 Fluent builders to wrap processors and endpoints.
Support building Hystrix endpoints with URIs.
 Support fallback endpoints and processors.
 Support response caching, where cache key is calculated by Camel Expressions.
 Support suppressing exceptions to avoid fallback via HystrixBadRequestException.
Request collapsing.
 HystrixRequestContext propagation via Camel headers, to allow multiple threads to share the HystrixRequestContext.
Full support in OSGi (Hystrix, Archaius).
Integrate Archaius configuration with Camel property placeholders – if possible – including OSGi Config Admin integration.
Integrate with Turbine to enable the nice Hystrix dashboard.



 = done","raulvk:1440435671:2015-08-25T01:01:11.438+0000:1440435671:2015-08-25T01:01:11.438+0000:Ongoing work in feature/camel-hystrix branch in the ASF repo.
davsclaus:1459065296:2016-03-27T15:54:56.631+0000:1459065296:2016-03-27T15:54:56.631+0000:We need a new SMX bundle as the old one is 1.3.1. And hystrix is on 1.5.1 release

You get an error installing camel-hystrix in osgi
{code}
Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 16.832 sec <<< FAILURE! - in org.apache.camel.itest.karaf.CamelHystrixTest
test(org.apache.camel.itest.karaf.CamelHystrixTest)  Time elapsed: 16.592 sec  <<< ERROR!
org.ops4j.pax.exam.WrappedTestContainerException: [test(org.apache.camel.itest.karaf.CamelHystrixTest): Unable to resolve root: missing requirement [root] osgi.identity; osgi.identity=camel-hystrix; type=karaf.feature; version=""[2.18.0.SNAPSHOT,2.18.0.SNAPSHOT]""; filter:=""(&(osgi.identity=camel-hystrix)(type=karaf.feature)(version>=2.18.0.SNAPSHOT)(version<=2.18.0.SNAPSHOT))"" [caused by: Unable to resolve camel-hystrix/2.18.0.SNAPSHOT: missing requirement [camel-hystrix/2.18.0.SNAPSHOT] osgi.identity; osgi.identity=org.apache.camel.camel-hystrix; type=osgi.bundle; version=""[2.18.0.SNAPSHOT,2.18.0.SNAPSHOT]""; resolution:=mandatory [caused by: Unable to resolve org.apache.camel.camel-hystrix/2.18.0.SNAPSHOT: missing requirement [org.apache.camel.camel-hystrix/2.18.0.SNAPSHOT] osgi.wiring.package; filter:=""(&(osgi.wiring.package=com.netflix.hystrix)(version>=1.4.0)(!(version>=2.0.0)))""]]]
{code}
davsclaus:1459065335:2016-03-27T15:55:35.426+0000:1459065335:2016-03-27T15:55:35.426+0000:[~bibryam] can you log a JIRA at SMX to get them to do a new bundle for new hystrix release.

We can maybe install using wrap until they have a release
bibryam:1459077306:2016-03-27T19:15:06.687+0000:1459077306:2016-03-27T19:15:06.687+0000:I've done that already - SM-2887. Waiting for the bundle to be awailable this month on maven repo.
bibryam:1459748438:2016-04-04T13:40:38.159+0000:1459748438:2016-04-04T13:40:38.159+0000:Claus I've updated the version to point to latest SMX bundle, but when I tried to run a hystrix demo on [OSGI|https://github.com/bibryam/camel-hystrix-demo] I had to install other bundles:

install -s mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.commons-configuration/1.9_2
install -s mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.commons-digester/1.8_4
install -s mvn:org.apache.commons/commons-jexl/2.1.1
install -s mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.commons-jxpath/1.3_1
install -s wrap:mvn:com.netflix.archaius/archaius-core/0.4.1
install -s mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.hystrix/1.4.23_1


I wonder, do we need another SMX bundle for archaius, or is it enough to add those to hystrix feature in Camel?


davsclaus:1459749017:2016-04-04T13:50:17.709+0000:1459749017:2016-04-04T13:50:17.709+0000:Yeah add that to the features so it can install at least.
Then log a SM ticket for that archaius bundle. And until the bundle is released we can use the wrap
acosentino:1459749136:2016-04-04T13:52:16.811+0000:1459749136:2016-04-04T13:52:16.811+0000:I can take care of the bundle [~bibryam] [~davsclaus].

I already have to push the Jnats one.
bibryam:1459749494:2016-04-04T13:58:14.657+0000:1459749494:2016-04-04T13:58:14.657+0000:cool! I'll update the feature then.
davsclaus:1473923489:2016-09-15T15:11:29.424+0000:1473923489:2016-09-15T15:11:29.424+0000:We have a hystrix EIP in the upcoming release.

It would be good to log new tickets based on issues/improvements that can be done on that."
0,CAMEL-9097,New Feature,Minor,None,None,"

aggregate
xslt

",Resolved,Fixed,2.16.0,Raúl Kripalani,Ranil Wijeyratne,0,4,2015-08-21 22:15:51+00:00,2019-05-19 17:13:05+00:00,It would be great to have an built in aggregation strategy that allows to use an xsl stylesheet to aggregate messages.,"githubbot:1440168240:2015-08-21T22:44:00.073+0000:1440168240:2015-08-21T22:44:00.073+0000:GitHub user stravag opened a pull request:

    https://github.com/apache/camel/pull/598

    CAMEL-9097: untested XSLT Aggregation Strategy

    @raulk hi raul as discussed here's my contribution. unfortunately i couldn't run the test. i currently can't build camel-core: ""cannot access LoadBalancerDefinition""
    
    Perhaps we can look into that next week.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/stravag/camel feature/CAMEL-9097

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/598.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #598
    
----
commit 159563c1b76b912a566e4b5986296f9c8fe84ba7
Author: Ranil Wijeyratne <me@ranil.ch>
Date:   2015-08-21T22:21:04Z

    CAMEL-9097: untested XSLT Aggregation Strategy

----

githubbot:1442159992:2015-09-13T23:59:52.988+0000:1442159992:2015-09-13T23:59:52.988+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/598

raulvk:1442160180:2015-09-14T00:03:00.369+0000:1442160180:2015-09-14T00:03:00.369+0000:Hey Ranil,

Thanks a lot for your contribution! I applied it on commit cc71df3100fa47e9c757a1213589e06dddd4a856.

I made a few changes:
* allow the user to set the property in which the new incoming message will be injected via a setter; remove the header for this as in practice the XSLT param name is fixed, so it's OK to specify it at development time.
* added fluent builders.
* added this aggr. strategy to the {{AggregationStrategies}} toobox.
* changed the default property name to {{new-exchange}} to comply with typical XSLT naming
* explicitly specified the Saxon processor in the tests, as Xalan doesn't handle node-set parameters well

Regards,
Raúl.
davsclaus:1442377885:2015-09-16T12:31:25.437+0000:1442377885:2015-09-16T12:31:25.437+0000:This causes many unit tests errors in camel-core - I guess because you add saxon
{code}
Tests in error:
  DefaultNamespaceContextTest>TestSupport.runBare:58->testDefaultNamespaceContextDualNamespaces:79 » UnsupportedOperation
  DefaultNamespaceContextTest>TestSupport.runBare:58->testDefaultNamespaceContextParent:98 » UnsupportedOperation
  DefaultNamespaceContextTest>TestSupport.runBare:58->testDefaultNamespaceContextPre:58 » UnsupportedOperation
  DefaultNamespaceContextTest>TestSupport.runBare:58->testDefaultNamespaceContextEmpty:39 » UnsupportedOperation
  XPathFeatureTest>TestSupport.runBare:58->testXPathResult:46 » NullPointer
  XsltRouteAllowStAXTest>TestSupport.runBare:58->XsltRouteTest.testSendBytesMessage:37->XsltRouteTest.sendMessageAndHaveItTransformed:50 » CamelExecution
  XsltRouteAllowStAXTest>TestSupport.runBare:58->XsltRouteTest.testSendDomMessage:43->XsltRouteTest.sendMessageAndHaveItTransformed:50 » CamelExecution
  XsltRouteAllowStAXTest>TestSupport.runBare:58->XsltRouteTest.testSendStringMessage:33->XsltRouteTest.sendMessageAndHaveItTransformed:50 » CamelExecution
  XsltRouteFileTest>TestSupport.runBare:58->XsltRouteTest.testSendBytesMessage:37->XsltRouteTest.sendMessageAndHaveItTransformed:50 » CamelExecution
  XsltRouteFileTest>TestSupport.runBare:58->XsltRouteTest.testSendDomMessage:43->XsltRouteTest.sendMessageAndHaveItTransformed:50 » CamelExecution
  XsltRouteFileTest>TestSupport.runBare:58->XsltRouteTest.testSendStringMessage:33->XsltRouteTest.sendMessageAndHaveItTransformed:50 » CamelExecution
  XsltRouteTest>TestSupport.runBare:58->testSendBytesMessage:37->sendMessageAndHaveItTransformed:50 » CamelExecution
  XsltRouteTest>TestSupport.runBare:58->testSendDomMessage:43->sendMessageAndHaveItTransformed:50 » CamelExecution
  XsltRouteTest>TestSupport.runBare:58->testSendStringMessage:33->sendMessageAndHaveItTransformed:50 » CamelExecution
  AsyncLoopTest>TestSupport.runBare:58->testExpressionClauseLoop:46->performLoopTest:87->performLoopTest:82 » CamelExecution
  LoopTest>TestSupport.runBare:58->testExpressionClauseLoop:40->performLoopTest:70->performLoopTest:65 » CamelExecution
  ToDynamicLanguageSimpleAndXPathAndHeaderTest>TestSupport.runBare:58->testToDynamic:28 » CamelExecution
  ToDynamicLanguageSimpleAndXPathTest>TestSupport.runBare:58->testToDynamic:28 » CamelExecution
  ToDynamicLanguageXPathTest>TestSupport.runBare:58->testToDynamic:28 » CamelExecution
{code}
raulvk:1442378720:2015-09-16T12:45:20.964+0000:1442378720:2015-09-16T12:45:20.964+0000:Thanks, Claus. I'll have a look. It doesn't break anything in Camel – though. I had to add Saxon because of this old bug in Xalan which affects the unit tests for this new Aggr. Strategy: https://issues.apache.org/jira/browse/XALANJ-2057.
davsclaus:1442378790:2015-09-16T12:46:30.112+0000:1442378790:2015-09-16T12:46:30.112+0000:Okay moving the xslt test to camel-saxon should be the right solution which I am doing now.
raulvk:1442379223:2015-09-16T12:53:43.072+0000:1442379223:2015-09-16T12:53:43.072+0000:Sounds like a plan. Will you take care of it, then? 

Just the test, right? We want the strategy to remain in camel-core so that folks running processors other than Xalan or Saxon can also use it without importing camel-saxon.

Thanks.
davsclaus:1442379321:2015-09-16T12:55:21.977+0000:1442379321:2015-09-16T12:55:21.977+0000:Yep only the test"
0,CAMEL-9096,Improvement,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,1,2015-08-21 11:42:39+00:00,2015-08-22 10:23:03+00:00,"Allow to reuse shared logic for matching best consumer to use for handling an incoming rest when using rest-dsl, and there request may match 1 or more paths.",
0,CAMEL-9095,Wish,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,David J. M. Karlsen,0,3,2015-08-21 11:31:31+00:00,2015-11-22 15:15:22+00:00,Upgrade to latest spring release which is currently 4.2.0.RELEASE,"githubbot:1444947178:2015-10-16T06:12:58.086+0000:1444947178:2015-10-16T06:12:58.086+0000:GitHub user atoulme opened a pull request:

    https://github.com/apache/camel/pull/641

    CAMEL-9095: Upgrade to spring 4.2.x

    I ran tests locally with difficulty, after a few runs it looks like everything passes.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/atoulme/camel CAMEL-9095

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/641.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #641
    
----
commit 9d81e9eed78c8653bb9e04f10aa05353cf6baf60
Author: Antoine Toulme <antoine@lunar-ocean.com>
Date:   2015-10-16T06:11:07Z

    CAMEL-9095: Upgrade to spring 4.2.x

----

githubbot:1445124587:2015-10-18T07:29:47.409+0000:1445124587:2015-10-18T07:29:47.409+0000:Github user atoulme closed the pull request at:

    https://github.com/apache/camel/pull/641

davsclaus:1448176522:2015-11-22T15:15:22.121+0000:1448176522:2015-11-22T15:15:22.121+0000:We have upgraded. Do you mind closing the PR"
0,CAMEL-9094,Bug,Minor,2.15.2,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Thomas Cunningham,0,3,2015-08-20 20:29:40+00:00,2015-09-13 15:41:03+00:00,"Using a custom ftp entry parser on OSGI results in an exception because of the use of Class.forName in commons-net DefaultFTPFileEntryParserFactory :



org.apache.commons.net.ftp.parser.ParserInitializationException: Unknown parser type: com.example.CustomFTPEntryParser
 
        at org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory.createFileEntryParser(DefaultFTPFileEntryParserFactory.java:166)[commons-net:commons-net:3.3]
        at org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory.createFileEntryParser(DefaultFTPFileEntryParserFactory.java:202)[commons-net:commons-net:3.3]
        at org.apache.commons.net.ftp.FTPClient.initiateListParsing(FTPClient.java:3246)[commons-net:commons-net:3.3]
        at org.apache.commons.net.ftp.FTPClient.listFiles(FTPClient.java:2930)[commons-net:commons-net:3.3]
        at org.apache.commons.net.ftp.FTPClient.listFiles(FTPClient.java:2977)[commons-net:commons-net:3.3]
        at org.apache.camel.component.file.remote.FtpOperations.listFiles(FtpOperations.java:779)[org.apache.camel:camel-ftp:2.12.0.redhat-611433]
        at org.apache.camel.component.file.remote.FtpConsumer.doPollDirectory(FtpConsumer.java:91)[org.apache.camel:camel-ftp:2.12.0.redhat-611433]
        at org.apache.camel.component.file.remote.FtpConsumer.pollDirectory(FtpConsumer.java:53)[org.apache.camel:camel-ftp:2.12.0.redhat-611433]
        at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:117)[org.apache.camel:camel-core:2.12.0.redhat-611433 com.googlecode.concurrentlinkedhashmap:concurrentlinkedhashmap-lru:1.4]
        at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:187)[org.apache.camel:camel-core:2.12.0.redhat-611433 com.googlecode.concurrentlinkedhashmap:concurrentlinkedhashmap-lru:1.4]
        at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:114)[org.apache.camel:camel-core:2.12.0.redhat-611433 com.googlecode.concurrentlinkedhashmap:concurrentlinkedhashmap-lru:1.4]
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)[:1.7.0_10]
        at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:351)[:1.7.0_10]
        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:178)[:1.7.0_10]
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:178)[:1.7.0_10]
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)[:1.7.0_10]
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)[:1.7.0_10]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)[:1.7.0_10]
        at java.lang.Thread.run(Thread.java:722)[:1.7.0_10]




Camel can work around this by creating a ParserFactory that is used if Camel is being used in an OSGI environment that simply extends the DefaultFTPFileEntryParserFactory and uses the Camel class resolver rather than Class.forName.","davsclaus:1440109782:2015-08-21T06:29:42.204+0000:1440109782:2015-08-21T06:29:42.204+0000:You are welcome to work on a patch. Though maybe the parser factory should just always be used by Camel, and use its ClassResolver api. Thats the api we use to load classes.
githubbot:1441973622:2015-09-11T20:13:42.787+0000:1441973622:2015-09-11T20:13:42.787+0000:GitHub user cunningt opened a pull request:

    https://github.com/apache/camel/pull/610

    CAMEL-9094 Can't use custom FTPParser on OSGI

    https://issues.apache.org/jira/browse/CAMEL-9094
    
    Use ClassResolver to resolve class instead of Class.forName in DefaultFTPFileEntryParserFactory 

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/cunningt/camel CAMEL-9094

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/610.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #610
    
----
commit 6e1950d349a66298a315a63a0bb1db34fe7db715
Author: cunningt <tcunning@redhat.com>
Date:   2015-09-11T20:12:17Z

    CAMEL-9094 Can't use custom FTPParser on OSGI

----

tcunning:1441973883:2015-09-11T20:18:03.307+0000:1441973883:2015-09-11T20:18:03.307+0000:Submitted a pull :

https://github.com/apache/camel/pull/610/files
githubbot:1442130054:2015-09-13T15:40:54.943+0000:1442130054:2015-09-13T15:40:54.943+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/610

davsclaus:1442130063:2015-09-13T15:41:03.582+0000:1442130063:2015-09-13T15:41:03.582+0000:Thanks for the patch."
0,CAMEL-9093,Improvement,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Akitoshi Yoshida,Akitoshi Yoshida,0,1,2015-08-20 16:06:00+00:00,2015-08-21 08:55:12+00:00,"Currently, the result from the read operation is fully parsed and instantiated as one of the olingo2's object. This is suitable when when you intend to directly access some part of the data using oligno2's API. But if you want to access it later or run some generic processing over it, It will be nice to have an unparsed read mode. Having this mode at the olingo2 component, one can combine the API specific operations and the generic operations.


I am thinking of adding ""uread"" as the unparsed version of ""read"".",
0,CAMEL-9092,Bug,Major,"2.15.2, 2.16.0","2.16.0, 2.15.4","
None
",Closed,Fixed,"2.16.0, 2.15.4",Raúl Kripalani,Tomohisa Igarashi,0,4,2015-08-20 07:00:58+00:00,2015-08-28 15:01:52+00:00,"if clientId is specified, after ActiveMQ broker restart, camel-mqtt consumer starts to receive duplicate messages. Please see the testcase attached.","davsclaus:1440109898:2015-08-21T06:31:38.820+0000:1440109898:2015-08-21T06:31:38.820+0000:Maybe its a ActiveMQ problem?
igarashitm:1440125784:2015-08-21T10:56:24.542+0000:1440125784:2015-08-21T10:56:24.542+0000:Possibly, but so far it can't be reproduced without camel. I tried a plain ActiveMQ testcase with almost same broker settings on ActiveMQ 5.12.0 :
[^MQTTDuplicatesTest.java_activemq]
 but it didn't hit any duplicates. I'm still looking for the root cause, but I'm kind of stuck :(
igarashitm:1440132999:2015-08-21T12:56:39.697+0000:1440132999:2015-08-21T12:56:39.697+0000:[^MQTTDuplicatesTest.java_activemq]

Tweaked to use CallbackConnection for sender as well - still it succeeds, so no duplicate. Note that this testcase depends on mqtt-client connection recovery feature unlike camel-mqtt is doing it by itself.
githubbot:1440544211:2015-08-26T07:10:11.848+0000:1440544211:2015-08-26T07:10:11.848+0000:GitHub user igarashitm opened a pull request:

    https://github.com/apache/camel/pull/601

    CAMEL-9092 MQTT consumer receives duplicate messages after broker res…

    …tart
    
    Listener.onDisconnect() is also invoked when connection recovery occurs in mqtt-client internally, so it shouldn't attempt to reconnect from outside.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igarashitm/camel CAMEL-9092

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/601.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #601
    
----
commit c4b2db9ded98f403f9705c4a56cc9c36f7cdad85
Author: Tomohisa Igarashi <tm.igarashi@gmail.com>
Date:   2015-08-26T07:03:23Z

    CAMEL-9092 MQTT consumer receives duplicate messages after broker restart
    
    Listener.onDisconnect() is also invoked when connection recovery occurs in mqtt-client internally, so it shouldn't attempt to reconnect from outside.

----

igarashitm:1440544597:2015-08-26T07:16:37.819+0000:1440559616:2015-08-26T11:26:56.693+0000:I haven't yet made completely clear why that duplicates happen though, the pull request I submitted did fix the issue. As Listener.onDisconnected() is also invoked when connection recovery happens in mqtt-client internally, -invoking disconnect() due to this event triggers unnecessary connection re-initialization- not really, just doing connected = false without disconnect(), so it's even worse as the old connection is remained open.
I also added setting tracer to MQTT when trace is enabled.
githubbot:1440745099:2015-08-28T14:58:19.965+0000:1440745099:2015-08-28T14:58:19.965+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/601

raulvk:1440745312:2015-08-28T15:01:52.258+0000:1440745312:2015-08-28T15:01:52.258+0000:The {{connected = true}} is OK in {{onConnected()}}.
Where it needed to be removed was from {{onDisconnected()}} because the MQTT client handles its own reconnection. Setting {{connected = false}} was tricking the endpoint into creating yet another connection while the original one was trying to reconnect. I think this led to more than 1 consumer showing up on the topic and hence the appearance of duplicates.

Thanks for the report and the patch, [~igarashitm]. I merged it with the aforementioned change as well as making the {{uri}} param final in the constructor of MQTTEndpoint."
0,CAMEL-9091,Improvement,Minor,None,2.16.0,"
None
",Resolved,Won't Fix,2.16.0,Unassigned,Sergey Beryozkin,1,2,2015-08-19 16:01:15+00:00,2015-09-02 15:52:34+00:00,"CXF converts response Date headers into HTTP friendly format in its own transport code. 


When CXF (jaxrs) endpoints are accessed in Camel routes via Camel Transport (example, from Camel Jetty or Camel Servlet) the Date headers are converted in Camel components using the regular toString converters.
Thus the clients do not receive the expected HTTP-friendly Date representations.


CxfHeaderHelper should convert such Dates by default. The option is to be introduced to avoid the toString() conversion inside Camel CXF and let other components to do it if really needed.


Note that the current CXF Transport code is  wrongly typed to expect the CXF response headers be already converted to String.


The patch updates the conversion code to check Dates, disable the conversion to String all together if really needed, and adds more tests",sergey_beryozkin:1441180354:2015-09-02T15:52:34.579+0000:1441180354:2015-09-02T15:52:34.579+0000:Please watch CAMEL-9105 instead
0,CAMEL-9090,Bug,Trivial,2.14.3,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Zoltan Farkas,0,3,2015-08-19 15:13:22+00:00,2015-08-20 17:58:44+00:00,"The comment implies the dependency is for test purposes:


    <!-- test for cxf failover feature -->
                <dependency>
                                <groupId>org.apache.cxf</groupId>
                                <artifactId>cxf-rt-features-clustering</artifactId>
                                <version>${cxf-version}</version>
                </dependency>","davsclaus:1440023768:2015-08-20T06:36:08.645+0000:1440023768:2015-08-20T06:36:08.645+0000:You are welcome to provide a patch / PR
http://camel.apache.org/contributing
githubbot:1440025500:2015-08-20T07:05:00.049+0000:1440025500:2015-08-20T07:05:00.049+0000:GitHub user davidkarlsen opened a pull request:

    https://github.com/apache/camel/pull/594

    CAMEL-9090: change scope to test for cxf-rt-features-clustering

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/davidkarlsen/camel CAMEL-9090

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/594.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #594
    
----
commit 6a3e233c2aa9460bbe74bd94d438aa8c31b3f71e
Author: David J. M. Karlsen <david@davidkarlsen.com>
Date:   2015-08-20T07:04:07Z

    CAMEL-9090: change scope to test for cxf-rt-features-clustering

----

githubbot:1440064724:2015-08-20T17:58:44.446+0000:1440064724:2015-08-20T17:58:44.446+0000:Github user davidkarlsen closed the pull request at:

    https://github.com/apache/camel/pull/594
"
0,CAMEL-9089,Bug,Major,2.15.2,"2.16.0, 2.15.4","
None
",Resolved,Fixed,"2.16.0, 2.15.4",Claus Ibsen,Hubert Hesse,0,1,2015-08-19 13:18:20+00:00,2015-08-21 07:38:43+00:00,"Configuration of multiple URIs for the same method in a REST service containing wildcards and fixed parts does not work. Example: 



<get uri=""/{uuid}/meta"" ...>
<get uri=""/{uuid}/{channel}"" ...>




This causes ServletRestServletResolveConsumerStrategy.java to identify 2 
consumerPath candidates (lines 70-77), which isn't handled afterwords (line 80). It probably should use the most specific one in this case.",
0,CAMEL-9088,Improvement,Minor,None,None,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,2,2015-08-19 08:00:30+00:00,2015-09-05 07:28:25+00:00,"The camel-pgevent component uses plain statement. We should use PreparedStatement and also close the resources after usage.


Contributions is welcome.","jlindstorff:1440711901:2015-08-28T05:45:01.506+0000:1440711901:2015-08-28T05:45:01.506+0000:Attached a patch that uses prepared statements in a try-with-resource, when performing listen, unlisten and notify.

In the consumer a unlisten is called in relation to the connection shutdown.

If using postgres 9.x there is an function pg_notify which could be better than using notify but I am not sure if requiring postgres 9 is a good trade off.
davsclaus:1441409305:2015-09-05T07:28:25.891+0000:1441409305:2015-09-05T07:28:25.891+0000:Thanks James for the patch.

You are welcome to work on a patch about the pg_notify function. For example there could be a uri option you can configure to turn this on."
0,CAMEL-9087,Bug,Major,2.15.2,None,"

camel-pgevent

",Resolved,Fixed,"2.16.0, 2.15.4",Claus Ibsen,Marek Schmidt,0,2,2015-08-19 06:46:29+00:00,2015-08-19 06:59:19+00:00,"(note, camel-pgevent doesn't seem to have a component listed in JIRA)


Having the following reproducer



@ContextName(""myCdiCamelContext"")
public class MyRoutes extends RouteBuilder {

    @Inject
    @Uri(""pgevent://localhost:5432/postgres/foobar?user=postgres&pass=mysecretpassword"")
    private Endpoint listenEndpoint;

    @Inject
    @Uri(""pgevent://localhost:5432/postgres/foobar?user=postgres&pass=mysecretpassword"")
    private Endpoint notifyEndpoint;

    @Inject
    @Uri(""timer:foo?period=5000"")
    private Endpoint timerEndpoint;

    @Inject
    @Uri(""log:output"")
    private Endpoint resultEndpoint;

    @Inject
    private SomeBean someBean;

    @Override
    public void configure() throws Exception {
        from(timerEndpoint)
                .transform().simple(""hello"")
                .to(notifyEndpoint);

        from(listenEndpoint)
            .to(resultEndpoint);
    }
}




together with



docker run --name some-postgres -p 5432:5432 -e POSTGRES_PASSWORD=mysecretpassword -d postgres




the notify payload is always null



2015-08-19 08:40:51,216 [0 - timer://foo] DEBUG SendProcessor                  - >>>> Endpoint[pgevent://localhost:5432/postgres/foobar?pass=mysecretpassword&user=postgres] Exchange[Message: hello]
2015-08-19 08:40:51,227 [C EventLoop (2)] DEBUG SendProcessor                  - >>>> Endpoint[log://output] Exchange[Message: null]
2015-08-19 08:40:51,228 [C EventLoop (2)] INFO  output                         - Exchange[ExchangePattern: InOnly, BodyType: null, Body: [Body is null]]
2015-08-19 08:40:56,199 [0 - timer://foo] DEBUG SendProcessor                  - >>>> Endpoint[pgevent://localhost:5432/postgres/foobar?pass=mysecretpassword&user=postgres] Exchange[Message: hello]
2015-08-19 08:40:56,200 [C EventLoop (2)] DEBUG SendProcessor                  - >>>> Endpoint[log://output] Exchange[Message: null]
2015-08-19 08:40:56,201 [C EventLoop (2)] INFO  output                         - Exchange[ExchangePattern: InOnly, BodyType: null, Body: [Body is null]]
2015-08-19 08:41:01,199 [0 - timer://foo] DEBUG SendProcessor                  - >>>> Endpoint[pgevent://localhost:5432/postgres/foobar?pass=mysecretpassword&user=postgres] Exchange[Message: hello]
2015-08-19 08:41:01,201 [C EventLoop (2)] DEBUG SendProcessor                  - >>>> Endpoint[log://output] Exchange[Message: null]
2015-08-19 08:41:01,201 [C EventLoop (2)] INFO  output                         - Exchange[ExchangePattern: InOnly, BodyType: null, Body: [Body is null]]




It seems that the camel-pgevent consumer uses 


outOnly.setOut(msg);
instead of 
outOnly.setIn(msg);


and the producer


exchange.getOut()
instead of 
exchange.getIn()",davsclaus:1439938759:2015-08-19T06:59:19.821+0000:1439938759:2015-08-19T06:59:19.821+0000:Thanks for the patch.
0,CAMEL-9086,Improvement,Major,2.15.2,None,"
None
",Resolved,Fixed,"2.15.3, 2.16.0",Jonathan Anstey,Jonathan Anstey,0,1,2015-08-18 13:39:12+00:00,2019-01-02 12:50:42+00:00,Some third party backend systems such as IBM Datapower do not support absolute URIs in HTTP POSTs.,
0,CAMEL-9085,New Feature,Major,None,None,"
None
",Resolved,Fixed,2.17.0,Andrea Cosentino,Andrea Cosentino,0,1,2015-08-18 08:52:43+00:00,2016-02-18 15:54:47+00:00,"Using the Fabric8 Kubernetes/Openshift v3 client.


https://github.com/fabric8io/kubernetes-client","acosentino:1445127743:2015-10-18T08:22:23.275+0000:1445127743:2015-10-18T08:22:23.275+0000:The new component is on master branch.

I leave this issue open just to add the documentation."
0,CAMEL-9084,Bug,Minor,2.15.2,"2.16.0, 2.15.4","
None
",Resolved,Fixed,"2.16.0, 2.15.4",Claus Ibsen,Raphael Parree,0,3,2015-08-17 10:15:50+00:00,2015-08-19 07:00:18+00:00,"The remove implementation wrongfully passed the selectFirst value for the selectLast parameter


see https://github.com/apache/camel/pull/593","githubbot:1439791639:2015-08-17T14:07:19.380+0000:1439791639:2015-08-17T14:07:19.380+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/593

davsclaus:1439938818:2015-08-19T07:00:18.825+0000:1439938818:2015-08-19T07:00:18.825+0000:Thanks for the PR"
0,CAMEL-9083,Task,Minor,2.16.0,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Raúl Kripalani,0,3,2015-08-14 18:41:52+00:00,2016-03-23 08:38:50+00:00,"karaf@root> features:install camel-aws
karaf@root> features:install camel-groovy
karaf@root> features:install camel-hazelcast
Error executing command: Can't install feature camel-hazelcast/0.0.0:
Could not start bundle mvn:com.hazelcast/hazelcast/3.5.1 in feature(s) camel-hazelcast-2.16-SNAPSHOT, camel-vertx-2.16-SNAPSHOT: Activator start error in bundle com.hazelcast [79].




Where camel-hazelcast throws this exception:



Caused by: org.osgi.framework.BundleException: Activator start error in bundle com.hazelcast [188].
	at org.apache.felix.framework.Felix.activateBundle(Felix.java:2204)
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2072)
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:976)
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:963)
	at org.apache.karaf.shell.osgi.InstallBundle.doExecute(InstallBundle.java:51)
	... 17 more
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.7.0_79]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)[:1.7.0_79]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)[:1.7.0_79]
	at java.lang.reflect.Method.invoke(Method.java:606)[:1.7.0_79]
	at com.hazelcast.internal.osgi.Activator.activateJavaxScripting(Activator.java:70)
	at com.hazelcast.internal.osgi.Activator.start(Activator.java:46)
	at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:645)
	at org.apache.felix.framework.Felix.activateBundle(Felix.java:2154)
	... 21 more
Caused by: java.lang.NoSuchMethodError: javax.script.ScriptEngineManager.setBindings(Ljavax/script/Bindings;)V
	at com.hazelcast.internal.osgi.OSGiScriptEngineManager.createScriptEngineManager(OSGiScriptEngineManager.java:262)
	at com.hazelcast.internal.osgi.OSGiScriptEngineManager.findManagers(OSGiScriptEngineManager.java:235)
	at com.hazelcast.internal.osgi.OSGiScriptEngineManager.<init>(OSGiScriptEngineManager.java:87)
	at com.hazelcast.internal.osgi.ScriptEngineActivator.registerOsgiScriptEngineManager(ScriptEngineActivator.java:44)
	... 29 more




This issue only occurs when certain other bundles are installed. In the above example, either one of camel-aws or camel-groovy are dragging some dependencies related to scripting (likely camel-groovy) that the Hazelcast library doesn't like. Probably because Hazelcast doesn't specify a version range in their javax.script import:



[...]
Bundle-Vendor = Hazelcast, Inc.
Bundle-Activator = com.hazelcast.internal.osgi.Activator
Bundle-Name = hazelcast
Bundle-DocURL = http://www.hazelcast.com/
Bundle-Description = Core Hazelcast Module
Bundle-SymbolicName = com.hazelcast
Bundle-Version = 3.5.1
Bundle-License = http://www.apache.org/licenses/LICENSE-2.0.txt
Bundle-ManifestVersion = 2
[...]
Import-Package =
[...]
	javax.script,
[...]




We'll have to investigate further and perhaps open a ticket at Hazelcast.","acosentino:1442969648:2015-09-23T08:54:08.167+0000:1442969648:2015-09-23T08:54:08.167+0000:With Karaf 4.0.1 and Hazelcast 3.5.2 (actual version on Camel master branch), everything seems ok.
davsclaus:1443478742:2015-09-29T06:19:02.912+0000:1443478742:2015-09-29T06:19:02.912+0000:Fails with karaf 2.4.3
{code}
davsclaus:/opt/apache-karaf-2.4.3/$ bin/karaf
        __ __                  ____
       / //_/____ __________ _/ __/
      / ,<  / __ `/ ___/ __ `/ /_
     / /| |/ /_/ / /  / /_/ / __/
    /_/ |_|\__,_/_/   \__,_/_/

  Apache Karaf (2.4.3)

Hit '<tab>' for a list of available commands
and '[cmd] --help' for help on a specific command.
Hit '<ctrl-d>' or type 'osgi:shutdown' or 'logout' to shutdown Karaf.

karaf@root> features:chooseurl camel 2.16-SNAPSHOT
Adding feature url mvn:org.apache.camel.karaf/apache-camel/2.16-SNAPSHOT/xml/features
karaf@root> features:install camel-aws
karaf@root> features:install camel-groovy
karaf@root>  features:install camel-hazelcast
Error executing command: Can't install feature camel-hazelcast/0.0.0:
Could not start bundle mvn:com.hazelcast/hazelcast/3.5.2 in feature(s) camel-hazelcast-2.16-SNAPSHOT, camel-vertx-2.16-SNAPSHOT: Activator start error in bundle com.hazelcast [79].
karaf@root>
{code}
davsclaus:1443478862:2015-09-29T06:21:02.432+0000:1443478862:2015-09-29T06:21:02.432+0000:Yes its a bug in hazelcast. Raul, would you report it to them?
davsclaus:1443478930:2015-09-29T06:22:10.093+0000:1443478930:2015-09-29T06:22:10.093+0000:The workaround is to install hazelcast first
{code}
karaf@root> features:chooseurl camel 2.16-SNAPSHOT
Adding feature url mvn:org.apache.camel.karaf/apache-camel/2.16-SNAPSHOT/xml/features
karaf@root>  features:install camel-hazelcast
karaf@root>  features:install camel-groovy
karaf@root>  features:install camel-aws
{code}
davsclaus:1458693523:2016-03-23T08:38:43.115+0000:1458693523:2016-03-23T08:38:43.115+0000:Works fine now

karaf@root()> feature:install camel
karaf@root()> feature:install camel-aws
karaf@root()> feature:install camel-groovy
karaf@root()> feature:install camel-hazelcast
karaf@root()>"
0,CAMEL-9082,Task,Minor,None,None,"
None
",Resolved,Fixed,2.16.0,Raúl Kripalani,Raúl Kripalani,0,1,2015-08-14 18:22:34+00:00,2015-08-14 18:39:53+00:00,SMX team released a new version of the specs a few months ago. We should upgrade to it.,"raulvk:1439548619:2015-08-14T18:36:59.609+0000:1439548706:2015-08-14T18:38:26.283+0000:After the upgrade, on Karaf 2.4.3, all OK except camel-hazelcast (see below, it also failed with specs 2.4.0 when other bundles dragged in their deps):

{code}
karaf@root> features:install camel-aws
karaf@root> features:install camel-groovy
karaf@root> features:install camel-hazelcast
Error executing command: Can't install feature camel-hazelcast/0.0.0:
Could not start bundle mvn:com.hazelcast/hazelcast/3.5.1 in feature(s) camel-hazelcast-2.16-SNAPSHOT, camel-vertx-2.16-SNAPSHOT: Activator start error in bundle com.hazelcast [79].
karaf@root> features:install camel-hbase
karaf@root> features:install camel-script-jruby
karaf@root> features:install camel-script-javascript
karaf@root> features:install camel-script-groovy
karaf@root> features:install camel-script
karaf@root> features:install camel-sip
karaf@root> features:install camel-soap
karaf@root> features:install camel-core
karaf@root> features:install xml-specs-api
{code}

Where camel-hazelcast throws this exception:

{code}
aused by: org.osgi.framework.BundleException: Activator start error in bundle com.hazelcast [188].
	at org.apache.felix.framework.Felix.activateBundle(Felix.java:2204)
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2072)
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:976)
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:963)
	at org.apache.karaf.shell.osgi.InstallBundle.doExecute(InstallBundle.java:51)
	... 17 more
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.7.0_79]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)[:1.7.0_79]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)[:1.7.0_79]
	at java.lang.reflect.Method.invoke(Method.java:606)[:1.7.0_79]
	at com.hazelcast.internal.osgi.Activator.activateJavaxScripting(Activator.java:70)
	at com.hazelcast.internal.osgi.Activator.start(Activator.java:46)
	at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:645)
	at org.apache.felix.framework.Felix.activateBundle(Felix.java:2154)
	... 21 more
Caused by: java.lang.NoSuchMethodError: javax.script.ScriptEngineManager.setBindings(Ljavax/script/Bindings;)V
	at com.hazelcast.internal.osgi.OSGiScriptEngineManager.createScriptEngineManager(OSGiScriptEngineManager.java:262)
	at com.hazelcast.internal.osgi.OSGiScriptEngineManager.findManagers(OSGiScriptEngineManager.java:235)
	at com.hazelcast.internal.osgi.OSGiScriptEngineManager.<init>(OSGiScriptEngineManager.java:87)
	at com.hazelcast.internal.osgi.ScriptEngineActivator.registerOsgiScriptEngineManager(ScriptEngineActivator.java:44)
	... 29 more
{code}

This issue only occurs when certain other bundles are installed, either one of camel-aws or camel-groovy are dragging some dependencies related to scripting (likely camel-groovy) that the Hazelcast library doesn't like. Probably because they don't specify a version range in their javax.script import:

{code}
[...]
Bundle-Vendor = Hazelcast, Inc.
Bundle-Activator = com.hazelcast.internal.osgi.Activator
Bundle-Name = hazelcast
Bundle-DocURL = http://www.hazelcast.com/
Bundle-Description = Core Hazelcast Module
Bundle-SymbolicName = com.hazelcast
Bundle-Version = 3.5.1
Bundle-License = http://www.apache.org/licenses/LICENSE-2.0.txt
Bundle-ManifestVersion = 2
[...]
Import-Package =
[...]
	javax.script,
[...]
{code}

We'll have to investigate further and perhaps open a ticket at Hazelcast.

I'll open a ticket to investigate first on our side.

But since this issue was also present with specs 2.4.0, the problem is not caused by upgrading to specs 2.5.0.
raulvk:1439548793:2015-08-14T18:39:53.228+0000:1439548793:2015-08-14T18:39:53.228+0000:Change pushed in cdbdfb5c15438b4852e8267db3176fa017953a90."
0,CAMEL-9081,New Feature,Minor,None,,"
None
",Resolved,Won't Fix,None,Claus Ibsen,Raphael Parree,0,2,2015-08-14 14:47:29+00:00,2015-08-19 07:01:15+00:00,"I was thinking of adding an AdviceWithRouteBuilder implementation for Scala (e.g, ScalaAdviceWithRouteBuilder). As far as i understand the API, the weave*/replace etc methods return a single ProcessorDefinition. The Scala API only has org.apache.camel.scala.dsl.DSL where each keyword returns the DSL again. 


If my assumption is correct than that whole DSL part would need refactoring. Feels quite invasive. 


Are my assumptions correct?","davsclaus:1439938866:2015-08-19T07:01:06.257+0000:1439938866:2015-08-19T07:01:06.257+0000:The advice with is for unit testing, and is not intended as part of the scala-dsl. There is also no advice with for groovy dsl etc."
0,CAMEL-9080,Task,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Andrea Cosentino,James Netherton,0,4,2015-08-13 13:34:14+00:00,2015-09-15 19:43:48+00:00,"It'd be good to bump Elasticsearch to the latest 1.7.1 version. This would also necessitate a Lucene upgrade to 4.10.4.


I think this impacts:


camel-lucene
camel-solr (for tests)
camel-jcr looks to be fixed at 3.x for jackrabbit, so I presume this can stay as is?


I saw that CAMEL-8605 proposed upgrading to Lucene 5.x. If we want Lucene version alignment across components, I think 4.10.4 is the best we can do for now.","acosentino:1439705915:2015-08-16T14:18:35.872+0000:1439705937:2015-08-16T14:18:57.087+0000:Upgrading to Lucene 4.10.4, Solr 4.10.4 and Elasticsearch 1.7.1 seems to be ok.

We need the Lucene bundle 4.10.4 and Solr bundle 4.10.4. It seems SMX guys lost the release of these version. I'll open two tickets to make them available.

Anyway the elasticsearch camel-itest-karaf works corretcly with the Elasticsearch 1.7.1 bundle and Lucene 4.10.3 bundle.

I think I'll wait the 4.10.4 bundle release for Lucene and Solr to push the commit.


acosentino:1439706277:2015-08-16T14:24:37.409+0000:1439706291:2015-08-16T14:24:51.403+0000:James has already opened the two tickets for:

Solr 4.10.4
https://issues.apache.org/jira/browse/SM-2646

Lucene 4.10.4
https://issues.apache.org/jira/browse/SM-2644

and they are already resolved. We just need to wait for the bundles release.

James, feel free to open a PR with these dependencies upgrade, whenever the bundle will be available. I'll remove myself as assignee if you want to work on these tickets :-)
jamesnetherton:1439714981:2015-08-16T16:49:41.491+0000:1439714981:2015-08-16T16:49:41.491+0000:Hi Andrea. I'm happy to work on this, so assign the issue to me if you want.

I actually already have the changes made on my own Camel fork. Once we have the bundles release I'll raise a PR.
acosentino:1439715739:2015-08-16T17:02:19.537+0000:1439715739:2015-08-16T17:02:19.537+0000:I can't assign the issue directly to you, but I can remove myself :-)

Thank you for your contribution :-)

Andrea
davsclaus:1441590002:2015-09-07T09:40:02.689+0000:1441590002:2015-09-07T09:40:02.689+0000:Hi

Any update on this. We love contributions.
jamesnetherton:1441598904:2015-09-07T12:08:24.100+0000:1441598904:2015-09-07T12:08:24.100+0000:Waiting on releases for Solor / Lucene bundles. Once we have this, I'll be able to submit a PR.
githubbot:1442303855:2015-09-15T15:57:35.198+0000:1442303855:2015-09-15T15:57:35.198+0000:GitHub user jamesnetherton opened a pull request:

    https://github.com/apache/camel/pull/614

    [CAMEL-9080] Upgrade Elasticsearch to 1.7.1

    This also upgrades Lucene and Solr to 4.10.4.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jamesnetherton/camel CAMEL-9080

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/614.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #614
    
----
commit 3698b960ebb424f1eb3a929edada5ccf90d88909
Author: James Netherton <jamesnetherton@gmail.com>
Date:   2015-08-14T13:30:43Z

    [CAMEL-9080] Upgraded Elasticsearch to 1.7.1. Also upgraded Lucene and Solr to 4.10.4

----

githubbot:1442317428:2015-09-15T19:43:48.167+0000:1442317428:2015-09-15T19:43:48.167+0000:Github user jamesnetherton closed the pull request at:

    https://github.com/apache/camel/pull/614
"
0,CAMEL-9079,Bug,Minor,2.15.2,"2.16.0, 2.15.4","
None
",Resolved,Not A Problem,"2.16.0, 2.15.4",Claus Ibsen,Claus Ibsen,0,1,2015-08-13 13:03:09+00:00,2015-08-13 13:43:21+00:00,"See nabble
http://camel.465427.n5.nabble.com/Inconsistent-return-from-XpathBuilder-evaluate-tp5770576.html",davsclaus:1439444601:2015-08-13T13:43:21.332+0000:1439444601:2015-08-13T13:43:21.332+0000:It was actually not a bug. I have improved the javadoc of those methods.
0,CAMEL-9078,Improvement,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,1,2015-08-13 08:11:20+00:00,2015-08-13 08:42:40+00:00,"See SO
http://stackoverflow.com/questions/31980769/how-can-i-add-failover-in-custom-load-balancer?noredirect=1#comment51870781_31980769


It should be possible for people to say, successStatusCodeRange=200-200 to let only 200 be success, and eg 200-209 for that range etc.",
0,CAMEL-9077,Task,Minor,None,,"
None
",Resolved,Not A Bug,None,Luca Burgazzoli,Claus Ibsen,0,3,2015-08-13 08:02:36+00:00,2016-03-03 16:22:24+00:00,"See SO
http://stackoverflow.com/questions/31966249/camel-bindy-issues-with-integer-format-and-link-annotation


If people use bindy out of the box it should output numbers as plain numbers eg 1234 is 1234, and not 1,234.


Its only for decimal numbers you may want to use either comma or dot.","githubbot:1456801962:2016-03-01T11:12:42.601+0000:1456801962:2016-03-01T11:12:42.601+0000:GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/875

    CAMEL-9077 - camel-bindy - Wonder if it outputs numbers using thousand separators

    It does not appear to happen anymore, however I've added a test case 

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel CAMEL-9077

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/875.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #875
    
----
commit aa4f8a5937615b39f3ea018f7f487de386f6a3a1
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-03-01T11:08:39Z

    CAMEL-9077 - camel-bindy - Wonder if it outputs numbers using thousand separators

----

lb:1456801977:2016-03-01T11:12:57.722+0000:1456801977:2016-03-01T11:12:57.722+0000:It does not appear to happen anymore, however I've added a test case
githubbot:1456993231:2016-03-03T16:20:31.716+0000:1456993231:2016-03-03T16:20:31.716+0000:Github user lburgazzoli closed the pull request at:

    https://github.com/apache/camel/pull/875

lb:1456993344:2016-03-03T16:22:24.078+0000:1456993344:2016-03-03T16:22:24.078+0000:Not a bug in the latest version of camel"
0,CAMEL-9076,Bug,Major,2.15.3,2.15.4,"
None
",Resolved,Fixed,2.15.4,Claus Ibsen,Tomohisa Igarashi,0,3,2015-08-13 02:15:08+00:00,2015-08-13 09:50:23+00:00,"Freemarker 2.3.20 is specified for karaf bundle while camel-freemarker requires freemarker 2.3.21. It needs alignment.



ERROR: Bundle camel-freemarker-version-mismatch [80] EventDispatcher: Error during dispatch. (java.lang.NoSuchFieldError: VERSION_2_3_21)
java.lang.NoSuchFieldError: VERSION_2_3_21
	at org.apache.camel.component.freemarker.FreemarkerComponent.getConfiguration(FreemarkerComponent.java:74)
	at org.apache.camel.component.freemarker.FreemarkerComponent.createEndpoint(FreemarkerComponent.java:48)
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:114)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:558)
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:79)
	at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:200)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:107)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:113)
	at org.apache.camel.model.SendDefinition.resolveEndpoint(SendDefinition.java:62)
	at org.apache.camel.model.SendDefinition.createProcessor(SendDefinition.java:56)
	at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:505)
	at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:217)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:1025)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:185)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:841)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:2911)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:2634)
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:167)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2483)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2479)
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:2502)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:2479)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:2448)
	at org.apache.camel.blueprint.BlueprintCamelContext.start(BlueprintCamelContext.java:180)
	at org.apache.camel.blueprint.BlueprintCamelContext.maybeStart(BlueprintCamelContext.java:212)
	at org.apache.camel.blueprint.BlueprintCamelContext.serviceChanged(BlueprintCamelContext.java:150)
	at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:943)
	at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:794)
	at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:544)
	at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4445)
	at org.apache.felix.framework.Felix.registerService(Felix.java:3431)
	at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:346)
	at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:353)
	at org.apache.camel.blueprint.BlueprintCamelContext.init(BlueprintCamelContext.java:100)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:297)
	at org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:958)
	at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:712)
	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate2(BeanRecipe.java:824)
	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:787)
	at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:79)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:88)
	at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:245)
	at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:183)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:682)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:377)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:269)
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:294)
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:263)
	at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:253)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:500)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:433)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:725)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:463)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:422)
	at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1127)
	at org.apache.felix.framework.util.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:696)
	at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:484)
	at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4429)
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2100)
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:976)
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:963)
	at org.apache.karaf.shell.osgi.InstallBundle.doExecute(InstallBundle.java:51)
	at org.apache.karaf.shell.console.OsgiCommandSupport.execute(OsgiCommandSupport.java:38)
	at org.apache.felix.gogo.commands.basic.AbstractCommand.execute(AbstractCommand.java:35)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.aries.proxy.impl.ProxyHandler$1.invoke(ProxyHandler.java:54)
	at org.apache.aries.proxy.impl.ProxyHandler.invoke(ProxyHandler.java:119)
	at org.apache.karaf.shell.console.commands.$BlueprintCommand928158108.execute(Unknown Source)
	at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:78)
	at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:477)
	at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:403)
	at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)
	at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:92)
	at org.apache.karaf.shell.console.jline.Console.run(Console.java:195)
	at java.lang.Thread.run(Thread.java:745)","githubbot:1439403511:2015-08-13T02:18:31.620+0000:1439403511:2015-08-13T02:18:31.620+0000:GitHub user igarashitm opened a pull request:

    https://github.com/apache/camel/pull/592

    CAMEL-9076 camel-freemarker version mismatch on karaf

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igarashitm/camel CAMEL-9076

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/592.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #592
    
----
commit 89348bc57217db30c78f2d848300aec906518dd7
Author: Tomohisa Igarashi <tm.igarashi@gmail.com>
Date:   2015-08-13T02:16:10Z

    CAMEL-9076 camel-freemarker version mismatch on karaf

----

igarashitm:1439403906:2015-08-13T02:25:06.792+0000:1439403906:2015-08-13T02:25:06.792+0000:A reproducer is here - https://github.com/igarashitm/switchyard-issues/tree/master/camel-freemarker-version-mismatch
davsclaus:1439426895:2015-08-13T08:48:15.940+0000:1439426895:2015-08-13T08:48:15.940+0000:Thanks for the patch.
githubbot:1439430623:2015-08-13T09:50:23.649+0000:1439430623:2015-08-13T09:50:23.649+0000:Github user igarashitm closed the pull request at:

    https://github.com/apache/camel/pull/592
"
0,CAMEL-9075,Bug,Minor,2.14.3,,"
None
",Resolved,Cannot Reproduce,None,Unassigned,Elyran Kogan,0,2,2015-08-12 14:36:53+00:00,2016-05-05 15:07:25+00:00,"I have a shared worker pool that I'm using for all my producers. I have a server that sends requests to a single domain - using camel netty4-http


when running a small load test, no more than 20 requests per sec, I see that some of the requests (about 1%) are timed out and then the netty producer sends a ConnectException: (code snipped from NettyProducer class


 if (!channelFuture.isDone() || !channelFuture.isSuccess()) {
        ConnectException cause = new ConnectException(""Cannot connect to "" + configuration.getAddress());
I did a tcp dump and saw that the requests that were timed out were never sent from the server - there was no TCP request that was made.


the request is simply not sent and there is no indication as to why or what is the problem - except a timeout on something that causes the ConnectException  to appear


I don't know if it is related, but I'm sending the requests using a routing slip","davsclaus:1443479053:2015-09-29T06:24:13.511+0000:1443479053:2015-09-29T06:24:13.511+0000:Try with latest release and also provide more details what you mean by shared worker pool, and what you do in that routing slip
davsclaus:1462432045:2016-05-05T15:07:25.425+0000:1462432045:2016-05-05T15:07:25.425+0000:Upgrade and try again."
0,CAMEL-9044,Improvement,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Andrea Cosentino,Andrea Cosentino,0,1,2015-08-01 08:06:12+00:00,2015-08-01 08:19:00+00:00,"As for https://issues.apache.org/jira/browse/CAMEL-8942


we need to make easier the http proxy configuration for aws-sns too.",
0,CAMEL-9043,Bug,Minor,2.15.2,"2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.15.3, 2.16.0",Tomas Rohovsky,Tomas Rohovsky,0,2,2015-07-31 17:58:01+00:00,2015-08-03 10:07:47+00:00,Cannot deploy camel-example-cxf-osgi because of wrong Import-Package requirement. Expression for output filename is not evaluated properly in both examples.,"trohovsky:1438337744:2015-07-31T18:15:44.854+0000:1438337744:2015-07-31T18:15:44.854+0000:https://github.com/apache/camel/pull/582
githubbot:1438567272:2015-08-03T10:01:12.504+0000:1438567272:2015-08-03T10:01:12.504+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/582
"
0,CAMEL-9042,Task,Trivial,2.15.2,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Tomas Turek,0,1,2015-07-31 12:38:53+00:00,2015-08-05 09:40:19+00:00,Option consumer.delay in documentaion of camel-atom  has  incorrect default value 60000 but correct value is 500.,
0,CAMEL-9041,Wish,Minor,None,,"
None
",Resolved,Invalid,None,Unassigned,Sergey,0,2,2015-07-31 12:22:11+00:00,2015-08-04 14:02:35+00:00,"Its not clear from component documentation how to reuse the same port when running on karaf. For example, webconsole and hawtion using port 8181, but if I try to specify jetty endpoint as:



<endpoint id=""jetty-ep"" uri=""jetty:http://0.0.0.0:8181/suffix?matchOnUriPrefix=true""/>




then I've got an error during endpoint init (java.net.BindException: Address already in use).","davsclaus:1438667104:2015-08-04T13:45:04.420+0000:1438667104:2015-08-04T13:45:04.420+0000:Please use the user forum / user mailing list for asking questions on how to use Camel.
cp123:1438668155:2015-08-04T14:02:35.499+0000:1438668155:2015-08-04T14:02:35.499+0000:Claus, 

I agree about forum/mailing list, but camel *documentation* is a bit unclear anyway in this case. 

Try to look at camel-jetty component page having in mind what you don't know anything about it. There is *nothing* about port number at all. There is no link to similar (but different) camel-servlet component, and no any description when each of two components should be used."
0,CAMEL-9040,Bug,Critical,"2.15.1, 2.15.2",2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Ralf Steppacher,1,4,2015-07-31 12:16:58+00:00,2016-05-04 12:10:12+00:00,"In a reverse-proxy with multiple routes that utilize the netty4-http component both as the consumer and producer I am receiving the following error:



2015-07-30 11:52:34,416 | ERROR | yServerTCPWorker | ResourceLeakDetector             | 97 - io.netty.common - 4.0.27.Final |   | LEAK: ByteBuf.release() was not called before it's garbage-collected. See http://netty.io/wiki/reference-counted-objects.html for more information.




Setting the Netty leak reporting to paranoid (-Dio.netty.leakDetectionLevel=paranoid) yields an error for almost every request (it probably is 1:1). 
The stacktraces come in two variants. Variant 1 is far less frequent than variant 2.


Variant 1:



Recent access records: 0
Created at:
io.netty.buffer.CompositeByteBuf.<init>(CompositeByteBuf.java:60)
io.netty.buffer.Unpooled.compositeBuffer(Unpooled.java:353)
io.netty.handler.codec.http.HttpObjectAggregator.decode(HttpObjectAggregator.java:153)
io.netty.handler.codec.http.HttpObjectAggregator.decode(HttpObjectAggregator.java:54)
io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:89)
io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:339)
io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:324)
io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:242)
io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:147)
io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:339)
io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:324)
io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:847)
io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:131)
io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:511)
io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:468)
io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:382)
io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:354)
io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:111)
java.lang.Thread.run(Thread.java:745)




Variant 2:



Recent access records: 5
#5:
io.netty.buffer.AdvancedLeakAwareByteBuf.getBytes(AdvancedLeakAwareByteBuf.java:223)
io.netty.buffer.CompositeByteBuf.getBytes(CompositeByteBuf.java:684)
io.netty.buffer.CompositeByteBuf.getBytes(CompositeByteBuf.java:40)
io.netty.buffer.AbstractByteBuf.readBytes(AbstractByteBuf.java:677)
io.netty.buffer.CompositeByteBuf.readBytes(CompositeByteBuf.java:1493)
io.netty.buffer.CompositeByteBuf.readBytes(CompositeByteBuf.java:40)
io.netty.buffer.ByteBufInputStream.read(ByteBufInputStream.java:120)
java.io.BufferedInputStream.fill(BufferedInputStream.java:235)
java.io.BufferedInputStream.read1(BufferedInputStream.java:275)
java.io.BufferedInputStream.read(BufferedInputStream.java:334)
org.bouncycastle.util.io.TeeInputStream.read(Unknown Source)
com.ctc.wstx.io.BaseReader.readBytes(BaseReader.java:155)
com.ctc.wstx.io.UTF8Reader.loadMore(UTF8Reader.java:368)
com.ctc.wstx.io.UTF8Reader.read(UTF8Reader.java:111)
com.ctc.wstx.io.ReaderBootstrapper.initialLoad(ReaderBootstrapper.java:250)
com.ctc.wstx.io.ReaderBootstrapper.bootstrapInput(ReaderBootstrapper.java:133)
com.ctc.wstx.stax.WstxInputFactory.doCreateSR(WstxInputFactory.java:545)
com.ctc.wstx.stax.WstxInputFactory.createSR(WstxInputFactory.java:605)
com.ctc.wstx.stax.WstxInputFactory.createSR(WstxInputFactory.java:628)
com.ctc.wstx.stax.WstxInputFactory.createXMLStreamReader(WstxInputFactory.java:331)
ch.vivates.pep.stream.ResponseStatusFilter.filter(ResponseStatusFilter.java:41)
ch.vivates.pep.stream.BaseStreamFilter.run(BaseStreamFilter.java:141)
java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
java.util.concurrent.FutureTask.run(FutureTask.java:262)
java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
java.lang.Thread.run(Thread.java:745)
#4:
io.netty.buffer.AdvancedLeakAwareByteBuf.release(AdvancedLeakAwareByteBuf.java:45)
io.netty.handler.codec.http.DefaultHttpContent.release(DefaultHttpContent.java:72)
io.netty.util.ReferenceCountUtil.release(ReferenceCountUtil.java:59)
io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:91)
io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:339)
io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:324)
io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:242)
io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:147)
io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:339)
io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:324)
io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:847)
io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:131)
io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:511)
io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:468)
io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:382)
io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:354)
io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:111)
java.lang.Thread.run(Thread.java:745)
#3:
io.netty.buffer.AdvancedLeakAwareByteBuf.slice(AdvancedLeakAwareByteBuf.java:73)
io.netty.buffer.CompositeByteBuf.addComponent0(CompositeByteBuf.java:170)
io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:112)
io.netty.handler.codec.http.HttpObjectAggregator.decode(HttpObjectAggregator.java:191)
io.netty.handler.codec.http.HttpObjectAggregator.decode(HttpObjectAggregator.java:54)
io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:89)
io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:339)
io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:324)
io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:242)
io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:147)
io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:339)
io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:324)
io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:847)
io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:131)
io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:511)
io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:468)
io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:382)
io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:354)
io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:111)
java.lang.Thread.run(Thread.java:745)
#2:
io.netty.buffer.AdvancedLeakAwareByteBuf.order(AdvancedLeakAwareByteBuf.java:63)
io.netty.buffer.CompositeByteBuf.addComponent0(CompositeByteBuf.java:170)
io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:112)
io.netty.handler.codec.http.HttpObjectAggregator.decode(HttpObjectAggregator.java:191)
io.netty.handler.codec.http.HttpObjectAggregator.decode(HttpObjectAggregator.java:54)
io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:89)
io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:339)
io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:324)
io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:242)
io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:147)
io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:339)
io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:324)
io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:847)
io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:131)
io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:511)
io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:468)
io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:382)
io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:354)
io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:111)
java.lang.Thread.run(Thread.java:745)
#1:
io.netty.buffer.AdvancedLeakAwareByteBuf.retain(AdvancedLeakAwareByteBuf.java:709)
io.netty.handler.codec.http.DefaultHttpContent.retain(DefaultHttpContent.java:60)
io.netty.handler.codec.http.HttpObjectAggregator.decode(HttpObjectAggregator.java:190)
io.netty.handler.codec.http.HttpObjectAggregator.decode(HttpObjectAggregator.java:54)
io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:89)
io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:339)
io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:324)
io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:242)
io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:147)
io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:339)
io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:324)
io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:847)
io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:131)
io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:511)
io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:468)
io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:382)
io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:354)
io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:111)
java.lang.Thread.run(Thread.java:745)
Created at:
io.netty.buffer.UnpooledByteBufAllocator.newDirectBuffer(UnpooledByteBufAllocator.java:55)
io.netty.buffer.AbstractByteBufAllocator.directBuffer(AbstractByteBufAllocator.java:155)
io.netty.buffer.AbstractByteBufAllocator.directBuffer(AbstractByteBufAllocator.java:146)
io.netty.buffer.AbstractByteBufAllocator.ioBuffer(AbstractByteBufAllocator.java:107)
io.netty.channel.AdaptiveRecvByteBufAllocator$HandleImpl.allocate(AdaptiveRecvByteBufAllocator.java:104)
io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:117)
io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:511)
io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:468)
io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:382)
io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:354)
io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:111)
java.lang.Thread.run(Thread.java:745)




Variant 2 creates the buffer in UnpooledByteBufAllocator. Which might mean that there is no real resource leak in that case. Rather the coding pattern required for objects that might be pooled is not adhered to.
Nevertheless, running my load tests just long enough yields an OOME Direct buffer memory:



org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[Message: [Body is instance of org.apache.camel.StreamCache]]
        at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1635)[70:org.apache.camel.camel-core:2.15.2]
        at org.apache.camel.impl.DefaultExchange.setException(DefaultExchange.java:308)[70:org.apache.camel.camel-core:2.15.2]
        at org.apache.camel.component.netty4.handlers.ClientChannelHandler.exceptionCaught(ClientChannelHandler.java:81)[143:org.apache.camel.camel-netty4:2.15.2]
        at io.netty.channel.AbstractChannelHandlerContext.invokeExceptionCaught(AbstractChannelHandlerContext.java:275)[138:io.netty.transport:4.0.27.Final]
        at io.netty.channel.AbstractChannelHandlerContext.fireExceptionCaught(AbstractChannelHandlerContext.java:253)[138:io.netty.transport:4.0.27.Final]
        at io.netty.channel.ChannelInboundHandlerAdapter.exceptionCaught(ChannelInboundHandlerAdapter.java:131)[138:io.netty.transport:4.0.27.Final]
        at io.netty.channel.AbstractChannelHandlerContext.invokeExceptionCaught(AbstractChannelHandlerContext.java:275)[138:io.netty.transport:4.0.27.Final]
        at io.netty.channel.AbstractChannelHandlerContext.fireExceptionCaught(AbstractChannelHandlerContext.java:253)[138:io.netty.transport:4.0.27.Final]
        at io.netty.channel.ChannelInboundHandlerAdapter.exceptionCaught(ChannelInboundHandlerAdapter.java:131)[138:io.netty.transport:4.0.27.Final]
        at io.netty.channel.CombinedChannelDuplexHandler.exceptionCaught(CombinedChannelDuplexHandler.java:137)[138:io.netty.transport:4.0.27.Final]
        at io.netty.channel.AbstractChannelHandlerContext.invokeExceptionCaught(AbstractChannelHandlerContext.java:275)[138:io.netty.transport:4.0.27.Final]
        at io.netty.channel.AbstractChannelHandlerContext.fireExceptionCaught(AbstractChannelHandlerContext.java:253)[138:io.netty.transport:4.0.27.Final]
        at io.netty.channel.DefaultChannelPipeline.fireExceptionCaught(DefaultChannelPipeline.java:835)[138:io.netty.transport:4.0.27.Final]
        at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.handleReadException(AbstractNioByteChannel.java:87)[138:io.netty.transport:4.0.27.Final]
        at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:162)[138:io.netty.transport:4.0.27.Final]
        at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:511)[138:io.netty.transport:4.0.27.Final]
        at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:468)[138:io.netty.transport:4.0.27.Final]
        at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:382)[138:io.netty.transport:4.0.27.Final]
        at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:354)[138:io.netty.transport:4.0.27.Final]
        at io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:111)[137:io.netty.common:4.0.27.Final]
        at java.lang.Thread.run(Thread.java:745)[:1.7.0_60]
Caused by: java.lang.OutOfMemoryError: Direct buffer memory
        at java.nio.Bits.reserveMemory(Bits.java:658)[:1.7.0_60]
        at java.nio.DirectByteBuffer.<init>(DirectByteBuffer.java:123)[:1.7.0_60]
        at java.nio.ByteBuffer.allocateDirect(ByteBuffer.java:306)[:1.7.0_60]
        at io.netty.buffer.UnpooledUnsafeDirectByteBuf.allocateDirect(UnpooledUnsafeDirectByteBuf.java:108)[139:io.netty.buffer:4.0.27.Final]
        at io.netty.buffer.UnpooledUnsafeDirectByteBuf.<init>(UnpooledUnsafeDirectByteBuf.java:69)[139:io.netty.buffer:4.0.27.Final]
        at io.netty.buffer.UnpooledByteBufAllocator.newDirectBuffer(UnpooledByteBufAllocator.java:50)[139:io.netty.buffer:4.0.27.Final]
        at io.netty.buffer.AbstractByteBufAllocator.directBuffer(AbstractByteBufAllocator.java:155)[139:io.netty.buffer:4.0.27.Final]
        at io.netty.buffer.AbstractByteBufAllocator.directBuffer(AbstractByteBufAllocator.java:146)[139:io.netty.buffer:4.0.27.Final]
        at io.netty.buffer.AbstractByteBufAllocator.ioBuffer(AbstractByteBufAllocator.java:107)[139:io.netty.buffer:4.0.27.Final]
        at io.netty.channel.AdaptiveRecvByteBufAllocator$HandleImpl.allocate(AdaptiveRecvByteBufAllocator.java:104)[138:io.netty.transport:4.0.27.Final]
        at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:117)[138:io.netty.transport:4.0.27.Final]
        ... 6 more




This is one of the routes that trigger the error:



<route id=""pep-xds_b-registry"">
	<from uri=""netty4-http:http://{{pep.host}}:{{pep.xds.b.registry.port}}/XDS3/registry?matchOnUriPrefix=true&amp;disableStreamCache=true"" />
	<process ref=""registryInboundProcessor"" />
	<to uri=""netty4-http:http://{{xds.b.registry.host}}:{{xds.b.registry.port}}/XDS3/registry?bridgeEndpoint=true&amp;throwExceptionOnFailure=false&amp;chunkedMaxContentLength={{pep.xds.b.registry.max.message.size}}&amp;disableStreamCache=false"" />
	<!-- Unfortunately disabling the stream cache only works for requests, but not responses: https://issues.apache.org/jira/browse/CAMEL-7638 -->
	<process ref=""registryOutboundProcessor"" />
</route>","frouleau:1449802823:2015-12-11T11:00:23.552+0000:1449802823:2015-12-11T11:00:23.552+0000:I have the same issue on camel 2.15.3 and Karaf 3.0.5 or Karaf 4.0.3
davsclaus:1454982655:2016-02-09T09:50:55.785+0000:1454982655:2016-02-09T09:50:55.785+0000:Can you try with latest release?
ralfsteppacher:1455495982:2016-02-15T08:26:22.851+0000:1455495982:2016-02-15T08:26:22.851+0000:[~davsclaus], thank you for your support! I will try to test, but as I have completely abandoned {{netty4-http}} in my projects I first need to set up a test. I hope I can do it some time this week, but cannot promise. 
ralfsteppacher:1458797549:2016-03-24T13:32:29.226+0000:1458797623:2016-03-24T13:33:43.617+0000:Sorry for the long wait!

I tried with 2.16.2 and the problem persists. Though it appears it only shows under load now. When making single requests there are no errors. But when running my stress tests I start to get intermittent errors as before (with -Dio.netty.leakDetectionLevel=paranoid):

{noformat}
2016-03-24 14:28:08,486 | ERROR | qtp99151234-420  | ResourceLeakDetector             | 63 - io.netty.common - 4.0.33.Final | ID-Ralfs-MacBook-Pro-local-57997-1458825709312-5-15981  | LEAK: ByteBuf.release() was not called before it's garbage-collected. See http://netty.io/wiki/reference-counted-objects.html for more information.
Recent access records: 5
#5:
	io.netty.buffer.AdvancedLeakAwareByteBuf.getBytes(AdvancedLeakAwareByteBuf.java:245)
	io.netty.buffer.CompositeByteBuf.getBytes(CompositeByteBuf.java:687)
	io.netty.buffer.CompositeByteBuf.getBytes(CompositeByteBuf.java:42)
	io.netty.buffer.AbstractByteBuf.readBytes(AbstractByteBuf.java:694)
	io.netty.buffer.CompositeByteBuf.readBytes(CompositeByteBuf.java:1496)
	io.netty.buffer.CompositeByteBuf.readBytes(CompositeByteBuf.java:42)
	io.netty.buffer.ByteBufInputStream.read(ByteBufInputStream.java:120)
	java.io.BufferedInputStream.fill(BufferedInputStream.java:246)
	java.io.BufferedInputStream.read1(BufferedInputStream.java:286)
	java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	com.ctc.wstx.io.BaseReader.readBytes(BaseReader.java:155)
	com.ctc.wstx.io.UTF8Reader.loadMore(UTF8Reader.java:368)
	com.ctc.wstx.io.UTF8Reader.read(UTF8Reader.java:111)
	com.ctc.wstx.io.MergedReader.read(MergedReader.java:105)
	com.ctc.wstx.io.ReaderSource.readInto(ReaderSource.java:86)
	com.ctc.wstx.io.BranchingReaderSource.readInto(BranchingReaderSource.java:56)
	com.ctc.wstx.sr.StreamScanner.loadMore(StreamScanner.java:1001)
	com.ctc.wstx.sr.StreamScanner.loadMore(StreamScanner.java:1046)
	com.ctc.wstx.sr.StreamScanner.getNextChar(StreamScanner.java:793)
	com.ctc.wstx.sr.BasicStreamReader.parseAttrValue(BasicStreamReader.java:1894)
	com.ctc.wstx.sr.BasicStreamReader.handleNsAttrs(BasicStreamReader.java:3065)
	com.ctc.wstx.sr.BasicStreamReader.handleStartElem(BasicStreamReader.java:2963)
	com.ctc.wstx.sr.BasicStreamReader.nextFromTree(BasicStreamReader.java:2839)
	com.ctc.wstx.sr.BasicStreamReader.next(BasicStreamReader.java:1073)
	ch.vivates.pep.stream.ResponseStatusFilter.handleSimpleMessage(ResponseStatusFilter.java:61)
	ch.vivates.pep.stream.BaseStreamFilter.filter(BaseStreamFilter.java:168)
	ch.vivates.pep.stream.BaseStreamFilter.run(BaseStreamFilter.java:184)
	java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	java.util.concurrent.FutureTask.run(FutureTask.java:266)
	java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	java.lang.Thread.run(Thread.java:745)
#4:
	io.netty.buffer.AdvancedLeakAwareByteBuf.getBytes(AdvancedLeakAwareByteBuf.java:245)
	io.netty.buffer.CompositeByteBuf.getBytes(CompositeByteBuf.java:687)
	io.netty.buffer.CompositeByteBuf.getBytes(CompositeByteBuf.java:42)
	io.netty.buffer.AbstractByteBuf.readBytes(AbstractByteBuf.java:694)
	io.netty.buffer.CompositeByteBuf.readBytes(CompositeByteBuf.java:1496)
	io.netty.buffer.CompositeByteBuf.readBytes(CompositeByteBuf.java:42)
	io.netty.buffer.ByteBufInputStream.read(ByteBufInputStream.java:120)
	java.io.BufferedInputStream.fill(BufferedInputStream.java:246)
	java.io.BufferedInputStream.read1(BufferedInputStream.java:286)
	java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	com.ctc.wstx.io.BaseReader.readBytes(BaseReader.java:155)
	com.ctc.wstx.io.UTF8Reader.loadMore(UTF8Reader.java:368)
	com.ctc.wstx.io.UTF8Reader.read(UTF8Reader.java:111)
	com.ctc.wstx.io.MergedReader.read(MergedReader.java:105)
	com.ctc.wstx.io.ReaderSource.readInto(ReaderSource.java:86)
	com.ctc.wstx.io.BranchingReaderSource.readInto(BranchingReaderSource.java:56)
	com.ctc.wstx.sr.StreamScanner.loadMoreFromCurrent(StreamScanner.java:1060)
	com.ctc.wstx.sr.StreamScanner.parseLocalName2(StreamScanner.java:1870)
	com.ctc.wstx.sr.StreamScanner.parseLocalName(StreamScanner.java:1830)
	com.ctc.wstx.sr.BasicStreamReader.handleStartElem(BasicStreamReader.java:2941)
	com.ctc.wstx.sr.BasicStreamReader.nextFromTree(BasicStreamReader.java:2839)
	com.ctc.wstx.sr.BasicStreamReader.next(BasicStreamReader.java:1073)
	ch.vivates.pep.stream.ResponseStatusFilter.handleSimpleMessage(ResponseStatusFilter.java:61)
	ch.vivates.pep.stream.BaseStreamFilter.filter(BaseStreamFilter.java:168)
	ch.vivates.pep.stream.BaseStreamFilter.run(BaseStreamFilter.java:184)
	java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	java.util.concurrent.FutureTask.run(FutureTask.java:266)
	java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	java.lang.Thread.run(Thread.java:745)
#3:
	io.netty.buffer.AdvancedLeakAwareByteBuf.getBytes(AdvancedLeakAwareByteBuf.java:245)
	io.netty.buffer.CompositeByteBuf.getBytes(CompositeByteBuf.java:687)
	io.netty.buffer.CompositeByteBuf.getBytes(CompositeByteBuf.java:42)
	io.netty.buffer.AbstractByteBuf.readBytes(AbstractByteBuf.java:694)
	io.netty.buffer.CompositeByteBuf.readBytes(CompositeByteBuf.java:1496)
	io.netty.buffer.CompositeByteBuf.readBytes(CompositeByteBuf.java:42)
	io.netty.buffer.ByteBufInputStream.read(ByteBufInputStream.java:120)
	java.io.BufferedInputStream.fill(BufferedInputStream.java:246)
	java.io.BufferedInputStream.read1(BufferedInputStream.java:286)
	java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	com.ctc.wstx.io.BaseReader.readBytes(BaseReader.java:155)
	com.ctc.wstx.io.UTF8Reader.loadMore(UTF8Reader.java:368)
	com.ctc.wstx.io.UTF8Reader.read(UTF8Reader.java:111)
	com.ctc.wstx.io.MergedReader.read(MergedReader.java:105)
	com.ctc.wstx.io.ReaderSource.readInto(ReaderSource.java:86)
	com.ctc.wstx.io.BranchingReaderSource.readInto(BranchingReaderSource.java:56)
	com.ctc.wstx.sr.StreamScanner.loadMore(StreamScanner.java:1001)
	com.ctc.wstx.sr.StreamScanner.loadMore(StreamScanner.java:1046)
	com.ctc.wstx.sr.StreamScanner.getNextChar(StreamScanner.java:793)
	com.ctc.wstx.sr.BasicStreamReader.parseAttrValue(BasicStreamReader.java:1894)
	com.ctc.wstx.sr.BasicStreamReader.handleNsAttrs(BasicStreamReader.java:3065)
	com.ctc.wstx.sr.BasicStreamReader.handleStartElem(BasicStreamReader.java:2963)
	com.ctc.wstx.sr.BasicStreamReader.nextFromTree(BasicStreamReader.java:2839)
	com.ctc.wstx.sr.BasicStreamReader.next(BasicStreamReader.java:1073)
	ch.vivates.pep.stream.ResponseStatusFilter.handleSimpleMessage(ResponseStatusFilter.java:61)
	ch.vivates.pep.stream.BaseStreamFilter.filter(BaseStreamFilter.java:168)
	ch.vivates.pep.stream.BaseStreamFilter.run(BaseStreamFilter.java:184)
	java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	java.util.concurrent.FutureTask.run(FutureTask.java:266)
	java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	java.lang.Thread.run(Thread.java:745)
#2:
	io.netty.buffer.AdvancedLeakAwareByteBuf.getBytes(AdvancedLeakAwareByteBuf.java:245)
	io.netty.buffer.CompositeByteBuf.getBytes(CompositeByteBuf.java:687)
	io.netty.buffer.CompositeByteBuf.getBytes(CompositeByteBuf.java:42)
	io.netty.buffer.AbstractByteBuf.readBytes(AbstractByteBuf.java:694)
	io.netty.buffer.CompositeByteBuf.readBytes(CompositeByteBuf.java:1496)
	io.netty.buffer.CompositeByteBuf.readBytes(CompositeByteBuf.java:42)
	io.netty.buffer.ByteBufInputStream.read(ByteBufInputStream.java:120)
	java.io.BufferedInputStream.fill(BufferedInputStream.java:246)
	java.io.BufferedInputStream.read1(BufferedInputStream.java:286)
	java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	com.ctc.wstx.io.BaseReader.readBytes(BaseReader.java:155)
	com.ctc.wstx.io.UTF8Reader.loadMore(UTF8Reader.java:368)
	com.ctc.wstx.io.UTF8Reader.read(UTF8Reader.java:111)
	com.ctc.wstx.io.ReaderBootstrapper.initialLoad(ReaderBootstrapper.java:250)
	com.ctc.wstx.io.ReaderBootstrapper.bootstrapInput(ReaderBootstrapper.java:133)
	com.ctc.wstx.stax.WstxInputFactory.doCreateSR(WstxInputFactory.java:545)
	com.ctc.wstx.stax.WstxInputFactory.createSR(WstxInputFactory.java:605)
	com.ctc.wstx.stax.WstxInputFactory.createSR(WstxInputFactory.java:628)
	com.ctc.wstx.stax.WstxInputFactory.createXMLStreamReader(WstxInputFactory.java:331)
	ch.vivates.pep.stream.ResponseStatusFilter.handleSimpleMessage(ResponseStatusFilter.java:36)
	ch.vivates.pep.stream.BaseStreamFilter.filter(BaseStreamFilter.java:168)
	ch.vivates.pep.stream.BaseStreamFilter.run(BaseStreamFilter.java:184)
	java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	java.util.concurrent.FutureTask.run(FutureTask.java:266)
	java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	java.lang.Thread.run(Thread.java:745)
#1:
	io.netty.buffer.AdvancedLeakAwareByteBuf.release(AdvancedLeakAwareByteBuf.java:61)
	io.netty.handler.codec.http.DefaultHttpContent.release(DefaultHttpContent.java:72)
	io.netty.util.ReferenceCountUtil.release(ReferenceCountUtil.java:59)
	io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:91)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:318)
	io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:304)
	io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:276)
	io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:263)
	io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:147)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:318)
	io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:304)
	io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:846)
	io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:131)
	io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:511)
	io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:468)
	io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:382)
	io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:354)
	io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:112)
	java.lang.Thread.run(Thread.java:745)
Created at:
	io.netty.buffer.UnpooledByteBufAllocator.newDirectBuffer(UnpooledByteBufAllocator.java:56)
	io.netty.buffer.AbstractByteBufAllocator.directBuffer(AbstractByteBufAllocator.java:155)
	io.netty.buffer.AbstractByteBufAllocator.directBuffer(AbstractByteBufAllocator.java:146)
	io.netty.buffer.AbstractByteBufAllocator.ioBuffer(AbstractByteBufAllocator.java:107)
	io.netty.channel.AdaptiveRecvByteBufAllocator$HandleImpl.allocate(AdaptiveRecvByteBufAllocator.java:104)
	io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:117)
	io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:511)
	io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:468)
	io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:382)
	io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:354)
	io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:112)
	java.lang.Thread.run(Thread.java:745)
{noformat}
davsclaus:1462324520:2016-05-04T09:15:20.354+0000:1462324520:2016-05-04T09:15:20.354+0000:Fixed a leak in the basic auth on the server side, and a few other spots. Its the producer side that seems to have the most common leak.
davsclaus:1462335004:2016-05-04T12:10:04.045+0000:1462335004:2016-05-04T12:10:04.045+0000:You can now run the tests with a leak detector, with run-tests-leak.sh in the directory of the source code"
0,CAMEL-9039,Improvement,Major,2.15.2,"2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.15.3, 2.16.0",Dhiraj Sureshkumar Bokde,Dhiraj Sureshkumar Bokde,0,2,2015-07-31 05:58:20+00:00,2015-07-31 19:39:43+00:00,"The camel-core feature loads the following bundles that are only useful in a console based karaf container:



<bundle>mvn:org.apache.camel/camel-catalog/${project.version}</bundle>
<bundle>mvn:org.apache.camel/camel-commands-core/${project.version}</bundle>
<bundle>mvn:org.apache.camel.karaf/camel-karaf-commands/${project.version}</bundle>




Loading these bundles should be made optional so that the camel-core feature (and all the component features that depend on it) can be easily used in a micro-services deployment of Karaf4.","davsclaus:1438299085:2015-07-31T07:31:25.193+0000:1438299085:2015-07-31T07:31:25.193+0000:Yeah but we should make sure they are loaded by default when people do a 'camel' feature install. You may move these to some new 'camel-core' feature or something that just has the very basics, i guess even without camel-blueprint or camel-spring either.
dhirajsb:1438342638:2015-07-31T19:37:18.001+0000:1438342638:2015-07-31T19:37:18.001+0000:So Karaf supports loading bundles and config on the condition that some other feature is already installed. It is used in Karaf to conditionally load its own features, when the {{shell}} feature is loaded, the same thing we want to do for camel-core. 

I have committed the change to add the same conditional check around bundles {{camel-commands-core, camel-karaf-commands}} and left {{camel-catalog}} as it is for tooling support. So if camel-core is loaded in a karaf container with {{shell}} feature, the command bundles will be loaded, otherwise they won't. This way existing karaf containers won't be affected, and we don't have to worry about all the component features that load {{camel-core}} feature. 
dhirajsb:1438342783:2015-07-31T19:39:43.850+0000:1438342783:2015-07-31T19:39:43.850+0000:Wrapped {{camel-commands-core, camel-karaf-commands}} in a conditional for karaf {{shell}} feature. Commit pushed to master and camel-2.15.x branches. "
0,CAMEL-9038,Task,Major,None,"2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.15.3, 2.16.0",Akitoshi Yoshida,Akitoshi Yoshida,0,1,2015-07-30 11:06:04+00:00,2015-07-31 16:53:28+00:00,"Currently, the tests included in camel-olingo2 are not executed automatically and because of this situation, those tests are not frequently executed and this could lead to the situation where we may not be able to spot some issues early.


I propose to make the current tests executable during the normal test phase. Although the current tests are marked as the integration tests, their test scope corresponds to the other unit tests that are executed by other components.


Since the olingo sample project itself is not currently available as a downloadable jar but only available via its architype generator, we can add this process in the build to make the sample server available during the test.","ay:1438332808:2015-07-31T16:53:28.745+0000:1438332808:2015-07-31T16:53:28.745+0000:- Some refactoring to the test code to make the tests executed without much overhead.
- removed the unused test profile that is no longer needed (as the tests are executed automatically without any manual interaction)."
0,CAMEL-9037,Bug,Major,2.12.3,"2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.15.3, 2.16.0",Claus Ibsen,shpelda2,0,1,2015-07-30 08:06:04+00:00,2015-07-31 11:01:18+00:00,"Threads created by DefaultTaskExecutorType.ThreadPool at


org.apache.camel.component.jms.DefaultJmsMessageListenerContainer.createDefaultTaskExecutor()


are never stopped, as destroy method is never called on the ThreadPoolTaskExecutor",
0,CAMEL-9036,Improvement,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Andrea Cosentino,Andrea Cosentino,0,1,2015-07-30 07:49:16+00:00,2015-07-30 15:38:35+00:00,Actually we don't support Hazelcast set data structure. I think we have to add it to the supported list.,
0,CAMEL-9035,Bug,Minor,"2.14.0, 2.15.2","2.15.3, 2.16.0","

patch

",Resolved,Fixed,"2.15.3, 2.16.0",Claus Ibsen,imran raza khan,0,2,2015-07-29 19:24:16+00:00,2015-07-31 11:07:11+00:00,"Suppose SMSC allowed one connection to client and due to any reason if session.unbindAndClose failed it will set session to null and dont retry to unbind. 


Connection/Session will remain open on SMSC till its TransactionTimeOut, mostly SMSc Admin set it to 5 to 10 mins. 


Following are snippet of org.apache.camel.component.smpp.SmppProducer and details are like 


1- if for any reason Camel try to unbind connection and it got failed below code print log and set session=null in both success/fail cases. 
2- After sending unbind it will try to reconnect. 
3- As SMSc allowed 1 connection which was not unbinded successfull it will not allowed second connection so reconnect will get failed. 
4- Camel call closesession on reconnection failure and will verify if session != null, as session is already null so this code will not send unbind again and apache camel will not able to get connection from SMSc until timeout happen on SMSc and this will results in 10 mins outage. 


If we change closeSession() like below 


current: 



private void  closeSession() { 
        if (session != null) { 
            session.removeSessionStateListener(this.internalSessionStateListener); 
            try { 
                Thread.sleep(1000); 
                session.unbindAndClose(); 
            } catch (Exception e) { 
              LOG.warn(""Could not close session "" + session); 
            } 

            session = null; 

        } 

    } 




Suggested: 



private void  closeSession() { 
        if (session != null) { 
            session.removeSessionStateListener(this.internalSessionStateListener); 
            try { 
                Thread.sleep(1000); 
                session.unbindAndClose(); 
                session = null; // if we put here then it will retry for unbind 
            } catch (Exception e) { 
              LOG.warn(""Could not close session "" + session); 
            } 
             session = null; // remove his line 
        } 
    }",davsclaus:1438312031:2015-07-31T11:07:11.822+0000:1438312031:2015-07-31T11:07:11.822+0000:Thanks for the patch.
0,CAMEL-9034,Improvement,Minor,2.15.2,,"
None
",Resolved,Won't Fix,None,Unassigned,Christian Bauer,0,2,2015-07-29 15:55:32+00:00,2015-09-29 06:36:15+00:00,"The code in JettyHttpComponent seems to ignore any httpBindingRef endpoint property, at least if you use the REST DSL. It always creates a consumer with this binding if the RestConsumerFactory#createConsumer extension is used:



endpoint.setBinding(new JettyRestHttpBinding(endpoint));




This makes it impossible to configure custom error responses by overriding the doWriteExceptionResponse method of the binding, as documented.


My actual case is an (invalid) Java instance I'm transforming to JSON with Jackson. This happens in RestBindingMarshalOnCompletion#onAfterRoute and the only way to catch an exception at this stage seems to be in the HttpBinding.


Note that this means users of the REST DSL will always return 500 errors with full stacktraces on marshalling failures.",davsclaus:1443479775:2015-09-29T06:36:15.052+0000:1443479775:2015-09-29T06:36:15.052+0000:This is intended when using rest-dsl. See the link to that other ticket
0,CAMEL-9033,Improvement,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Thomas Diesler,0,3,2015-07-29 11:03:17+00:00,2015-07-31 08:53:28+00:00,"This would allow Undertow consumers to get created on the default host of an already running server, which would be the case for wildfly integration


CrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/779","davsclaus:1438143803:2015-07-29T12:23:23.175+0000:1438143803:2015-07-29T12:23:23.175+0000:I assume you work on a PR?
githubbot:1438154742:2015-07-29T15:25:42.126+0000:1438154742:2015-07-29T15:25:42.126+0000:GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/577

    [CAMEL-9033] Abstract undertow HttpHandler creation

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-9033

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/577.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #577
    
----
commit 8d626efcfabecbb8a00bad4a50f03527e86adfca
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2015-07-29T15:24:43Z

    [CAMEL-9033] Abstract undertow HttpHandler creation

----

githubbot:1438212028:2015-07-30T07:20:28.836+0000:1438212028:2015-07-30T07:20:28.836+0000:Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/577

githubbot:1438230426:2015-07-30T12:27:06.010+0000:1438230426:2015-07-30T12:27:06.010+0000:GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/579

    [CAMEL-9033] Unregister HttpHandler on Consumer stop

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-9033

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/579.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #579
    
----
commit b440b6bdfbc104f45ad079f34ffb07202fca11a1
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2015-07-30T12:23:09Z

    [CAMEL-9033] Unregister HttpHandler on Consumer stop

----

githubbot:1438304008:2015-07-31T08:53:28.915+0000:1438304008:2015-07-31T08:53:28.915+0000:Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/579
"
0,CAMEL-9032,Bug,Major,2.15.2,"2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.15.3, 2.16.0",Claus Ibsen,Claus Ibsen,0,1,2015-07-29 07:55:55+00:00,2015-07-29 09:09:05+00:00,"If you call a method on a bean then the introspector should filter out abstract methods if there is class inheritance with abstract defined methods.


See SO
http://stackoverflow.com/questions/31671894/camel-ambiguousmethodcallexception-abstract-classes",
0,CAMEL-9031,Bug,Major,"2.14.3, 2.15.2, 2.16.0","2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.15.3, 2.16.0",Claus Ibsen,Andrew Block,0,2,2015-07-29 04:03:22+00:00,2015-07-29 07:06:23+00:00,"The following error occurs when deploying the camel-kafka feature



ERROR: Bundle rfid-ws-kafka-poc-bundle [270] EventDispatcher: Error during dispatch. (java.lang.NoClassDefFoundError: org/I0Itec/zkclient/serialize/ZkSerializer)
java.lang.NoClassDefFoundError: org/I0Itec/zkclient/serialize/ZkSerializer
	at kafka.javaapi.consumer.ZookeeperConsumerConnector.<init>(ZookeeperConsumerConnector.scala:66)
	at kafka.javaapi.consumer.ZookeeperConsumerConnector.<init>(ZookeeperConsumerConnector.scala:69)
	at kafka.consumer.Consumer$.createJavaConsumerConnector(ConsumerConnector.scala:105)
	at kafka.consumer.Consumer.createJavaConsumerConnector(ConsumerConnector.scala)
	at org.apache.camel.component.kafka.KafkaConsumer.doStart(KafkaConsumer.java:79)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:2869)
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRouteConsumers(DefaultCamelContext.java:3163)
	at org.apache.camel.impl.DefaultCamelContext.doStartRouteConsumers(DefaultCamelContext.java:3099)
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:3029)
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:2797)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:2653)
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:167)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2467)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2463)
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:2486)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:2463)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:2432)
	at org.apache.camel.blueprint.BlueprintCamelContext.start(BlueprintCamelContext.java:180)
	at org.apache.camel.blueprint.BlueprintCamelContext.maybeStart(BlueprintCamelContext.java:212)
	at org.apache.camel.blueprint.BlueprintCamelContext.serviceChanged(BlueprintCamelContext.java:150)
	at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:943)
	at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:794)
	at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:544)
	at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4445)
	at org.apache.felix.framework.Felix.registerService(Felix.java:3431)
	at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:346)
	at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:353)
	at org.apache.camel.blueprint.BlueprintCamelContext.init(BlueprintCamelContext.java:100)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:297)
	at org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:958)
	at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:712)
	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate2(BeanRecipe.java:824)
	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:787)
	at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:79)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:88)
	at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:245)
	at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:183)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:682)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:377)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:269)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at org.apache.aries.blueprint.container.ExecutorServiceWrapper.run(ExecutorServiceWrapper.java:106)
	at org.apache.aries.blueprint.utils.threading.impl.DiscardableRunnable.run(DiscardableRunnable.java:48)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:178)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:292)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.ClassNotFoundException: org.I0Itec.zkclient.serialize.ZkSerializer not found by org.apache.servicemix.bundles.kafka_2.10 [266]
	at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1556)
	at org.apache.felix.framework.BundleWiringImpl.access$400(BundleWiringImpl.java:77)
	at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:1993)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:358)
	... 58 more","githubbot:1438114860:2015-07-29T04:21:00.016+0000:1438114860:2015-07-29T04:21:00.016+0000:GitHub user sabre1041 opened a pull request:

    https://github.com/apache/camel/pull/576

    CAMEL-9031: Adding missing zkclient dependency from camel-kafka feature

    Dependency on zkclient added to camel-kafka feature

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sabre1041/camel CAMEL-9031

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/576.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #576
    
----
commit d49b9c2f2a71eed93eeb0739a2d7165128a9a8b3
Author: Andrew Block <andy.block@gmail.com>
Date:   2015-07-29T04:17:05Z

    CAMEL-9031: Adding missing zkclient dependency from camel-kafka feature

----

githubbot:1438124783:2015-07-29T07:06:23.728+0000:1438124783:2015-07-29T07:06:23.728+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/576
"
0,CAMEL-9030,Bug,Major,2.15.2,,"
None
",Resolved,Fixed,None,Tomas Rohovsky,Tomas Rohovsky,0,2,2015-07-28 17:34:24+00:00,2015-07-28 19:45:50+00:00,"Step 3 in the example's instructions reads as follows:



3) Create a `box.properties` file in the Karaf working directory with the following properties set to your box account credentials.


However, the camel-context.xml file sets up the PropertyPlaceholderConfigurer locations property to look for the ""box.com.properties"" file instead.



<bean id=""placeholder"" class=""org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"">
   <property name=""locations"">
      <list>
        <value>file:box.com.properties</value>
      </list>
   </property>
   <property name=""ignoreResourceNotFound"" value=""true"" />
   <property name=""searchSystemEnvironment"" value=""true"" />
   <property name=""systemPropertiesModeName"" value=""SYSTEM_PROPERTIES_MODE_OVERRIDE"" />
</bean>","githubbot:1438076180:2015-07-28T17:36:20.086+0000:1438076180:2015-07-28T17:36:20.086+0000:GitHub user trohovsky opened a pull request:

    https://github.com/apache/camel/pull/574

    CAMEL-9030 The instructions for camel-example-box-osgi are incorrect

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/trohovsky/camel CAMEL-9030

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/574.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #574
    
----
commit 2879a446afba6a0f2674631a6f5c819fd6892d3d
Author: Tomas Rohovsky <trohovsk@redhat.com>
Date:   2015-07-28T17:37:40Z

    CAMEL-9030 The instructions for camel-example-box-osgi are incorrect

----

githubbot:1438083099:2015-07-28T19:31:39.631+0000:1438083099:2015-07-28T19:31:39.631+0000:Github user trohovsky closed the pull request at:

    https://github.com/apache/camel/pull/574
"
0,CAMEL-9029,Bug,Major,2.15.2,None,"
None
",Resolved,Fixed,"2.15.3, 2.16.0",Henryk Konsek,Henryk Konsek,0,1,2015-07-28 14:08:56+00:00,2015-07-28 14:13:27+00:00,"JGroupsFilters#dropNonCoordinatorViews doesn't filter non-view messages properly which can cause the wrong route to be started. This issue was not so easy to detect, as usually the channels used for cluster management doesn't send any other messages, than view ones.",hekonsek:1438064007:2015-07-28T14:13:27.242+0000:1438064007:2015-07-28T14:13:27.242+0000:Fixed and backported to 2.15.3.
0,CAMEL-9028,Task,Minor,None,None,"
None
",Resolved,Fixed,2.16.0,Andrea Cosentino,Thomas Diesler,0,2,2015-07-28 10:17:24+00:00,2015-07-29 07:15:46+00:00,"camel-kafka uses it as provided, which forces clients to explicitly define a scala library version","githubbot:1438049934:2015-07-28T10:18:54.446+0000:1438049934:2015-07-28T10:18:54.446+0000:GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/573

    [CAMEL-9028] BOM does not export scala-library

    https://issues.apache.org/jira/browse/CAMEL-9028

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-9028

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/573.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #573
    
----
commit 4b7b6bcb83c3acdc491917cd2b2119e7f3b88c43
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2015-07-28T10:18:19Z

    [CAMEL-9028] BOM does not export scala-library

----

githubbot:1438125346:2015-07-29T07:15:46.468+0000:1438125346:2015-07-29T07:15:46.468+0000:Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/573
"
0,CAMEL-9027,Bug,Minor,2.15.2,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Cristian Tetic,0,2,2015-07-28 08:46:42+00:00,2015-07-29 09:08:53+00:00,"If jndi name of a topic or a queue contains "":"" (eg: /jms/test/hov.t1.dev:topic) the destination name won't be parsed correctly because of this code:


"" destinationName = getEndpointUri().substring(getEndpointUri().lastIndexOf("":"") + 1);""


inside class ""SjmsEndpoint"" line number 106.","davsclaus:1438124890:2015-07-29T07:08:10.912+0000:1438124890:2015-07-29T07:08:10.912+0000:Its not really a good idea to use colons in JMS names.


cristi.tetic:1438127983:2015-07-29T07:59:43.015+0000:1438127983:2015-07-29T07:59:43.015+0000:I just received a topic to work with and I don't have rights to change the name.
As a workaround I have used SjmsEndpoint setDestinationName.
Also I don't have rights to created destination so I had to use a custom DestinationCreationStrategy."
0,CAMEL-9026,Bug,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Andrea Cosentino,Thomas Diesler,0,4,2015-07-27 15:19:52+00:00,2015-07-29 20:37:08+00:00,"KafkaEndpoint cannot load the StringEncoder because we do not expose the Kafka API to user code. It's an implementation detail of the camel-kafka component and only visible to that class loader



Caused by: java.lang.ClassNotFoundException: kafka.serializer.StringEncoder
	at org.apache.camel.impl.DefaultClassResolver.resolveMandatoryClass(DefaultClassResolver.java:80)
	at org.apache.camel.component.kafka.KafkaEndpoint.createProducer(KafkaEndpoint.java:83)
	at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:431)","githubbot:1437982126:2015-07-27T15:28:46.187+0000:1437982126:2015-07-27T15:28:46.187+0000:GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/571

    [CAMEL-9026] ClassNotFoundException: kafka.serializer.StringEncoder

    https://issues.apache.org/jira/browse/CAMEL-9026

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-9026

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/571.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #571
    
----
commit fff0de295c954064b11f6375ffb84aa9dea9c26e
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2015-07-27T15:21:11Z

    [CAMEL-9026] ClassNotFoundException: kafka.serializer.StringEncoder

----

acosentino:1437982882:2015-07-27T15:41:22.494+0000:1437982882:2015-07-27T15:41:22.494+0000:Thank you very much Thomas :-)
githubbot:1438039121:2015-07-28T07:18:41.462+0000:1438039121:2015-07-28T07:18:41.462+0000:Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/571

mmindenhall:1438088757:2015-07-28T21:05:57.955+0000:1438088757:2015-07-28T21:05:57.955+0000:[~ancosen], [~tdiesler], I saw discussion of this go by in camel-dev, and have a couple of questions.

First, I'm concerned that this might have somehow been caused by the patch I submitted for CAMEL-8790.  However, there's a test in {{org.apache.camel.component.kafka.KafkaProducerFullTest}} that uses {{kafka.serializer.StringEncoder}}, and that test passes without this patch.  So I'm wondering if you can provide more details about the route configuration that resulted in the exception?

Second, the patch for CAMEL-8790 was backported to the 2.15.x branch...can this be backported as well?  It should merge cleanly, and if I was the cause, either this patch needs to be merged or my patch reverted from 2.15.x to avoid breaking things for existing 2.15.x users.

Thanks!

acosentino:1438121121:2015-07-29T06:05:21.185+0000:1438121121:2015-07-29T06:05:21.185+0000:Hi Mark. Yeah for sure, I will backport on 2.15.x branch in the evening. I forget to backport when I've merged the PR.
tdiesler:1438127977:2015-07-29T07:59:37.791+0000:1438127977:2015-07-29T07:59:37.791+0000:[~ancosen] I suspect your run your test with a flat surefire classpath. In which case the test sees the transitive tree of mvn dependencies in scope test, provided, compile. If you do the same thing in a modular environment (i.e. wildfly) it would behave very differently. 

Although it is reasonable to assume that a deployment can see camel-kafka APIs, it is incorrect to assume that camel-kafka can use the deployments classloader to load internals that only camel-kafka should see.

The handling/caching of classloaders in Kafka is a tragedy as well as it reliance on a particular TCCL. An API that works well in a modular environment makes little assumptions about classloaders. Instead it provides the caller with a means to pass in a CL of its choice.

In this particular case, camel-kafka would want to pass to Kafka its own CL to load the StringEncoder
acosentino:1438130508:2015-07-29T08:41:48.708+0000:1438130508:2015-07-29T08:41:48.708+0000:Hi Thomas, I think you were referring to Mark and not to me :-)
acosentino:1438166938:2015-07-29T18:48:58.114+0000:1438166938:2015-07-29T18:48:58.114+0000:Backported on branch 2.15.x :-)
mmindenhall:1438173428:2015-07-29T20:37:08.181+0000:1438173428:2015-07-29T20:37:08.181+0000:Thanks for the explanation...sounds like it was unrelated to my patch."
0,CAMEL-9025,Improvement,Minor,2.15.2,"3.0.0.M4, 3.0.0","

PropertiesComponent

",Resolved,Fixed,"3.0.0.M4, 3.0.0",Unassigned,Shaishav Parekh,0,2,2015-07-27 14:39:48+00:00,2019-07-31 14:20:52+00:00,Currently there is no way to view properties loaded via a file on the classpath if one is using the PropertiesComponent. It would be useful if one can programatically access the properties loaded via the classpath for reporting reasons.,"sparekh:1437981354:2015-07-27T15:15:54.468+0000:1437981354:2015-07-27T15:15:54.468+0000:I can load the properties file into a properties variable via
{code:java}
props.load(context.getApplicationContextClassLoader().getResourceAsStream(""myprops.properties""));
{code}

But it would be nice if I can access the properties via
{code:java}
context.getProperties()
{code}
function.
davsclaus:1443479844:2015-09-29T06:37:24.214+0000:1443479844:2015-09-29T06:37:24.214+0000:Some properties are only resolved on runtime, when using ${env} tokens and so on. So this can only be for static properties from files etc.

This is likely a bit more tricky to implement than at first thought.
davsclaus:1564554052:2019-07-31T14:20:52.426+0000:1564554052:2019-07-31T14:20:52.426+0000:There is a loadProperties method now on properties component"
0,CAMEL-9023,Improvement,Minor,2.15.2,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Marco Zapletal,0,3,2015-07-27 12:32:32+00:00,2015-09-25 09:20:39+00:00,"The current implementation of the RedisIdempotentRepository uses a (Redis) set as the underlying data structure. This is conceptually nice for keeping all consumed keys in a single logical location. However, it makes the management of keys more difficult, since we cannot use Redis' built in mechanisms for expiring keys and have to do a manual cleanup.


Thus, this issue proposes to use Redis String as the datatype for a single entry in order to provide support for expiring keys. If the community is in favor of this idea, I am happy to provide a patch (or a second, alternative implementation).","davsclaus:1438137519:2015-07-29T10:38:39.560+0000:1438137519:2015-07-29T10:38:39.560+0000:Yeah sure sounds good. We love contributions
http://camel.apache.org/contributing
githubbot:1443077833:2015-09-24T14:57:13.130+0000:1443077833:2015-09-24T14:57:13.130+0000:GitHub user mzapletal opened a pull request:

    https://github.com/apache/camel/pull/619

    ADDED Redis String based idempotent repository to support expiration,…

    … refs https://issues.apache.org/jira/browse/CAMEL-9023
    
    First version of an idempotent repository based on the Redis String data type. Test is still missing - I guess it doesn't make much sense to provide another unit test mocking Redis, but I can add an integration test if desired.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/mzapletal/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/619.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #619
    
----
commit 490c5b6ee8646822ce50f41b7683be22a0d54f2c
Author: Marco Zapletal <marco@edistream.com>
Date:   2015-09-24T14:52:16Z

    ADDED Redis String based idempotent repository to support expiration, refs https://issues.apache.org/jira/browse/CAMEL-9023

----

githubbot:1443144025:2015-09-25T09:20:25.645+0000:1443144025:2015-09-25T09:20:25.645+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/619
"
0,CAMEL-9022,Bug,Major,None,None,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Thomas Diesler,0,2,2015-07-27 11:46:27+00:00,2015-08-13 08:04:33+00:00,"Marshalling a Map to CSV internally converts a Map to a List. It seems that the JacksonTypeConverters now claim to be able to this. It however fails with 



Caused by: org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: java.util.List with value {firstName=John, lastName=Doe} due java.lang.IllegalArgumentException: Can not deserialize instance of java.util.ArrayList out of START_OBJECT token
 at [Source: N/A; line: -1, column: -1]
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.createTypeConversionException(BaseTypeConverterRegistry.java:585)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:131)
	at org.apache.camel.util.ExchangeHelper.convertToType(ExchangeHelper.java:203)
	at org.apache.camel.dataformat.csv.CsvMarshaller.marshal(CsvMarshaller.java:77)
	at org.apache.camel.dataformat.csv.CsvDataFormat.marshal(CsvDataFormat.java:78)
	at org.apache.camel.processor.MarshalProcessor.process(MarshalProcessor.java:83)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:454)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109)
	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:68)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:404)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:372)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:262)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:372)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:230)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:128)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:132)
	... 147 more
Caused by: org.apache.camel.RuntimeCamelException: java.lang.IllegalArgumentException: Can not deserialize instance of java.util.ArrayList out of START_OBJECT token
 at [Source: N/A; line: -1, column: -1]
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1642)
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:1247)
	at org.apache.camel.impl.converter.StaticMethodFallbackTypeConverter.convertTo(StaticMethodFallbackTypeConverter.java:62)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:327)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:114)
	... 166 more
Caused by: java.lang.IllegalArgumentException: Can not deserialize instance of java.util.ArrayList out of START_OBJECT token
 at [Source: N/A; line: -1, column: -1]
	at com.fasterxml.jackson.databind.ObjectMapper._convert(ObjectMapper.java:3286)
	at com.fasterxml.jackson.databind.ObjectMapper.convertValue(ObjectMapper.java:3212)
	at org.apache.camel.component.jackson.converter.JacksonTypeConverters.convertTo(JacksonTypeConverters.java:44)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:1243)
	... 169 more
Caused by: com.fasterxml.jackson.databind.JsonMappingException: Can not deserialize instance of java.util.ArrayList out of START_OBJECT token
 at [Source: UNKNOWN; line: -1, column: -1]
	at com.fasterxml.jackson.databind.JsonMappingException.from(JsonMappingException.java:148)
	at com.fasterxml.jackson.databind.DeserializationContext.mappingException(DeserializationContext.java:835)
	at com.fasterxml.jackson.databind.DeserializationContext.mappingException(DeserializationContext.java:831)
	at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.handleNonArray(CollectionDeserializer.java:283)
	at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:222)
	at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:212)
	at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:25)
	at com.fasterxml.jackson.databind.ObjectMapper._convert(ObjectMapper.java:3281)
	... 176 more




CrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/784","davsclaus:1437971792:2015-07-27T12:36:32.880+0000:1437971792:2015-07-27T12:36:32.880+0000:Fixed CAMEL-8554 to not be enabled by default.
davsclaus:1437972159:2015-07-27T12:42:39.841+0000:1437972159:2015-07-27T12:42:39.841+0000:What is the test data you use for csv? Is it just a string or what data do you send to its marshal ?
davsclaus:1437972953:2015-07-27T12:55:53.446+0000:1437972953:2015-07-27T12:55:53.446+0000:I also improved camel-csv to not do the list type conversion as that was wrong. It should iterate the body given in the marshal method as-is."
0,CAMEL-9021,Task,Major,2.15.2,"2.15.3, 2.16.0, 2.14.4","

license

",Resolved,Fixed,"2.15.3, 2.16.0, 2.14.4",Claus Ibsen,Daniel Pocock,0,3,2015-07-27 07:30:00+00:00,2015-07-29 09:52:45+00:00,"The Camel SIP component depends on org.apache.servicemix.specs / org.apache.servicemix.specs.jain-sip-api-1.2


That JAR depends on javax.sip / jain-sip-api


The JAIN sip-api classes are not under an Apache compatible free software license.


The related jain-sip-ri classes (the runtime implementation) are under an Apache compatible license so this bug doesn't concern them.


The solution is to change the dependency to org.opentelecoms.sip / sip-api or one of the other implementations.


http://search.maven.org/#search|ga|1|sip-api","davsclaus:1437963274:2015-07-27T10:14:34.885+0000:1437963274:2015-07-27T10:14:34.885+0000:Can you provide more information why you think that those SMX bundles are a problem?
daniel.pocock:1437964009:2015-07-27T10:26:49.851+0000:1437964009:2015-07-27T10:26:49.851+0000:It depends on the JAIN javax.sip JAR

Not all versions have a sources JAR, but if you go and look at one that does have a sources JAR you will see the license notices:

http://search.maven.org/#search|gav|1|g%3A%22javax.sip%22%20AND%20a%3A%22jain-sip-api%22

This is a common problem with Sun JARs

https://maven.apache.org/guides/mini/guide-coping-with-sun-jars.html

Various projects like Tomcat use alternative versions of the javax.* JARs having a suitable license.
davsclaus:1437964477:2015-07-27T10:34:37.809+0000:1437964477:2015-07-27T10:34:37.809+0000:It wraps the RI project and not the API
   <pkgGroupId>javax.sip</pkgGroupId>
        <pkgArtifactId>jain-sip-ri</pkgArtifactId>
        <pkgVersion>1.2.169</pkgVersion>


daniel.pocock:1437964655:2015-07-27T10:37:35.026+0000:1437964655:2015-07-27T10:37:35.026+0000:https://repo1.maven.org/maven2/org/apache/servicemix/specs/org.apache.servicemix.specs.jain-sip-api-1.2.1/2.5.0/org.apache.servicemix.specs.jain-sip-api-1.2.1-2.5.0.pom

contains a dependency on jain-sip-api

I looked in the code for this component, it definitely uses the SipFactory class

In Android, Google avoided this by using the gov.nist classes directly

I'll do a test build with org.opentelecoms.sip
githubbot:1437986335:2015-07-27T16:38:55.149+0000:1437986335:2015-07-27T16:38:55.149+0000:GitHub user dpocock opened a pull request:

    https://github.com/apache/camel/pull/572

    CAMEL-9021: camel-sip: change dependency to org.opentelecoms.sip / sip-api-1.2

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dpocock/camel sip-api

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/572.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #572
    
----
commit cf68d132ca28c9003cac8dff971af3553c550988
Author: Daniel Pocock <daniel@pocock.pro>
Date:   2015-07-27T16:37:32Z

    CAMEL-9021: camel-sip: change dependency to org.opentelecoms.sip / sip-api

----

davsclaus:1438039670:2015-07-28T07:27:50.885+0000:1438039670:2015-07-28T07:27:50.885+0000:Thanks for the PR
githubbot:1438134765:2015-07-29T09:52:45.462+0000:1438134765:2015-07-29T09:52:45.462+0000:Github user dpocock closed the pull request at:

    https://github.com/apache/camel/pull/572
"
0,CAMEL-9020,Improvement,Minor,2.15.2,None,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Preben Asmussen,0,3,2015-07-26 19:30:32+00:00,2015-08-01 11:00:41+00:00,"SSLv3 support has been removed in jdk 8.


The component should be upgraded to Splunk sdk 1.4.0, and use TLS instead. See https://github.com/splunk/splunk-sdk-java#java-and-ant.


A bundle is ready at http://mvnrepository.com/artifact/org.apache.servicemix.bundles/org.apache.servicemix.bundles.splunk/1.4.0.0_1","preben:1437911686:2015-07-26T19:54:46.006+0000:1437911686:2015-07-26T19:54:46.006+0000:The splunk sdk supports an easy way of configuring TLS on the Service class.
You can statically set the desired TLS version as an enum with values of SSLv3, TLSv1, TLSv1_1 or TLSv1_2 

I was thinking just to set the version to TLSv1_2 since it seems recommended for both jdk7 and jdk8
An other option could be to make it configurable so users can choose between TLS versions if it makes sense to do so.

Any comments ?


davsclaus:1437963312:2015-07-27T10:15:12.371+0000:1437963312:2015-07-27T10:15:12.371+0000:Yeah sure make it configurable and then set a default value
githubbot:1438249512:2015-07-30T17:45:12.205+0000:1438249512:2015-07-30T17:45:12.205+0000:GitHub user pax95 opened a pull request:

    https://github.com/apache/camel/pull/580

    CAMEL-9020: Splunk component should use TLS instead of SSLv3

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/pax95/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/580.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #580
    
----
commit 6c92a35875dffbcad22b7a974761a8c7d96ca4b5
Author: Preben Asmussen <preben.asmussen@gmail.com>
Date:   2015-07-27T17:49:20Z

    CAMEL-9020: Splunk component should use TLS instead of SSLv3

commit 9c8d66c7e7f5e946a0a41164e14f45d3613fdd0b
Author: Preben Asmussen <preben.asmussen@gmail.com>
Date:   2015-07-30T17:34:15Z

    do not continue if the saved search does not exists.

----

davsclaus:1438299519:2015-07-31T07:38:39.074+0000:1438299519:2015-07-31T07:38:39.074+0000:Thanks for the PR
davsclaus:1438299688:2015-07-31T07:41:28.953+0000:1438299688:2015-07-31T07:41:28.953+0000:Btw is there no way to use no TLS at all? eg if you can set the value to None or something to indicate SSL not to be used?
preben:1438300128:2015-07-31T07:48:48.314+0000:1438300128:2015-07-31T07:48:48.314+0000:Yeah - you right if using plain http. I'll add an option 'None' and do a PR.


githubbot:1438300213:2015-07-31T07:50:13.224+0000:1438300213:2015-07-31T07:50:13.224+0000:Github user pax95 closed the pull request at:

    https://github.com/apache/camel/pull/580

githubbot:1438328674:2015-07-31T15:44:34.264+0000:1438328674:2015-07-31T15:44:34.264+0000:GitHub user pax95 opened a pull request:

    https://github.com/apache/camel/pull/581

    CAMEL-9020 : polished - only set TLS when using https

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/pax95/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/581.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #581
    
----
commit 7166508f7b29ced25642f16464a2eb97654becf8
Author: Preben Asmussen <preben.asmussen@gmail.com>
Date:   2015-07-31T15:41:17Z

    CAMEL-9020 : polished - only set TLS when using https

----

preben:1438329682:2015-07-31T16:01:22.514+0000:1438329682:2015-07-31T16:01:22.514+0000:No need for a None option since it's covered by the scheme option
githubbot:1438398041:2015-08-01T11:00:41.668+0000:1438398041:2015-08-01T11:00:41.668+0000:Github user pax95 closed the pull request at:

    https://github.com/apache/camel/pull/581
"
0,CAMEL-9019,Bug,Minor,2.15.2,"2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.15.3, 2.16.0",Claus Ibsen,Claus Ibsen,0,1,2015-07-26 12:20:36+00:00,2015-07-26 12:57:54+00:00,This is not enlisted as ManagedRuntimeEndpointRegistry but as event notifier because its also that instance.,
0,CAMEL-9018,New Feature,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Luca Burgazzoli,Claus Ibsen,0,2,2015-07-26 10:11:37+00:00,2016-09-08 15:43:16+00:00,"We should create a maven archetype for java 8, that uses java 8 lambdas and style in the project.


Also maybe create a sample project in examples that does the same.",
0,CAMEL-9017,Bug,Minor,None,"2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.15.3, 2.16.0",Andrea Cosentino,Andrea Cosentino,0,1,2015-07-26 09:03:55+00:00,2015-07-26 10:25:42+00:00,"See Nabble:


http://camel.465427.n5.nabble.com/Bug-HazelcastIdempotentRepository-confirm-should-check-useRecovery-before-using-persistedCache-td5769887.html",
0,CAMEL-9016,Improvement,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,1,2015-07-26 08:10:00+00:00,2015-07-26 11:36:44+00:00,"When dumping the routes as xml we rely on not outputting default values, and the <jmxAgent> has a bunch of those set which we should configured as null and then infer their default value which we do in elsewhere.",
0,CAMEL-9015,Improvement,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,1,2015-07-26 07:03:30+00:00,2015-07-26 11:36:31+00:00,"The agent is initialized with JVM system properties and some are fallback and others take precedence.


A JVM system property should always take precedence.",
0,CAMEL-9014,New Feature,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,1,2015-07-25 08:41:42+00:00,2017-05-30 08:59:15+00:00,"We can gather statistics for how often each endpoint is used in dynamic EIPs such as recipient list, dynamic to, enricher, pollEnricher, dynamic router, and so on.


However this requires to store counters, and that would require AtomicLong so they are safe in concurrent environments, or use long with synchronized. 


We can have an option on JMXAgent to turn this on|off so people can turn it off if they dont need it.


However it may be nice to see which are the most used endpoint uris in all those dynamic EIPs.


Today you can see it from the managed endpoint registry, but it does not keep score which EIP its used by.","davsclaus:1437796117:2015-07-25T11:48:37.934+0000:1437796117:2015-07-25T11:48:37.934+0000:There is a new option on jmx agent you can turn on `extendedStatisticsEnabled` that enables this. Then there is JMX operations on various EIP mbeans to return the utilization statistics of the endpoints, so you can see how many times which endpoint are used.
davsclaus:1437796460:2015-07-25T11:54:20.789+0000:1437796505:2015-07-25T11:55:05.635+0000:We could also add this for less dynamic such as
- multicast

And maybe for the polling side as well in
- pollEnrich

And then add camel commands for jolokia/karaf to show the usage also

And add maybe operation on route and context level that is an aggregation of all those data (or in the endpoint registry mbean) we can gather all those stats from the eips, if extended is enabled).
davsclaus:1437881844:2015-07-26T11:37:24.301+0000:1437881844:2015-07-26T11:37:24.301+0000:We have for poll enrich now. Multicast makes less sense as the processors can be any kind of processor, not to send to endpoint."
0,CAMEL-9013,Bug,Major,"2.15.0, 2.15.1, 2.15.2",2.15.3,"
None
",Resolved,Fixed,2.15.3,Claus Ibsen,Bob Browning,0,4,2015-07-24 14:36:18+00:00,2015-07-27 10:12:58+00:00,"When sending a chunked POST whilst running the servlet under Tomcat, camel now fails to read the input stream and sets the body to null.


chunked-http-failure-test


This is due to camel checking the stream for available bytes introduced in CAMEL-5806. For whatever reason the CoyoteInputStream is returning 0 available bytes when handling a chunked request.



    if (len < 0) {
        InputStream is = request.getInputStream();
        if (is.available() == 0) {
            // no data so return null
            return null;
        }
    }","ukcrpb6:1437722736:2015-07-24T15:25:36.808+0000:1437722736:2015-07-24T15:25:36.808+0000:Is there any commit available pertaining to this fix?
davsclaus:1437723721:2015-07-24T15:42:01.337+0000:1437723721:2015-07-24T15:42:01.337+0000:Yes check the recent commits
dkulp:1437724748:2015-07-24T15:59:08.455+0000:1437724748:2015-07-24T15:59:08.455+0000:The code is still calling ""is.available() == 0"" which is still wrong.   Per spec, available() does NOT return any information about whether the body has any data or not.  It only returns an estimate of the number of bytes that can be read without blocking.   Thus, the code is still wrong.  An http client can send the headers, flush the network connection, pause, then send the data.   If the call to available() occurs in the pause, available() would be 0.  
davsclaus:1437896355:2015-07-26T15:39:15.114+0000:1437896355:2015-07-26T15:39:15.114+0000:See CAMEL-8643
ukcrpb6:1437958613:2015-07-27T08:56:53.884+0000:1437958613:2015-07-27T08:56:53.884+0000:This probably wont fix the issue for the servlet since the createConsumer method bypasses the getHttpBinding method it inherits.

{code}
        // ServletComponent.java # createConsumer

        // use the rest binding
        endpoint.setBinding(new ServletRestHttpBinding());
{code}
davsclaus:1437963178:2015-07-27T10:12:58.537+0000:1437963178:2015-07-27T10:12:58.537+0000:Thanks but it would not cause a problem as the default settings would not use that is.available check.

But I polished the code to inheirt those options on the binding also now."
0,CAMEL-9012,Bug,Major,2.15.2,"2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.15.3, 2.16.0",Akitoshi Yoshida,Akitoshi Yoshida,0,1,2015-07-24 14:17:41+00:00,2015-07-30 16:33:58+00:00,"The syntax check of olingo2 lib was tighten from version 2.0.1.
As a result, the batch message generated by camel-ollingo2's is rejected by olingo2 version 2.0.1 and newer.
Concretely, the current message includes two extra new lines within the batch part that is rejected by the olingo2 library.
OLINGO-739


We should remove these two extra lines.","ay:1437728634:2015-07-24T17:03:54.130+0000:1437728634:2015-07-24T17:03:54.130+0000:Updated the camel-olingo2 code to work with a newer olingo's odata2 2.0.x library and against the 2.0.0 and more recent servers.

In another ticket, I will add a more practical test to this component that does not require manually setting up a separate test server.
regards, aki"
0,CAMEL-9011,Improvement,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,1,2015-07-24 11:42:31+00:00,2015-07-24 12:53:47+00:00,"This EIP only uses 1 processor, but you can configure 2+ or more. But only the 1st is always used.


We should add a validation that would fail if people mis configured thus.",
0,CAMEL-9010,Improvement,Major,None,"2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.15.3, 2.16.0",Claus Ibsen,Claus Ibsen,0,1,2015-07-24 08:37:12+00:00,2015-07-24 08:39:23+00:00,"See SO
http://stackoverflow.com/questions/31601385/read-file-line-by-line-as-soon-as-these-lines-appear-in-the-file-using-apache-ca?noredirect=1#comment51156841_31601385


We should support the use-case if the file is deleted then its temporary not available, and the consumer should just ignore this and try to read the stream on next poll.",
0,CAMEL-9009,Wish,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Alexander Friedrichs,0,2,2015-07-24 07:40:03+00:00,2015-07-29 10:37:13+00:00,"There is an question for Camel RSS module with basic authentication in  Stakoverflow.
It should not be so complicated, to supplement the function.","davsclaus:1437714931:2015-07-24T13:15:31.131+0000:1437714931:2015-07-24T13:15:31.131+0000:camel-atom and camel-rss. People is welcome to dive in and see what auth atom supports for this. 
undso:1438038425:2015-07-28T07:07:05.241+0000:1438038425:2015-07-28T07:07:05.241+0000:Here is the git diff of the code to support username and password. Can someone please check the code?
undso:1438038759:2015-07-28T07:12:39.806+0000:1438038759:2015-07-28T07:12:39.806+0000:I've started with camel-rss, but later I'll take a look on camel-atom.
davsclaus:1438046835:2015-07-28T09:27:15.842+0000:1438046835:2015-07-28T09:27:15.842+0000:Please dont use commons-lang for simple string check. There is already in camel-core. ObjectHelper.isEmpty
undso:1438127715:2015-07-29T07:55:15.974+0000:1438127715:2015-07-29T07:55:15.974+0000:New Diff with username and password support for atom too.
undso:1438127805:2015-07-29T07:56:45.447+0000:1438127805:2015-07-29T07:56:45.447+0000:The new version is now with ObjectHelper.isEmpty. Thank you for the hint.
davsclaus:1438137423:2015-07-29T10:37:03.060+0000:1438137423:2015-07-29T10:37:03.060+0000:Thanks for the patch."
0,CAMEL-9008,New Feature,Major,None,None,"

microservice
rpc

",Resolved,Fixed,2.20.0,Dmitry Volodin,Andrew Harmel-Law,1,6,2015-07-24 07:20:42+00:00,2017-10-04 14:05:27+00:00,"Hi,


We're building Microservices with Camel, predominantly producing from REST DSL components and have got to the point where having an easy way to swap in GRPC [1] / Thrift [2] endpoints and clients would be of great help.


We wondered if this was already on the cards for a future release, and if we might be able to work on it, and if not, if it would be something we could work on and contribute (with guidance to smooth the design and implementation)?


Kind regards, the Capgemini UK and Indian Camel teams
[1] http://www.grpc.io/
[2] https://thrift.apache.org/","davsclaus:1437896764:2015-07-26T15:46:04.366+0000:1437896764:2015-07-26T15:46:04.366+0000:Yeah sure we love contributions. People is certainly welcome to work on a camel component for those.
http://camel.apache.org/contributing
andrew.harmel.law:1437909355:2015-07-26T19:15:55.552+0000:1437909355:2015-07-26T19:15:55.552+0000:Brilliant.  Thanks [~davsclaus].  Is there an existing component that we could take a look at so learn / steal from?
davsclaus:1443479868:2015-09-29T06:37:48.086+0000:1443479868:2015-09-29T06:37:48.086+0000:Any work on this?
davsclaus:1504840105:2017-09-08T11:08:25.694+0000:1504840105:2017-09-08T11:08:25.694+0000:Dmitry so it looks like you have most of this implement. Is there more work?
dmvolod:1504841408:2017-09-08T11:30:08.430+0000:1504841408:2017-09-08T11:30:08.430+0000:Claus, just one feature is missing - security capabilities for Thrift.
I will finish it till end of September.
davsclaus:1506038933:2017-09-22T08:08:53.581+0000:1506038933:2017-09-22T08:08:53.581+0000:Just a heads up that we will do a 2.20 release end of this month, so it would be good if you can get the last bit done next week.
dmvolod:1506071354:2017-09-22T17:09:14.532+0000:1506071354:2017-09-22T17:09:14.532+0000:I will submit PR with the new functions till the end of the next week, with some cut off of the beginning functionality, due to the missing some functions in Apache Thrift.
davsclaus:1506388353:2017-09-26T09:12:33.681+0000:1506388353:2017-09-26T09:12:33.681+0000:If you can find the time this week / evening that would be great, as otherwise chances are this is going to slip the release."
0,CAMEL-9007,New Feature,Major,None,None,"
None
",Resolved,Duplicate,Future,Claus Ibsen,Andrew Harmel-Law,2,4,2015-07-24 07:17:21+00:00,2016-03-30 07:25:43+00:00,"Hi,


We're building Microservices with Camel, predominantly producing from REST DSL components and have got to the point where having easy support for Zipkin[1] / Brave [2] would be of great help.


We wondered if this was already on the cards for a future release, and if we might be able to work on it, and if not, if it would be something we could work on and contribute (with guidance to smooth the design and implementation)?


Kind regards, the Capgemini UK and Indian Camel teams


[1] https://github.com/openzipkin/zipkin
[2] https://github.com/openzipkin/brave","davsclaus:1437896729:2015-07-26T15:45:29.809+0000:1437896729:2015-07-26T15:45:29.809+0000:Yeah sure we love contributions. People is certainly welcome to work on a camel-zipkin component.
http://camel.apache.org/contributing
andrew.harmel.law:1437909306:2015-07-26T19:15:06.165+0000:1437909306:2015-07-26T19:15:06.165+0000:Thanks [~cibsen@e-ma.net].  Is there an existing component that might be similar and which we could look at / steal from?
davsclaus:1443479885:2015-09-29T06:38:05.661+0000:1443479885:2015-09-29T06:38:05.661+0000:Any work on this?
andrew.harmel.law:1458086744:2016-03-16T08:05:44.392+0000:1458086744:2016-03-16T08:05:44.392+0000:Not yet sadly, but we're about to embark on a new round of upgrades and this might get done as a result of it.  We'll keep you posted here.
jstrachan:1459215769:2016-03-29T09:42:49.613+0000:1459215769:2016-03-29T09:42:49.613+0000:[~andrew.harmel.law] here's some work on camel and zipkin integration: https://issues.apache.org/jira/browse/CAMEL-9759
davsclaus:1459226790:2016-03-29T12:46:30.043+0000:1459226790:2016-03-29T12:46:30.043+0000:Tracking this in CAMEL-9759
andrew.harmel.law:1459293943:2016-03-30T07:25:43.794+0000:1459293943:2016-03-30T07:25:43.794+0000:Great news. Thanks [~davsclaus] and [~jstrachan] . Sorry we didn't get round to it ourselves.  We'll look out for an RC and see if we can test it in our env."
0,CAMEL-9006,New Feature,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Daniel Kulp,Daniel Kulp,0,2,2015-07-23 19:47:58+00:00,2015-10-08 20:45:38+00:00,"When using the rest DSL based route, it would be useful if the same route could be used for multiple components.   This would help the CoAP case where the same REST routes may be used for both http based clients as well as CoAP/iot things.","davsclaus:1437713660:2015-07-24T12:54:20.550+0000:1437713660:2015-07-24T12:54:20.550+0000:This commit caused a bunch of tests to fail

{code}
Tests in error:
  FromRestGetCorsCustomTest>TestSupport.runBare:58->ContextTestSupport.setUp:117->ContextTestSupport.startCamelContext:174 » NoSuchBean
  FromRestGetCorsTest>TestSupport.runBare:58->ContextTestSupport.setUp:117->ContextTestSupport.startCamelContext:174 » NoSuchBean
  FromRestGetEmbeddedRouteTest>TestSupport.runBare:58->ContextTestSupport.setUp:117->ContextTestSupport.startCamelContext:174 » NoSuchBean
  FromRestGetEndPathTest>TestSupport.runBare:58->ContextTestSupport.setUp:117->ContextTestSupport.startCamelContext:174 » NoSuchBean
  FromRestGetHttpErrorCodeTest>TestSupport.runBare:58->ContextTestSupport.setUp:117->ContextTestSupport.startCamelContext:174 » NoSuchBean
  FromRestGetInterceptTest>TestSupport.runBare:58->ContextTestSupport.setUp:117->ContextTestSupport.startCamelContext:174 » NoSuchBean
  FromRestGetOnExceptionTest>TestSupport.runBare:58->ContextTestSupport.setUp:117->ContextTestSupport.startCamelContext:174 » NoSuchBean
  FromRestGetRouteOnExceptionTest>TestSupport.runBare:58->ContextTestSupport.setUp:117->ContextTestSupport.startCamelContext:174 » NoSuchBean
  FromRestGetTest>TestSupport.runBare:58->ContextTestSupport.setUp:117->ContextTestSupport.startCamelContext:174 » NoSuchBean
  FromRestIdAndDescriptionTest>TestSupport.runBare:58->ContextTestSupport.setUp:117->ContextTestSupport.startCamelContext:174 » NoSuchBean
  FromRestUriPrefixTest>TestSupport.runBare:58->ContextTestSupport.setUp:117->ContextTestSupport.startCamelContext:174 » NoSuchBean
  ManagedFromRestGetEmbeddedRouteTest>TestSupport.runBare:58->ContextTestSupport.setUp:117->ContextTestSupport.startCamelContext:174 » NoSuchBean
  ManagedFromRestGetTest>TestSupport.runBare:58->ContextTestSupport.setUp:117->ContextTestSupport.startCamelContext:174 » NoSuchBean
  ManagedRestRegistryTest>TestSupport.runBare:58->ContextTestSupport.setUp:117->ContextTestSupport.startCamelContext:174 » NoSuchBean

Tests run: 5406, Failures: 0, Errors: 14, Skipped: 4
{code}
davsclaus:1438739313:2015-08-05T09:48:33.144+0000:1438739313:2015-08-05T09:48:33.144+0000:The tests passes now.

What is needed is to update the documentation
http://camel.apache.org/rest-dsl
davsclaus:1441590158:2015-09-07T09:42:38.781+0000:1441590158:2015-09-07T09:42:38.781+0000:Dan please remember to update the rest-dsl documentation"
0,CAMEL-9005,Bug,Major,None,None,"
None
",Resolved,Fixed,"2.15.3, 2.16.0",Jonathan Anstey,Jonathan Anstey,0,1,2015-07-23 19:09:39+00:00,2015-07-23 19:11:46+00:00,No Desc,
0,CAMEL-9004,Improvement,Minor,None,None,"

features

",Closed,Won't Fix,None,Unassigned,Greg A.,0,2,2015-07-23 14:39:04+00:00,2015-12-10 15:57:45+00:00,"Some components have got hostname and port parameters.
With SRV DNS record, service can retrieve the correct hostname and port.


> dig -t SRV _xmpp-server._tcp.gmail.com
_xmpp-server._tcp.gmail.com. 900 IN	SRV	5 0 5269 xmpp-server.l.google.com.
_xmpp-server._tcp.gmail.com. 900 IN	SRV	20 0 5269 alt4.xmpp-server.l.google.com.


But few libraries implement this feature. we have to contact each underlying librairies provider to implement it before update the camel component.


we could check already compliant components, test them and update documentation.
we also could start to implement it into one or two librairies with the following process.


1/ create JIRA int the underlying library, 
2/ standby correction
3/ update component, 
4/ test, 
5/ update doc, 
6/ release


this issue could be very long to resolve.


from(""smtp://_smtp._tcp.gmail.com"")
from(""rabbitmq://_amqp._tcp.rabbitmq.com"")","davsclaus:1437688328:2015-07-24T05:52:08.410+0000:1437688328:2015-07-24T05:52:08.410+0000:Can you explain more about this, and why you think its any of Camel concern.

Camel is the facade, if there is some networking thingy then its those 3rd party libraries to either support or not support that.
"
0,CAMEL-9003,Improvement,Major,None,"2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.15.3, 2.16.0",Jonathan Anstey,Jonathan Anstey,0,2,2015-07-23 12:51:33+00:00,2015-07-23 17:58:35+00:00,"User reported that Camel is 'caching' the timeout setting on outgoing netty calls, so the first call out it would be using the correct timeout setting, but subsequent outgoing calls with different timeout settings Camel would still use the same initial timeout given instead of the new one.
So usually you would override these kind of things in headers for each request... but you can't just change the timeout value for each call in netty, you'd have to reconstruct the entire channel pipeline... which would be a bit expensive  


Solution is to add requestTimeout to key for ProducerCache so we get distinct producers with different requestTimeout values.","davsclaus:1437627307:2015-07-23T12:55:07.619+0000:1437627307:2015-07-23T12:55:07.619+0000:People should really be careful, if you have 1000s of different timeout values you have 10000s of different producers. This is bad.

People should maybe settle for a limited number of different timeouts and use that only.
janstey:1437627443:2015-07-23T12:57:23.291+0000:1437627443:2015-07-23T12:57:23.291+0000:Yeah, I agree it isn't ideal. Ideal would have been to use a header override for this... but at least now you can have more than one timeout :-)
davsclaus:1437628015:2015-07-23T13:06:55.107+0000:1437628015:2015-07-23T13:06:55.107+0000:Yeah if its a header and then the pipeline can read and use that over the configured value - if that would be possible. Then its the same producer instance in use.
janstey:1437645507:2015-07-23T17:58:27.708+0000:1437645507:2015-07-23T17:58:27.708+0000:I was assuming that modifying the channel pipeline would be a really expensive thing to do but in reality over a lot of messages the difference is minimal. It was only slightly slower to use a header over 100K messages:

100000 messages with timeout set via header: 27101ms.
100000 messages with timeout set via uri: 26615ms.

After http://git-wip-us.apache.org/repos/asf/camel/commit/b587d402 you can now use a CamelNettyRequestTimneout header to override this setting."
0,CAMEL-9002,Improvement,Minor,2.15.2,None,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Chris Pimlott,0,2,2015-07-22 23:36:19+00:00,2015-07-29 17:30:51+00:00,"Normally, any headers set within the velocity header are preserved as headers on the out message.  However, this does not work if you use your own VelocityContext via the CamelVelocityContext.  This is because VelocityEndpoint relies on the fact that the ""headers"" entry in the velocity context normally points directly to the current Exchange's in headers.  This is not likely true when using an existing velocity context.


A more foolproof solution might be to look for and explicitly copy any updated headers from the velocity context to the out message.","pimlottc:1437579853:2015-07-22T23:44:13.283+0000:1437579853:2015-07-22T23:44:13.283+0000:Adding a test case that demonstrates this.  {{VelocityContextHelper.generateVelocityContext}} generates a velocity Context the exact same way that {{VelocityEndpoint.onExchange}} does when none already exists, but it doesn't work since it receives a different Exchange instance than VelocityEndpoint does.
pimlottc:1437580024:2015-07-22T23:47:04.487+0000:1437580024:2015-07-22T23:47:04.487+0000:Hmm, I realize now the proposed solution might not be so simple, since if we are using a custom Velocity Context, there's no guarantee there actually is a {{headers}} key that we should be looking for.

Another possible solution would be to allow the user to specify a {{Context}} or {{Map}} of *additional* context variables that would be added to the default auto-generated context.
davsclaus:1437601972:2015-07-23T05:52:52.018+0000:1437601972:2015-07-23T05:52:52.018+0000:What is the use case for this. Surely if you do your own velocity context then the default behavior no longer apply.
pimlottc:1437642645:2015-07-23T17:10:45.257+0000:1437642681:2015-07-23T17:11:21.174+0000:I am using velocity templates to format email messages.  Being able to set headers is very handy in order to generate the subject line.

{code}
#set( $headers.subject = ""[$client] New project created: $projectName"" )
{code}

However, I also have to put a lot of boilerplate in the template to initialize variables depending on the domain object message body:

{code}
#set( $request = $body )
#set( $client = $request.client[0] )
#set( $requestNumber = $request.parts[0].requestNumber )
#set( $projectName =   $request.parts[0].projectName )
#set( $sourceLocale =  $request.parts[0].sourceLocale )
{code}

Have all these initializations in the template is confusing for the users and invites potential errors.  So I was looking for a way to pre-initialize the context with my domain-specific variables, while still waiting to be able to get values ""out"" of the template for subject, from, etc.  I really don't specific care about making a new velocity context, just adding a few variables.

davsclaus:1437644268:2015-07-23T17:37:48.958+0000:1437644268:2015-07-23T17:37:48.958+0000:Yeah we can add options for map/context for additional. Wonder if map is the best as you just want some key/value pairs together with what Camel provides.

Is that what you are looking for? And are those values shared for all or are you setting those specially per exchange ?
pimlottc:1437650195:2015-07-23T19:16:35.922+0000:1437650195:2015-07-23T19:16:35.922+0000:A Map for additional variables would be just fine.  I'm picturing a new header {{CamelVelocityAdditionalContext}}, {{CamelVelocitySupplementaryContext}} or something like that.

I'm not certain what you mean about the last question.  There would be different variables to pre-populate depending both on the type of email and the message data type.  The values would differ depending on the message contents.

e.g. one notification route splits request messages by part and one by client, so they have different boilerplate:

{code}
#set( $part = $body )
#set( $request = $part.request )
...
{code}

{code}
#set( $client = $body )
#set( $request = $client.parts[0].request )
...
{code}

davsclaus:1437688184:2015-07-24T05:49:44.610+0000:1437688184:2015-07-24T05:49:44.610+0000:Yeah something can be added here
https://github.com/apache/camel/blob/master/components/camel-velocity/src/main/java/org/apache/camel/component/velocity/VelocityEndpoint.java#L199

Where if there is a header with a special key such as `CamelVelocityAdditionalContext` and of `Map` type then those key/values can be added.

Wonder if you would be able to work on a patch for this?
http://camel.apache.org/contributing
pimlottc:1438107638:2015-07-29T02:20:38.666+0000:1438107638:2015-07-29T02:20:38.666+0000:Please take a look at https://github.com/apache/camel/pull/575, thanks.
davsclaus:1438125478:2015-07-29T07:17:58.327+0000:1438125478:2015-07-29T07:17:58.327+0000:Thanks for the PR
pimlottc:1438162110:2015-07-29T17:28:30.692+0000:1438162251:2015-07-29T17:30:51.799+0000:For reference, I found using SpEL to be the easiest way to define the context map when using the Spring DSL:

{code}
    <setHeader headerName=""CamelVelocitySupplementalContext"">
      <spel>#{ {
        a: ""apple"",
        DateTimeFormat: T(org.joda.time.format.DateTimeFormat),
      } }</spel>
    </setHeader>
{code}

To add keys to an existing map, you can use the Guava map builder:
{code}
    <setHeader headerName=""CamelVelocitySupplementalContext"">
      <description>Add to context map, respective existing entries (if any)</description>
      <spel>#{ new com.google.common.collect.ImmutableMap.Builder()
                .putAll(request.headers[CamelVelocitySupplementalContext] ?: {:})
                .put(""a"", ""apple"")
                .put(""DateTimeFormat"", T(org.joda.time.format.DateTimeFormat))
                .build() }</spel>
    </setHeader>
{code}

* [SpEL: Inline Maps|http://docs.spring.io/spring/docs/current/spring-framework-reference/html/expressions.html#expressions-inline-maps]"
0,CAMEL-9001,New Feature,Major,2.16.0,None,"

features

",Resolved,Won't Fix,None,Unassigned,Daniel Pocock,0,3,2015-07-22 13:10:25+00:00,2015-07-24 05:54:05+00:00,Add a component for the Interactive Brokers Trader Workstation (TWS) API,"daniel.pocock:1437542344:2015-07-22T13:19:04.570+0000:1437542344:2015-07-22T13:19:04.570+0000:There is a demo app exercising each type of consumer and producer at https://github.com/OpenSourceTrading/tws-camel-demo

I'll create a wiki page about the component once it has been merged.
githubbot:1437542444:2015-07-22T13:20:44.069+0000:1437542444:2015-07-22T13:20:44.069+0000:GitHub user dpocock opened a pull request:

    https://github.com/apache/camel/pull/568

    Ib api

    JIRA issue:
    https://issues.apache.org/jira/browse/CAMEL-9001

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dpocock/camel ib-api

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/568.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #568
    
----
commit 4625b603eddd3514dc9da71e6e0870cc0cf0c23b
Author: Daniel Pocock <daniel@pocock.pro>
Date:   2015-07-22T13:10:56Z

    CAMEL-9001: add camel-interactivebrokers component for TWS API

commit 1a535568bb97dbb46babb9efd357ce1f4eb911cd
Author: Daniel Pocock <daniel@pocock.pro>
Date:   2015-07-22T13:14:37Z

    Merge branch 'master' into ib-api
    
    Conflicts:
    	parent/pom.xml

----

davsclaus:1437560378:2015-07-22T18:19:38.375+0000:1437560378:2015-07-22T18:19:38.375+0000:Please when submitting a new component, then do check for license compatability.

I am not sure what that TWS uses. But the -sources JAR had this header which alerts me
{code}
/* Copyright (C) 2013 Interactive Brokers LLC. All rights reserved.  This code is subject to the terms
 * and conditions of the IB API Non-Commercial License or the IB API Commercial License, as applicable. */
{code}

You can see about what ASF license we can accept in this guide
http://camel.apache.org/add-new-component-guide.html
daniel.pocock:1437560644:2015-07-22T18:24:04.893+0000:1437560644:2015-07-22T18:24:04.893+0000:
I agree, that code can't be copied into the Camel repository.  None of that code has been copied into the pull request, all interaction is through the API.

TWS itself is not open source at all and if you look closely you will find some of the code is obfuscated.  It opens a socket to listen for connections from the Camel JVM.  People have to view it as a black box or treat it as they would any external service.
davsclaus:1437560884:2015-07-22T18:28:04.601+0000:1437560884:2015-07-22T18:28:04.601+0000:The code imports from that JAR don't it?

For example from the Camel component source code in the PR
{code}
+import com.ib.client.Contract;
+import com.ib.client.TickType;
+import com.ib.client.Types.MktDataType;
+import com.ib.client.Types.SecType;
+import com.ib.controller.ApiController.ITopMktDataHandler;
{code}

And if so that JAR uses a non valid license then we cannot accept this PR. If this is the case please close the PR and this ticket.
daniel.pocock:1437561029:2015-07-22T18:30:29.224+0000:1437561029:2015-07-22T18:30:29.224+0000:Under point 2 in the link http://camel.apache.org/add-new-component-guide.html it mentions the camel-extra repository - so does this belong there?
daniel.pocock:1437561440:2015-07-22T18:37:20.004+0000:1437561440:2015-07-22T18:37:20.004+0000:Claus, can you also comment on the Camel project's attitude to API JARs, e.g. the Oracle vs Google issue?

https://en.wikipedia.org/wiki/Oracle_America,_Inc._v._Google,_Inc.
davsclaus:1437561464:2015-07-22T18:37:44.612+0000:1437561464:2015-07-22T18:37:44.612+0000:Your choice. It cannot be accepted here, sorry.

The story should be that this is not a choice between ASF or Camel Extra, as if there is only 2 choices. There is plenty of other communities, and maybe having it independent at github is a better place to innovate faster and have quick releases and whatnot. 
daniel.pocock:1437561914:2015-07-22T18:45:14.085+0000:1437561914:2015-07-22T18:45:14.085+0000:Yes, I agree that there are other options, like hosting it independently on Github

The camel-extra link is a link to Google Code, should it now point to https://github.com/camel-extra/camel-extra or somewhere else and is that where the pull request should be?

For those projects that live in camel-extra or independent repositories, what is the attitude to documenting them on the main wiki?  I see other projects are there but if that is an anti-pattern please tell me.  In any case, if I put this on the wiki I will include a comment about licensing.
githubbot:1437562978:2015-07-22T19:02:58.443+0000:1437562978:2015-07-22T19:02:58.443+0000:Github user dpocock closed the pull request at:

    https://github.com/apache/camel/pull/568

daniel.pocock:1437567410:2015-07-22T20:16:50.273+0000:1437567410:2015-07-22T20:16:50.273+0000:
I've now adapted the patch to camel-extras and raised an issue at:

https://camel-extra.atlassian.net/browse/CAMEX-69

Please let me know about the wiki question and then I'll close this issue.
davsclaus:1437601444:2015-07-23T05:44:04.371+0000:1437601444:2015-07-23T05:44:04.371+0000:Oh I think that we just pushed the problem to Camel Extra. Eg that project cannot include projects that uses an unknown or licenses that restrict their users etc. Camel Extra however can include a wider range of licenses such as GPL etc which we cannot here at ASF. 

It is not clear what the license is for that TWS api JAR. Maybe you can find the license or get in touch with that company so they can tell us, or maybe they can do a release which clearly states what the license is. Or maybe they would consider licensing it using a more known license - There are many FOSS licenses out today. The JAR of the TWS only has that comment in the -sources JAR. There is no LICENSE file or anything to indicate more details. It also seems that this IB license is divided into commercial vs non-commercial which is also problematic. Any users of ASF should be able to use the software for any way they like, whether its commercial or not etc. The same should really be the goal for Camel Extra too.

If that company for example would re-license their API JAR in a compatible way then we are happy to include the camel component here. As its only the API JAR then its not their secret trading source code, but assuming only the code needed to make it easier to integrate with their software. And hence maybe that company is more willingly to consider a re-license or use some license that the FOSS communities can accept.

daniel.pocock:1437602633:2015-07-23T06:03:53.808+0000:1437602633:2015-07-23T06:03:53.808+0000:
There are two separate issues here:

a) the license itself - that is available via a link from the POM.  As the license title suggests, the license text does not meet the requirements of the open source community and none of that code can be copied into an Apache repository, that is fully understood

b) the component for Camel.  It is optional both at compile time and for distribution.  If somebody chooses to make a build without this component, nothing else will break.  Debian, for example, contains the FreeRADIUS package which includes an optional Oracle module, disabled with a compile option: https://sources.debian.net/src/freeradius/2.2.5%2Bdfsg-0.2/debian/rules/#L85 but the module source is still part of the source package and it is in the repository so people can manually enable it if they want to and if they have the non-free dependencies on their system.  Could Camel simply flag such dependencies in the same way?

davsclaus:1437603236:2015-07-23T06:13:56.400+0000:1437603236:2015-07-23T06:13:56.400+0000:b = no. 

The JAR is not optional, you have java imports in the source code. The compiler cannot compile if the JAR is missing and the code cannot either run at runtime without the JAR on the classpath.

ASF does not do any tricks. You should be able to use the component as-is without having to install or do something extra to make it work. If that is required then ASF will not accept that. Only if the JAR is some 3rd party add-on that is not the primary function of the component it may be possible.

See more details at
http://www.apache.org/legal/resolved.html#optional
daniel.pocock:1437603756:2015-07-23T06:22:36.696+0000:1437603756:2015-07-23T06:22:36.696+0000:Just to clarify what I meant in (b) - could such components be built using some alternative profile in Maven, e.g.

mvn -Pnonfreestuff

and if somebody doesn't enable that profile, such things are not built?  As long as such components don't end up becoming dependencies for essential parts of the project, this would give the user an option to build them in their own environment.  I put some questions more specific to Camel-extra policy in CAMEX-69
davsclaus:1437604055:2015-07-23T06:27:35.848+0000:1437604055:2015-07-23T06:27:35.848+0000:No we do not ship any kind of source code that uses 3rd party that do not adhere to the ASF policy.

Neither should Camel Extra - eg users should safely assume its fine to use the software. 

It really sound like your component should NOT be at ASF or Camel Extra under the current license terms of that 3rd party JAR.
davsclaus:1437688445:2015-07-24T05:54:05.249+0000:1437688445:2015-07-24T05:54:05.249+0000:TWS is not an accepted license
http://www.apache.org/legal/resolved.html#category-a
http://www.apache.org/legal/resolved.html#optional"
0,CAMEL-9000,Improvement,Major,None,"3.0.0, Future","
None
",Resolved,Won't Fix,"3.0.0, Future",Unassigned,Claus Ibsen,0,1,2015-07-22 12:31:41+00:00,2019-07-31 09:14:45+00:00,"They use identity hashcode as part of mbean name to make sure they are unique. But if they are part of routes, we can use the route id, node id, as they are unique, and its more understandable by end users.","davsclaus:1437539543:2015-07-22T12:32:23.398+0000:1437539543:2015-07-22T12:32:23.398+0000:This may require that the route id and node id are applicable as part of mbean naming. eg if they have space and other symbols it may be a little problem.
davsclaus:1437541736:2015-07-22T13:08:56.502+0000:1437541736:2015-07-22T13:08:56.502+0000:As you can have potential 2+ consumers with the same uri, but for different routes, we could have a naming clash if we use uri as part of name for consumer.

"
0,CAMEL-8999,New Feature,Major,None,None,"
None
",Resolved,Abandoned,Future,Unassigned,Jyrki Ruuskanen,1,4,2015-07-22 12:09:26+00:00,2022-09-02 09:03:51+00:00,"In our use case we need to spot routes that are processing less than expected or too many exchanges in a certain time. The limits also depend on whether it is a busy or a quiet time (day vs night, weekdays vs weekend etc.).


Also, we would like to be able to spot routes that are stuck but produce no errors.


In my opinion the most natural solution is a RoutePolicy that would keep count of inflight and completed exchanges and perform periodic checks on this information. Multiple checks with different schedules would be allowed per RoutePolicy instance.


If a check fails the RoutePolicy would log a warning. These warnings could then be singled out based on the logger by, for example, an automated log watcher.","githubbot:1437538542:2015-07-22T12:15:42.731+0000:1437538542:2015-07-22T12:15:42.731+0000:GitHub user yuruki opened a pull request:

    https://github.com/apache/camel/pull/567

    CAMEL-8999 Watchdog route policy

    Watchdog route policy for spotting starved, overactive or stuck routes.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/yuruki/camel camel-watchdog

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/567.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #567
    
----
commit 95f5f49289cb29e46c185a017541fa40f1d08a1c
Author: Jyrki Ruuskanen <yuruki@kotikone.fi>
Date:   2015-07-22T12:11:04Z

    Added WatchdogRoutePolicy

----

githubbot:1480051512:2016-11-25T13:25:12.523+0000:1480051512:2016-11-25T13:25:12.523+0000:Github user yuruki closed the pull request at:

    https://github.com/apache/camel/pull/567
"
0,CAMEL-8998,Task,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Andrea Cosentino,Andrea Cosentino,0,1,2015-07-22 11:50:44+00:00,2015-10-03 10:54:15+00:00,We need to add Camel-git documentation to Camel site.,"acosentino:1443840855:2015-10-03T10:54:15.002+0000:1443840855:2015-10-03T10:54:15.002+0000:Also, I've added a link to camel-github page in the component list page."
0,CAMEL-8997,New Feature,Minor,None,None,"
None
",Resolved,Fixed,2.16.0,Andrea Cosentino,Andrea Cosentino,0,1,2015-07-22 11:48:25+00:00,2015-07-23 15:52:55+00:00,"Adding a ""show branches"" operation to Camel-git producer can be useful in some situations.",
0,CAMEL-8996,New Feature,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Thomas Diesler,0,2,2015-07-22 10:29:12+00:00,2015-07-24 07:40:05+00:00,"Component camel-undertow


Add support for 



            ProducerTemplate producer = camelctx.createProducerTemplate();
            String result = producer.requestBodyAndHeader(""direct:start"", null, Exchange.HTTP_QUERY, ""name=Kermit"", String.class);
            Assert.assertEquals(""Hello Kermit"", result);




and possibly other headers. This works for camel-http4","davsclaus:1437533797:2015-07-22T10:56:37.069+0000:1437533797:2015-07-22T10:56:37.069+0000:We should let it reuse camel-http so it can reuse that logic. And even better if we get a camel-htttp-core module for better reuse
davsclaus:1437688598:2015-07-24T05:56:38.032+0000:1437688598:2015-07-24T05:56:38.032+0000:There is a camel-http-common now that camel-undertow likely can benefit from extending
davsclaus:1437694788:2015-07-24T07:39:48.638+0000:1437694788:2015-07-24T07:39:48.638+0000:The http-common is servlet based and undertow dont use that api."
0,CAMEL-8995,Improvement,Major,None,"2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.15.3, 2.16.0",Claus Ibsen,Claus Ibsen,0,2,2015-07-22 04:50:57+00:00,2015-07-22 04:57:15+00:00,"See nabble
http://camel.465427.n5.nabble.com/Stream-Cache-spool-file-deletion-when-marshaling-to-JSON-with-Jackson-tp5769699.html",
0,CAMEL-8994,Improvement,Major,2.14.3,"2.15.3, 2.16.0, 2.14.4","
None
",Resolved,Implemented,"2.15.3, 2.16.0, 2.14.4",Claus Ibsen,Zoltan Farkas,0,2,2015-07-21 15:48:20+00:00,2015-07-23 17:21:14+00:00,"ConcurrentLinkedHashmap get huge on these servers (200 +Mb) 


There are some CPU related defaults + Some padding that are the source of this, more discussion at:


https://github.com/ben-manes/concurrentlinkedhashmap/issues/43


upgrading to a newer version should remove the padding and reduce memory usage...


Another thing I noticed that is related, is that LRUCache 
default initial size is equal with maximum size... which is 1000, would it make more sense to have a lower default for initialSize? (64)","davsclaus:1437523153:2015-07-22T07:59:13.902+0000:1437523153:2015-07-22T07:59:13.902+0000:There is a ticket about upgrading the CL HashMap but that newer version is Java8+ only. And Camel supports Java7.

davsclaus:1437523207:2015-07-22T08:00:07.768+0000:1437523207:2015-07-22T08:00:07.768+0000:Yeah good idea to adjust the iniitalize size, its own default is 16, which we will do also.
davsclaus:1437523672:2015-07-22T08:07:52.097+0000:1437523680:2015-07-22T08:08:00.531+0000:The initial size has been dropped to 16 - for the other you will have to wait for when we drop Java7
zolyfarkas:1437642455:2015-07-23T17:07:35.896+0000:1437642455:2015-07-23T17:07:35.896+0000:Hi Claus, 

CL Hashmap 1.4.2 seems to fix the issue (remove the Padded types), and the code is 1.6 compatible. I believe camel 2.14.3 uses something older, it would be nice if we can upgrade.

I was able to take the latest ConcurrentLinkedHashap from Github which contains the fix that removes the padded types that take up most of the memory, and use it successfully with 2.14.3.

thank you


davsclaus:1437643274:2015-07-23T17:21:14.107+0000:1437643274:2015-07-23T17:21:14.107+0000:Ah good, it was using 1.4 and I just upgraded it to 1.4.2."
0,CAMEL-8963,Bug,Minor,2.15.2,"2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.15.3, 2.16.0",Claus Ibsen,Sergey,0,2,2015-07-14 05:47:46+00:00,2015-07-14 07:58:14+00:00,"In previous versions of camel (2.13.2 for sure) it was possible to use camel:route-suspend command and specify route id only. In 2.15.2 its not possible anymore. For example:



karaf@root()> camel:route-list
 Context                           Route                                  Status
 -------                           -----                                  ------
 fi-remurex-cpty-context           fi-remurex-institution-queue           Started
karaf@root()> camel:route-suspend fi-remurex-institution-queue
Error executing command camel: route-suspend: argument context is required




At the same time, on <tab> key camel:route-suspend command still suggests route, but not context as second parameter. Used route id is unique, so I don't think its a good idea to ask for context in this case.


karaf 3.0.4, camel 2.15.2.","cp123:1436824305:2015-07-14T05:51:45.377+0000:1436824305:2015-07-14T05:51:45.377+0000:BTW, when I specify both route id and context id, I got no error messages, but route is still started. So this is also another bug probably.
cp123:1436824563:2015-07-14T05:56:03.166+0000:1436824563:2015-07-14T05:56:03.166+0000:hawtio, at the same time, shows that route is suspended.
davsclaus:1436825357:2015-07-14T06:09:17.037+0000:1436825357:2015-07-14T06:09:17.037+0000:The context id must be specified. You can use tab completion for the context-id.

If you look in the log with log:display it should say if the route is suspended/stopped etc, dont you see that?
cp123:1436825663:2015-07-14T06:14:23.423+0000:1436825663:2015-07-14T06:14:23.423+0000:Yes, I can see log message that route was suspended. Just route-list displays wrong status after suspending.

And of course, there is no problem to specify context (just a bit inconvenient when route id is unique), but looks like tab completion doesn't work. 

davsclaus:1436827890:2015-07-14T06:51:30.130+0000:1436827890:2015-07-14T06:51:30.130+0000:Yeah its a bug in the commands got that fixed now
{code}
karaf@root> camel:route-list
 Context        Route          Status
 -------        -----          ------
 camel-1        route1         Started
 camel-2        route2         Started
karaf@root> camel:route-suspend route
route1   route2
karaf@root> camel:route-suspend route1 camel-1
karaf@root> camel:route-list
 Context        Route          Status
 -------        -----          ------
 camel-1        route1         Suspended
 camel-2        route2         Started
{code}
davsclaus:1436830361:2015-07-14T07:32:41.149+0000:1436830361:2015-07-14T07:32:41.149+0000:And yeah the 2nd completer didnt work I am fixing that too.
davsclaus:1436830880:2015-07-14T07:41:20.340+0000:1436830880:2015-07-14T07:41:20.340+0000:Ah great I found a way to make the 2nd parameter optional, so you can just do by route id, and it also support * as wildcard, so you can do bulk operations.
cp123:1436831033:2015-07-14T07:43:53.543+0000:1436831033:2015-07-14T07:43:53.543+0000:Claus, it *was* optional in 2.13.2, I've always used this command w/o context id.
davsclaus:1436831894:2015-07-14T07:58:14.816+0000:1436831894:2015-07-14T07:58:14.816+0000:Yes but 2.13.x is old and the commands has been reworked to allow reuse for outside karaf and added more commands and whatnot."
0,CAMEL-8962,Bug,Major,2.15.2,,"
None
",Resolved,Not A Problem,None,Claus Ibsen,Chris Pimlott,0,2,2015-07-13 22:32:05+00:00,2015-07-14 17:41:02+00:00,"Specifying the a velocity template via the CamelVelocityResourceUri does not work correctly if the velocity: URI used contains a character that is URL encoded.


For example:



from(""direct:input"")
.setHeader(VelocityConstants.VELOCITY_RESOURCE_URI).constant(""velocity/letter.vm"")
.to(""velocity:[template-in-header]"")
.to(""mock:results"");




Results in: java.io.FileNotFoundException: Cannot find resource: [template-in-header] in classpath for URI: [template-in-header]","pimlottc:1436798315:2015-07-13T22:38:35.979+0000:1436798315:2015-07-13T22:38:35.979+0000:This happens because of the second line in VelocityEndpoint.findOrCreateEndpoint:

{code}
    public VelocityEndpoint findOrCreateEndpoint(String uri, String newResourceUri) {
        String newUri = uri.replace(getResourceUri(), newResourceUri);
        log.debug(""Getting endpoint with URI: {}"", newUri);
        return getCamelContext().getEndpoint(newUri, VelocityEndpoint.class);
    }
{code}

The problem is a mismatch in encoding between {{uri}} and {{getResourceUri()}}.
{code}
* url: velocity://%5Btemplate-in-header%5D
* getResourceUri(): [template-in-header]
{code}

The solution may just to be urlencode the first argument to {{replace.call}} but I'm not confident enough about my understanding of where and when encoding is done in Camel URIs to be absolutely certain.
davsclaus:1436823574:2015-07-14T05:39:34.253+0000:1436823574:2015-07-14T05:39:34.253+0000:Dont do that, use a valid name
pimlottc:1436826082:2015-07-14T06:21:22.664+0000:1436865543:2015-07-14T17:19:03.158+0000:Okay, but how is a user to know that's not a valid name?  There's nothing suggesting it shouldn't work.  I didn't go looking for this bug, that's the actual velocity URI that we were using.  With the error message given it was really confusing as to why it wasn't working.
davsclaus:1436866862:2015-07-14T17:41:02.055+0000:1436866862:2015-07-14T17:41:02.055+0000:You still need to configure the velocity endpoint with a starting resource it uses on startup and if the header is absent. So configure it to load some fallback vm file, or some dummy vm file if you always include the header"
0,CAMEL-8961,Improvement,Major,2.16.0,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Andrew Block,0,4,2015-07-13 20:22:01+00:00,2015-08-30 09:12:21+00:00,"Update the camel-docker component to support docker-java library version 1.4.0


Changes from previous 1.3.x:




Removed deprecated start options
Add Domainname attribute on create command
Added ReadonlyRootfs option
Labels are array of Strings
Add docker stats support","sabre1041:1436790312:2015-07-13T20:25:12.199+0000:1436790312:2015-07-13T20:25:12.199+0000:I have these changes almost ready to go. Waiting on upstream ServiceMix bundle for new library.

Committed [PR|https://github.com/apache/servicemix-bundles/pull/2] to add ServiceMix bundle to support new version referenced in [Jira|https://issues.apache.org/jira/browse/SM-2619]
acosentino:1436793169:2015-07-13T21:12:49.513+0000:1436793184:2015-07-13T21:13:04.239+0000:Hi Andrew,

Did you try to take a look to this https://issues.apache.org/jira/browse/CAMEL-8701 ?

I try to remove the @ignore to tests after 1.3.0 upgrade, but I get the same results.

Thank you :-)
sabre1041:1436795491:2015-07-13T21:51:31.474+0000:1436795491:2015-07-13T21:51:31.474+0000:Andrea,

I did research on the issue awhile ago and made a [comment|https://issues.apache.org/jira/browse/CAMEL-8701?focusedCommentId=14546540&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14546540) in that Jira

At the time the tests were failing for me as well. I upgraded my JDK (currently 1.7.0_79-b15) and the tests pass. What JDK are you running? 
acosentino:1436820280:2015-07-14T04:44:40.616+0000:1436820280:2015-07-14T04:44:40.616+0000:In my latest run I was using 1.7.0_79. I'll use exactly the same version
you're using and I'll make a comment.

I've already read your suggestion in camel-8701, but with jdk 1.7.0_79
doesn't seem to work. I'll try exactly the b15 and let you know.

Many thanks :-)


githubbot:1440134841:2015-08-21T13:27:21.876+0000:1440134841:2015-08-21T13:27:21.876+0000:GitHub user sabre1041 opened a pull request:

    https://github.com/apache/camel/pull/595

    CAMEL-8961: Upgrade Docker component to docker-java 1.4.0 and reenabled unit tests

    Upgrades to Camel Docker component to support docker-java 1.4.0
    
    * Removed deprecated start options
    * Add Domainname attribute on create command
    * Added ReadonlyRootfs option
    * Labels are array of Strings
    * Add docker stats support
    
    Also reenabled unit tests that were failing on an earlier version of Java 7

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sabre1041/camel CAMEL-8961

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/595.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #595
    
----
commit 7a57f8ca9a6936788cb9f55de93a62de7f042789
Author: Andrew Block <andy.block@gmail.com>
Date:   2015-08-21T13:22:27Z

    CAMEL-8961: Upgrade Docker component to docker-java 1.4.0 and reenabled unit tests

----

davsclaus:1440210315:2015-08-22T10:25:15.212+0000:1440210315:2015-08-22T10:25:15.212+0000:Thanks Andrew
githubbot:1440256758:2015-08-22T23:19:18.596+0000:1440256758:2015-08-22T23:19:18.596+0000:Github user sabre1041 closed the pull request at:

    https://github.com/apache/camel/pull/595
"
0,CAMEL-8960,Improvement,Major,None,2.16.0,"
None
",Resolved,Not A Problem,2.16.0,Claus Ibsen,Claus Ibsen,0,1,2015-07-13 14:25:22+00:00,2015-07-14 15:37:55+00:00,"So you can define routes and link them with direct in any kind of order and Camel will not care.


See nabble
http://camel.465427.n5.nabble.com/Dynamic-calculation-of-route-startupOrder-through-dependencies-tp5769071.html",davsclaus:1436859474:2015-07-14T15:37:54.997+0000:1436859474:2015-07-14T15:37:54.997+0000:Works fine today - the producer accesses the consumer after they have been started.
0,CAMEL-8959,Task,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Claus Ibsen,0,4,2015-07-13 14:10:24+00:00,2015-10-26 17:24:31+00:00,"See nabble
http://camel.465427.n5.nabble.com/Upgrade-to-CXF-3-1-x-tp5769010.html","davsclaus:1441590206:2015-09-07T09:43:26.863+0000:1441590206:2015-09-07T09:43:26.863+0000:Any of the CXF guys able to work on this? If not we will move this to 2.17 release.
githubbot:1444953185:2015-10-16T07:53:05.314+0000:1444953185:2015-10-16T07:53:05.314+0000:GitHub user atoulme opened a pull request:

    https://github.com/apache/camel/pull/642

    CAMEL-8959

    Remove old code from camel-cxf no longer needed due the CXF 3.0+ upgrade
    
    Tests pass.
    
    Please point me at any other code that needs removing.
    
    I tried to use WSDLGetInterceptor instead of RawMessageWSDLGetInterceptor, but it breaks as RawMessageWSDLGetOutInterceptor was changed.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/atoulme/camel CAMEL-8959

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/642.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #642
    
----
commit 46d27392bc9b2e259a8b24413288523c6a633592
Author: Antoine Toulme <antoine@lunar-ocean.com>
Date:   2015-10-16T07:37:58Z

    CAMEL-8959: Remove old code from camel-cxf no longer needed due the CXF 3.0+ upgrade

----

toulmean:1444990412:2015-10-16T18:13:32.717+0000:1444990412:2015-10-16T18:13:32.717+0000:I asked dkulp for review and to see if other code changes were required, he could not think of any off the top of his head.

davsclaus:1445122771:2015-10-18T06:59:31.636+0000:1445122771:2015-10-18T06:59:31.636+0000:Thanks for the PR
githubbot:1445122868:2015-10-18T07:01:08.901+0000:1445122868:2015-10-18T07:01:08.901+0000:Github user atoulme closed the pull request at:

    https://github.com/apache/camel/pull/642

acosentino:1445132243:2015-10-18T09:37:23.145+0000:1445132243:2015-10-18T09:37:23.145+0000:It seems Camel-CXF-Transport also need to be updated.

See: https://issues.apache.org/jira/browse/CAMEL-9234
acosentino:1445132439:2015-10-18T09:40:39.430+0000:1445132439:2015-10-18T09:40:39.430+0000:I'll revert the commit.
acosentino:1445133944:2015-10-18T10:05:44.532+0000:1445133944:2015-10-18T10:05:44.532+0000:Reverted.
githubbot:1445716887:2015-10-25T04:01:27.883+0000:1445716887:2015-10-25T04:01:27.883+0000:GitHub user atoulme opened a pull request:

    https://github.com/apache/camel/pull/659

    CAMEL-8959: Remove old code from camel-cxf no longer needed due the C…

    …XF 3.0+ upgrade
    
    Take 2. I ran tests on both components affected. More comments on the bug itself.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/atoulme/camel CAMEL-8959

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/659.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #659
    
----
commit 1e88689b2db69bd6ba3dc487d4c3e57446393d0f
Author: Antoine Toulme <antoine@lunar-ocean.com>
Date:   2015-10-16T07:37:58Z

    CAMEL-8959: Remove old code from camel-cxf no longer needed due the CXF 3.0+ upgrade

----

toulmean:1445716937:2015-10-25T04:02:17.508+0000:1445716937:2015-10-25T04:02:17.508+0000:Apologies. I have added the missing dependency to the build, and tests pass on both components now. I have opened a new pull request for review.
davsclaus:1445827282:2015-10-26T10:41:22.718+0000:1445827282:2015-10-26T10:41:22.718+0000:Thanks for the PR
githubbot:1445851471:2015-10-26T17:24:31.664+0000:1445851471:2015-10-26T17:24:31.664+0000:Github user atoulme closed the pull request at:

    https://github.com/apache/camel/pull/659
"
0,CAMEL-8958,New Feature,Major,None,2.21.0,"
None
",Resolved,Fixed,2.21.0,Claus Ibsen,Claus Ibsen,15,7,2015-07-13 12:18:56+00:00,2018-02-06 17:16:10+00:00,"We may ponder about some good naming for an EIP that remembers an Exchange and then allow to restore that Exchange at a later point.


We could have push/pop as a stack fashion. Or use some kind of naming, push(foo) and then pop(foo). Or some better naming.


People today have stored the message body as an exchange body and then restored that later. But this may be simpler.


For pop we could allow an optional aggregation strategy so people can merge the current exchange with the pop in any way they want.","kefir:1436762473:2015-07-13T12:41:13.153+0000:1436762473:2015-07-13T12:41:13.153+0000:Good idea!
davsclaus:1436762770:2015-07-13T12:46:10.617+0000:1436762770:2015-07-13T12:46:10.617+0000:Remember to use the jira voting system - that helps us know which tickets the community like.
davsclaus:1517470244:2018-02-01T15:30:44.466+0000:1517470244:2018-02-01T15:30:44.466+0000:Lets see if I get some time end of february as its a functionality that has many votes and that I also think we should try to add to 2.x
davsclaus:1517791006:2018-02-05T08:36:46.141+0000:1517791006:2018-02-05T08:36:46.141+0000:I found some time in the weekend to get started on this, and have a prototype in the works.
davsclaus:1517815784:2018-02-05T15:29:44.789+0000:1517815784:2018-02-05T15:29:44.789+0000:So I have pushed a prototype of this in a new native EIP implementation of the Claim Check EIP pattern from the EIP book. I think this functionality closely resemble this EIP pattern.

There is still a bit naming to be decided. You need to specify what operation to use: push, pop, and there is also a get/set etc. I do think I would like to rename the option operation to action instead.

You can find some details of the implementation and its limitation in the class javadoc for the ClaimCheckProcessor class.

The documentation is at:

https://github.com/apache/camel/blob/8958/camel-core/src/main/docs/eips/claimCheck-eip.adoc

The branch

https://github.com/apache/camel/tree/8958
davsclaus:1517816120:2018-02-05T15:35:20.876+0000:1517816120:2018-02-05T15:35:20.876+0000:We should also add support for attachments
davsclaus:1517816489:2018-02-05T15:41:29.938+0000:1517816489:2018-02-05T15:41:29.938+0000:We can also add JMX attributes so the EIP can show how its configured in JMX on the processor mbean as well. You could even allow modifying for example the ""data"" to change what to merge back etc.
davsclaus:1517878528:2018-02-06T08:55:28.511+0000:1517878528:2018-02-06T08:55:28.511+0000:The data is being renamed to include and then we add an exclude as well. 
davsclaus:1517882355:2018-02-06T09:59:15.258+0000:1517882355:2018-02-06T09:59:15.258+0000:Okay you can now filter using a include/exclude prefix with + and - sign. By default everything is included, but you can say ""-body,-header:bar"" to exclude these two etc."
0,CAMEL-8957,Bug,Major,2.15.2,"2.15.3, 2.16.0","
None
",Resolved,Not A Problem,"2.15.3, 2.16.0",Claus Ibsen,Christian Müller,0,2,2015-07-13 11:17:57+00:00,2015-07-20 17:23:49+00:00,I will provide a test case later this week.,"muellerc:1437225777:2015-07-18T21:22:57.341+0000:1437225777:2015-07-18T21:22:57.341+0000:By running git bisect, I got the following result:
{code}
22cf585a4770fcd825c505c16776874d12617dff is the first bad commit
commit 22cf585a4770fcd825c505c16776874d12617dff
Author: Claus Ibsen <davsclaus@apache.org>
Date:   Thu Apr 23 15:48:02 2015 +0200

    CAMEL-8683: Using load balancer in onException adds duplicate outputs for each route defined

:040000 040000 b668e46ac21c42dd725d27782fc1801593657aa9 a5e3b629ca882c3af9b38279c1200ac9f1a7b37b M	camel-core
:040000 040000 f0be68d08d3b95e19e28586a13836fd7d465f426 6a8b2aab135c0ffb7ae2a3bc5a66d655007a9e1a M	components
{code}

[~davsclaus]: Could you please have a look!?
davsclaus:1437266094:2015-07-19T08:34:54.007+0000:1437266094:2015-07-19T08:34:54.007+0000:When using advice-with when testing with camel-core you need to add the route and advice before starting CamelContext. See the unit test I committed.
muellerc:1437384229:2015-07-20T17:23:49.465+0000:1437384229:2015-07-20T17:23:49.465+0000:AdviceWith() is working for almost all of our routes, also if they were already started when we call adviceWith() (using Camel 2.15.2).
Until (and including) Camel 2.14 it was also possible to call adviceWith() for an already started route which is using the loadBalance().

For me, this is a regression.

However, as long as we have a solution, I'm fine with it.
I update the WIKI page to make it clear that we recommend (and only support) adviceWith() on a non started route.

Thanks for the clarification!"
0,CAMEL-8956,Improvement,Major,None,Future,"
None
",Resolved,Abandoned,Future,Unassigned,Claus Ibsen,0,2,2015-07-13 10:00:17+00:00,2022-09-02 09:03:12+00:00,"The camel-cxf uses some poor spring namespace parsing where it does not use factory bean for all of those elements - without this the lifecycle of these objects cannot be handled safely.


So you may obtain a <cxf:cxfEndpoint> that is not properly initialized/started. 


If you look at camel-core-xml camel-spring how it does it, then we use factory beans for those elements which allows to control the lifecycle from the getObject method that spring calls.",
0,CAMEL-8955,Bug,Minor,2.14.3,,"
None
",Resolved,Won't Fix,None,Claus Ibsen,Andy Fedotov,0,2,2015-07-12 11:55:31+00:00,2015-07-12 17:58:35+00:00,"As it can be concluded from AggregationStrategy javadoc, and also from available implementations such as GroupedExchangeAggregationStrategy, it should be used in the following manner:



AggregationStrategy strategy = new GroupedExchangeAggregationStrategy();

Exchange result = null;
result = strategy.aggregate(result, exchange1);
result = strategy.aggregate(result, exchange2);
// ... and so on
return result;




But PollEnricher do it in following manner:



AggregationStrategy strategy = new GroupedExchangeAggregationStrategy();

Exchange result = strategy.aggregate(exchange1, exchange2);
return result;




This leads to incorrect result returned after aggregation and lost exchanges.


Also PollEnricher doesn't handle CompletionAwareAggregationStrategy and does not call onCompletion(). Consequently GroupedExchangeAggregationStrategy does not return aggregated result in the Exchange body.","andy.fedotov:1436673411:2015-07-12T11:56:51.669+0000:1436673411:2015-07-12T11:56:51.669+0000:Added Unit Test - [^PollEnrichAggregationStrategyTest.java]
davsclaus:1436680974:2015-07-12T14:02:54.466+0000:1436680974:2015-07-12T14:02:54.466+0000:That strategy is only for the aggregator eip and not poll enrich - I will update its javadoc.
andy.fedotov:1436693360:2015-07-12T17:29:20.755+0000:1436693360:2015-07-12T17:29:20.755+0000:Thanks, Claus!
It is somewhat confusing, hope you clarify a little bit.

# AggregationStrategy that is used for Aggregator EIP and for PollEnrich EIP shares same Java interface, but behavior of it's implementation logic should be different? This looks like bad idea...
# How developers can distinguish them from each other?


davsclaus:1436695115:2015-07-12T17:58:35.695+0000:1436695115:2015-07-12T17:58:35.695+0000:Read the EIP patterns, and see that the aggregator has options of on completion and whatnot. The enrich is only using agg strategy to merge the source with the received target - not to group N+ together and have different completion triggers and whatnot. All that latter is only for the aggregator EIP.

"
0,CAMEL-8954,Bug,Minor,2.14.3,"2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.15.3, 2.16.0",Claus Ibsen,Andy Fedotov,0,2,2015-07-12 11:01:35+00:00,2015-07-16 19:49:32+00:00,"This applies to the file components when using common read-lock strategies:



markerFile - org.apache.camel.component.file.strategy.MarkerFileExclusiveReadLockStrategy
fileLock - org.apache.camel.component.file.strategy.FileLockExclusiveReadLockStrategy



This strategies stores lock information in the Exchange properties:



Exchange.FILE_LOCK_FILE_ACQUIRED == ""CamelFileLockFileAcquired""
Exchange.FILE_LOCK_FILE_NAME == ""CamelFileLockFileName""
Exchange.FILE_LOCK_EXCLUSIVE_LOCK == ""CamelFileLockExclusiveLock""
Exchange.FILE_LOCK_RANDOM_ACCESS_FILE == ""CamelFileLockRandomAccessFile""



Lock information is stored as scalar values and can hold information about only one single lock.


When there are two Exchanges participates in the route, share UoW, and synchronizations are handovered from one Exchange to another, information about both locks can't be stored in the Exchange properties and lost. Consequently when on-completion synchronizations are performed, read-lock strategies can't access information about all the locks and they are not released.


For example, after completing this route lock for file1.dat is not released:



from(""file:data/input-a?fileName=file1.dat&readLock=markerFile"")
    .pollEnrich(""file:data/input-b?fileName=file2.dat&readLock=markerFile"")
    .to(""mock:result"");","andy.fedotov:1436670200:2015-07-12T11:03:20.485+0000:1436670621:2015-07-12T11:10:21.034+0000:Added unit test - [^MarkerFileExclusiveReadLockStrategyUnlockTest.java]
davsclaus:1436681164:2015-07-12T14:06:04.358+0000:1436681164:2015-07-12T14:06:04.358+0000:This is not really intended to do such use-case. 
andy.fedotov:1436692563:2015-07-12T17:16:03.565+0000:1436692563:2015-07-12T17:16:03.565+0000:Currently in our project we actively use file/sftp components and similar use-cases with poll-enrich pattern. There are no any problem with locking because it is not needed at all, we are using *readLock=none*.

Maybe this has no really serious impact and has no actual use-cases, but such locking strategy design seems slightly wrong. When I tried to implement my own custom processor bean to handle poll-enrich, I also tried to figure out how to +correctly+ deal with Exchange UoW and synchronizations, and stumbled on this problem. I thought that I was doing something wrong, because lock files are not gone after route completion.

Just in case, I also stuck on that MarkerFileExclusiveReadLockStrategy is intended as kind of cross-route/JVM lock sharing. But MarkerFileExclusiveReadLockStrategy.prepareOnStartup() is blindly deletes all created *.camelLock files on every Consumer creation and startup.

davsclaus:1436694950:2015-07-12T17:55:50.446+0000:1436694950:2015-07-12T17:55:50.446+0000:Now its not, see the documentation about readLock and the warning section: http://camel.apache.org/file2
davsclaus:1436858161:2015-07-14T15:16:01.810+0000:1436858161:2015-07-14T15:16:01.810+0000:I though we had an option to turn of deleting orphan lock files, but didn't so I logged a ticket:
https://issues.apache.org/jira/browse/CAMEL-8970
davsclaus:1437039231:2015-07-16T17:33:51.018+0000:1437039231:2015-07-16T17:33:51.018+0000:Yeah the state should really be per file, so when you poll in that 2nd file, it wont override state from the 1st file. Thanks for the suggestion and the unit test."
0,CAMEL-8953,Improvement,Minor,2.15.2,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Charlie Mordant,0,3,2015-07-11 20:08:18+00:00,2015-07-12 11:21:17+00:00,"Camel-cdi is missing some 'Require-capability' provided by pax-cdi (I think).
I'll send a PR that correct this (and also enabling the camel-cdi karaf feature)","githubbot:1436616625:2015-07-11T20:10:25.247+0000:1436616625:2015-07-11T20:10:25.247+0000:GitHub user Tcharl opened a pull request:

    https://github.com/apache/camel/pull/560

    manifest update for camel-cdi

    Fixes https://issues.apache.org/jira/browse/CAMEL-8953

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/Tcharl/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/560.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #560
    
----
commit 3ece1e55804dad95e5eb1525a1bf79c2ac072343
Author: charlie <cmordant1@gmail.com>
Date:   2015-07-11T20:02:44Z

    manifest update for camel-cdi

----

davsclaus:1436657037:2015-07-12T07:23:57.241+0000:1436657037:2015-07-12T07:23:57.241+0000:Thanks for the PR
githubbot:1436671277:2015-07-12T11:21:17.532+0000:1436671277:2015-07-12T11:21:17.532+0000:Github user Tcharl closed the pull request at:

    https://github.com/apache/camel/pull/560
"
0,CAMEL-8952,New Feature,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,1,2015-07-11 09:12:28+00:00,2015-07-11 12:58:37+00:00,"We should allow users to just type a file or classpath name as the value and Camel will load the resource from that. 


For example



    <route>
      <from uri=""direct:start""/>
      <script>
        <simple>resource:classpath:org/apache/camel/spring/processor/mysimplescript.txt</simple>
      </script>
      <to uri=""mock:result""/>
    </route>




You may want to use a more powerful language like groovy.",
0,CAMEL-8951,Bug,Major,2.15.2,"2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.15.3, 2.16.0",Claus Ibsen,Claus Ibsen,0,1,2015-07-10 14:29:56+00:00,2015-07-11 06:18:03+00:00,"See nabble
http://camel.465427.n5.nabble.com/java-net-URISyntaxException-using-recipientList-tp5769103.html",
0,CAMEL-8950,Bug,Major,2.15.2,None,"
None
",Resolved,Fixed,"2.15.3, 2.16.0",Jonathan Anstey,Jonathan Anstey,0,1,2015-07-10 14:16:04+00:00,2015-07-10 14:19:45+00:00,"Currently if you inject a scheduler the CamelContext won't be available for jobs to access. When the scheduler is created automatically, the context is added to the quartz scheduler context so the jobs can access it:


quartzContext.put(QuartzConstants.QUARTZ_CAMEL_CONTEXT + ""-"" + camelContextName, getCamelContext());",janstey:1436509185:2015-07-10T14:19:45.907+0000:1436509185:2015-07-10T14:19:45.907+0000:https://git1-us-west.apache.org/repos/asf?p=camel.git;a=commit;h=4fc73b4cde1b0f6e8d57e4a9c32377e118dcb69e
0,CAMEL-8949,Bug,Major,2.15.2,None,"
None
",Resolved,Fixed,"2.15.3, 2.16.0",Jonathan Anstey,Jonathan Anstey,0,1,2015-07-10 13:42:02+00:00,2015-07-10 13:55:44+00:00,"When receiving a TCP RST, Netty 3 goes into a deep recursion identified by a stack something like:



[Camel Thread #1 - NettyServerTCPWorker] WARN  org.apache.camel.component.netty.http.NettyHttpConsumer  - HttpServerChannelHandler is not found as attachment to handle exception, send 404 back to the client.
java.io.IOException: Broken pipe
	at sun.nio.ch.FileDispatcherImpl.write0(Native Method)
	at sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:47)
	at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)
	at sun.nio.ch.IOUtil.write(IOUtil.java:51)
	at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:487)
	at org.jboss.netty.channel.socket.nio.SocketSendBufferPool$UnpooledSendBuffer.transferTo(SocketSendBufferPool.java:203)
	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.write0(AbstractNioWorker.java:201)
	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.writeFromUserCode(AbstractNioWorker.java:146)
	at org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink.handleAcceptedSocket(NioServerSocketPipelineSink.java:99)
	at org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink.eventSunk(NioServerSocketPipelineSink.java:36)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendDownstream(DefaultChannelPipeline.java:779)
	at org.jboss.netty.channel.Channels.write(Channels.java:725)
	at org.jboss.netty.handler.codec.oneone.OneToOneEncoder.doEncode(OneToOneEncoder.java:71)
	at org.jboss.netty.handler.codec.oneone.OneToOneEncoder.handleDownstream(OneToOneEncoder.java:59)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendDownstream(DefaultChannelPipeline.java:591)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendDownstream(DefaultChannelPipeline.java:582)
	at org.jboss.netty.channel.Channels.write(Channels.java:704)
	at org.jboss.netty.channel.Channels.write(Channels.java:671)
	at org.jboss.netty.channel.AbstractChannel.write(AbstractChannel.java:248)
	at org.apache.camel.component.netty.http.handlers.HttpServerMultiplexChannelHandler.exceptionCaught(HttpServerMultiplexChannelHandler.java:142)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:112)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.exceptionCaught(SimpleChannelUpstreamHandler.java:153)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:112)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791)
	at org.jboss.netty.handler.codec.frame.FrameDecoder.exceptionCaught(FrameDecoder.java:377)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:112)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:559)
	at org.jboss.netty.channel.Channels.fireExceptionCaught(Channels.java:525)
	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.write0(AbstractNioWorker.java:291)
	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.writeFromUserCode(AbstractNioWorker.java:146)
	at org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink.handleAcceptedSocket(NioServerSocketPipelineSink.java:99)
	at org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink.eventSunk(NioServerSocketPipelineSink.java:36)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendDownstream(DefaultChannelPipeline.java:779)
	at org.jboss.netty.channel.Channels.write(Channels.java:725)
	at org.jboss.netty.handler.codec.oneone.OneToOneEncoder.doEncode(OneToOneEncoder.java:71)
	at org.jboss.netty.handler.codec.oneone.OneToOneEncoder.handleDownstream(OneToOneEncoder.java:59)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendDownstream(DefaultChannelPipeline.java:591)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendDownstream(DefaultChannelPipeline.java:582)
	at org.jboss.netty.channel.Channels.write(Channels.java:704)
	at org.jboss.netty.channel.Channels.write(Channels.java:671)
	at org.jboss.netty.channel.AbstractChannel.write(AbstractChannel.java:248)
	at org.apache.camel.component.netty.http.handlers.HttpServerMultiplexChannelHandler.exceptionCaught(HttpServerMultiplexChannelHandler.java:142)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:112)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.exceptionCaught(SimpleChannelUpstreamHandler.java:153)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:112)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791)
	at org.jboss.netty.handler.codec.frame.FrameDecoder.exceptionCaught(FrameDecoder.java:377)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:112)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:559)
	at org.jboss.netty.channel.Channels.fireExceptionCaught(Channels.java:525)
	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.write0(AbstractNioWorker.java:291)
	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.writeFromUserCode(AbstractNioWorker.java:146)
	at org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink.handleAcceptedSocket(NioServerSocketPipelineSink.java:99)
	at org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink.eventSunk(NioServerSocketPipelineSink.java:36)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendDownstream(DefaultChannelPipeline.java:779)
	at org.jboss.netty.channel.Channels.write(Channels.java:725)
	at org.jboss.netty.handler.codec.oneone.OneToOneEncoder.doEncode(OneToOneEncoder.java:71)
	at org.jboss.netty.handler.codec.oneone.OneToOneEncoder.handleDownstream(OneToOneEncoder.java:59)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendDownstream(DefaultChannelPipeline.java:591)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendDownstream(DefaultChannelPipeline.java:582)
	at org.jboss.netty.channel.Channels.write(Channels.java:704)
	at org.jboss.netty.channel.Channels.write(Channels.java:671)
	at org.jboss.netty.channel.AbstractChannel.write(AbstractChannel.java:248)
	at org.apache.camel.component.netty.http.handlers.HttpServerMultiplexChannelHandler.exceptionCaught(HttpServerMultiplexChannelHandler.java:142)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:112)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.exceptionCaught(SimpleChannelUpstreamHandler.java:153)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:112)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791)
	at org.jboss.netty.handler.codec.frame.FrameDecoder.exceptionCaught(FrameDecoder.java:377)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:112)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:559)
	at org.jboss.netty.channel.Channels.fireExceptionCaught(Channels.java:525)
	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.write0(AbstractNioWorker.java:291)
	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.writeFromUserCode(AbstractNioWorker.java:146)
	at org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink.handleAcceptedSocket(NioServerSocketPipelineSink.java:99)
	at org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink.eventSunk(NioServerSocketPipelineSink.java:36)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendDownstream(DefaultChannelPipeline.java:779)
	at org.jboss.netty.channel.Channels.write(Channels.java:725)
	at org.jboss.netty.handler.codec.oneone.OneToOneEncoder.doEncode(OneToOneEncoder.java:71)
	at org.jboss.netty.handler.codec.oneone.OneToOneEncoder.handleDownstream(OneToOneEncoder.java:59)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendDownstream(DefaultChannelPipeline.java:591)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendDownstream(DefaultChannelPipeline.java:582)
	at org.jboss.netty.channel.Channels.write(Channels.java:704)
	at org.jboss.netty.channel.Channels.write(Channels.java:671)
	at org.jboss.netty.channel.AbstractChannel.write(AbstractChannel.java:248)
	at org.apache.camel.component.netty.http.handlers.HttpServerMultiplexChannelHandler.exceptionCaught(HttpServerMultiplexChannelHandler.java:142)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:112)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.exceptionCaught(SimpleChannelUpstreamHandler.java:153)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:112)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791)
	at org.jboss.netty.handler.codec.frame.FrameDecoder.exceptionCaught(FrameDecoder.java:377)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:112)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:559)
	at org.jboss.netty.channel.Channels.fireExceptionCaught(Channels.java:525)
	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.write0(AbstractNioWorker.java:291)
	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.writeFromUserCode(AbstractNioWorker.java:146)
	at org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink.handleAcceptedSocket(NioServerSocketPipelineSink.java:99)
	at org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink.eventSunk(NioServerSocketPipelineSink.java:36)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendDownstream(DefaultChannelPipeline.java:779)
	at org.jboss.netty.channel.Channels.write(Channels.java:725)
	at org.jboss.netty.handler.codec.oneone.OneToOneEncoder.doEncode(OneToOneEncoder.java:71)
	at org.jboss.netty.handler.codec.oneone.OneToOneEncoder.handleDownstream(OneToOneEncoder.java:59)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendDownstream(DefaultChannelPipeline.java:591)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendDownstream(DefaultChannelPipeline.java:582)
	at org.jboss.netty.channel.Channels.write(Channels.java:704)
	at org.jboss.netty.channel.Channels.write(Channels.java:671)
	at org.jboss.netty.channel.AbstractChannel.write(AbstractChannel.java:248)
	at org.apache.camel.component.netty.http.handlers.HttpServerMultiplexChannelHandler.exceptionCaught(HttpServerMultiplexChannelHandler.java:142)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:112)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.exceptionCaught(SimpleChannelUpstreamHandler.java:153)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:112)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791)
	at org.jboss.netty.handler.codec.frame.FrameDecoder.exceptionCaught(FrameDecoder.java:377)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:112)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:559)
	at org.jboss.netty.channel.Channels.fireExceptionCaught(Channels.java:525)
	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.write0(AbstractNioWorker.java:291)
	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.writeFromUserCode(AbstractNioWorker.java:146)
	at org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink.handleAcceptedSocket(NioServerSocketPipelineSink.java:99)
	at org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink.eventSunk(NioServerSocketPipelineSink.java:36)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendDownstream(DefaultChannelPipeline.java:779)
	at org.jboss.netty.channel.Channels.write(Channels.java:725)
	at org.jboss.netty.handler.codec.oneone.OneToOneEncoder.doEncode(OneToOneEncoder.java:71)
	at org.jboss.netty.handler.codec.oneone.OneToOneEncoder.handleDownstream(OneToOneEncoder.java:59)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendDownstream(DefaultChannelPipeline.java:591)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendDownstream(DefaultChannelPipeline.java:582)
	at org.jboss.netty.channel.Channels.write(Channels.java:704)
	at org.jboss.netty.channel.Channels.write(Channels.java:671)
	at org.jboss.netty.channel.AbstractChannel.write(AbstractChannel.java:248)
	at org.apache.camel.component.netty.http.handlers.HttpServerMultiplexChannelHandler.exceptionCaught(HttpServerMultiplexChannelHandler.java:142)
...




It isn't a problem for Netty 4 and also if you set orderedThreadPoolExecutor=true it works for Netty 3 as well.",janstey:1436507744:2015-07-10T13:55:44.060+0000:1436507744:2015-07-10T13:55:44.060+0000:http://git-wip-us.apache.org/repos/asf/camel/commit/821bddf5
0,CAMEL-8948,Improvement,Major,2.15.2,"2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.15.3, 2.16.0",Grzegorz Grzybek,Grzegorz Grzybek,0,1,2015-07-10 11:34:45+00:00,2015-07-21 09:24:57+00:00,"Camel blueprint tests have problems with missing namespace handlers due to fragile NS code in aries-blueprint.
This should be fixed with blueprint-core 1.4.4.
There are also situations, where camel context is started before its blueprint container is really CREATED.","ggrzybek:1437294699:2015-07-19T16:31:39.349+0000:1437294699:2015-07-19T16:31:39.349+0000:Fix almost ready - 41 runs of all tests from {{camel-test-blueprint}} and 100% SUCCESSFUL.
ggrzybek:1437368193:2015-07-20T12:56:33.304+0000:1437368193:2015-07-20T12:56:33.304+0000:Resolved in branch for version 2.16"
0,CAMEL-8947,Bug,Major,2.14.1,2.19.0,"
None
",Resolved,Won't Fix,2.19.0,Unassigned,Benjamin P. O'Day,1,4,2015-07-09 23:24:46+00:00,2017-03-03 13:19:04+00:00,"I'm using an the aggregator with the LevelDBAggregationRepository and seeing an incorrect redelivery of a message when using the UseLatestAggregationStrategy...


this very basic route (see attached)...


				from(""direct:start"")
						.aggregate(constant(true), new UseLatestAggregationStrategy())
							.completionSize(2)
							.aggregationRepository(repo)
						.to(""mock:mock"");


shows the following behavior...


WARN  LevelDBAggregationRepository   - Unable to confirm exchangeId [ID-localhost-63819-1436483565832-0-6 from repository repo1: Not Found]


DEBUG LevelDBAggregationRepository   - Scanned and found 1 exchange(s) to recover (note some of them may already be in progress).


DEBUG LevelDBAggregationRepository   - Recovering exchangeId [ID-localhost-63819-1436483565832-0-3] -> Exchange[Message: test1]


resulting in a duplicate message being processed through the aggregator route...


if the default in-memory repo is used, the test behaves as expected...no unnecessary redelivery, etc.","boday:1436722428:2015-07-13T01:33:48.521+0000:1436722428:2015-07-13T01:33:48.521+0000:I'm getting the same results using the HawtDBAggregationRepository and HazelcastAggregationRepository...seems like there is a bug in confirming/removing Exchanges from the repo when certain aggregation strategies are used...
fglezp:1439800967:2015-08-17T16:42:47.466+0000:1439800967:2015-08-17T16:42:47.466+0000:Any update on this? Is there any aggregation strategy that currently works for a RecoverableAggregationRepository?
onders:1478494473:2016-11-07T12:54:33.492+0000:1478494473:2016-11-07T12:54:33.492+0000:Any update?
onders:1478494530:2016-11-07T12:55:30.107+0000:1478494530:2016-11-07T12:55:30.107+0000:Any relation to the issue as below:

http://camel.465427.n5.nabble.com/Aggregator-LevelDB-or-HawtDB-for-persistency-incorrect-behavior-td5765524.html#a5789810
davsclaus:1488518344:2017-03-03T13:19:04.144+0000:1488518344:2017-03-03T13:19:04.144+0000:Make sure to return oldExchange whenever possible"
0,CAMEL-8946,Improvement,Minor,2.12.5,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Joe Luo,0,2,2015-07-09 13:06:55+00:00,2015-07-17 07:37:29+00:00,"I am having difficulties to troubleshoot some of the SSL failures when my application attempts to connect to back ends. I am not able to understand by looking at the logs what is making the connection to fail.


When inspecting the behavior of 'camel-netty-http' for a particular use case where no trusted certificates are available, I realize that Netty is throwing an SSLHandshakeException, but then it gets lost and a ClosedChannelExcetpion is thrown back instead.


While DEBUG and WARN level messages give indication about the real source of the problem, the final ERROR level message looses the error context. This is problematic when I run the system in ERROR level, and when I see failures I can't determine the reasons.


The sequence of logs is as follows:
1) first a DEBUG trace:
DEBUG Closing channel as an exception was thrown from Netty
javax.net.ssl.SSLHandshakeException: General SSLEngine problem
... Caused by: javax.net.ssl.SSLHandshakeException: General SSLEngine problem
... Caused by: sun.security.validator.ValidatorException: No trusted certificate found


2) then a WARN trace:
WARN  HttpServerChannelHandler is not found as attachment to handle exception, send 404 back to the client.
javax.net.ssl.SSLException: Received fatal alert: certificate_unknown


3) and an ERROR trace:
ERROR Failed delivery for...
... java.nio.channels.ClosedChannelException
	at org.jboss.netty.handler.ssl.SslHandler$7.run(SslHandler.java:1766)


I have made a simple fix on NettyProducer.java class since NettyHttpProducer class is inherited from it.


I'll also attach a junit test
org/apache/camel/component/netty/http/NettyHttpSSLHandshakeErrorTest.java
that reproduces the situation as well as a patch (patch.txt) to this JIRA.


Note, the junit test requires some keystore files so you will need to copy over following four files:
camel-cxf/src/test/resources/wssecurity/keystore/client-keystore.jks
camel-cxf/src/test/resources/wssecurity/keystore/client-truststore.jks
camel-cxf/src/test/resources/wssecurity/keystore/server-keystore.jks
camel-cxf/src/test/resources/wssecurity/keystore/server-truststore.jks


over to camel-netty-http/src/test/resources/jsse/ folder in order to get the junit test to work.",davsclaus:1437089849:2015-07-17T07:37:29.956+0000:1437089849:2015-07-17T07:37:29.956+0000:Thanks for reporting and the test case
0,CAMEL-8945,Bug,Major,2.15.2,"2.15.3, 2.16.0, 2.14.4","
None
",Resolved,Fixed,"2.15.3, 2.16.0, 2.14.4",Claus Ibsen,Claus Ibsen,0,1,2015-07-09 11:38:32+00:00,2015-07-09 11:46:17+00:00,"See SO
http://stackoverflow.com/questions/31312281/apache-camel-loop-does-not-stop-on-exception",
0,CAMEL-8944,Improvement,Major,2.15.2,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,1,2015-07-09 07:14:21+00:00,2015-07-09 08:30:55+00:00,"When the UoW is done then it happens last today. But we could make the route context advice be last which allows any logic performed as UoW done know what route this is part of, which makes MDC logging print route id, and what not.


This complicates the logic a bit as we need to merge RouteContextAdvice into UnitOfWorkProcessorAdvice.","davsclaus:1436397278:2015-07-09T07:14:38.820+0000:1436397944:2015-07-09T07:25:44.465+0000:See nabble
http://camel.465427.n5.nabble.com/MDC-logging-does-not-work-with-camel-routeId-anymore-td5768851.html"
0,CAMEL-8943,Improvement,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,2,2015-07-08 09:09:35+00:00,2015-09-28 08:22:27+00:00,We should use jetty 9 as the default jetty version,"adrianMAS:1442281562:2015-09-15T09:46:02.000+0000:1442281562:2015-09-15T09:46:02.000+0000:I have just changed the maven version in the component to use camel-jetty9 and had build success. I am a newbie and I'm wondering if you can be more specific on what needs to be done for using jetty 9 as the default jetty version.
davsclaus:1442359609:2015-09-16T07:26:49.173+0000:1442359609:2015-09-16T07:26:49.173+0000:There may be some other components using camel-jetty for testing that may rely on it was version 8. So an idea is to build all the code and also unit test those modules that are using camel-jetty. 
"
0,CAMEL-8942,Improvement,Major,None,Future,"
None
",Resolved,Fixed,Future,Andrea Cosentino,Claus Ibsen,0,2,2015-07-08 06:09:49+00:00,2015-07-31 15:39:35+00:00,"To use http proxy you need to configure the aws client manually which can be a bit cumbersome to do, especially for xml dsl.
http://camel.apache.org/aws-sqs.html


We should make this configuration possible from uri options / component options so ppl can easily do this.


See also
https://developer.jboss.org/thread/260836","davsclaus:1436307023:2015-07-08T06:10:23.684+0000:1436307023:2015-07-08T06:10:23.684+0000:There may be similar need for some of the other aws components.
acosentino:1438328375:2015-07-31T15:39:35.133+0000:1438328375:2015-07-31T15:39:35.133+0000:I will check the other components and I'll open single ticket for each one."
0,CAMEL-8941,Improvement,Major,2.15.2,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Anton Koscejev,0,3,2015-07-07 14:11:32+00:00,2015-07-12 13:14:06+00:00,"The camel-restlet component populates Camel Exchange from Restlet Response via DefaultRestletBinding. However, it only properly reads binary contents if media type is ""application/octet-stream"". In all other cases it reads contents as String, even if contents are binary. For example, if the contents are of type ""audio/wave"" - a normal .wav file returned by a REST service - they would be read as a String, which results in an unplayable file.


See code extract:



if (mediaType != null && mediaType.equals(MediaType.APPLICATION_OCTET_STREAM)) {
    exchange.getOut().setBody(response.getEntity().getStream());
} else if (response.getEntity() instanceof Representation) {
    Representation representationDecoded = new DecodeRepresentation(response.getEntity());
    exchange.getOut().setBody(representationDecoded.getText());
} else {
    // get content text by default
    String text = response.getEntity().getText();
    LOG.debug(""Populate exchange from Restlet response: {}"", text);
    exchange.getOut().setBody(text);
}","koscejev:1436249547:2015-07-07T14:12:27.493+0000:1436249547:2015-07-07T14:12:27.493+0000:After some initial testing It seems that for binary stream content a better solution would be to rely on Representation type, e.g.: 
{code}
if (entity instanceof StreamRepresentation) {
    exchange.getOut().setBody(response.getEntity().getStream());
}
{code}

However, I'm not sure if that's always correct (or perhaps only for cases when Transfer-encoding = chunked).
davsclaus:1436313037:2015-07-08T07:50:37.496+0000:1436313037:2015-07-08T07:50:37.496+0000:Yeah adding that into a if else could make sense. You are welcome to work on a patch.
koscejev:1436313359:2015-07-08T07:55:59.468+0000:1436313359:2015-07-08T07:55:59.468+0000:[~davsclaus] I'll try to make some time for this, but I cannot promise anything right now. Should I base it on top of an older branch?
davsclaus:1436314830:2015-07-08T08:20:30.591+0000:1436314830:2015-07-08T08:20:30.591+0000:We always patch from top.
koscejev:1436514348:2015-07-10T15:45:48.405+0000:1436514348:2015-07-10T15:45:48.405+0000:I've created PR 558: https://github.com/apache/camel/pull/558
davsclaus:1436657272:2015-07-12T07:27:52.630+0000:1436657272:2015-07-12T07:27:52.630+0000:Thanks for the PR
githubbot:1436678046:2015-07-12T13:14:06.479+0000:1436678046:2015-07-12T13:14:06.479+0000:Github user koscejev closed the pull request at:

    https://github.com/apache/camel/pull/558
"
0,CAMEL-8940,Bug,Major,2.15.2,2.15.2,"
None
",Closed,Not A Problem,2.15.2,Unassigned,Sarat Khilar,0,2,2015-07-07 12:21:45+00:00,2015-10-20 13:42:15+00:00,"Message routing is not working if generic method inteface is used.


I have added the code snippet here.


Bean component:
public interface IHandler<T>
{
	@Handler
    public void handle(T data);
}
public class EmployeePersistHandler implements IHandler<Employee>
{
	public EmployeePersistHandler()

	{
	    super();
	}


	@Override
	public void handle(Employee data) 
                {


	}
}


Routing config:
public RouteBuilder route() 
	{


		return new RouteBuilder() {


			@Override
			public void configure() throws Exception 

			{
				System.out.println(""Route builder is called"");
				ThreadPoolBuilder poolBuilder = new ThreadPoolBuilder(createCamelContext());
				ExecutorService customPool = poolBuilder.poolSize(5).maxPoolSize(100).maxQueueSize(-1).build(""customPool"");
				from(""seda:test"").shutdownRunningTask(ShutdownRunningTask.CompleteAllTasks).threads().executorService(customPool).bean(employeePersistHandler);
				
			}

		};


	}","davsclaus:1436244866:2015-07-07T12:54:26.467+0000:1436244866:2015-07-07T12:54:26.467+0000:You should likely remove the @Handler annotation if that is the one from Camel.
sarat.khilar@gmail.com:1436250546:2015-07-07T14:29:06.686+0000:1436250546:2015-07-07T14:29:06.686+0000:Even if I removed the @Handler anotation, it is not working
davsclaus:1436250812:2015-07-07T14:33:32.525+0000:1436250812:2015-07-07T14:33:32.525+0000:Be more specific what is not working, what happens?
sarat.khilar@gmail.com:1436250877:2015-07-07T14:34:37.609+0000:1436250877:2015-07-07T14:34:37.609+0000:I am expecting when employee object is sent to seda:test, it should route to handler method. I am getting below exception.
2015-07-07 20:02:28.372 ERROR 7175 --- [#4 - customPool] o.a.camel.processor.DefaultErrorHandler  : Failed delivery for (MessageId: ID-ubuntu-36404-1436279542902-0-14 on ExchangeId: ID-ubuntu-36404-1436279542902-0-24). Exhausted after delivery attempt: 1 caught: java.lang.IllegalStateException: No method invocation could be created, no matching method could be found on: com.hospira.mednet.handler.EmployeePersistHandler@137dce2

Message History
---------------------------------------------------------------------------------------------------------------------------------------
RouteId              ProcessorId          Processor                                                                        Elapsed (ms)
[route1            ] [route1            ] [vm://seda:test                                                                ] [       149]
[route1            ] [threads1          ] [threads                                                                       ] [        96]
[route1            ] [bean1             ] [bean[com.hospira.mednet.handler.EmployeePersistHandler@137dce2]               ] [         2]

Exchange
---------------------------------------------------------------------------------------------------------------------------------------
Exchange[
	Id                  ID-ubuntu-36404-1436279542902-0-24
	ExchangePattern     InOnly
	Headers             {breadcrumbId=ID-ubuntu-36404-1436279542902-0-14, CamelRedelivered=false, CamelRedeliveryCounter=0}
	BodyType            com.hospira.mednet.model.Employee
	Body                com.hospira.mednet.model.Employee@4cf64eb
]

Stacktrace
---------------------------------------------------------------------------------------------------------------------------------------

java.lang.IllegalStateException: No method invocation could be created, no matching method could be found on: com.hospira.mednet.handler.EmployeePersistHandler@137dce2
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:165)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:448)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)
	at org.apache.camel.processor.Pipeline.access$100(Pipeline.java:43)
	at org.apache.camel.processor.Pipeline$1.done(Pipeline.java:136)
	at org.apache.camel.processor.ThreadsProcessor$ProcessCall.run(ThreadsProcessor.java:83)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:744)


Note:
If, I am not used generics, it is working perfectly.
sarat.khilar@gmail.com:1436252557:2015-07-07T15:02:37.779+0000:1436252557:2015-07-07T15:02:37.779+0000:The issue found in 2.15.0. The same issue has been fixed in  2.15.1 I beleive . I have upgraded to 2.15.2 and the issue is not found. Please close this issue.

Root Cause in 2.15.0 : BeanInfo.java introspect(Class<?> clazz) method
=======================================================
     for (Method source : methods) {
                for (Method target : methods) {
                    // skip ourselves
                    if (ObjectHelper.isOverridingMethod(source, target, true)) {
                        continue;
                    }
                    // skip duplicates which may be assign compatible (favor keep first added method when duplicate)
                    if (ObjectHelper.isOverridingMethod(source, target, false)) {
                        overrides.add(target);
                    }
                }
            }
            methods.removeAll(overrides);
            overrides.clear();
        }


Fix in 2.15.1
============
 for (Method source : methods) {

                // skip bridge methods in duplicate checks (as the bridge method is inserted by the compiler due to type erasure)
                if (source.isBridge()) {                               <==== fix this problem
                    continue;
                }

                for (Method target : methods) {
                    // skip ourselves
                    if (ObjectHelper.isOverridingMethod(source, target, true)) {
                        continue;
                    }
                    // skip duplicates which may be assign compatible (favor keep first added method when duplicate)
                    if (ObjectHelper.isOverridingMethod(source, target, false)) {
                        overrides.add(target);
                    }
                }
            }
            methods.removeAll(overrides);
            overrides.clear();
        }

sarat.khilar@gmail.com:1436255359:2015-07-07T15:49:19.303+0000:1436255359:2015-07-07T15:49:19.303+0000:Problem is fixed in 2.15.2"
0,CAMEL-8939,Bug,Major,2.10.0,,"
None
",Resolved,Implemented,None,Claus Ibsen,Jason Vas Dias,0,2,2015-07-07 11:03:30+00:00,2015-07-07 12:46:28+00:00,"It appears to be impossible to use Camel as a JmsConsumer of queues served by
apache-activemq of the above versions because it always tries to register its
CamelContext as an MXBean, but the ManagedCamelContext class is not an 
MXBean nor can it be coerced into one.


There does not seem to be any way to override the class used for the camelContext
to make it into an MXBean (add the '@MXBean' annotation or make its class name
end with 'MXBean' ),  yet Camel is internally trying to register an instance of the
ManagedCamelContext as an MXBean:


Here is a stack trace produced by a debugger of Camel in this situation:
""main""@1 in group ""main"": RUNNING
Exception: Class org.apache.camel.management.mbean.ManagedCamelContext is not a JMX compliant MXBean
findMXBeanInterface():94, MXBeanSupport 

{com.sun.jmx.mbeanserver}


getMXBeanInterface():308, Introspector {com.sun.jmx.mbeanserver}

checkCompliance():150, Introspector 

{com.sun.jmx.mbeanserver}


registerMBean():305, DefaultMBeanServerInterceptor {com.sun.jmx.interceptor}


registerMBean():483, JmxMBeanServer {com.sun.jmx.mbeanserver}

registerMBeanWithServer():313, DefaultManagementAgent 

{org.apache.camel.management}


register():222, DefaultManagementAgent {org.apache.camel.management}


In registerMBeanWithServer we see the bean it is trying to register is 
the 'camelContext' bean defined in my camel context spring XML file :
obj = 

{org.apache.camel.management.mbean.ManagedCamelContext@5199}

 
 context = 

{org.apache.camel.spring.SpringCamelContext@5196}

 ""SpringCamelContext(camelContext) with spring id org.springframework.context.support.ClassPathXmlApplicationContext@7fd88db7""
...
name = 

{javax.management.ObjectName@5200}

 ""org.apache.camel:context=jvasdias/camelContext,type=context,name=""camelContext""""
 _canonicalName = 

{java.lang.String@5360}

 ""org.apache.camel:context=jvasdias/camelContext,name=""camelContext"",type=context""


Here is the defining XML of this object:


<camelContext id=""camelContext"" xmlns=""http://camel.apache.org/schema/spring"">
        <packageScan>
            <package>${MY_PACKAGE}</package>
        </packageScan>
        <routeContextRef ref=""myRoute1""/>
        ....
        <routeContextRef ref=""myRouteN""/>
        <!--Endpoint queues -->
        <endpoint id=""incomingQueue""
                  uri=""activemq:queue:IncomingQueue/>
        <endpoint id=""deadletterQueue""
                  uri=""activemq:queue:DeadletterQueue""/>
        <endpoint id=""retryQueue""
                  uri=""activemq:queue:RetryQueue""/>
        ....
</camelContext>


I have set up a JmsListener in another XML file:


  <bean id=""jmsDestinationResolver"" class=""org.springframework.jms.support.destination.JndiDestinationResolver""
          p:jndiTemplate-ref=""jndiTemplate""
          p:cache=""true""/>


    <bean id=""jmsTransactionManager"" class=""org.springframework.jms.connection.JmsTransactionManager""
          p:connectionFactory-ref=""connectionFactory""/>


    <bean id=""jndiTemplate"" class=""org.springframework.jndi.JndiTemplate"">
        <property name=""environment"">
            <props>
                <prop key=""java.naming.factory.initial"">org.apache.activemq.jndi.ActiveMQInitialContextFactory</prop>
                <prop key=""java.naming.provider.url"">QueueConnectionFactory</prop>
            </props>
        </property>
    </bean>


and I have set the property 'cpp-server.jms.jndi.provider.url' to the 
'tcp:localhost:61616' socket address on which the ActiveMQ JMX Broker listens.


    <bean id=""jmsTemplate"" class=""org.springframework.jms.core.JmsTemplate"">
        <property name=""connectionFactory"" ref=""connectionFactory""/>
        <property name=""defaultDestinationName"" value=""${cpp-server.jms.queue.incoming}""/>
        <property name=""receiveTimeout"" value=""300""/>
    </bean>
    <bean id=""connectionFactory"" class=""org.springframework.jms.connection.SingleConnectionFactory""
          destroy-method=""destroy"" p:targetConnectionFactory-ref=""targetConnectionFactory"" p:reconnectOnException=""true""/>


    <bean id=""targetConnectionFactory"" class=""org.springframework.jndi.JndiObjectFactoryBean"" p:jndiName=""${cpp-server.jms.connection.factory.jndi}""
          p:jndiTemplate-ref=""jndiTemplate""/>


    <bean id=""activemq"" class=""org.apache.camel.component.jms.JmsComponent""
          p:connectionFactory-ref=""connectionFactory""
          p:destinationResolver-ref=""jmsDestinationResolver""/>
    <alias name=""activemq"" alias=""swiftmq""/>


So why is registerMBeanWithServer trying to pass off a ManagedCamelContext object
as an MXBean ?    This can never succeed, and is a bug .  
Camel should either make this object into an MXBean, or not attempt to register it.


I'm now having to resort to building a modified version of Camel where the 
ManagedCamelContext  is an MXBean to overcome this problem  - I cannot see
what else to do, because users have no control over what object is used to represent
the camelContext bean or what is done with it - this is internal to Camel .


I'll attach the patches to this bug report when done.","JVD66:1436242425:2015-07-07T12:13:45.309+0000:1436242425:2015-07-07T12:13:45.309+0000:And here is the patch, in its entirety: 

$ diff -U0 ./camel-core/src/main/java/org/apache/camel/management/mbean/ManagedCamelContext.java~ ./camel-core/src/main/java/org/apache/camel/management/mbean/ManagedCamelContext.java
--- ./camel-core/src/main/java/org/apache/camel/management/mbean/ManagedCamelContext.java~      2012-12-18 20:41:04.000000000 +0000
+++ ./camel-core/src/main/java/org/apache/camel/management/mbean/ManagedCamelContext.java       2015-07-07 13:01:03.586390634 +0100
@@ -29,0 +30 @@
+import javax.management.MXBean;
@@ -48,0 +50 @@
+@MXBean(true)

The apache-camel build with this change to the source from: 
   http://repo.fusesource.com/nexus/content/groups/public/org/apache/camel/apache-camel/2.10.0.fuse-71-047/apache-camel-2.10.0.fuse-71-047-src.zip
builds and passes all tests .

davsclaus:1436243166:2015-07-07T12:26:06.180+0000:1436243166:2015-07-07T12:26:06.180+0000:is already mbean in newer versions
JVD66:1436244100:2015-07-07T12:41:40.865+0000:1436244100:2015-07-07T12:41:40.865+0000:Thanks for having a look at this, Claus - but we are mandated to use these particular versions .
Maybe a version with the above two-liner change might be acceptable to our version control police.
There really is no other way to workaround ? ( I have been searching for one in vain ...)

davsclaus:1436244388:2015-07-07T12:46:28.175+0000:1436244388:2015-07-07T12:46:28.175+0000:You are using a Fuse product so ask the vendor of that product. They support these producers for a longer time. Here at Apache we have limited support period of releases. Camel 2.14.x is the oldest supported currently and it will be EOL when Camel 2.16.0 is released etc."
0,CAMEL-8938,Improvement,Minor,2.15.2,2.16.0,"
None
",Resolved,Implemented,2.16.0,Unassigned,Charlie Mordant,0,2,2015-07-07 08:18:57+00:00,2015-09-07 09:44:14+00:00,"@Consume seems to not work with camel-cdi


See this conversation for more informations and pointers (and even a failing integration test):http://camel.465427.n5.nabble.com/Consuming-messages-in-camel-cdi-td5748489.html#a5768848","davsclaus:1436326511:2015-07-08T11:35:11.609+0000:1436326511:2015-07-08T11:35:11.609+0000:Works fine outside OSGi. OSGi users gonna take this up with pax-cdi.
tcharl:1436330692:2015-07-08T12:44:52.256+0000:1436330692:2015-07-08T12:44:52.256+0000:Hi Claus,

The samples I implemented are already using pax-cdi.
There's also a wrapper for camel-cdi within the framework to make camel-cdi Pax-CDI compliant.
camel-cdi should really have these headers in its MANIFEST.

https://github.com/OsgiliathEnterprise/net.osgiliath.parent/tree/master/net.osgiliath.framework/net.osgiliath.helpers/net.osgiliath.wrappers/net.osgiliath.wrapper.camel-cdi

Regards,
davsclaus:1436346828:2015-07-08T17:13:48.855+0000:1436346828:2015-07-08T17:13:48.855+0000:Log another ticket about those osgi headers, and you are welcome to provide a patch.
tcharl:1436616655:2015-07-11T20:10:55.535+0000:1436616672:2015-07-11T20:11:12.091+0000:done: https://issues.apache.org/jira/browse/CAMEL-8953
https://github.com/apache/camel/pull/560

Camel loves contributions ;)
Best regards,
davsclaus:1441590254:2015-09-07T09:44:14.430+0000:1441590254:2015-09-07T09:44:14.430+0000:Assume it works"
0,CAMEL-8937,New Feature,Minor,None,None,"
None
",Resolved,Won't Fix,Future,Unassigned,Claus Ibsen,0,2,2015-07-06 12:57:28+00:00,2022-09-02 09:02:53+00:00,"Wonder if this project is worth a Camel component.
https://metamodel.apache.org/


Then a producer could return a SQL like resultset that a splitter etc can iterate, or provide a List<Map> with the data as a spread sheet like structure.",davsclaus:1662080573:2022-09-02T09:02:53.122+0000:1662080573:2022-09-02T09:02:53.122+0000:the apache projet is retried
0,CAMEL-8936,New Feature,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Antonin Stefanutti,Claus Ibsen,0,2,2015-07-06 09:50:35+00:00,2016-03-04 17:54:48+00:00,"We have test modules for spring / blueprint etc. We should have one for cdi as well.


There is some stuff already in camel-cdi, but would like to move that out of this module and make camel-test-cdi extend camel-test like the others do.","davsclaus:1443410810:2015-09-28T11:26:50.600+0000:1443410810:2015-09-28T11:26:50.600+0000:There is too much work in creating a better test module for CDI and in the short time we have
davsclaus:1455867796:2016-02-19T15:43:16.497+0000:1455867796:2016-02-19T15:43:16.497+0000:Antonin, I wonder if you have any ideas and time to look into this.

Would be nice with a little camel-test-cdi module that makes it easier for end users to build unit tests with Camel with a chosen cdi container.

antonin.stefanutti:1455875589:2016-02-19T17:53:09.505+0000:1455875589:2016-02-19T17:53:09.505+0000:Yes, that sounds like a great idea!

Let me find some time next week to work on it.
antonin.stefanutti:1457085264:2016-03-04T17:54:24.794+0000:1457085288:2016-03-04T17:54:48.459+0000:An initial version has been committed.

the {{camel-example-cdi-test}} example has been developed to demonstrate the Camel CDI test features.

Documentation will follow."
0,CAMEL-8935,Improvement,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,1,2015-07-06 09:47:18+00:00,2015-07-06 09:47:56+00:00,"Some of the options is not exposed, and also the reference options should use default logic and use # syntax lookup.",
0,CAMEL-8934,Bug,Major,2.15.1,,"
None
",Resolved,Incomplete,None,Claus Ibsen,bharadwaj nakka,0,3,2015-07-06 05:27:31+00:00,2015-11-24 23:09:58+00:00,"I am currently upgrading camel camel 2.12 to 2.15.1. After the upgrade my test cases are failing.


java.lang.UnsupportedOperationException: null 
        at java.util.AbstractList.add(AbstractList.java:148) 
        at org.apache.camel.builder.AdviceWithTasks$1.task(AdviceWithTasks.java: 
151) 
        at org.apache.camel.model.RouteDefinition.adviceWith(RouteDefinition.jav 
a:270)   


Any work around can be appreciated...","davsclaus:1436139944:2015-07-06T07:45:44.218+0000:1436139944:2015-07-06T07:45:44.218+0000:Try with Camel 2.15.2 we have fixed the cbr I think
bharadwaj:1436140167:2015-07-06T07:49:27.634+0000:1436140167:2015-07-06T07:49:27.634+0000:jboss-fuse-6.2.0.redhat-133 does not support camel 2.15.2 right, how can i use it ?

davsclaus:1436140299:2015-07-06T07:51:39.286+0000:1436140299:2015-07-06T07:51:39.286+0000:As you use JBoss Fuse then you should report issues to Red Hat customer portal. 

This is Apache Camel and not a ticket system for commercial company products.

You can try to create your unit test and run it with pure Apache Camel and just specify version 2.15.2 etc.
davsclaus:1436243206:2015-07-07T12:26:46.658+0000:1436243206:2015-07-07T12:26:46.658+0000:Can you provide the full strack trace, and what route you do?
davsclaus:1437089901:2015-07-17T07:38:21.368+0000:1437089901:2015-07-17T07:38:21.368+0000:No response from reporter
fmasood:1448377798:2015-11-24T23:09:58.371+0000:1448377798:2015-11-24T23:09:58.371+0000:simple workaround is, add following (or similar) after choice
<camel:log message=""Completed : Returning ${body}"" loggingLevel=""TRACE""/>

Thanks,
"
0,CAMEL-8933,Bug,Minor,"2.15.0, 2.15.1, 2.15.2","2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.15.3, 2.16.0",Claus Ibsen,John Yin,0,2,2015-07-06 00:05:22+00:00,2015-07-06 09:18:29+00:00,"The mail consumer (at least IMAP) would poll email continuously unless the consumer.delay is explicitly set.  Below is the IMAP debug log.  It should stop at A6 instead of continuing indefinitely.   This does not happen with 2.14.x.


2015-07-05 20:04:02,534 [0 - imaps://imap.gmail.com:993] DEBUG MailConsumer                   - Connecting to MailStore: imaps://imap.gmail.com:993 (SSL enabled), folder=INBOX
DEBUG: getProvider() returning javax.mail.Provider[STORE,imaps,com.sun.mail.imap.IMAPSSLStore,Oracle]
DEBUG IMAPS: mail.imap.fetchsize: 16384
DEBUG IMAPS: mail.imap.ignorebodystructuresize: false
DEBUG IMAPS: mail.imap.statuscachetimeout: 1000
DEBUG IMAPS: mail.imap.appendbuffersize: -1
DEBUG IMAPS: mail.imap.minidletime: 10
DEBUG IMAPS: trying to connect to host ""imap.gmail.com"", port 993, isSSL true



OK Gimap ready for requests from 76.108.169.41 k7mb499616512ywc
A0 CAPABILITY
CAPABILITY IMAP4rev1 UNSELECT IDLE NAMESPACE QUOTA ID XLIST CHILDREN X-GM-EXT-1 XYZZY SASL-IR AUTH=XOAUTH2 AUTH=PLAIN AUTH=PLAIN-CLIENTTOKEN AUTH=XOAUTH
A0 OK Thats all she wrote! k7mb499616512ywc
DEBUG IMAPS: AUTH: XOAUTH2
DEBUG IMAPS: AUTH: PLAIN
DEBUG IMAPS: AUTH: PLAIN-CLIENTTOKEN
DEBUG IMAPS: AUTH: XOAUTH
DEBUG IMAPS: protocolConnect login, host=imap.gmail.com, user=test@e-bonding.com, password=<non-null>
DEBUG IMAPS: AUTHENTICATE PLAIN command trace suppressed
DEBUG IMAPS: AUTHENTICATE PLAIN command result: A1 OK test@e-bonding.com authenticated (Success)
A2 CAPABILITY
CAPABILITY IMAP4rev1 UNSELECT IDLE NAMESPACE QUOTA ID XLIST CHILDREN X-GM-EXT-1 UIDPLUS COMPRESS=DEFLATE ENABLE MOVE CONDSTORE ESEARCH UTF8=ACCEPT
A2 OK Success
2015-07-05 20:04:03,120 [0 - imaps://imap.gmail.com:993] DEBUG MailConsumer                   - Getting folder INBOX
A3 LIST """" INBOX
LIST (\HasNoChildren) ""/"" ""INBOX""
A3 OK Success
2015-07-05 20:04:03,162 [0 - imaps://imap.gmail.com:993] DEBUG MailConsumer                   - Polling mailbox folder: imaps://imap.gmail.com:993 (SSL enabled), folder=INBOX
DEBUG IMAPS: connection available – size: 1
A4 SELECT INBOX
FLAGS (\Answered \Flagged \Draft \Deleted \Seen $NotPhishing $Phishing)
OK [PERMANENTFLAGS (\Answered \Flagged \Draft \Deleted \Seen $NotPhishing $Phishing \*)] Flags permitted.
OK [UIDVALIDITY 1] UIDs valid.
53 EXISTS
0 RECENT
OK [UIDNEXT 294] Predicted next UID.
OK [HIGHESTMODSEQ 85418]
A4 OK [READ-WRITE] INBOX selected. (Success)
A5 SEARCH UNSEEN ALL
SEARCH
A5 OK SEARCH completed (Success)
2015-07-05 20:04:03,272 [0 - imaps://imap.gmail.com:993] DEBUG MailConsumer                   - Fetching 0 messages. Total 0 messages.
2015-07-05 20:04:03,272 [0 - imaps://imap.gmail.com:993] DEBUG MailConsumer                   - Close mailbox folder INBOX from imaps://imap.gmail.com:993 (SSL enabled), folder=INBOX
A6 CLOSE
A6 OK Returned to authenticated state. (Success)
DEBUG IMAPS: added an Authenticated connection – size: 1
DEBUG IMAPS: IMAPProtocol noop
A7 NOOP
A7 OK Success
2015-07-05 20:04:03,880 [0 - imaps://imap.gmail.com:993] DEBUG MailConsumer                   - Polling mailbox folder: imaps://imap.gmail.com:993 (SSL enabled), folder=INBOX
DEBUG IMAPS: connection available – size: 1
A8 SELECT INBOX
FLAGS (\Answered \Flagged \Draft \Deleted \Seen $NotPhishing $Phishing)
OK [PERMANENTFLAGS (\Answered \Flagged \Draft \Deleted \Seen $NotPhishing $Phishing \*)] Flags permitted.
OK [UIDVALIDITY 1] UIDs valid.
53 EXISTS
0 RECENT
OK [UIDNEXT 294] Predicted next UID.
OK [HIGHESTMODSEQ 85418]
A8 OK [READ-WRITE] INBOX selected. (Success)
A9 SEARCH UNSEEN ALL
SEARCH
A9 OK SEARCH completed (Success)
2015-07-05 20:04:04,003 [0 - imaps://imap.gmail.com:993] DEBUG MailConsumer                   - Fetching 0 messages. Total 0 messages.
2015-07-05 20:04:04,004 [0 - imaps://imap.gmail.com:993] DEBUG MailConsumer                   - Close mailbox folder INBOX from imaps://imap.gmail.com:993 (SSL enabled), folder=INBOX
A10 CLOSE
A10 OK Returned to authenticated state. (Success)
DEBUG IMAPS: added an Authenticated connection – size: 1
DEBUG IMAPS: IMAPProtocol noop
A11 NOOP
A11 OK Success
2015-07-05 20:04:04,572 [0 - imaps://imap.gmail.com:993] DEBUG MailConsumer                   - Polling mailbox folder: imaps://imap.gmail.com:993 (SSL enabled), folder=INBOX
DEBUG IMAPS: connection available – size: 1
A12 SELECT INBOX
FLAGS (\Answered \Flagged \Draft \Deleted \Seen $NotPhishing $Phishing)
OK [PERMANENTFLAGS (\Answered \Flagged \Draft \Deleted \Seen $NotPhishing $Phishing \*)] Flags permitted.
OK [UIDVALIDITY 1] UIDs valid.
53 EXISTS
0 RECENT
OK [UIDNEXT 294] Predicted next UID.
OK [HIGHESTMODSEQ 85418]
A12 OK [READ-WRITE] INBOX selected. (Success)
A13 SEARCH UNSEEN ALL
SEARCH
A13 OK SEARCH completed (Success)
2015-07-05 20:04:04,665 [0 - imaps://imap.gmail.com:993] DEBUG MailConsumer                   - Fetching 0 messages. Total 0 messages.
2015-07-05 20:04:04,665 [0 - imaps://imap.gmail.com:993] DEBUG MailConsumer                   - Close mailbox folder INBOX from imaps://imap.gmail.com:993 (SSL enabled), folder=INBOX
A14 CLOSE
A14 OK Returned to authenticated state. (Success)
DEBUG IMAPS: added an Authenticated connection – size: 1
DEBUG IMAPS: IMAPProtocol noop
A15 NOOP
A15 OK Success
2015-07-05 20:04:05,232 [0 - imaps://imap.gmail.com:993] DEBUG MailConsumer                   - Polling mailbox folder: imaps://imap.gmail.com:993 (SSL enabled), folder=INBOX
DEBUG IMAPS: connection available – size: 1
A16 SELECT INBOX
FLAGS (\Answered \Flagged \Draft \Deleted \Seen $NotPhishing $Phishing)
OK [PERMANENTFLAGS (\Answered \Flagged \Draft \Deleted \Seen $NotPhishing $Phishing \*)] Flags permitted.
OK [UIDVALIDITY 1] UIDs valid.
53 EXISTS
0 RECENT
OK [UIDNEXT 294] Predicted next UID.
OK [HIGHESTMODSEQ 85418]
A16 OK [READ-WRITE] INBOX selected. (Success)
A17 SEARCH UNSEEN ALL
SEARCH
A17 OK SEARCH completed (Success)
2015-07-05 20:04:05,357 [0 - imaps://imap.gmail.com:993] DEBUG MailConsumer                   - Fetching 0 messages. Total 0 messages.
2015-07-05 20:04:05,358 [0 - imaps://imap.gmail.com:993] DEBUG MailConsumer                   - Close mailbox folder INBOX from imaps://imap.gmail.com:993 (SSL enabled), folder=INBOX
A18 CLOSE
A18 OK Returned to authenticated state. (Success)
DEBUG IMAPS: added an Authenticated connection – size: 1",davsclaus:1436145505:2015-07-06T09:18:25.019+0000:1436145505:2015-07-06T09:18:25.019+0000:Thanks for reporting.
0,CAMEL-8932,Improvement,Minor,"2.15.0, 2.15.1, 2.15.2",2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Ramon Marco L. Navarro,0,3,2015-07-04 19:21:28+00:00,2015-07-06 10:57:28+00:00,Pull request at GitHub.,"githubbot:1436009074:2015-07-04T19:24:34.919+0000:1436009074:2015-07-04T19:24:34.919+0000:GitHub user ramonmaruko opened a pull request:

    https://github.com/apache/camel/pull/554

    CAMEL-8932: Cannot chain RouteDefinition.autoStartup

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ramonmaruko/camel CAMEL-8932

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/554.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #554
    
----
commit d6a3a6f5b1a7320813944463d888f334fc838dcd
Author: Ramon Marco L. Navarro <ramonmaruko@gmail.com>
Date:   2015-07-04T19:22:25Z

    CAMEL-8932: Cannot chain RouteDefinition.autoStartup

----

davsclaus:1436139835:2015-07-06T07:43:55.284+0000:1436139835:2015-07-06T07:43:55.284+0000:Thanks for the patch.
githubbot:1436139983:2015-07-06T07:46:23.196+0000:1436139983:2015-07-06T07:46:23.196+0000:Github user ramonmaruko closed the pull request at:

    https://github.com/apache/camel/pull/554

davsclaus:1436147487:2015-07-06T09:51:27.735+0000:1436147487:2015-07-06T09:51:27.735+0000:Thanks Ramon for these Scala DSL fixes. You are very welcome to see if there is more to be done to make the scala dsl up to date.
ramonmaruko:1436151448:2015-07-06T10:57:28.234+0000:1436151448:2015-07-06T10:57:28.234+0000:You're welcome. I'll be submitting patches whenever I encounter some issues with my Apache Camel project."
0,CAMEL-8931,Improvement,Minor,"2.15.0, 2.15.1, 2.15.2",2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Ramon Marco L. Navarro,0,3,2015-07-04 18:11:47+00:00,2015-07-06 07:46:26+00:00,I have no unit test for this. Pull request at GitHub.,"githubbot:1436004904:2015-07-04T18:15:04.300+0000:1436004904:2015-07-04T18:15:04.300+0000:GitHub user ramonmaruko opened a pull request:

    https://github.com/apache/camel/pull/553

    CAMEL-8931: Add completionInterval for aggregator

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ramonmaruko/camel CAMEL-8931

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/553.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #553
    
----
commit b6853bc10c6a101d8e0d939cdce06218e9cc2d2a
Author: Ramon Marco L. Navarro <ramonmaruko@gmail.com>
Date:   2015-07-04T18:12:02Z

    CAMEL-8931: Add completionInterval for aggregator

----

ramonmaruko:1436009180:2015-07-04T19:26:20.032+0000:1436009180:2015-07-04T19:26:20.032+0000:Correct commit hash should be {{739df57e5745e162c6747347012960c9d07d3e22}}, since I pushed --force.
davsclaus:1436139493:2015-07-06T07:38:13.050+0000:1436139493:2015-07-06T07:38:13.050+0000:Thanks for the patch.
githubbot:1436139986:2015-07-06T07:46:26.858+0000:1436139986:2015-07-06T07:46:26.858+0000:Github user ramonmaruko closed the pull request at:

    https://github.com/apache/camel/pull/553
"
0,CAMEL-8930,Improvement,Minor,2.15.2,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Ramon Marco L. Navarro,0,3,2015-07-04 18:00:40+00:00,2015-07-06 07:32:53+00:00,"removeHeader, and removeHeaders is not available when using the DSL. Pull request will be made available at GitHub.","githubbot:1436004334:2015-07-04T18:05:34.212+0000:1436004334:2015-07-04T18:05:34.212+0000:GitHub user ramonmaruko opened a pull request:

    https://github.com/apache/camel/pull/552

    CAMEL-8930: Add removeHeader and family to DSL

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ramonmaruko/camel CAMEL-8930

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/552.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #552
    
----
commit e640f5ed5ea6cf06b1c09d5b43435720fcb2ef03
Author: Ramon Marco L. Navarro <ramonmaruko@gmail.com>
Date:   2015-07-04T18:00:52Z

    CAMEL-8930: Add removeHeader and family to DSL

----

davsclaus:1436138816:2015-07-06T07:26:56.797+0000:1436138816:2015-07-06T07:26:56.797+0000:Thanks for the patch
githubbot:1436139162:2015-07-06T07:32:42.074+0000:1436139162:2015-07-06T07:32:42.074+0000:Github user ramonmaruko closed the pull request at:

    https://github.com/apache/camel/pull/552

ramonmaruko:1436139173:2015-07-06T07:32:53.667+0000:1436139173:2015-07-06T07:32:53.667+0000:Thank you!"
0,CAMEL-8929,Bug,Major,2.15.2,2.16.0,"
None
",Resolved,Not A Problem,2.16.0,Claus Ibsen,Bakomchev Dmitriy,0,2,2015-07-03 14:11:53+00:00,2015-07-08 07:30:50+00:00,"i use camel with spring-ws. i configure routes:



<?xml version=""1.0"" encoding=""UTF-8""?>
<beans xmlns=""http://www.springframework.org/schema/beans""
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
       xmlns:util=""http://www.springframework.org/schema/util""
       xsi:schemaLocation=""http://www.springframework.org/schema/beans  http://www.springframework.org/schema/beans/spring-beans.xsd
               http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"">
	<camelContext id=""someID""  xmlns=""http://camel.apache.org/schema/spring"">
	    <endpoint id=""externalRequest"" uri=""spring-ws\:rootqname\:{http\://somehost.com/xsd/some-xsd}method?endpointMapping\=\endpointMapping&messageFactory\=\#soap12MessageFactory"" />
	    <endpoint id=""internalRequest"" uri=""spring-ws\:http://localhost:8080/someMock?messageSender\=\#someMessageSender"" />
	    <route id=""fromExternal"">
	        <from ref=""externalRequest"" />
	        <to uri=""direct:toInternalSystem"" />
	    </route>
	    <route id=""toInternal"" trace = ""true"">
	        <from uri=""direct:toInternalSystem"" />
	        <log message=""Received  ${body}"" />
	        <to ref=""internalRequest"" pattern=""InOut"" />
	    </route>
	</camelContext>

	<bean id=""soap12MessageFactory"" class=""org.springframework.ws.soap.saaj.SaajSoapMessageFactory"">
	    <property name=""soapVersion"">
	        <util:constant static-field=""org.springframework.ws.soap.SoapVersion.SOAP_12""/>
	    </property>
	</bean>
</beans>




and during startup i get error:



SEVERE: Exception sending context initialized event to listener instance of class org.springframework.web.context.ContextLoaderListener
org.apache.camel.RuntimeCamelException: org.apache.camel.FailedToCreateRouteException: Failed to create route fromAxToEsb: Route(fromAxToEsb)[[From[ref:returnsAdviceRequestAx]] -> [To... because of org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'returnsAdviceRequestAx': FactoryBean threw exception on object creation; nested exception is org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: spring-ws://rootqname:%7Bhttp://lamoda.ru/xsd/goods-movement%7Dadvice?endpointMapping=endpointMapping&messageFactory=%23soap12MessageFactory due to: Failed to resolve endpoint: spring-ws://rootqname:(http://lamoda.ru/xsd/goods-movement)advice?endpointMapping=endpointMapping&messageFactory=%23soap12MessageFactory due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{messageFactory=#soap12MessageFactory}]
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1619)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:123)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:332)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:151)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:128)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:331)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:773)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:483)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:410)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:306)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:112)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4994)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5492)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:649)
	at org.apache.catalina.startup.HostConfig.manageApp(HostConfig.java:1762)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:301)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819)
	at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801)
	at org.apache.catalina.mbeans.MBeanFactory.createStandardContext(MBeanFactory.java:618)
	at org.apache.catalina.mbeans.MBeanFactory.createStandardContext(MBeanFactory.java:565)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:301)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819)
	at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801)
	at javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1487)
	at javax.management.remote.rmi.RMIConnectionImpl.access$300(RMIConnectionImpl.java:97)
	at javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1328)
	at javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1420)
	at javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImpl.java:848)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:322)
	at sun.rmi.transport.Transport$1.run(Transport.java:177)
	at sun.rmi.transport.Transport$1.run(Transport.java:174)
	at java.security.AccessController.doPrivileged(Native Method)
	at sun.rmi.transport.Transport.serviceCall(Transport.java:173)
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:556)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:811)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:670)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route fromAxToEsb: Route(fromAxToEsb)[[From[ref:returnsAdviceRequestAx]] -> [To... because of org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'returnsAdviceRequestAx': FactoryBean threw exception on object creation; nested exception is org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: spring-ws://rootqname:%7Bhttp://lamoda.ru/xsd/goods-movement%7Dadvice?endpointMapping=endpointMapping&messageFactory=%23soap12MessageFactory due to: Failed to resolve endpoint: spring-ws://rootqname:(http://lamoda.ru/xsd/goods-movement)advice?endpointMapping=endpointMapping&messageFactory=%23soap12MessageFactory due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{messageFactory=#soap12MessageFactory}]
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:190)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:841)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:2895)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:2618)
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:167)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2467)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2463)
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:2486)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:2463)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:2432)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:255)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:121)
	... 52 more
Caused by: org.apache.camel.RuntimeCamelException: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'returnsAdviceRequestAx': FactoryBean threw exception on object creation; nested exception is org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: spring-ws://rootqname:%7Bhttp://lamoda.ru/xsd/goods-movement%7Dadvice?endpointMapping=endpointMapping&messageFactory=%23soap12MessageFactory due to: Failed to resolve endpoint: spring-ws://rootqname:(http://lamoda.ru/xsd/goods-movement)advice?endpointMapping=endpointMapping&messageFactory=%23soap12MessageFactory due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{messageFactory=#soap12MessageFactory}]
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1619)
	at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookupByNameAndType(PropertyPlaceholderDelegateRegistry.java:65)
	at org.apache.camel.impl.DefaultRouteContext.lookup(DefaultRouteContext.java:142)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:119)
	at org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:70)
	at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:89)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:1008)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:185)
	... 64 more
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'returnsAdviceRequestAx': FactoryBean threw exception on object creation; nested exception is org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: spring-ws://rootqname:%7Bhttp://lamoda.ru/xsd/goods-movement%7Dadvice?endpointMapping=endpointMapping&messageFactory=%23soap12MessageFactory due to: Failed to resolve endpoint: spring-ws://rootqname:(http://lamoda.ru/xsd/goods-movement)advice?endpointMapping=endpointMapping&messageFactory=%23soap12MessageFactory due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{messageFactory=#soap12MessageFactory}]
	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:175)
	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.getObjectFromFactoryBean(FactoryBeanRegistrySupport.java:103)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForBeanInstance(AbstractBeanFactory.java:1517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:251)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:962)
	at org.apache.camel.spring.spi.ApplicationContextRegistry.lookupByNameAndType(ApplicationContextRegistry.java:47)
	at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookupByNameAndType(PropertyPlaceholderDelegateRegistry.java:63)
	... 70 more
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: spring-ws://rootqname:%7Bhttp://lamoda.ru/xsd/goods-movement%7Dadvice?endpointMapping=endpointMapping&messageFactory=%23soap12MessageFactory due to: Failed to resolve endpoint: spring-ws://rootqname:(http://lamoda.ru/xsd/goods-movement)advice?endpointMapping=endpointMapping&messageFactory=%23soap12MessageFactory due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{messageFactory=#soap12MessageFactory}]
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:578)
	at org.apache.camel.core.xml.AbstractCamelEndpointFactoryBean.getObject(AbstractCamelEndpointFactoryBean.java:55)
	at org.apache.camel.spring.CamelEndpointFactoryBean.getObject(CamelEndpointFactoryBean.java:55)
	at org.apache.camel.spring.CamelEndpointFactoryBean.getObject(CamelEndpointFactoryBean.java:38)
	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:168)
	... 77 more
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: spring-ws://rootqname:(http://lamoda.ru/xsd/goods-movement)advice?endpointMapping=endpointMapping&messageFactory=%23soap12MessageFactory due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{messageFactory=#soap12MessageFactory}]
	at org.apache.camel.impl.DefaultComponent.validateParameters(DefaultComponent.java:183)
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:128)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:558)
	... 81 more




As i see org.apache.camel.component.spring.ws.SpringWebserviceConfiguration does not have messageFactory property
but in documentation (http://camel.apache.org/spring-web-services.html)
i read 



messageFactory --- 
Option to provide a custom WebServiceMessageFactory. For example when you want Apache Axiom to handle web service messages instead of SAAJ","davsclaus:1436140162:2015-07-06T07:49:22.188+0000:1436140162:2015-07-06T07:49:22.188+0000:Are you using &amp in xml which you must use as &
bakomchik:1436144700:2015-07-06T09:05:00.139+0000:1436144700:2015-07-06T09:05:00.139+0000:I've simplified the code in the description, in real case i use property placeholders and property file which contains my endpoints uri.
URI like :
{code}message.axapta.gout.send=spring-ws:http://localhost:8080/SomeService?messageSender=#messageSenderExternalSysytem&webServiceTemplate=#soap12WebserviceTemplate&soapAction=http://some.org/ws/Action:goodsOut{code} works well for me
davsclaus:1436146755:2015-07-06T09:39:15.450+0000:1436146755:2015-07-06T09:39:15.450+0000:The option messageFactory is only for producer, not for consumer.
bakomchik:1436221122:2015-07-07T06:18:42.257+0000:1436221122:2015-07-07T06:18:42.257+0000:Wow, thanks for the answer. 
But how  can i  specify messageFactory for consumer?

davsclaus:1436311850:2015-07-08T07:30:50.110+0000:1436311850:2015-07-08T07:30:50.110+0000:Its currently not used in the consumer. 
Not sure if it makes sense at all there, you are welcome to dive into the source code."
0,CAMEL-8928,Task,Trivial,2.15.2,"2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.15.3, 2.16.0",Claus Ibsen,Thomas Diesler,0,2,2015-07-03 09:06:57+00:00,2015-07-03 10:04:21+00:00,No Desc,"githubbot:1435885781:2015-07-03T09:09:41.723+0000:1435885781:2015-07-03T09:09:41.723+0000:GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/551

    [CAMEL-8928] spring-security not part of the camel BOM

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-8928

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/551.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #551
    
----
commit 99dce53f8547b5f715c23a111eaf9714f69273c7
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2015-07-03T09:07:45Z

    [CAMEL-8928] spring-security not part of the camel BOM

----

githubbot:1435889044:2015-07-03T10:04:04.433+0000:1435889044:2015-07-03T10:04:04.433+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/551
"
0,CAMEL-8927,Bug,Major,2.15.2,"2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.15.3, 2.16.0",Claus Ibsen,Claus Ibsen,0,1,2015-07-02 09:42:32+00:00,2015-07-02 09:44:55+00:00,"See nabble
http://camel.465427.n5.nabble.com/Camel-Websocket-Connection-key-not-set-tp5766728p5766730.html",
0,CAMEL-8926,Improvement,Major,2.14.2,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,1,2015-07-01 18:52:32+00:00,2015-07-01 19:27:29+00:00,"See nabble
http://camel.465427.n5.nabble.com/Excluding-prototype-scoped-Component-route-builder-from-contextScan-tp5768755.html


We should add option so people can turn this on|off what they prefer. We should likely turn this off by default so only singletons is included, so we wont hit that problem from the nabble link.",
0,CAMEL-8925,Improvement,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,1,2015-07-01 13:16:50+00:00,2015-07-08 08:56:53+00:00,No Desc,
0,CAMEL-8924,Improvement,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,1,2015-07-01 12:39:44+00:00,2015-07-08 08:18:36+00:00,"should only write a file if there is some changes. As then the timestamp of the file is updated, and the maven plugin is unfortunately triggering a full rebuild


[INFO] — camel-package-maven-plugin:2.16-SNAPSHOT:generate-languages-list (languages) @ camel-core —
[INFO] Generated /Users/davsclaus/workspace/camel/camel-core/target/generated/camel/languages/META-INF/services/org/apache/camel/language.properties containing 10 Camel languages: bean constant exchangeProperty file header ref simple tokenize xpath xtokenize
[INFO]
[INFO] — maven-resources-plugin:2.6:testResources (default-testResources) @ camel-core —
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 126 resources
[INFO] Copying 3 resources
[INFO]
[INFO] — maven-compiler-plugin:3.1:testCompile (default-testCompile) @ camel-core —
[INFO] Changes detected - recompiling the module!",
0,CAMEL-8923,Bug,Major,2.15.1,"2.16.0, 2.15.4","
None
",Resolved,Fixed,"2.16.0, 2.15.4",Willem Jiang,RAHUL JAIN,0,3,2015-07-01 08:21:52+00:00,2015-09-04 08:28:33+00:00,"Refer changes done for CAMEL-7331


The change causes a critical bug.
For a camel route as follows:



from(""kafka://<broker>?topic=T1"")
.process(myProcessor)
.to(""kafka://<broker>?topic=T2"")




KafkaExchange will be created by KafkaConsumer and the topic will be set to ""T1"" in the header.
For the 'to' endpoint, KafkaProducer will try to read the topic from the exchange header which is still ""T1"" instead of ""T2"" thereby causing an infinite loop.


As discussed in user-group, a different header should be used to read the topic name from message.","njiang:1435710819:2015-07-01T08:33:39.960+0000:1435710819:2015-07-01T08:33:39.960+0000:You can workaround this issue by removing the topic header before sending the message to another topic.
We can add bridgeEndpoint option to let the producer ignore the topic header to fix this kind of issue.
{code}
from(""kafka://<broker>?topic=T1"")
.process(myProcessor)
.removeHeader(""kafka.TOPIC"")
.to(""kafka://<broker>?topic=T2"")
{code}
rahulj51:1435711349:2015-07-01T08:42:29.259+0000:1435711349:2015-07-01T08:42:29.259+0000:Yes. For now, I am doing exactly that. 
njiang:1435735237:2015-07-01T15:20:37.424+0000:1435735237:2015-07-01T15:20:37.424+0000:Added the option of bridgeEndpoint.
raulvk:1441203894:2015-09-02T22:24:54.989+0000:1441203909:2015-09-02T22:25:09.700+0000:Backported to 2.15.4."
0,CAMEL-8922,Improvement,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Andrea Cosentino,Andrea Cosentino,0,1,2015-07-01 07:53:32+00:00,2015-07-01 15:48:39+00:00,We need to use ObjectHelper to be compliant with the other components.,"acosentino:1435736919:2015-07-01T15:48:39.540+0000:1435736919:2015-07-01T15:48:39.540+0000:Need some refactoring, but this issue can be resolved."
0,CAMEL-8921,Improvement,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,1,2015-06-30 09:01:49+00:00,2015-06-30 09:16:50+00:00,"There is a few EJB annotations and whatnot we do not need to use, and that can remove clutter in the pom.xml and sample code.",
0,CAMEL-8920,Improvement,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Andrea Cosentino,Andrea Cosentino,0,1,2015-06-30 08:58:31+00:00,2015-07-01 19:37:41+00:00,"We can add new operations to blobstore producer. There are for example:



ClearContainer
DeleteContainer
removeBlobs



And so on. 


These operations can complete the component functionalities.",
0,CAMEL-8919,Test,Minor,"2.14.1, 2.15.1, 2.15.2","2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.15.3, 2.16.0",Claus Ibsen,Darshan Sundaresh,0,1,2015-06-29 15:05:27+00:00,2015-07-07 12:24:28+00:00,"The NettyUDPMulticastAsyncTest fails with an java.nio.channels.ClosedChannelException even with a valid interface. 
The udp multicast functionality does not seem to work on windows although it works perfectly on OSX.


Stacktrace-
Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.026 sec <<< FAILURE! - in org.apache.camel.component.netty4.NettyUDPMulticastAsyncTest
testUDPInOnlyMulticastWithNettyConsumer(org.apache.camel.component.netty4.NettyUDPMulticastAsyncTest)  Time elapsed: 0.023 sec  <<< ERROR!
java.nio.channels.ClosedChannelException: null
        at sun.nio.ch.DatagramChannelImpl.innerJoin(DatagramChannelImpl.java:832)
        at sun.nio.ch.DatagramChannelImpl.join(DatagramChannelImpl.java:894)
        at io.netty.channel.socket.nio.NioDatagramChannel.joinGroup(NioDatagramChannel.java:409)
        at io.netty.channel.socket.nio.NioDatagramChannel.joinGroup(NioDatagramChannel.java:382)
        at io.netty.channel.socket.nio.NioDatagramChannel.joinGroup(NioDatagramChannel.java:375)
        at org.apache.camel.component.netty4.SingleUDPNettyServerBootstrapFactory.startServerBootstrap(SingleUDPNettyServerBootstrapFactory.java:171)
        at org.apache.camel.component.netty4.SingleUDPNettyServerBootstrapFactory.doStart(SingleUDPNettyServerBootstrapFactory.java:92)","dsundaresh:1436222324:2015-07-07T06:38:44.888+0000:1436222324:2015-07-07T06:38:44.888+0000:Hi i managed to fix this issue. The problem was in binding to the multicast address on windows which i am not certain why. 
changing the bind without the address seems to solve the problem.

dsundaresh:1436222618:2015-07-07T06:43:38.538+0000:1436222618:2015-07-07T06:43:38.538+0000:Fix for issue with joining multicast group on windows."
0,CAMEL-8918,Improvement,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Andrea Cosentino,Andrea Cosentino,0,1,2015-06-29 10:26:16+00:00,2015-06-29 13:21:48+00:00,"There are some Blobstore methods not supported by the Jclouds Camel component eg. countblob and removeBlob


I think it might be helpful to add these operations add to those already available.",
0,CAMEL-8917,Improvement,Major,None,,"

camel-cxfrs

",Resolved,Won't Fix,None,Unassigned,Moulliard Charles,0,3,2015-06-29 10:09:09+00:00,2015-11-05 12:55:04+00:00,"Here is the content of our discussion 
As the camel-swagger get the ServiceModule from the Route definition which is dumped to XML, it is quit different from the CXF-swagger who builds the ServiceModule from the Resource Class.


As camel-cxfrs doesn't use the resource classes handle the invocation directly (it just delegates the request to the camel route), so it causes some trouble if the CXF-swagger try to load the resource classes. To fix it, we may need to find a way to generate the ServiceModule rightly.


Issue : 



I try now to use Swagger as described here :
https://github.com/swagger-api/swagger-core/wiki/Java-CXF-Quickstart and
implemented as such :
https://github.com/cmoulliard/use-cases/blob/master/fabric-camel-rest/src/main/resources/OSGI-INF/blueprint/camel.xml#L11-L40

When we launch locally mvn camel:run but I get -->

""No message body writer has been found for class
org.apache.cxf.message.MessageContentsList, ContentType:
application/json;charset=utf-8"" at this address
""http://localhost:8080/cxf/rest/api-docs","davsclaus:1443481579:2015-09-29T07:06:19.140+0000:1443481579:2015-09-29T07:06:19.140+0000:There is some work in progress by Sergey to implement rest-dsl to CXF-RS
ashokjira:1446699304:2015-11-05T12:55:04.595+0000:1446699304:2015-11-05T12:55:04.595+0000:may i know how you'r resolved this ""camel-cxfrs doesn't use the resource classes handle the invocation directly"" 
 issue..if possible expalin with an example..

thanks..
"
0,CAMEL-8916,Bug,Major,2.15.2,2.16.0,"
None
",Resolved,Fixed,2.16.0,Grzegorz Grzybek,Grzegorz Grzybek,0,1,2015-06-29 09:17:46+00:00,2015-06-29 10:20:33+00:00,"GenericFileEndpoint supports autoCreate option. It may be used to create necessary path for fileconsumer and producers for file/ftp/ftps/sftp endpoints.
This flag however isn't used for ftp/ftps/sftp consumers.",ggrzybek:1435544433:2015-06-29T10:20:33.026+0000:1435544433:2015-06-29T10:20:33.026+0000:Resolved [here|https://github.com/apache/camel/commit/162f3a5cfdfe713083b2d9b3c105ae6c0ad08d94] in {{master}} branch for 2.16.
0,CAMEL-8915,Improvement,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,1,2015-06-29 08:17:32+00:00,2015-07-01 13:09:54+00:00,"See CAMEL-7936


In the servlet-rest-tomcat example we should be able to document the User model class from the rest-dsl.


Also maybe we should have a set of annotations that people can add to their model classes so they are done that automatic. But in the rest-dsl we should allow to do it as well.


The goal would be for the example to have documentation about the id, name fields on the user etc.",davsclaus:1435712493:2015-07-01T09:01:33.570+0000:1435712493:2015-07-01T09:01:33.570+0000:You can use the swagger annotations
0,CAMEL-8914,Bug,Minor,2.15.2,None,"
None
",Resolved,Fixed,"2.15.3, 2.16.0",Claus Ibsen,Terral Guillaume,0,2,2015-06-29 07:49:32+00:00,2015-07-01 09:17:17+00:00,"I'm facing an issue with the version of camel 2.15.2 


I have a component that create an endpoint. 


This endpoint override the shutdown and doShutdown method so we can log values at shutdown time. 


But when this endpoint is intercept with the interceptSendToEnpoint method the shutdown is not called. 


Here is an example of code to reproduce: 


the Component: 
public class CustomComponent extends DefaultComponent {


        @Override
        protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception 

{
            return new CustomEndpoint();
        }

    }


the Endpoint: 
    public class CustomEndpoint extends DefaultEndpoint {


        @Override
        public Producer createProducer() throws Exception {
            return new DefaultProducer(this) {
                @Override
                public void process(Exchange exchange) throws Exception 

{
                    log.info(exchange.getExchangeId());
                }

            };
        }


        @Override
        public Consumer createConsumer(Processor processor) throws Exception 

{
            return null;
        }


        @Override
        public boolean isSingleton() 

{
            return false;
        }


        @Override
        public void shutdown() throws Exception 

{
            super.shutdown();
            System.out.println(""SHUTDOWN"");
        }


        @Override
        protected void doShutdown() throws Exception 

{
            super.doShutdown();
            System.out.println(""do SHUTDOWN"");
        }


        @Override
        protected String createEndpointUri() 

{
            return ""myEndpoint"";
        }

    }


the route: 
public class MyRoute extends RouteBuilder {


        @Override
        public void configure() {
            try 

{
                getContext().addComponent(""myEndpoint"", new CustomComponent());
            }

 catch (Exception e) 

{
                e.printStackTrace();
            }

            interceptSendToEndpoint(""myEndpoint:producer"")
                    .log(""INTERCEPTED"");


            from(""direct:murex"").routeId(""Trade Repository Route"")
                 .to(""myEndpoint:producer"");
        }
    }


When there is an interceptor the shutdown on the endpoint is not called, when there is no interceptor the shutdown is called. 


After some debugging I noticed that in the DefaultCamelContext at the shutdown time the shutdown is called on the list of endpoints, when there is an interceptor the list do not contain the CustomEnpoint but only the Interceptor, and because the interceptor does not implement ShutdownableAware the shutdown is not propagate to the underlying endpoint (here the CustomEndpoint) 


Without the interceptor the CustomEndpoint appears in the list and the shutdown method is called.",davsclaus:1435713437:2015-07-01T09:17:17.667+0000:1435713437:2015-07-01T09:17:17.667+0000:Thanks for reporting.
